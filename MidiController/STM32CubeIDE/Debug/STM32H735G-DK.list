
STM32H735G-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eaa4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002178  0801ed74  0801ed74  0002ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000023e  08020eec  08020eec  00030eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  0802112c  0802112c  0003112c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 00000014  08021144  08021144  00031144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08021158  08021158  000401b0  2**0
                  CONTENTS
  7 .ARM          00000008  08021158  08021158  00031158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08021160  08021160  000401b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000014  08021160  08021160  00031160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08021174  08021174  00031174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         000001b0  24000000  0802117c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00007590  240001b0  0802132c  000401b0  2**2
                  ALLOC
 13 ._user_heap_stack 00002000  24007740  0802132c  00047740  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000401b0  2**0
                  CONTENTS, READONLY
 15 ExtFlashSection 00000000  90000000  90000000  000401de  2**0
                  CONTENTS
 16 .debug_info   000d1af7  00000000  00000000  000401de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00017e24  00000000  00000000  00111cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000038b8  00000000  00000000  00129b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00005998  00000000  00000000  0012d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0004cf64  00000000  00000000  00132d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0007089e  00000000  00000000  0017fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001928ff  00000000  00000000  001f0552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00382e51  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000ad58  00000000  00000000  00382f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_loc    000407d6  00000000  00000000  0038dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001b0 	.word	0x240001b0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801ed5c 	.word	0x0801ed5c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001b4 	.word	0x240001b4
 800030c:	0801ed5c 	.word	0x0801ed5c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006b4:	4901      	ldr	r1, [pc, #4]	; (80006bc <vApplicationIdleHook+0x8>)
 80006b6:	2000      	movs	r0, #0
 80006b8:	f00a bcc0 	b.w	800b03c <vTaskSetApplicationTaskTag>
 80006bc:	08001a5d 	.word	0x08001a5d

080006c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c0:	b508      	push	{r3, lr}
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80006c2:	f001 fe2f 	bl	8002324 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80006c6:	2064      	movs	r0, #100	; 0x64
 80006c8:	f009 f861 	bl	800978e <osDelay>
  for(;;)
 80006cc:	e7fb      	b.n	80006c6 <StartDefaultTask+0x6>
	...

080006d0 <__io_putchar>:
{
 80006d0:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80006d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80006d6:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80006d8:	2201      	movs	r2, #1
 80006da:	a901      	add	r1, sp, #4
 80006dc:	4803      	ldr	r0, [pc, #12]	; (80006ec <__io_putchar+0x1c>)
 80006de:	f008 faa0 	bl	8008c22 <HAL_UART_Transmit>
}
 80006e2:	9801      	ldr	r0, [sp, #4]
 80006e4:	b003      	add	sp, #12
 80006e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80006ea:	bf00      	nop
 80006ec:	240003c0 	.word	0x240003c0

080006f0 <SystemClock_Config>:
{
 80006f0:	b570      	push	{r4, r5, r6, lr}
 80006f2:	b09c      	sub	sp, #112	; 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f4:	224c      	movs	r2, #76	; 0x4c
 80006f6:	2100      	movs	r1, #0
 80006f8:	a809      	add	r0, sp, #36	; 0x24
 80006fa:	f01d fb0b 	bl	801dd14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fe:	2220      	movs	r2, #32
 8000700:	2100      	movs	r1, #0
 8000702:	a801      	add	r0, sp, #4
 8000704:	f01d fb06 	bl	801dd14 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000708:	2004      	movs	r0, #4
 800070a:	f006 faa7 	bl	8006c5c <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <SystemClock_Config+0xa4>)
 8000710:	2300      	movs	r3, #0
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	6993      	ldr	r3, [r2, #24]
 8000716:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800071a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800071e:	6193      	str	r3, [r2, #24]
 8000720:	6993      	ldr	r3, [r2, #24]
 8000722:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800072a:	6993      	ldr	r3, [r2, #24]
 800072c:	0499      	lsls	r1, r3, #18
 800072e:	d5fc      	bpl.n	800072a <SystemClock_Config+0x3a>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000730:	4a19      	ldr	r2, [pc, #100]	; (8000798 <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000734:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000736:	2130      	movs	r1, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000738:	6a93      	ldr	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800073a:	2608      	movs	r6, #8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	a809      	add	r0, sp, #36	; 0x24
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800073e:	f023 0303 	bic.w	r3, r3, #3
 8000742:	f043 0302 	orr.w	r3, r3, #2
 8000746:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074e:	9418      	str	r4, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000750:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000756:	2305      	movs	r3, #5
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000758:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 48;
 800075c:	e9cd 3114 	strd	r3, r1, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000760:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000764:	e9cd 6519 	strd	r6, r5, [sp, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f006 fabe 	bl	8006ce8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076c:	223f      	movs	r2, #63	; 0x3f
 800076e:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000770:	4621      	mov	r1, r4
 8000772:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000778:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800077a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800077e:	e9cd 5603 	strd	r5, r6, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000782:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000786:	e9cd 2307 	strd	r2, r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078a:	f006 fdad 	bl	80072e8 <HAL_RCC_ClockConfig>
}
 800078e:	b01c      	add	sp, #112	; 0x70
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800
 8000798:	58024400 	.word	0x58024400

0800079c <PeriphCommonClock_Config>:
{
 800079c:	b500      	push	{lr}
 800079e:	b0af      	sub	sp, #188	; 0xbc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a0:	2100      	movs	r1, #0
 80007a2:	2298      	movs	r2, #152	; 0x98
 80007a4:	a808      	add	r0, sp, #32
 80007a6:	f01d fab5 	bl	801dd14 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007b0:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80007b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 80007b6:	220f      	movs	r2, #15
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80007b8:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007bc:	e9cd 2303 	strd	r2, r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80007c0:	23c0      	movs	r3, #192	; 0xc0
 80007c2:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80007c4:	f640 3386 	movw	r3, #2950	; 0xb86
 80007c8:	9309      	str	r3, [sp, #36]	; 0x24
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 80007ca:	2320      	movs	r3, #32
 80007cc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ce:	f007 f811 	bl	80077f4 <HAL_RCCEx_PeriphCLKConfig>
}
 80007d2:	b02f      	add	sp, #188	; 0xbc
 80007d4:	f85d fb04 	ldr.w	pc, [sp], #4

080007d8 <main>:
{
 80007d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80007dc:	b0a1      	sub	sp, #132	; 0x84

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007de:	2210      	movs	r2, #16
 80007e0:	2100      	movs	r1, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e2:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e4:	a813      	add	r0, sp, #76	; 0x4c
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x70000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007e6:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007e8:	f01d fa94 	bl	801dd14 <memset>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 80007ec:	271c      	movs	r7, #28
  HAL_MPU_Disable();
 80007ee:	f003 ff49 	bl	8004684 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 80007f2:	f04f 5110 	mov.w	r1, #603979776	; 0x24000000
 80007f6:	4bd6      	ldr	r3, [pc, #856]	; (8000b50 <main+0x378>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007fa:	f8ad 504c 	strh.w	r5, [sp, #76]	; 0x4c

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80007fe:	2603      	movs	r6, #3
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000800:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000804:	4bd3      	ldr	r3, [pc, #844]	; (8000b54 <main+0x37c>)
 8000806:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	f003 ff5a 	bl	80046c0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x70000000;
 800080c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000810:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000812:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x70000000;
 8000816:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000818:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800081c:	f88d 504d 	strb.w	r5, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 8000820:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	f003 ff4c 	bl	80046c0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000828:	2302      	movs	r3, #2
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800082a:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800082c:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000830:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000834:	2316      	movs	r3, #22
 8000836:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800083a:	f240 1301 	movw	r3, #257	; 0x101
 800083e:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000842:	f003 ff3d 	bl	80046c0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000846:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800084a:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800084c:	f88d 4057 	strb.w	r4, [sp, #87]	; 0x57
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000850:	9314      	str	r3, [sp, #80]	; 0x50
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000852:	f8ad 405a 	strh.w	r4, [sp, #90]	; 0x5a

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000856:	2404      	movs	r4, #4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000858:	f88d 604d 	strb.w	r6, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_512MB;
 800085c:	f88d 7054 	strb.w	r7, [sp, #84]	; 0x54
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000860:	f003 ff2e 	bl	80046c0 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 8000864:	2319      	movs	r3, #25
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000866:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000868:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
  MPU_InitStruct.Size = MPU_REGION_SIZE_64MB;
 800086c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000870:	f88d 6057 	strb.w	r6, [sp, #87]	; 0x57
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000874:	f88d 505a 	strb.w	r5, [sp, #90]	; 0x5a
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000878:	f003 ff22 	bl	80046c0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800087c:	4620      	mov	r0, r4
 800087e:	f003 ff0f 	bl	80046a0 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000882:	4bb5      	ldr	r3, [pc, #724]	; (8000b58 <main+0x380>)
 8000884:	695a      	ldr	r2, [r3, #20]
 8000886:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 800088a:	d111      	bne.n	80008b0 <main+0xd8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000894:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800089c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80008a6:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008ac:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008b0:	4aa9      	ldr	r2, [pc, #676]	; (8000b58 <main+0x380>)
 80008b2:	6953      	ldr	r3, [r2, #20]
 80008b4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80008b8:	d123      	bne.n	8000902 <main+0x12a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008be:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008c2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008ca:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008ce:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008d2:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008d8:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008da:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008de:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e0:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 80008e4:	d2f9      	bcs.n	80008da <main+0x102>
    } while(sets-- != 0U);
 80008e6:	3b20      	subs	r3, #32
 80008e8:	f113 0f20 	cmn.w	r3, #32
 80008ec:	d1f2      	bne.n	80008d4 <main+0xfc>
 80008ee:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008f2:	6953      	ldr	r3, [r2, #20]
 80008f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f8:	6153      	str	r3, [r2, #20]
 80008fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008fe:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000902:	f003 fe1b 	bl	800453c <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2400      	movs	r4, #0
  SystemClock_Config();
 8000908:	f7ff fef2 	bl	80006f0 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090c:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 800090e:	f7ff ff45 	bl	800079c <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000912:	2214      	movs	r2, #20
 8000914:	2100      	movs	r1, #0
 8000916:	a813      	add	r0, sp, #76	; 0x4c
 8000918:	f01d f9fc 	bl	801dd14 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091c:	4b8f      	ldr	r3, [pc, #572]	; (8000b5c <main+0x384>)
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 800091e:	f248 0108 	movw	r1, #32776	; 0x8008
 8000922:	488f      	ldr	r0, [pc, #572]	; (8000b60 <main+0x388>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000924:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000928:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Pin = RENDER_TIME_Pin;
 800092c:	f04f 0b08 	mov.w	fp, #8
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8000930:	f44f 6980 	mov.w	r9, #1024	; 0x400
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	f042 0202 	orr.w	r2, r2, #2
  GPIO_InitStruct.Pin = USB_PWR_EN_Pin;
 8000938:	2720      	movs	r7, #32
  hltdc.Instance = LTDC;
 800093a:	4d8a      	ldr	r5, [pc, #552]	; (8000b64 <main+0x38c>)
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800093c:	f04f 0a18 	mov.w	sl, #24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000944:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000948:	f002 0202 	and.w	r2, r2, #2
 800094c:	9200      	str	r2, [sp, #0]
 800094e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000950:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000958:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800095c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000960:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000964:	9201      	str	r2, [sp, #4]
 8000966:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000968:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800096c:	f042 0208 	orr.w	r2, r2, #8
 8000970:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000974:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000978:	f002 0208 	and.w	r2, r2, #8
 800097c:	9202      	str	r2, [sp, #8]
 800097e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000980:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000984:	f042 0210 	orr.w	r2, r2, #16
 8000988:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800098c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000990:	f002 0210 	and.w	r2, r2, #16
 8000994:	9203      	str	r2, [sp, #12]
 8000996:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800099c:	f042 0201 	orr.w	r2, r2, #1
 80009a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009a8:	f002 0201 	and.w	r2, r2, #1
 80009ac:	9204      	str	r2, [sp, #16]
 80009ae:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009b8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009c0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80009c4:	9205      	str	r2, [sp, #20]
 80009c6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009cc:	f042 0204 	orr.w	r2, r2, #4
 80009d0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80009d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009d8:	f002 0204 	and.w	r2, r2, #4
 80009dc:	9206      	str	r2, [sp, #24]
 80009de:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80009e4:	f042 0220 	orr.w	r2, r2, #32
 80009e8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0320 	and.w	r3, r3, #32
 80009f6:	9307      	str	r3, [sp, #28]
 80009f8:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 80009fa:	f004 f93d 	bl	8004c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, MCU_ACTIVE_Pin|FRAME_RATE_Pin, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000a04:	4858      	ldr	r0, [pc, #352]	; (8000b68 <main+0x390>)
 8000a06:	f004 f937 	bl	8004c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	4856      	ldr	r0, [pc, #344]	; (8000b6c <main+0x394>)
 8000a12:	f004 f931 	bl	8004c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4855      	ldr	r0, [pc, #340]	; (8000b70 <main+0x398>)
 8000a1c:	f004 f92c 	bl	8004c78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PWR_EN_GPIO_Port, USB_PWR_EN_Pin, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2120      	movs	r1, #32
 8000a24:	4853      	ldr	r0, [pc, #332]	; (8000b74 <main+0x39c>)
 8000a26:	f004 f927 	bl	8004c78 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	a913      	add	r1, sp, #76	; 0x4c
 8000a30:	484b      	ldr	r0, [pc, #300]	; (8000b60 <main+0x388>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f003 ff95 	bl	8004968 <HAL_GPIO_Init>
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	a913      	add	r1, sp, #76	; 0x4c
 8000a40:	4847      	ldr	r0, [pc, #284]	; (8000b60 <main+0x388>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	e9cd b613 	strd	fp, r6, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RENDER_TIME_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f003 ff8c 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin|FRAME_RATE_Pin;
 8000a50:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	a913      	add	r1, sp, #76	; 0x4c
 8000a56:	4844      	ldr	r0, [pc, #272]	; (8000b68 <main+0x390>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	e9cd 3613 	strd	r3, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	e9cd 4815 	strd	r4, r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a60:	f003 ff82 	bl	8004968 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000a64:	a913      	add	r1, sp, #76	; 0x4c
 8000a66:	4841      	ldr	r0, [pc, #260]	; (8000b6c <main+0x394>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	e9cd 9613 	strd	r9, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8000a70:	f003 ff7a 	bl	8004968 <HAL_GPIO_Init>
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000a74:	a913      	add	r1, sp, #76	; 0x4c
 8000a76:	483e      	ldr	r0, [pc, #248]	; (8000b70 <main+0x398>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	e9cd 4815 	strd	r4, r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f003 ff72 	bl	8004968 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a84:	a913      	add	r1, sp, #76	; 0x4c
 8000a86:	483b      	ldr	r0, [pc, #236]	; (8000b74 <main+0x39c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(USB_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f003 ff6a 	bl	8004968 <HAL_GPIO_Init>
  hcrc.Instance = CRC;
 8000a94:	4838      	ldr	r0, [pc, #224]	; (8000b78 <main+0x3a0>)
 8000a96:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <main+0x3a4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a98:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
 8000a9a:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a9c:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a9e:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000aa2:	f003 fe39 	bl	8004718 <HAL_CRC_Init>
  hdma2d.Init.Mode = DMA2D_R2M;
 8000aa6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hdma2d.Instance = DMA2D;
 8000aaa:	4835      	ldr	r0, [pc, #212]	; (8000b80 <main+0x3a8>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000aac:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <main+0x3ac>)
  hdma2d.Init.OutputOffset = 0;
 8000aae:	e9c0 6402 	strd	r6, r4, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000ab2:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ab6:	f003 fe8d 	bl	80047d4 <HAL_DMA2D_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000aba:	2234      	movs	r2, #52	; 0x34
 8000abc:	4621      	mov	r1, r4
 8000abe:	a813      	add	r0, sp, #76	; 0x4c
 8000ac0:	f01d f928 	bl	801dd14 <memset>
  hltdc.Instance = LTDC;
 8000ac4:	4b30      	ldr	r3, [pc, #192]	; (8000b88 <main+0x3b0>)
  hltdc.Init.VerticalSync = 9;
 8000ac6:	2128      	movs	r1, #40	; 0x28
  hltdc.Init.AccumulatedVBP = 11;
 8000ac8:	2035      	movs	r0, #53	; 0x35
  hltdc.Init.AccumulatedActiveH = 283;
 8000aca:	f240 2c15 	movw	ip, #533	; 0x215
  hltdc.Init.TotalHeigh = 285;
 8000ace:	f240 2e35 	movw	lr, #565	; 0x235
  hltdc.Init.Backcolor.Blue = 0;
 8000ad2:	86ac      	strh	r4, [r5, #52]	; 0x34
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000ad4:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Red = 0;
 8000ad6:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000ada:	e9c5 3400 	strd	r3, r4, [r5]
  hltdc.Init.VerticalSync = 9;
 8000ade:	2309      	movs	r3, #9
 8000ae0:	e9c5 1305 	strd	r1, r3, [r5, #20]
  hltdc.Init.AccumulatedVBP = 11;
 8000ae4:	230b      	movs	r3, #11
 8000ae6:	e9c5 0307 	strd	r0, r3, [r5, #28]
  hltdc.Init.AccumulatedActiveH = 283;
 8000aea:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000aee:	4628      	mov	r0, r5
  hltdc.Init.AccumulatedActiveH = 283;
 8000af0:	e9c5 c309 	strd	ip, r3, [r5, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
 8000af4:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000af8:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hltdc.Init.TotalHeigh = 285;
 8000afc:	e9c5 e30b 	strd	lr, r3, [r5, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b00:	f005 f930 	bl	8005d64 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8000b04:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowY1 = 272;
 8000b06:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX1 = 480;
 8000b0a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000b0e:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b12:	f04f 0905 	mov.w	r9, #5
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b16:	4628      	mov	r0, r5
  pLayerCfg.WindowX0 = 0;
 8000b18:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.Backcolor.Blue = 0;
 8000b1a:	f8ad 407c 	strh.w	r4, [sp, #124]	; 0x7c
  pLayerCfg.Backcolor.Red = 0;
 8000b1e:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
  hospi1.Instance = OCTOSPI1;
 8000b22:	4d1a      	ldr	r5, [pc, #104]	; (8000b8c <main+0x3b4>)
  pLayerCfg.Alpha0 = 0;
 8000b24:	e9cd 1418 	strd	r1, r4, [sp, #96]	; 0x60
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b28:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
  pLayerCfg.ImageHeight = 272;
 8000b2c:	e9cd 231d 	strd	r2, r3, [sp, #116]	; 0x74
  pLayerCfg.FBStartAdress = 0x70000000;
 8000b30:	e9cd 911b 	strd	r9, r1, [sp, #108]	; 0x6c
  pLayerCfg.WindowY0 = 0;
 8000b34:	e9cd 2414 	strd	r2, r4, [sp, #80]	; 0x50
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b38:	a913      	add	r1, sp, #76	; 0x4c
 8000b3a:	4622      	mov	r2, r4
  hospi1.Init.FifoThreshold = 4;
 8000b3c:	f04f 0904 	mov.w	r9, #4
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b40:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b44:	f005 f9d9 	bl	8005efa <HAL_LTDC_ConfigLayer>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b48:	4652      	mov	r2, sl
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	a813      	add	r0, sp, #76	; 0x4c
 8000b4e:	e01f      	b.n	8000b90 <main+0x3b8>
 8000b50:	03000012 	.word	0x03000012
 8000b54:	01010001 	.word	0x01010001
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58021800 	.word	0x58021800
 8000b64:	24000260 	.word	0x24000260
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	58020c00 	.word	0x58020c00
 8000b70:	58020000 	.word	0x58020000
 8000b74:	58021c00 	.word	0x58021c00
 8000b78:	240001d4 	.word	0x240001d4
 8000b7c:	58024c00 	.word	0x58024c00
 8000b80:	240001f8 	.word	0x240001f8
 8000b84:	52001000 	.word	0x52001000
 8000b88:	50001000 	.word	0x50001000
 8000b8c:	24000308 	.word	0x24000308
 8000b90:	f01d f8c0 	bl	801dd14 <memset>
  hospi1.Init.FifoThreshold = 4;
 8000b94:	4b63      	ldr	r3, [pc, #396]	; (8000d24 <main+0x54c>)
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000b96:	4628      	mov	r0, r5
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b98:	60ac      	str	r4, [r5, #8]
  hospi1.Init.Refresh = 0;
 8000b9a:	63ec      	str	r4, [r5, #60]	; 0x3c
  hospi1.Init.FifoThreshold = 4;
 8000b9c:	e9c5 3900 	strd	r3, r9, [r5]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  hospi1.Init.DeviceSize = 32;
 8000ba4:	e9c5 3703 	strd	r3, r7, [r5, #12]
  hospi1.Init.ChipSelectHighTime = 2;
 8000ba8:	2702      	movs	r7, #2
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000baa:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000bae:	e9c5 7405 	strd	r7, r4, [r5, #20]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000bb2:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi1.Init.ChipSelectBoundary = 0;
 8000bb6:	e9c5 440b 	strd	r4, r4, [r5, #44]	; 0x2c
  hospi1.Init.MaxTran = 0;
 8000bba:	e9c5 b40d 	strd	fp, r4, [r5, #52]	; 0x34
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000bbe:	f005 fb29 	bl	8006214 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000bc2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bca:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000bcc:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bce:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bd2:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 1;
 8000bd4:	9615      	str	r6, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bd6:	9317      	str	r3, [sp, #92]	; 0x5c
  sOspiManagerCfg.DQSPort = 1;
 8000bd8:	e9cd 6613 	strd	r6, r6, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bdc:	f005 fda2 	bl	8006724 <HAL_OSPIM_Config>
  HAL_OSPI_DeInit(&hospi1);
 8000be0:	4628      	mov	r0, r5
 8000be2:	f005 fb8b 	bl	80062fc <HAL_OSPI_DeInit>
  BSP_OSPI_NOR_DeInit(0);
 8000be6:	4620      	mov	r0, r4
  ospi_nor_int.InterfaceMode = BSP_OSPI_NOR_OPI_MODE;
 8000be8:	f88d 6038 	strb.w	r6, [sp, #56]	; 0x38
  ospi_nor_int.TransferRate  = BSP_OSPI_NOR_DTR_TRANSFER;
 8000bec:	f88d 6039 	strb.w	r6, [sp, #57]	; 0x39
  BSP_OSPI_NOR_DeInit(0);
 8000bf0:	f003 f8fe 	bl	8003df0 <BSP_OSPI_NOR_DeInit>
  if(BSP_OSPI_NOR_Init(0, &ospi_nor_int) != BSP_ERROR_NONE)
 8000bf4:	a90e      	add	r1, sp, #56	; 0x38
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f003 f9ec 	bl	8003fd4 <BSP_OSPI_NOR_Init>
  if(BSP_OSPI_NOR_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f003 f8bf 	bl	8003d80 <BSP_OSPI_NOR_EnableMemoryMappedMode>
  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c02:	4652      	mov	r2, sl
 8000c04:	4621      	mov	r1, r4
 8000c06:	a813      	add	r0, sp, #76	; 0x4c
 8000c08:	f01d f884 	bl	801dd14 <memset>
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8000c0c:	2210      	movs	r2, #16
 8000c0e:	4621      	mov	r1, r4
 8000c10:	a80a      	add	r0, sp, #40	; 0x28
 8000c12:	f01d f87f 	bl	801dd14 <memset>
  OSPI_HyperbusCmdTypeDef sCommand = {0};
 8000c16:	2214      	movs	r2, #20
 8000c18:	4621      	mov	r1, r4
 8000c1a:	a80e      	add	r0, sp, #56	; 0x38
 8000c1c:	f01d f87a 	bl	801dd14 <memset>
  hospi2.Instance = OCTOSPI2;
 8000c20:	4d41      	ldr	r5, [pc, #260]	; (8000d28 <main+0x550>)
 8000c22:	4b42      	ldr	r3, [pc, #264]	; (8000d2c <main+0x554>)
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c24:	4628      	mov	r0, r5
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c26:	60ac      	str	r4, [r5, #8]
  hospi2.Init.FifoThreshold = 4;
 8000c28:	e9c5 3900 	strd	r3, r9, [r5]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8000c2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  hospi2.Init.DeviceSize = 24;
 8000c30:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  hospi2.Init.ChipSelectBoundary = 23;
 8000c34:	2317      	movs	r3, #23
 8000c36:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
 8000c3a:	e9c5 a30b 	strd	sl, r3, [r5, #44]	; 0x2c
  hospi2.Init.Refresh = 400;
 8000c3e:	f44f 73c8 	mov.w	r3, #400	; 0x190
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c42:	e9c5 9405 	strd	r9, r4, [r5, #20]
  hospi2.Init.Refresh = 400;
 8000c46:	63eb      	str	r3, [r5, #60]	; 0x3c
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c48:	e9c5 4407 	strd	r4, r4, [r5, #28]
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c4c:	e9c5 7409 	strd	r7, r4, [r5, #36]	; 0x24
  hospi2.Init.MaxTran = 0;
 8000c50:	e9c5 440d 	strd	r4, r4, [r5, #52]	; 0x34
  OSPI_MemoryMappedTypeDef sMemMappedCfg = {0};
 8000c54:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c58:	f005 fadc 	bl	8006214 <HAL_OSPI_Init>
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c5c:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <main+0x558>)
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c62:	a913      	add	r1, sp, #76	; 0x4c
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000c64:	9316      	str	r3, [sp, #88]	; 0x58
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c66:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c6a:	4628      	mov	r0, r5
  sOspiManagerCfg.NCSPort = 2;
 8000c6c:	9715      	str	r7, [sp, #84]	; 0x54
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000c6e:	9317      	str	r3, [sp, #92]	; 0x5c
  sOspiManagerCfg.DQSPort = 2;
 8000c70:	e9cd 7713 	strd	r7, r7, [sp, #76]	; 0x4c
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c74:	f005 fd56 	bl	8006724 <HAL_OSPIM_Config>
  sHyperBusCfg.AccessTime = 6;
 8000c78:	2306      	movs	r3, #6
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c7e:	a90a      	add	r1, sp, #40	; 0x28
 8000c80:	4628      	mov	r0, r5
  sHyperBusCfg.RWRecoveryTime = 3;
 8000c82:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sHyperBusCfg.LatencyMode = HAL_OSPI_FIXED_LATENCY;
 8000c86:	960d      	str	r6, [sp, #52]	; 0x34
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_LATENCY_ON_WRITE;
 8000c88:	e9cd 340b 	strd	r3, r4, [sp, #44]	; 0x2c
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c8c:	f005 fb98 	bl	80063c0 <HAL_OSPI_HyperbusCfg>
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000c90:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c98:	a90e      	add	r1, sp, #56	; 0x38
  sCommand.AddressSize  = HAL_OSPI_ADDRESS_32_BITS;
 8000c9a:	9310      	str	r3, [sp, #64]	; 0x40
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000c9c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ca0:	4628      	mov	r0, r5
  sCommand.AddressSpace = HAL_OSPI_MEMORY_ADDRESS_SPACE;
 8000ca2:	940e      	str	r4, [sp, #56]	; 0x38
  sCommand.DQSMode      = HAL_OSPI_DQS_ENABLE;
 8000ca4:	9312      	str	r3, [sp, #72]	; 0x48
  sCommand.Address      = 0;
 8000ca6:	940f      	str	r4, [sp, #60]	; 0x3c
  sCommand.NbData       = 1;
 8000ca8:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_OSPI_HyperbusCmd(&hospi2, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000caa:	f005 fbaf 	bl	800640c <HAL_OSPI_HyperbusCmd>
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000cae:	a908      	add	r1, sp, #32
 8000cb0:	4628      	mov	r0, r5
  sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000cb2:	9408      	str	r4, [sp, #32]
  if (HAL_OSPI_MemoryMapped(&hospi2, &sMemMappedCfg) != HAL_OK)
 8000cb4:	f005 fcc2 	bl	800663c <HAL_OSPI_MemoryMapped>
  huart3.Instance = USART3;
 8000cb8:	4d1e      	ldr	r5, [pc, #120]	; (8000d34 <main+0x55c>)
  huart3.Init.BaudRate = 115200;
 8000cba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <main+0x560>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc0:	4628      	mov	r0, r5
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc2:	612c      	str	r4, [r5, #16]
  huart3.Init.BaudRate = 115200;
 8000cc4:	e9c5 2300 	strd	r2, r3, [r5]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	230c      	movs	r3, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cca:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	e9c5 3405 	strd	r3, r4, [r5, #20]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	e9c5 4407 	strd	r4, r4, [r5, #28]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd6:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cda:	f008 f834 	bl	8008d46 <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	f008 f89e 	bl	8008e22 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce6:	4621      	mov	r1, r4
 8000ce8:	4628      	mov	r0, r5
 8000cea:	f008 f8be 	bl	8008e6a <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f008 f87c 	bl	8008dec <HAL_UARTEx_DisableFifoMode>
  MX_TouchGFX_Init();
 8000cf4:	f000 fc5e 	bl	80015b4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000cf8:	f000 fc5b 	bl	80015b2 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000cfc:	f008 fcd2 	bl	80096a4 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <main+0x564>)
 8000d02:	4621      	mov	r1, r4
 8000d04:	480e      	ldr	r0, [pc, #56]	; (8000d40 <main+0x568>)
 8000d06:	f008 fcf9 	bl	80096fc <osThreadNew>
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <main+0x56c>)
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <main+0x570>)
 8000d0e:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d10:	6018      	str	r0, [r3, #0]
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <main+0x574>)
 8000d14:	f008 fcf2 	bl	80096fc <osThreadNew>
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <main+0x578>)
 8000d1a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000d1c:	f008 fcd4 	bl	80096c8 <osKernelStart>
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <main+0x548>
 8000d22:	bf00      	nop
 8000d24:	52005000 	.word	0x52005000
 8000d28:	24000364 	.word	0x24000364
 8000d2c:	5200a000 	.word	0x5200a000
 8000d30:	00010002 	.word	0x00010002
 8000d34:	240003c0 	.word	0x240003c0
 8000d38:	40004800 	.word	0x40004800
 8000d3c:	0801edf4 	.word	0x0801edf4
 8000d40:	080006c1 	.word	0x080006c1
 8000d44:	240001d0 	.word	0x240001d0
 8000d48:	0801edd0 	.word	0x0801edd0
 8000d4c:	080015b9 	.word	0x080015b9
 8000d50:	240001cc 	.word	0x240001cc

08000d54 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d54:	6802      	ldr	r2, [r0, #0]
 8000d56:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d101      	bne.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000d5c:	f003 bc1c 	b.w	8004598 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40001000 	.word	0x40001000

08000d68 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d68:	4770      	bx	lr
	...

08000d6c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <HAL_MspInit+0x2c>)
{
 8000d6e:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d70:	210f      	movs	r1, #15
 8000d72:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8000d7a:	f042 0202 	orr.w	r2, r2, #2
 8000d7e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d82:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	9301      	str	r3, [sp, #4]
 8000d8e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d90:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d92:	f003 bc37 	b.w	8004604 <HAL_NVIC_SetPriority>
 8000d96:	bf00      	nop
 8000d98:	58024400 	.word	0x58024400

08000d9c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000d9c:	6802      	ldr	r2, [r0, #0]
{
 8000d9e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_CRC_MspInit+0x2c>)
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d10d      	bne.n	8000dc2 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000da6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000daa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000db2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000dc2:	b002      	add	sp, #8
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	58024c00 	.word	0x58024c00

08000dcc <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_DMA2D_MspInit+0x40>)
{
 8000dce:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000dd0:	6802      	ldr	r2, [r0, #0]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d117      	bne.n	8000e06 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000dd8:	2105      	movs	r1, #5
 8000dda:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ddc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000de0:	f042 0210 	orr.w	r2, r2, #16
 8000de4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000de8:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000dea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000dee:	f003 0310 	and.w	r3, r3, #16
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000df6:	f003 fc05 	bl	8004604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000dfa:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000dfc:	b003      	add	sp, #12
 8000dfe:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e02:	f003 bc31 	b.w	8004668 <HAL_NVIC_EnableIRQ>
}
 8000e06:	b003      	add	sp, #12
 8000e08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e0c:	52001000 	.word	0x52001000
 8000e10:	58024400 	.word	0x58024400

08000e14 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e18:	b0ba      	sub	sp, #232	; 0xe8
 8000e1a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	2214      	movs	r2, #20
 8000e1e:	2100      	movs	r1, #0
 8000e20:	a808      	add	r0, sp, #32
 8000e22:	f01c ff77 	bl	801dd14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e26:	22b4      	movs	r2, #180	; 0xb4
 8000e28:	2100      	movs	r1, #0
 8000e2a:	a80d      	add	r0, sp, #52	; 0x34
 8000e2c:	f01c ff72 	bl	801dd14 <memset>
  if(hltdc->Instance==LTDC)
 8000e30:	6822      	ldr	r2, [r4, #0]
 8000e32:	4b75      	ldr	r3, [pc, #468]	; (8001008 <HAL_LTDC_MspInit+0x1f4>)
 8000e34:	429a      	cmp	r2, r3
 8000e36:	f040 80e3 	bne.w	8001000 <HAL_LTDC_MspInit+0x1ec>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e3a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    PeriphClkInitStruct.PLL3.PLL3M = 1;
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 8000e3e:	2101      	movs	r1, #1
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0.0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e40:	a80d      	add	r0, sp, #52	; 0x34
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e42:	930d      	str	r3, [sp, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	e9cd 1316 	strd	r1, r3, [sp, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000e4a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000e4c:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000e50:	931a      	str	r3, [sp, #104]	; 0x68
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000e52:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e56:	931b      	str	r3, [sp, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e58:	f006 fccc 	bl	80077f4 <HAL_RCCEx_PeriphCLKConfig>
 8000e5c:	b108      	cbz	r0, 8000e62 <HAL_LTDC_MspInit+0x4e>
    {
      Error_Handler();
 8000e5e:	f7ff ff83 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e62:	4b6a      	ldr	r3, [pc, #424]	; (800100c <HAL_LTDC_MspInit+0x1f8>)
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_1|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2503      	movs	r5, #3
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e6a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e6e:	270e      	movs	r7, #14
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	a908      	add	r1, sp, #32
 8000e72:	4867      	ldr	r0, [pc, #412]	; (8001010 <HAL_LTDC_MspInit+0x1fc>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e74:	f042 0208 	orr.w	r2, r2, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 8000e78:	f04f 0858 	mov.w	r8, #88	; 0x58
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e7c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8000e80:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8000e84:	f002 0208 	and.w	r2, r2, #8
 8000e88:	9200      	str	r2, [sp, #0]
 8000e8a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e90:	f042 0202 	orr.w	r2, r2, #2
 8000e94:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e9c:	f002 0202 	and.w	r2, r2, #2
 8000ea0:	9201      	str	r2, [sp, #4]
 8000ea2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ea8:	f042 0208 	orr.w	r2, r2, #8
 8000eac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000eb0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000eb4:	f002 0208 	and.w	r2, r2, #8
 8000eb8:	9202      	str	r2, [sp, #8]
 8000eba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ebc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ec0:	f042 0210 	orr.w	r2, r2, #16
 8000ec4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ec8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ecc:	f002 0210 	and.w	r2, r2, #16
 8000ed0:	9203      	str	r2, [sp, #12]
 8000ed2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ed8:	f042 0201 	orr.w	r2, r2, #1
 8000edc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ee0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ee4:	f002 0201 	and.w	r2, r2, #1
 8000ee8:	9204      	str	r2, [sp, #16]
 8000eea:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ef8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000efc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000f00:	9205      	str	r2, [sp, #20]
 8000f02:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f0c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f14:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f18:	9206      	str	r2, [sp, #24]
 8000f1a:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f20:	f042 0204 	orr.w	r2, r2, #4
 8000f24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2c:	970c      	str	r7, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	9307      	str	r3, [sp, #28]
 8000f34:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	f240 3303 	movw	r3, #771	; 0x303
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	e9cd 3608 	strd	r3, r6, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f003 fd11 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_6;
 8000f46:	2349      	movs	r3, #73	; 0x49
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f48:	a908      	add	r1, sp, #32
 8000f4a:	4832      	ldr	r0, [pc, #200]	; (8001014 <HAL_LTDC_MspInit+0x200>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f4c:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f56:	f003 fd07 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13
 8000f5a:	f64b 0303 	movw	r3, #47107	; 0xb803
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f5e:	a908      	add	r1, sp, #32
 8000f60:	482d      	ldr	r0, [pc, #180]	; (8001018 <HAL_LTDC_MspInit+0x204>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f62:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6c:	f003 fcfc 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f70:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	a908      	add	r1, sp, #32
 8000f76:	4829      	ldr	r0, [pc, #164]	; (800101c <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000f7c:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8000f82:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f003 fcf0 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000f88:	f44f 4381 	mov.w	r3, #16512	; 0x4080
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8c:	a908      	add	r1, sp, #32
 8000f8e:	4824      	ldr	r0, [pc, #144]	; (8001020 <HAL_LTDC_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f90:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9a:	f003 fce5 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_8
 8000f9e:	f648 7308 	movw	r3, #36616	; 0x8f08
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fa2:	a908      	add	r1, sp, #32
 8000fa4:	481f      	ldr	r0, [pc, #124]	; (8001024 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa6:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa8:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fac:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fb0:	f003 fcda 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000fb4:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	a908      	add	r1, sp, #32
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <HAL_LTDC_MspInit+0x214>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fba:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc0:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc4:	f003 fcd0 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	a908      	add	r1, sp, #32
 8000fca:	4814      	ldr	r0, [pc, #80]	; (800101c <HAL_LTDC_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fcc:	970c      	str	r7, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	e9cd 8608 	strd	r8, r6, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f003 fcc7 	bl	8004968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fda:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fdc:	a908      	add	r1, sp, #32
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <HAL_LTDC_MspInit+0x210>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	e9cd 3608 	strd	r3, r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fe4:	2309      	movs	r3, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fea:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fec:	f003 fcbc 	bl	8004968 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000ff0:	4640      	mov	r0, r8
 8000ff2:	4622      	mov	r2, r4
 8000ff4:	2105      	movs	r1, #5
 8000ff6:	f003 fb05 	bl	8004604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	f003 fb34 	bl	8004668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001000:	b03a      	add	sp, #232	; 0xe8
 8001002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001006:	bf00      	nop
 8001008:	50001000 	.word	0x50001000
 800100c:	58024400 	.word	0x58024400
 8001010:	58020400 	.word	0x58020400
 8001014:	58020c00 	.word	0x58020c00
 8001018:	58021000 	.word	0x58021000
 800101c:	58020000 	.word	0x58020000
 8001020:	58021800 	.word	0x58021800
 8001024:	58021c00 	.word	0x58021c00
 8001028:	58020800 	.word	0x58020800

0800102c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800102c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001030:	b091      	sub	sp, #68	; 0x44
 8001032:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	2214      	movs	r2, #20
 8001036:	2100      	movs	r1, #0
 8001038:	a80b      	add	r0, sp, #44	; 0x2c
 800103a:	f01c fe6b 	bl	801dd14 <memset>
  if(hospi->Instance==OCTOSPI1)
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	4a88      	ldr	r2, [pc, #544]	; (8001264 <HAL_OSPI_MspInit+0x238>)
 8001042:	4293      	cmp	r3, r2
 8001044:	f040 80b0 	bne.w	80011a8 <HAL_OSPI_MspInit+0x17c>
  {
  /* USER CODE BEGIN OCTOSPI1_MspInit 0 */

  /* USER CODE END OCTOSPI1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001048:	4a87      	ldr	r2, [pc, #540]	; (8001268 <HAL_OSPI_MspInit+0x23c>)
 800104a:	6813      	ldr	r3, [r2, #0]
 800104c:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800104e:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001050:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001052:	d10c      	bne.n	800106e <HAL_OSPI_MspInit+0x42>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001054:	4b85      	ldr	r3, [pc, #532]	; (800126c <HAL_OSPI_MspInit+0x240>)
 8001056:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800105a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800105e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001062:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001066:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	9b00      	ldr	r3, [sp, #0]
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800106e:	4b7f      	ldr	r3, [pc, #508]	; (800126c <HAL_OSPI_MspInit+0x240>)
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001072:	2403      	movs	r4, #3
 8001074:	2709      	movs	r7, #9
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001076:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107a:	a90b      	add	r1, sp, #44	; 0x2c
 800107c:	487c      	ldr	r0, [pc, #496]	; (8001270 <HAL_OSPI_MspInit+0x244>)

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2600      	movs	r6, #0
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001084:	f04f 080a 	mov.w	r8, #10
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001088:	f04f 0904 	mov.w	r9, #4
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800108c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001090:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001094:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001098:	9201      	str	r2, [sp, #4]
 800109a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800109c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010ac:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80010b0:	9202      	str	r2, [sp, #8]
 80010b2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010b8:	f042 0208 	orr.w	r2, r2, #8
 80010bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010c4:	f002 0208 	and.w	r2, r2, #8
 80010c8:	9203      	str	r2, [sp, #12]
 80010ca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010d0:	f042 0210 	orr.w	r2, r2, #16
 80010d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010dc:	f002 0210 	and.w	r2, r2, #16
 80010e0:	9204      	str	r2, [sp, #16]
 80010e2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010e8:	f042 0220 	orr.w	r2, r2, #32
 80010ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80010f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010f4:	f002 0220 	and.w	r2, r2, #32
 80010f8:	9205      	str	r2, [sp, #20]
 80010fa:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001100:	f042 0202 	orr.w	r2, r2, #2
 8001104:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	9306      	str	r3, [sp, #24]
 8001112:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001118:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800111c:	e9cd 470e 	strd	r4, r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001120:	f003 fc22 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4;
 8001124:	23b0      	movs	r3, #176	; 0xb0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001126:	a90b      	add	r1, sp, #44	; 0x2c
 8001128:	4852      	ldr	r0, [pc, #328]	; (8001274 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800112a:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f003 fc17 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800113a:	a90b      	add	r1, sp, #44	; 0x2c
 800113c:	484e      	ldr	r0, [pc, #312]	; (8001278 <HAL_OSPI_MspInit+0x24c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800113e:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	e9cd 950b 	strd	r9, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001148:	f003 fc0e 	bl	8004968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800114c:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800114e:	a90b      	add	r1, sp, #44	; 0x2c
 8001150:	4847      	ldr	r0, [pc, #284]	; (8001270 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001152:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800115e:	f003 fc03 	bl	8004968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_11|GPIO_PIN_12;
 8001162:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001166:	a90b      	add	r1, sp, #44	; 0x2c
 8001168:	4842      	ldr	r0, [pc, #264]	; (8001274 <HAL_OSPI_MspInit+0x248>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800116a:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f003 fbf8 	bl	8004968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001178:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800117c:	a90b      	add	r1, sp, #44	; 0x2c
 800117e:	483f      	ldr	r0, [pc, #252]	; (800127c <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8001180:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800118a:	f003 fbed 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	a90b      	add	r1, sp, #44	; 0x2c
 8001190:	483b      	ldr	r0, [pc, #236]	; (8001280 <HAL_OSPI_MspInit+0x254>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001192:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	e9cd 950b 	strd	r9, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	e9cd 640d 	strd	r6, r4, [sp, #52]	; 0x34
                          |GPIO_PIN_3|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119e:	f003 fbe3 	bl	8004968 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80011a2:	b011      	add	sp, #68	; 0x44
 80011a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if(hospi->Instance==OCTOSPI2)
 80011a8:	4a36      	ldr	r2, [pc, #216]	; (8001284 <HAL_OSPI_MspInit+0x258>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d1f9      	bne.n	80011a2 <HAL_OSPI_MspInit+0x176>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80011ae:	4a2e      	ldr	r2, [pc, #184]	; (8001268 <HAL_OSPI_MspInit+0x23c>)
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	3301      	adds	r3, #1
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80011b4:	2b01      	cmp	r3, #1
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80011b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80011b8:	d10c      	bne.n	80011d4 <HAL_OSPI_MspInit+0x1a8>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <HAL_OSPI_MspInit+0x240>)
 80011bc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80011c0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80011c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80011c8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	9307      	str	r3, [sp, #28]
 80011d2:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <HAL_OSPI_MspInit+0x240>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80011d6:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80011da:	2609      	movs	r6, #9
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011dc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011e0:	a90b      	add	r1, sp, #44	; 0x2c
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2700      	movs	r7, #0
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80011e6:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80011ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80011f2:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80011f6:	9208      	str	r2, [sp, #32]
 80011f8:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011fa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80011fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001202:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001206:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800120a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800120e:	9209      	str	r2, [sp, #36]	; 0x24
 8001210:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001212:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001216:	f042 0220 	orr.w	r2, r2, #32
 800121a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800121e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	930a      	str	r3, [sp, #40]	; 0x28
 8001228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	f640 0303 	movw	r3, #2051	; 0x803
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800122e:	e9cd 460e 	strd	r4, r6, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001236:	f003 fb97 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 800123a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800123e:	a90b      	add	r1, sp, #44	; 0x2c
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <HAL_OSPI_MspInit+0x244>)
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8001242:	940f      	str	r4, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001248:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800124c:	f003 fb8c 	bl	8004968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8001250:	f241 031f 	movw	r3, #4127	; 0x101f
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001254:	a90b      	add	r1, sp, #44	; 0x2c
 8001256:	4809      	ldr	r0, [pc, #36]	; (800127c <HAL_OSPI_MspInit+0x250>)
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8001258:	960f      	str	r6, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	e9cd 350b 	strd	r3, r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	e9cd 740d 	strd	r7, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001262:	e79c      	b.n	800119e <HAL_OSPI_MspInit+0x172>
 8001264:	52005000 	.word	0x52005000
 8001268:	24000450 	.word	0x24000450
 800126c:	58024400 	.word	0x58024400
 8001270:	58021800 	.word	0x58021800
 8001274:	58020c00 	.word	0x58020c00
 8001278:	58021000 	.word	0x58021000
 800127c:	58021400 	.word	0x58021400
 8001280:	58020400 	.word	0x58020400
 8001284:	5200a000 	.word	0x5200a000

08001288 <HAL_OSPI_MspDeInit>:
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
  if(hospi->Instance==OCTOSPI1)
 8001288:	4a27      	ldr	r2, [pc, #156]	; (8001328 <HAL_OSPI_MspDeInit+0xa0>)
{
 800128a:	b508      	push	{r3, lr}
  if(hospi->Instance==OCTOSPI1)
 800128c:	6803      	ldr	r3, [r0, #0]
 800128e:	4293      	cmp	r3, r2
 8001290:	d12a      	bne.n	80012e8 <HAL_OSPI_MspDeInit+0x60>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_OSPI_MspDeInit+0xa4>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	3a01      	subs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_OSPI_MspDeInit+0xa8>)
 800129c:	b92a      	cbnz	r2, 80012aa <HAL_OSPI_MspDeInit+0x22>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 800129e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80012a2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80012a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80012aa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80012ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80012b2:	4820      	ldr	r0, [pc, #128]	; (8001334 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80012b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80012b8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9|GPIO_PIN_6);
 80012bc:	f003 fc3a 	bl	8004b34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_7|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13
 80012c0:	f643 01b0 	movw	r1, #14512	; 0x38b0
 80012c4:	481c      	ldr	r0, [pc, #112]	; (8001338 <HAL_OSPI_MspDeInit+0xb0>)
 80012c6:	f003 fc35 	bl	8004b34 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_2);
 80012ca:	2104      	movs	r1, #4
 80012cc:	481b      	ldr	r0, [pc, #108]	; (800133c <HAL_OSPI_MspDeInit+0xb4>)
 80012ce:	f003 fc31 	bl	8004b34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_10);
 80012d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012d6:	481a      	ldr	r0, [pc, #104]	; (8001340 <HAL_OSPI_MspDeInit+0xb8>)
 80012d8:	f003 fc2c 	bl	8004b34 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 80012dc:	2104      	movs	r1, #4
 80012de:	4819      	ldr	r0, [pc, #100]	; (8001344 <HAL_OSPI_MspDeInit+0xbc>)
  /* USER CODE BEGIN OCTOSPI2_MspDeInit 1 */

  /* USER CODE END OCTOSPI2_MspDeInit 1 */
  }

}
 80012e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 80012e4:	f003 bc26 	b.w	8004b34 <HAL_GPIO_DeInit>
  else if(hospi->Instance==OCTOSPI2)
 80012e8:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_OSPI_MspDeInit+0xc0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11a      	bne.n	8001324 <HAL_OSPI_MspDeInit+0x9c>
    HAL_RCC_OCTOSPIM_CLK_ENABLED--;
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_OSPI_MspDeInit+0xa4>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	3a01      	subs	r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==0){
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_OSPI_MspDeInit+0xa8>)
 80012f8:	b92a      	cbnz	r2, 8001306 <HAL_OSPI_MspDeInit+0x7e>
      __HAL_RCC_OCTOSPIM_CLK_DISABLE();
 80012fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80012fe:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8001302:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001306:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 800130a:	f641 4103 	movw	r1, #7171	; 0x1c03
 800130e:	4809      	ldr	r0, [pc, #36]	; (8001334 <HAL_OSPI_MspDeInit+0xac>)
    __HAL_RCC_OSPI2_CLK_DISABLE();
 8001310:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001314:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_1
 8001318:	f003 fc0c 	bl	8004b34 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 800131c:	f241 011f 	movw	r1, #4127	; 0x101f
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <HAL_OSPI_MspDeInit+0xb8>)
 8001322:	e7dd      	b.n	80012e0 <HAL_OSPI_MspDeInit+0x58>
}
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	52005000 	.word	0x52005000
 800132c:	24000450 	.word	0x24000450
 8001330:	58024400 	.word	0x58024400
 8001334:	58021800 	.word	0x58021800
 8001338:	58020c00 	.word	0x58020c00
 800133c:	58021000 	.word	0x58021000
 8001340:	58021400 	.word	0x58021400
 8001344:	58020400 	.word	0x58020400
 8001348:	5200a000 	.word	0x5200a000

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b510      	push	{r4, lr}
 800134e:	b0b4      	sub	sp, #208	; 0xd0
 8001350:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	2214      	movs	r2, #20
 8001354:	2100      	movs	r1, #0
 8001356:	a802      	add	r0, sp, #8
 8001358:	f01c fcdc 	bl	801dd14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	22b4      	movs	r2, #180	; 0xb4
 800135e:	2100      	movs	r1, #0
 8001360:	a807      	add	r0, sp, #28
 8001362:	f01c fcd7 	bl	801dd14 <memset>
  if(huart->Instance==USART3)
 8001366:	6822      	ldr	r2, [r4, #0]
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_UART_MspInit+0x84>)
 800136a:	429a      	cmp	r2, r3
 800136c:	d12e      	bne.n	80013cc <HAL_UART_MspInit+0x80>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800136e:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001370:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001372:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	f006 fa3e 	bl	80077f4 <HAL_RCCEx_PeriphCLKConfig>
 8001378:	b108      	cbz	r0, 800137e <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800137a:	f7ff fcf5 	bl	8000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_UART_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	a902      	add	r1, sp, #8
 8001382:	4815      	ldr	r0, [pc, #84]	; (80013d8 <HAL_UART_MspInit+0x8c>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001384:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001388:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800138c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001390:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001394:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001398:	9200      	str	r2, [sp, #0]
 800139a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80013a0:	f042 0208 	orr.w	r2, r2, #8
 80013a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c0:	e9cd 3304 	strd	r3, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013c4:	2307      	movs	r3, #7
 80013c6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c8:	f003 face 	bl	8004968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013cc:	b034      	add	sp, #208	; 0xd0
 80013ce:	bd10      	pop	{r4, pc}
 80013d0:	40004800 	.word	0x40004800
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020c00 	.word	0x58020c00

080013dc <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013dc:	280f      	cmp	r0, #15
{
 80013de:	b510      	push	{r4, lr}
 80013e0:	4604      	mov	r4, r0
 80013e2:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e4:	d902      	bls.n	80013ec <HAL_InitTick+0x10>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80013e6:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80013e8:	b00a      	add	sp, #40	; 0x28
 80013ea:	bd10      	pop	{r4, pc}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80013ec:	4601      	mov	r1, r0
 80013ee:	2200      	movs	r2, #0
 80013f0:	2036      	movs	r0, #54	; 0x36
 80013f2:	f003 f907 	bl	8004604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f6:	2036      	movs	r0, #54	; 0x36
 80013f8:	f003 f936 	bl	8004668 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013fe:	4669      	mov	r1, sp
 8001400:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8001402:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <HAL_InitTick+0x88>)
 8001406:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800140a:	f042 0210 	orr.w	r2, r2, #16
 800140e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800141e:	f006 f8cf 	bl	80075c0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001422:	9b07      	ldr	r3, [sp, #28]
 8001424:	b9c3      	cbnz	r3, 8001458 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001426:	f006 f8a7 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 800142a:	4c0f      	ldr	r4, [pc, #60]	; (8001468 <HAL_InitTick+0x8c>)
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_InitTick+0x90>)
 800142e:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001430:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001434:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001436:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <HAL_InitTick+0x94>)
 8001438:	fbb0 f0f3 	udiv	r0, r0, r3
 800143c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 800143e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001440:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001442:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001444:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001448:	f007 f918 	bl	800867c <HAL_TIM_Base_Init>
 800144c:	2800      	cmp	r0, #0
 800144e:	d1ca      	bne.n	80013e6 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001450:	4620      	mov	r0, r4
 8001452:	f006 ffab 	bl	80083ac <HAL_TIM_Base_Start_IT>
 8001456:	e7c7      	b.n	80013e8 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001458:	f006 f88e 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 800145c:	0040      	lsls	r0, r0, #1
 800145e:	e7e4      	b.n	800142a <HAL_InitTick+0x4e>
 8001460:	24000048 	.word	0x24000048
 8001464:	58024400 	.word	0x58024400
 8001468:	24000454 	.word	0x24000454
 800146c:	40001000 	.word	0x40001000
 8001470:	000f4240 	.word	0x000f4240

08001474 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001474:	4770      	bx	lr

08001476 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <HardFault_Handler>

08001478 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <MemManage_Handler>

0800147a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <BusFault_Handler>

0800147c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler>

0800147e <DebugMon_Handler>:
 800147e:	4770      	bx	lr

08001480 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001480:	4801      	ldr	r0, [pc, #4]	; (8001488 <TIM6_DAC_IRQHandler+0x8>)
 8001482:	f006 bfdd 	b.w	8008440 <HAL_TIM_IRQHandler>
 8001486:	bf00      	nop
 8001488:	24000454 	.word	0x24000454

0800148c <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800148c:	4801      	ldr	r0, [pc, #4]	; (8001494 <OTG_HS_IRQHandler+0x8>)
 800148e:	f003 bcf9 	b.w	8004e84 <HAL_HCD_IRQHandler>
 8001492:	bf00      	nop
 8001494:	24001b88 	.word	0x24001b88

08001498 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001498:	4801      	ldr	r0, [pc, #4]	; (80014a0 <LTDC_IRQHandler+0x8>)
 800149a:	f004 bcd1 	b.w	8005e40 <HAL_LTDC_IRQHandler>
 800149e:	bf00      	nop
 80014a0:	24000260 	.word	0x24000260

080014a4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014a4:	4801      	ldr	r0, [pc, #4]	; (80014ac <DMA2D_IRQHandler+0x8>)
 80014a6:	f003 b9d4 	b.w	8004852 <HAL_DMA2D_IRQHandler>
 80014aa:	bf00      	nop
 80014ac:	240001f8 	.word	0x240001f8

080014b0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014b0:	2001      	movs	r0, #1
 80014b2:	4770      	bx	lr

080014b4 <_kill>:

int _kill(int pid, int sig)
{
 80014b4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014b6:	f01c fad9 	bl	801da6c <__errno>
 80014ba:	2316      	movs	r3, #22
 80014bc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014be:	f04f 30ff 	mov.w	r0, #4294967295
 80014c2:	bd08      	pop	{r3, pc}

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014c6:	f01c fad1 	bl	801da6c <__errno>
 80014ca:	2316      	movs	r3, #22
 80014cc:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80014ce:	e7fe      	b.n	80014ce <_exit+0xa>

080014d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d0:	b570      	push	{r4, r5, r6, lr}
 80014d2:	460d      	mov	r5, r1
 80014d4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d6:	460e      	mov	r6, r1
 80014d8:	1b73      	subs	r3, r6, r5
 80014da:	429c      	cmp	r4, r3
 80014dc:	dc01      	bgt.n	80014e2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80014de:	4620      	mov	r0, r4
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80014e2:	f3af 8000 	nop.w
 80014e6:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	e7f5      	b.n	80014d8 <_read+0x8>

080014ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ec:	b570      	push	{r4, r5, r6, lr}
 80014ee:	460d      	mov	r5, r1
 80014f0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	460e      	mov	r6, r1
 80014f4:	1b73      	subs	r3, r6, r5
 80014f6:	429c      	cmp	r4, r3
 80014f8:	dc01      	bgt.n	80014fe <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80014fa:	4620      	mov	r0, r4
 80014fc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80014fe:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001502:	f7ff f8e5 	bl	80006d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	e7f5      	b.n	80014f4 <_write+0x8>

08001508 <_close>:

int _close(int file)
{
	return -1;
}
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	4770      	bx	lr

0800150e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800150e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001512:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001514:	604b      	str	r3, [r1, #4]
}
 8001516:	4770      	bx	lr

08001518 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001518:	2001      	movs	r0, #1
 800151a:	4770      	bx	lr

0800151c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800151c:	2000      	movs	r0, #0
 800151e:	4770      	bx	lr

08001520 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001520:	4a0b      	ldr	r2, [pc, #44]	; (8001550 <_sbrk+0x30>)
{
 8001522:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001524:	6811      	ldr	r1, [r2, #0]
{
 8001526:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001528:	b909      	cbnz	r1, 800152e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800152a:	490a      	ldr	r1, [pc, #40]	; (8001554 <_sbrk+0x34>)
 800152c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152e:	6810      	ldr	r0, [r2, #0]
 8001530:	4909      	ldr	r1, [pc, #36]	; (8001558 <_sbrk+0x38>)
 8001532:	4c0a      	ldr	r4, [pc, #40]	; (800155c <_sbrk+0x3c>)
 8001534:	4403      	add	r3, r0
 8001536:	1b09      	subs	r1, r1, r4
 8001538:	428b      	cmp	r3, r1
 800153a:	d906      	bls.n	800154a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800153c:	f01c fa96 	bl	801da6c <__errno>
 8001540:	230c      	movs	r3, #12
 8001542:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001544:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001548:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800154a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800154c:	e7fc      	b.n	8001548 <_sbrk+0x28>
 800154e:	bf00      	nop
 8001550:	240004a0 	.word	0x240004a0
 8001554:	24007740 	.word	0x24007740
 8001558:	24050000 	.word	0x24050000
 800155c:	00001000 	.word	0x00001000

08001560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001598 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001564:	f002 ff94 	bl	8004490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001568:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800156a:	e003      	b.n	8001574 <LoopCopyDataInit>

0800156c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800156e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001570:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001572:	3104      	adds	r1, #4

08001574 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001574:	480a      	ldr	r0, [pc, #40]	; (80015a0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001578:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800157a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800157c:	d3f6      	bcc.n	800156c <CopyDataInit>
  ldr  r2, =_sbss
 800157e:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001580:	e002      	b.n	8001588 <LoopFillZerobss>

08001582 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001582:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001584:	f842 3b04 	str.w	r3, [r2], #4

08001588 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800158a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800158c:	d3f9      	bcc.n	8001582 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800158e:	f01c fb7b 	bl	801dc88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001592:	f7ff f921 	bl	80007d8 <main>
  bx  lr    
 8001596:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001598:	24050000 	.word	0x24050000
  ldr  r3, =_sidata
 800159c:	0802117c 	.word	0x0802117c
  ldr  r0, =_sdata
 80015a0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80015a4:	240001b0 	.word	0x240001b0
  ldr  r2, =_sbss
 80015a8:	240001b0 	.word	0x240001b0
  ldr  r3, = _ebss
 80015ac:	24007740 	.word	0x24007740

080015b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b0:	e7fe      	b.n	80015b0 <ADC3_IRQHandler>

080015b2 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 80015b2:	4770      	bx	lr

080015b4 <MX_TouchGFX_Init>:
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 80015b4:	f000 bcd8 	b.w	8001f68 <touchgfx_init>

080015b8 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 80015b8:	f000 bd46 	b.w	8002048 <touchgfx_taskEntry>

080015bc <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 80015bc:	6840      	ldr	r0, [r0, #4]
    }
 80015be:	4770      	bx	lr

080015c0 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 80015c0:	6041      	str	r1, [r0, #4]
    }
 80015c2:	4770      	bx	lr

080015c4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
 80015c4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80015c8:	f8d2 3dfc 	ldr.w	r3, [r2, #3580]	; 0xdfc
 80015cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d0:	f8c2 3dfc 	str.w	r3, [r2, #3580]	; 0xdfc
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
 80015d6:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
 80015d8:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
 80015dc:	430a      	orrs	r2, r1
 80015de:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	f042 0201 	orr.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
}
 80015ea:	4770      	bx	lr
 80015ec:	e0001000 	.word	0xe0001000
 80015f0:	c5acce55 	.word	0xc5acce55

080015f4 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 80015f4:	1a51      	subs	r1, r2, r1
 80015f6:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
 80015fa:	fbb1 f0f3 	udiv	r0, r1, r3
 80015fe:	4770      	bx	lr

08001600 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
 8001600:	4b01      	ldr	r3, [pc, #4]	; (8001608 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
 8001602:	6858      	ldr	r0, [r3, #4]
}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e0001000 	.word	0xe0001000

0800160c <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
 800160c:	4770      	bx	lr

0800160e <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
 800160e:	b510      	push	{r4, lr}
 8001610:	4604      	mov	r4, r0
 8001612:	210c      	movs	r1, #12
 8001614:	f01c f9c9 	bl	801d9aa <_ZdlPvj>
 8001618:	4620      	mov	r0, r4
 800161a:	bd10      	pop	{r4, pc}

0800161c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
 800161c:	6803      	ldr	r3, [r0, #0]
{
 800161e:	b510      	push	{r4, lr}
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001620:	691b      	ldr	r3, [r3, #16]
{
 8001622:	4604      	mov	r4, r0
    if (active) //idle task sched out
 8001624:	b131      	cbz	r1, 8001634 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x18>
        uint32_t cc_temp = getCPUCycles() - cc_in;
 8001626:	4798      	blx	r3
 8001628:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
 800162a:	6863      	ldr	r3, [r4, #4]
 800162c:	1a9b      	subs	r3, r3, r2
 800162e:	4418      	add	r0, r3
 8001630:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001632:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
 8001634:	4798      	blx	r3
 8001636:	60a0      	str	r0, [r4, #8]
}
 8001638:	e7fb      	b.n	8001632 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x16>

0800163a <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800163a:	4770      	bx	lr

0800163c <_ZN20STM32TouchController4initEv>:
#include <stm32h735g_discovery_ts.h>
#include <TouchGFXHAL.hpp>
#include <cmsis_os.h>

void STM32TouchController::init()
{
 800163c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    TS_Init_t hTS;

    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
 800163e:	2308      	movs	r3, #8
 8001640:	2000      	movs	r0, #0
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
    BSP_TS_Init(0, &hTS);
 8001642:	4669      	mov	r1, sp
    hTS.Accuracy = 0;
 8001644:	e9cd 3002 	strd	r3, r0, [sp, #8]
    hTS.Width = touchgfx::HAL::FRAME_BUFFER_WIDTH;
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <_ZN20STM32TouchController4initEv+0x24>)
 800164a:	881b      	ldrh	r3, [r3, #0]
 800164c:	9300      	str	r3, [sp, #0]
    hTS.Height = touchgfx::HAL::FRAME_BUFFER_HEIGHT;
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <_ZN20STM32TouchController4initEv+0x28>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	9301      	str	r3, [sp, #4]
    BSP_TS_Init(0, &hTS);
 8001654:	f002 fe38 	bl	80042c8 <BSP_TS_Init>
}
 8001658:	b005      	add	sp, #20
 800165a:	f85d fb04 	ldr.w	pc, [sp], #4
 800165e:	bf00      	nop
 8001660:	240074b6 	.word	0x240074b6
 8001664:	240074b8 	.word	0x240074b8

08001668 <_ZN20STM32TouchControllerD0Ev>:
 8001668:	b510      	push	{r4, lr}
 800166a:	4604      	mov	r4, r0
 800166c:	2104      	movs	r1, #4
 800166e:	f01c f99c 	bl	801d9aa <_ZdlPvj>
 8001672:	4620      	mov	r0, r4
 8001674:	bd10      	pop	{r4, pc}

08001676 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001676:	b530      	push	{r4, r5, lr}
 8001678:	b085      	sub	sp, #20
    TS_State_t TS_State = { 0 };
 800167a:	2000      	movs	r0, #0
{
 800167c:	460d      	mov	r5, r1
 800167e:	4614      	mov	r4, r2

    /* This should never fail !! */
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001680:	a901      	add	r1, sp, #4
    TS_State_t TS_State = { 0 };
 8001682:	9003      	str	r0, [sp, #12]
 8001684:	e9cd 0001 	strd	r0, r0, [sp, #4]
    if (BSP_TS_GetState(0, &TS_State) != BSP_ERROR_NONE)
 8001688:	f002 fea0 	bl	80043cc <BSP_TS_GetState>
 800168c:	b140      	cbz	r0, 80016a0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
    {
        configASSERT(0);
 800169e:	e7fe      	b.n	800169e <_ZN20STM32TouchController11sampleTouchERlS0_+0x28>
    }

    if (TS_State.TouchDetected)
 80016a0:	9801      	ldr	r0, [sp, #4]
 80016a2:	b120      	cbz	r0, 80016ae <_ZN20STM32TouchController11sampleTouchERlS0_+0x38>
    {
        x = TS_State.TouchX;
 80016a4:	9b02      	ldr	r3, [sp, #8]
        y = TS_State.TouchY;

        return true;
 80016a6:	2001      	movs	r0, #1
        x = TS_State.TouchX;
 80016a8:	602b      	str	r3, [r5, #0]
        y = TS_State.TouchY;
 80016aa:	9b03      	ldr	r3, [sp, #12]
 80016ac:	6023      	str	r3, [r4, #0]
    }

    return false;
}
 80016ae:	b005      	add	sp, #20
 80016b0:	bd30      	pop	{r4, r5, pc}
	...

080016b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 80016b4:	2803      	cmp	r0, #3
 80016b6:	d825      	bhi.n	8001704 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 80016b8:	e8df f000 	tbb	[pc, r0]
 80016bc:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	fab2 f282 	clz	r2, r2
 80016cc:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80016ce:	f003 bad3 	b.w	8004c78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 80016d2:	4b0d      	ldr	r3, [pc, #52]	; (8001708 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80016d4:	2108      	movs	r1, #8
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	fab2 f282 	clz	r2, r2
 80016de:	0952      	lsrs	r2, r2, #5
 80016e0:	e7f5      	b.n	80016ce <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80016e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	fab2 f282 	clz	r2, r2
 80016ee:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 80016f0:	4808      	ldr	r0, [pc, #32]	; (8001714 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x60>)
 80016f2:	e7ec      	b.n	80016ce <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 80016f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	fab2 f282 	clz	r2, r2
 8001700:	0952      	lsrs	r2, r2, #5
 8001702:	e7f5      	b.n	80016f0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	240004a4 	.word	0x240004a4
 800170c:	58020000 	.word	0x58020000
 8001710:	58021800 	.word	0x58021800
 8001714:	58020400 	.word	0x58020400

08001718 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001718:	2803      	cmp	r0, #3
 800171a:	d825      	bhi.n	8001768 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 800171c:	e8df f000 	tbb	[pc, r0]
 8001720:	1c130b02 	.word	0x1c130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001724:	4b11      	ldr	r3, [pc, #68]	; (800176c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001726:	2101      	movs	r1, #1
 8001728:	4811      	ldr	r0, [pc, #68]	; (8001770 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	3a00      	subs	r2, #0
 800172e:	bf18      	it	ne
 8001730:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001732:	f003 baa1 	b.w	8004c78 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001736:	4b0d      	ldr	r3, [pc, #52]	; (800176c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001738:	2108      	movs	r1, #8
 800173a:	480e      	ldr	r0, [pc, #56]	; (8001774 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	3a00      	subs	r2, #0
 8001740:	bf18      	it	ne
 8001742:	2201      	movne	r2, #1
 8001744:	e7f5      	b.n	8001732 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	3a00      	subs	r2, #0
 8001750:	bf18      	it	ne
 8001752:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001754:	4808      	ldr	r0, [pc, #32]	; (8001778 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x60>)
 8001756:	e7ec      	b.n	8001732 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001758:	4b04      	ldr	r3, [pc, #16]	; (800176c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 800175a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	3a00      	subs	r2, #0
 8001762:	bf18      	it	ne
 8001764:	2201      	movne	r2, #1
 8001766:	e7f5      	b.n	8001754 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3c>
#endif
        break;
    }
}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	240004a4 	.word	0x240004a4
 8001770:	58020000 	.word	0x58020000
 8001774:	58021800 	.word	0x58021800
 8001778:	58020400 	.word	0x58020400

0800177c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 800177c:	2803      	cmp	r0, #3
 800177e:	d811      	bhi.n	80017a4 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001780:	e8df f000 	tbb	[pc, r0]
 8001784:	0d090602 	.word	0x0d090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001788:	2101      	movs	r1, #1
 800178a:	4807      	ldr	r0, [pc, #28]	; (80017a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800178c:	f003 ba79 	b.w	8004c82 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001790:	2108      	movs	r1, #8
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001794:	e7fa      	b.n	800178c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001796:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x34>)
 800179c:	e7f6      	b.n	800178c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800179e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a2:	e7fa      	b.n	800179a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1e>
#endif
        break;
    }
}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	58020000 	.word	0x58020000
 80017ac:	58021800 	.word	0x58021800
 80017b0:	58020400 	.word	0x58020400

080017b4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 80017b4:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 80017b6:	2803      	cmp	r0, #3
 80017b8:	d815      	bhi.n	80017e6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 80017ba:	e8df f000 	tbb	[pc, r0]
 80017be:	0a02      	.short	0x0a02
 80017c0:	110d      	.short	0x110d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80017c2:	2101      	movs	r1, #1
 80017c4:	4809      	ldr	r0, [pc, #36]	; (80017ec <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80017c6:	f003 fa51 	bl	8004c6c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 80017ca:	1e43      	subs	r3, r0, #1
 80017cc:	4258      	negs	r0, r3
 80017ce:	4158      	adcs	r0, r3
 80017d0:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 80017d2:	2108      	movs	r1, #8
 80017d4:	4806      	ldr	r0, [pc, #24]	; (80017f0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 80017d6:	e7f6      	b.n	80017c6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 80017d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x40>)
 80017de:	e7f2      	b.n	80017c6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 80017e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017e4:	e7fa      	b.n	80017dc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x28>
    switch (id)
 80017e6:	2000      	movs	r0, #0
 80017e8:	e7ef      	b.n	80017ca <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 80017ea:	bf00      	nop
 80017ec:	58020000 	.word	0x58020000
 80017f0:	58021800 	.word	0x58021800
 80017f4:	58020400 	.word	0x58020400

080017f8 <_ZN8touchgfx4GPIO4initEv>:
{
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	4d08      	ldr	r5, [pc, #32]	; (800181c <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80017fc:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80017fe:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001800:	b2e0      	uxtb	r0, r4
 8001802:	f7ff ffd7 	bl	80017b4 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001806:	b118      	cbz	r0, 8001810 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001808:	682b      	ldr	r3, [r5, #0]
 800180a:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 800180c:	bf18      	it	ne
 800180e:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001810:	3401      	adds	r4, #1
 8001812:	3504      	adds	r5, #4
 8001814:	2c05      	cmp	r4, #5
 8001816:	d1f3      	bne.n	8001800 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001818:	bd70      	pop	{r4, r5, r6, pc}
 800181a:	bf00      	nop
 800181c:	240004a4 	.word	0x240004a4

08001820 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001820:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001822:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001826:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
 800182a:	4770      	bx	lr

0800182c <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 800182c:	2000      	movs	r0, #0
 800182e:	4770      	bx	lr

08001830 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001830:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001832:	3900      	subs	r1, #0
 8001834:	4b02      	ldr	r3, [pc, #8]	; (8001840 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001836:	bf18      	it	ne
 8001838:	2101      	movne	r1, #1
 800183a:	7019      	strb	r1, [r3, #0]
    }
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	240074bb 	.word	0x240074bb

08001844 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001844:	2000      	movs	r0, #0
 8001846:	4770      	bx	lr

08001848 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001848:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800184a:	b10b      	cbz	r3, 8001850 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 800184c:	4608      	mov	r0, r1
 800184e:	4718      	bx	r3
        }
    }
 8001850:	4770      	bx	lr

08001852 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001852:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001856:	4770      	bx	lr

08001858 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001858:	6840      	ldr	r0, [r0, #4]
 800185a:	6803      	ldr	r3, [r0, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	4718      	bx	r3

08001860 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001860:	4770      	bx	lr
	...

08001864 <_ZN11TouchGFXHAL10initializeEv>:
#include "task.h"

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001864:	b538      	push	{r3, r4, r5, lr}
 8001866:	4604      	mov	r4, r0
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001868:	f000 fc96 	bl	8002198 <_ZN20TouchGFXGeneratedHAL10initializeEv>

    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0x700C0000);
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <_ZN11TouchGFXHAL10initializeEv+0x34>)
 800186e:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	4620      	mov	r0, r4
 8001876:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <_ZN11TouchGFXHAL10initializeEv+0x38>)
 800187c:	47a8      	blx	r5

    GPIO::init();
    instrumentation.init();
 800187e:	f104 057c 	add.w	r5, r4, #124	; 0x7c
    GPIO::init();
 8001882:	f7ff ffb9 	bl	80017f8 <_ZN8touchgfx4GPIO4initEv>
    instrumentation.init();
 8001886:	4628      	mov	r0, r5
 8001888:	f7ff fe9c 	bl	80015c4 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
 800188c:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 800188e:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001890:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    setMCUInstrumentation(&instrumentation);
    enableMCULoadCalculation(true);
}
 8001894:	bd38      	pop	{r3, r4, r5, pc}
 8001896:	bf00      	nop
 8001898:	70060000 	.word	0x70060000
 800189c:	700c0000 	.word	0x700c0000

080018a0 <_ZN11TouchGFXHAL9taskEntryEv>:

void TouchGFXHAL::taskEntry()
{
 80018a0:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
 80018a2:	6803      	ldr	r3, [r0, #0]
{
 80018a4:	4604      	mov	r4, r0
    enableLCDControllerInterrupt();
 80018a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018aa:	4798      	blx	r3
    enableInterrupts();
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	4620      	mov	r0, r4
 80018b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80018b2:	4798      	blx	r3

    OSWrappers::waitForVSync();
 80018b4:	f000 f92a 	bl	8001b0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	4620      	mov	r0, r4
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4798      	blx	r3

    /* Assert display enable LCD_DISP_CTRL pin */
    HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <_ZN11TouchGFXHAL9taskEntryEv+0x48>)
 80018c8:	f003 f9d6 	bl	8004c78 <HAL_GPIO_WritePin>
    /* Assert back light LCD_BL_CTRL pin */
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018d2:	4806      	ldr	r0, [pc, #24]	; (80018ec <_ZN11TouchGFXHAL9taskEntryEv+0x4c>)
 80018d4:	f003 f9d0 	bl	8004c78 <HAL_GPIO_WritePin>

    for (;;)
    {
        OSWrappers::waitForVSync();
 80018d8:	f000 f918 	bl	8001b0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	4620      	mov	r0, r4
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4798      	blx	r3
    for (;;)
 80018e4:	e7f8      	b.n	80018d8 <_ZN11TouchGFXHAL9taskEntryEv+0x38>
 80018e6:	bf00      	nop
 80018e8:	58020c00 	.word	0x58020c00
 80018ec:	58021800 	.word	0x58021800

080018f0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80018f0:	b510      	push	{r4, lr}
 80018f2:	4604      	mov	r4, r0
        swapFrameBuffers();
 80018f4:	f00f f8a2 	bl	8010a3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	4620      	mov	r0, r4
 80018fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
 8001900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001904:	4718      	bx	r3

08001906 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001906:	f000 bc39 	b.w	800217c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

0800190a <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 800190a:	f000 bc3d 	b.w	8002188 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
	...

08001910 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001910:	b570      	push	{r4, r5, r6, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001912:	f000 fc97 	bl	8002244 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001916:	4910      	ldr	r1, [pc, #64]	; (8001958 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x48>)
 8001918:	2300      	movs	r3, #0
 800191a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800191e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001922:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001926:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800192a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800192e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8001932:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001934:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001938:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800193a:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800193e:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8001940:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8001944:	d2f9      	bcs.n	800193a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2a>
    } while(sets-- != 0U);
 8001946:	3b20      	subs	r3, #32
 8001948:	f113 0f20 	cmn.w	r3, #32
 800194c:	d1f2      	bne.n	8001934 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x24>
 800194e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001952:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
 8001956:	bd70      	pop	{r4, r5, r6, pc}
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 800195c:	f000 bbea 	b.w	8002134 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001960 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001960:	f000 bc92 	b.w	8002288 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001964 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001964:	f000 bc7c 	b.w	8002260 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

08001968 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001968:	f000 bbee 	b.w	8002148 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

0800196c <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
 800196c:	f00e bace 	b.w	800ff0c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001970 <_ZN11TouchGFXHALD0Ev>:
 8001970:	b510      	push	{r4, lr}
 8001972:	4604      	mov	r4, r0
 8001974:	2188      	movs	r1, #136	; 0x88
 8001976:	f01c f818 	bl	801d9aa <_ZdlPvj>
 800197a:	4620      	mov	r0, r4
 800197c:	bd10      	pop	{r4, pc}

0800197e <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
 800197e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
 8001982:	b11b      	cbz	r3, 800198c <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
 8001984:	6840      	ldr	r0, [r0, #4]
 8001986:	6803      	ldr	r3, [r0, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4718      	bx	r3
    }
 800198c:	4618      	mov	r0, r3
 800198e:	4770      	bx	lr

08001990 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001990:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001994:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001996:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001998:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
            if (DISPLAY_ROTATION == rotate0)
 800199c:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 800199e:	428c      	cmp	r4, r1
 80019a0:	d009      	beq.n	80019b6 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80019a2:	b93a      	cbnz	r2, 80019b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019a4:	490a      	ldr	r1, [pc, #40]	; (80019d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019a6:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80019a8:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019aa:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80019ac:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80019ae:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019b0:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80019b2:	701a      	strb	r2, [r3, #0]
        }
    }
 80019b4:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80019b6:	2a00      	cmp	r2, #0
 80019b8:	d0fc      	beq.n	80019b4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019ba:	4a06      	ldr	r2, [pc, #24]	; (80019d4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80019bc:	4904      	ldr	r1, [pc, #16]	; (80019d0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019be:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80019c0:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80019c2:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80019c4:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80019c6:	2200      	movs	r2, #0
 80019c8:	e7f3      	b.n	80019b2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80019ca:	bf00      	nop
 80019cc:	240074b4 	.word	0x240074b4
 80019d0:	240074b2 	.word	0x240074b2
 80019d4:	240074b0 	.word	0x240074b0

080019d8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	460d      	mov	r5, r1
 80019dc:	4619      	mov	r1, r3
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80019de:	b935      	cbnz	r5, 80019ee <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x16>
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x30>)
 80019e2:	f240 21d2 	movw	r1, #722	; 0x2d2
 80019e6:	4a09      	ldr	r2, [pc, #36]	; (8001a0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x34>)
 80019e8:	4809      	ldr	r0, [pc, #36]	; (8001a10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x38>)
 80019ea:	f01c f80d 	bl	801da08 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80019ee:	e9c0 520f 	strd	r5, r2, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 80019f2:	3a00      	subs	r2, #0
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x3c>)
 80019f6:	bf18      	it	ne
 80019f8:	2201      	movne	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80019fc:	6803      	ldr	r3, [r0, #0]
    }
 80019fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setAnimationStorage(animationStorage);
 8001a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a06:	4718      	bx	r3
 8001a08:	0801ee58 	.word	0x0801ee58
 8001a0c:	0801ee90 	.word	0x0801ee90
 8001a10:	0801eede 	.word	0x0801eede
 8001a14:	240074ba 	.word	0x240074ba

08001a18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a18:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	428b      	cmp	r3, r1
 8001a20:	d803      	bhi.n	8001a2a <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001a22:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001a24:	881b      	ldrh	r3, [r3, #0]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d905      	bls.n	8001a36 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001a2c:	219e      	movs	r1, #158	; 0x9e
 8001a2e:	4a07      	ldr	r2, [pc, #28]	; (8001a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001a32:	f01b ffe9 	bl	801da08 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001a38:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001a3c:	801a      	strh	r2, [r3, #0]
    }
 8001a3e:	bd08      	pop	{r3, pc}
 8001a40:	240074b0 	.word	0x240074b0
 8001a44:	240074b2 	.word	0x240074b2
 8001a48:	0801ef23 	.word	0x0801ef23
 8001a4c:	0801ef86 	.word	0x0801ef86
 8001a50:	0801eede 	.word	0x0801eede
 8001a54:	240074b6 	.word	0x240074b6
 8001a58:	240074b8 	.word	0x240074b8

08001a5c <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001a5c:	4601      	mov	r1, r0
 8001a5e:	b508      	push	{r3, lr}
        return instance;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <IdleTaskHook+0x14>)
 8001a62:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001a64:	b101      	cbz	r1, 8001a68 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001a66:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001a68:	f00f f802 	bl	8010a70 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	bd08      	pop	{r3, pc}
 8001a70:	240074bc 	.word	0x240074bc

08001a74 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001a74:	2101      	movs	r1, #1
 8001a76:	2200      	movs	r2, #0
{
 8001a78:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001a7a:	4608      	mov	r0, r1
 8001a7c:	f007 fe93 	bl	80097a6 <osSemaphoreNew>
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8001a82:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001a84:	b928      	cbnz	r0, 8001a92 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8001a88:	2128      	movs	r1, #40	; 0x28
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001a8c:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8001a8e:	f01b ffbb 	bl	801da08 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2104      	movs	r1, #4
 8001a96:	2001      	movs	r0, #1
 8001a98:	f007 ff22 	bl	80098e0 <osMessageQueueNew>
 8001a9c:	4b07      	ldr	r3, [pc, #28]	; (8001abc <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8001a9e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001aa0:	b918      	cbnz	r0, 8001aaa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8001aa4:	212c      	movs	r1, #44	; 0x2c
 8001aa6:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8001aa8:	e7f0      	b.n	8001a8c <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8001aaa:	bd08      	pop	{r3, pc}
 8001aac:	240004b8 	.word	0x240004b8
 8001ab0:	0801f0a4 	.word	0x0801f0a4
 8001ab4:	0801f0ed 	.word	0x0801f0ed
 8001ab8:	0801f11c 	.word	0x0801f11c
 8001abc:	240004b4 	.word	0x240004b4
 8001ac0:	0801f16f 	.word	0x0801f16f

08001ac4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001ac4:	4b02      	ldr	r3, [pc, #8]	; (8001ad0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8001ac6:	f04f 31ff 	mov.w	r1, #4294967295
 8001aca:	6818      	ldr	r0, [r3, #0]
 8001acc:	f007 beb5 	b.w	800983a <osSemaphoreAcquire>
 8001ad0:	240004b8 	.word	0x240004b8

08001ad4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8001ad4:	4b01      	ldr	r3, [pc, #4]	; (8001adc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8001ad6:	6818      	ldr	r0, [r3, #0]
 8001ad8:	f007 beda 	b.w	8009890 <osSemaphoreRelease>
 8001adc:	240004b8 	.word	0x240004b8

08001ae0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	f007 bea8 	b.w	800983a <osSemaphoreAcquire>
 8001aea:	bf00      	nop
 8001aec:	240004b8 	.word	0x240004b8

08001af0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 8001af0:	f7ff bff0 	b.w	8001ad4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08001af4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001af4:	2300      	movs	r3, #0
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8001af8:	4903      	ldr	r1, [pc, #12]	; (8001b08 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8001afa:	461a      	mov	r2, r3
 8001afc:	6800      	ldr	r0, [r0, #0]
 8001afe:	f007 bf2a 	b.w	8009956 <osMessageQueuePut>
 8001b02:	bf00      	nop
 8001b04:	240004b4 	.word	0x240004b4
 8001b08:	24000004 	.word	0x24000004

08001b0c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001b0c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	4c07      	ldr	r4, [pc, #28]	; (8001b30 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8001b12:	a901      	add	r1, sp, #4
 8001b14:	461a      	mov	r2, r3
 8001b16:	6820      	ldr	r0, [r4, #0]
 8001b18:	f007 ff4d 	bl	80099b6 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b20:	2200      	movs	r2, #0
 8001b22:	a901      	add	r1, sp, #4
 8001b24:	6820      	ldr	r0, [r4, #0]
 8001b26:	f007 ff46 	bl	80099b6 <osMessageQueueGet>
}
 8001b2a:	b002      	add	sp, #8
 8001b2c:	bd10      	pop	{r4, pc}
 8001b2e:	bf00      	nop
 8001b30:	240004b4 	.word	0x240004b4

08001b34 <_ZN8touchgfx13DMA_Interface5flushEv>:
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
    {
        waitForFrameBufferSemaphore();
 8001b34:	6803      	ldr	r3, [r0, #0]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	4718      	bx	r3

08001b3a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	4770      	bx	lr

08001b3e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
    {
        executeCompleted();
 8001b3e:	6803      	ldr	r3, [r0, #0]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	4718      	bx	r3

08001b44 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8001b44:	f240 30ef 	movw	r0, #1007	; 0x3ef
 8001b48:	4770      	bx	lr
	...

08001b4c <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b52:	6003      	str	r3, [r0, #0]
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <_ZN8STM32DMAD1Ev+0x1c>)
 8001b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8001b5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001b5e:	f3bf 8f6f 	isb	sy
}
 8001b62:	4770      	bx	lr
 8001b64:	0801f314 	.word	0x0801f314
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	4604      	mov	r4, r0
}
 8001b70:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8001b74:	f7ff ffea 	bl	8001b4c <_ZN8STM32DMAD1Ev>
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f01b ff16 	bl	801d9aa <_ZdlPvj>
 8001b7e:	4620      	mov	r0, r4
 8001b80:	bd10      	pop	{r4, pc}
	...

08001b84 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <_ZN8STM32DMA10initializeEv+0x40>)
{
 8001b86:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001b88:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001b8c:	f042 0210 	orr.w	r2, r2, #16
 8001b90:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001b94:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8001b98:	f002 0210 	and.w	r2, r2, #16
 8001b9c:	9201      	str	r2, [sp, #4]
 8001b9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8001ba0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ba2:	f042 0210 	orr.w	r2, r2, #16
 8001ba6:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8001ba8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001baa:	f022 0210 	bic.w	r2, r2, #16
 8001bae:	67da      	str	r2, [r3, #124]	; 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8001bb0:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <_ZN8STM32DMA10initializeEv+0x44>)
 8001bb2:	4a06      	ldr	r2, [pc, #24]	; (8001bcc <_ZN8STM32DMA10initializeEv+0x48>)
 8001bb4:	621a      	str	r2, [r3, #32]
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <_ZN8STM32DMA10initializeEv+0x4c>)
 8001bb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bbc:	609a      	str	r2, [r3, #8]
}
 8001bbe:	b002      	add	sp, #8
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	240001f8 	.word	0x240001f8
 8001bcc:	08001bd5 	.word	0x08001bd5
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <DMA2D_XferCpltCallback>:
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <DMA2D_XferCpltCallback+0xc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8001bda:	6803      	ldr	r3, [r0, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	4718      	bx	r3
 8001be0:	240074bc 	.word	0x240074bc

08001be4 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8001be8:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <_ZN8STM32DMAC1Ev+0x30>)
 8001bea:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8001bec:	2600      	movs	r6, #0
 8001bee:	4625      	mov	r5, r4
 8001bf0:	2260      	movs	r2, #96	; 0x60
 8001bf2:	6060      	str	r0, [r4, #4]
 8001bf4:	7226      	strb	r6, [r4, #8]
 8001bf6:	7266      	strb	r6, [r4, #9]
 8001bf8:	f845 3b20 	str.w	r3, [r5], #32
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f00f f873 	bl	8010ce8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8001c02:	f504 635a 	add.w	r3, r4, #3488	; 0xda0
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
        : color(0)
 8001c06:	60ee      	str	r6, [r5, #12]
 8001c08:	3524      	adds	r5, #36	; 0x24
 8001c0a:	42ab      	cmp	r3, r5
 8001c0c:	d1fb      	bne.n	8001c06 <_ZN8STM32DMAC1Ev+0x22>
}
 8001c0e:	4620      	mov	r0, r4
 8001c10:	bd70      	pop	{r4, r5, r6, pc}
 8001c12:	bf00      	nop
 8001c14:	0801f314 	.word	0x0801f314

08001c18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001c18:	b508      	push	{r3, lr}
    switch (format)
 8001c1a:	290b      	cmp	r1, #11
 8001c1c:	d80b      	bhi.n	8001c36 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1e>
 8001c1e:	e8df f001 	tbb	[pc, r1]
 8001c22:	0612      	.short	0x0612
 8001c24:	0a0a0a10 	.word	0x0a0a0a10
 8001c28:	0808080a 	.word	0x0808080a
 8001c2c:	0808      	.short	0x0808
 8001c2e:	2001      	movs	r0, #1
}
 8001c30:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8001c32:	2005      	movs	r0, #5
        break;
 8001c34:	e7fc      	b.n	8001c30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        assert(0 && "Unsupported Format!");
 8001c36:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001c38:	2166      	movs	r1, #102	; 0x66
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x3c>)
 8001c3e:	f01b fee3 	bl	801da08 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8001c42:	2000      	movs	r0, #0
 8001c44:	e7f4      	b.n	8001c30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8001c46:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001c48:	e7f2      	b.n	8001c30 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001c4a:	bf00      	nop
 8001c4c:	0801f1b1 	.word	0x0801f1b1
 8001c50:	0801f1cc 	.word	0x0801f1cc
 8001c54:	0801f216 	.word	0x0801f216

08001c58 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:
{
 8001c58:	b508      	push	{r3, lr}
    switch (format)
 8001c5a:	290a      	cmp	r1, #10
 8001c5c:	d809      	bhi.n	8001c72 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1a>
 8001c5e:	e8df f001 	tbb	[pc, r1]
 8001c62:	0610      	.short	0x0610
 8001c64:	0808080e 	.word	0x0808080e
 8001c68:	06060608 	.word	0x06060608
 8001c6c:	06          	.byte	0x06
 8001c6d:	00          	.byte	0x00
 8001c6e:	2001      	movs	r0, #1
}
 8001c70:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8001c72:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x30>)
 8001c74:	2187      	movs	r1, #135	; 0x87
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x34>)
 8001c78:	4805      	ldr	r0, [pc, #20]	; (8001c90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x38>)
 8001c7a:	f01b fec5 	bl	801da08 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8001c7e:	2000      	movs	r0, #0
 8001c80:	e7f6      	b.n	8001c70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8001c82:	2002      	movs	r0, #2
    return dma2dColorMode;
 8001c84:	e7f4      	b.n	8001c70 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x18>
 8001c86:	bf00      	nop
 8001c88:	0801f1b1 	.word	0x0801f1b1
 8001c8c:	0801f267 	.word	0x0801f267
 8001c90:	0801f216 	.word	0x0801f216

08001c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8001c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c98:	7f4f      	ldrb	r7, [r1, #29]
{
 8001c9a:	460c      	mov	r4, r1
 8001c9c:	4681      	mov	r9, r0
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001c9e:	4639      	mov	r1, r7
 8001ca0:	f7ff ffba 	bl	8001c18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001ca4:	f894 801e 	ldrb.w	r8, [r4, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8001ca8:	4605      	mov	r5, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001caa:	4648      	mov	r0, r9
 8001cac:	4641      	mov	r1, r8
 8001cae:	f7ff ffb3 	bl	8001c18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cb2:	4641      	mov	r1, r8
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cb4:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001cb6:	4648      	mov	r0, r9
 8001cb8:	f7ff ffce 	bl	8001c58 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001cbc:	8aa1      	ldrh	r1, [r4, #20]
 8001cbe:	8b62      	ldrh	r2, [r4, #26]
 8001cc0:	4b42      	ldr	r3, [pc, #264]	; (8001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001cc2:	1a52      	subs	r2, r2, r1
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001cc6:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8001cc8:	8b22      	ldrh	r2, [r4, #24]
 8001cca:	1a52      	subs	r2, r2, r1
 8001ccc:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001cce:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001cd0:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001cd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cd6:	6920      	ldr	r0, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001cda:	6862      	ldr	r2, [r4, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001cdc:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8001cde:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 8001ce0:	6821      	ldr	r1, [r4, #0]
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ce2:	f894 c01c 	ldrb.w	ip, [r4, #28]
    switch (blitOp.operation)
 8001ce6:	2980      	cmp	r1, #128	; 0x80
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001ce8:	ea4f 620c 	mov.w	r2, ip, lsl #24
    switch (blitOp.operation)
 8001cec:	d026      	beq.n	8001d3c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 8001cee:	d810      	bhi.n	8001d12 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7e>
 8001cf0:	2920      	cmp	r1, #32
 8001cf2:	ea45 0402 	orr.w	r4, r5, r2
 8001cf6:	d062      	beq.n	8001dbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001cf8:	2940      	cmp	r1, #64	; 0x40
 8001cfa:	d060      	beq.n	8001dbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
 8001cfc:	2904      	cmp	r1, #4
 8001cfe:	d05e      	beq.n	8001dbe <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
        break;
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d00:	432a      	orrs	r2, r5
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d04:	4547      	cmp	r7, r8
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d0a:	61da      	str	r2, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8001d0c:	d05b      	beq.n	8001dc6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8001d0e:	4a30      	ldr	r2, [pc, #192]	; (8001dd0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13c>)
 8001d10:	e040      	b.n	8001d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8001d12:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001d16:	d007      	beq.n	8001d28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x94>
 8001d18:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001d1c:	d1f0      	bne.n	8001d00 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d1e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d22:	f042 0209 	orr.w	r2, r2, #9
 8001d26:	e003      	b.n	8001d30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d28:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d2c:	f042 020a 	orr.w	r2, r2, #10
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d30:	61da      	str	r2, [r3, #28]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
 8001d32:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001d34:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001d36:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d38:	6158      	str	r0, [r3, #20]
 8001d3a:	e02a      	b.n	8001d92 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d3c:	432a      	orrs	r2, r5
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8001d3e:	68a4      	ldr	r4, [r4, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001d40:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d44:	61da      	str	r2, [r3, #28]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001d46:	1d22      	adds	r2, r4, #4
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001d48:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001d4a:	6158      	str	r0, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8001d4e:	7822      	ldrb	r2, [r4, #0]
 8001d50:	b142      	cbz	r2, 8001d64 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8001d52:	2a01      	cmp	r2, #1
 8001d54:	d021      	beq.n	8001d9a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8001d56:	4b1f      	ldr	r3, [pc, #124]	; (8001dd4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x140>)
 8001d58:	f240 1101 	movw	r1, #257	; 0x101
 8001d5c:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8001d5e:	481f      	ldr	r0, [pc, #124]	; (8001ddc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8001d60:	f01b fe52 	bl	801da08 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d64:	69da      	ldr	r2, [r3, #28]
            bool blend = true;
 8001d66:	2001      	movs	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d68:	8861      	ldrh	r1, [r4, #2]
 8001d6a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001d6e:	3901      	subs	r1, #1
 8001d70:	f022 0210 	bic.w	r2, r2, #16
 8001d74:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001d78:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x138>)
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	f042 0220 	orr.w	r2, r2, #32
 8001d82:	61da      	str	r2, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8001d84:	69da      	ldr	r2, [r3, #28]
 8001d86:	0692      	lsls	r2, r2, #26
 8001d88:	d4fc      	bmi.n	8001d84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	609a      	str	r2, [r3, #8]
            if(blend)
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d0bd      	beq.n	8001d0e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7a>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
        }
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001d94:	601a      	str	r2, [r3, #0]
        }

        break;
    }
}
 8001d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001d9a:	8862      	ldrh	r2, [r4, #2]
                if(blitOp.alpha == 255)
 8001d9c:	f1bc 00ff 	subs.w	r0, ip, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001da0:	69d9      	ldr	r1, [r3, #28]
 8001da2:	f102 34ff 	add.w	r4, r2, #4294967295
                if(blitOp.alpha == 255)
 8001da6:	bf18      	it	ne
 8001da8:	2001      	movne	r0, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8001daa:	f421 427f 	bic.w	r2, r1, #65280	; 0xff00
 8001dae:	f022 0210 	bic.w	r2, r2, #16
 8001db2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001db6:	f042 0210 	orr.w	r2, r2, #16
 8001dba:	61da      	str	r2, [r3, #28]
                break;
 8001dbc:	e7dd      	b.n	8001d7a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8001dbe:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8001dc2:	61dc      	str	r4, [r3, #28]
 8001dc4:	e7b7      	b.n	8001d36 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 8001dc6:	f240 2201 	movw	r2, #513	; 0x201
 8001dca:	e7e3      	b.n	8001d94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8001dcc:	52001000 	.word	0x52001000
 8001dd0:	00010201 	.word	0x00010201
 8001dd4:	0801f2b2 	.word	0x0801f2b2
 8001dd8:	0801f2cc 	.word	0x0801f2cc
 8001ddc:	0801f216 	.word	0x0801f216
 8001de0:	00020201 	.word	0x00020201

08001de4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8001de8:	7f89      	ldrb	r1, [r1, #30]
 8001dea:	f7ff ff35 	bl	8001c58 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001df0:	8aa5      	ldrh	r5, [r4, #20]
 8001df2:	8ae1      	ldrh	r1, [r4, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001df4:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001df6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8001dfa:	6358      	str	r0, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001dfc:	1b52      	subs	r2, r2, r5
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8001dfe:	6459      	str	r1, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e00:	6921      	ldr	r1, [r4, #16]
 8001e02:	63d9      	str	r1, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8001e06:	6826      	ldr	r6, [r4, #0]
 8001e08:	68e5      	ldr	r5, [r4, #12]
 8001e0a:	2e08      	cmp	r6, #8
 8001e0c:	d10d      	bne.n	8001e2a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e0e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8001e10:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8001e12:	6258      	str	r0, [r3, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8001e14:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8001e16:	7f20      	ldrb	r0, [r4, #28]
 8001e18:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001e1c:	61da      	str	r2, [r3, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8001e1e:	4a08      	ldr	r2, [pc, #32]	; (8001e40 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8001e20:	621d      	str	r5, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e22:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8001e24:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e26:	601a      	str	r2, [r3, #0]
    }
}
 8001e28:	bd70      	pop	{r4, r5, r6, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8001e2a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8001e2c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8001e2e:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8001e32:	639d      	str	r5, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8001e34:	e7f7      	b.n	8001e26 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8001e36:	bf00      	nop
 8001e38:	52001000 	.word	0x52001000
 8001e3c:	00010009 	.word	0x00010009
 8001e40:	00020201 	.word	0x00020201
 8001e44:	00030201 	.word	0x00030201

08001e48 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8001e48:	2001      	movs	r0, #1
 8001e4a:	4770      	bx	lr

08001e4c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8001e4c:	200c      	movs	r0, #12
 8001e4e:	4770      	bx	lr

08001e50 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8001e50:	230c      	movs	r3, #12
 8001e52:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e56:	3008      	adds	r0, #8
 8001e58:	4770      	bx	lr

08001e5a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8001e5a:	230c      	movs	r3, #12
 8001e5c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e60:	3008      	adds	r0, #8
 8001e62:	4770      	bx	lr

08001e64 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001e64:	2001      	movs	r0, #1
 8001e66:	4770      	bx	lr

08001e68 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001e68:	20e0      	movs	r0, #224	; 0xe0
 8001e6a:	4770      	bx	lr

08001e6c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e6c:	23e0      	movs	r3, #224	; 0xe0
 8001e6e:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e72:	3008      	adds	r0, #8
 8001e74:	4770      	bx	lr

08001e76 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e76:	23e0      	movs	r3, #224	; 0xe0
 8001e78:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8001e7c:	3008      	adds	r0, #8
 8001e7e:	4770      	bx	lr

08001e80 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8001e80:	2001      	movs	r0, #1
 8001e82:	4770      	bx	lr

08001e84 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8001e84:	2010      	movs	r0, #16
 8001e86:	4770      	bx	lr

08001e88 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e88:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001e8c:	3008      	adds	r0, #8
 8001e8e:	4770      	bx	lr

08001e90 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8001e90:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8001e94:	3008      	adds	r0, #8
 8001e96:	4770      	bx	lr

08001e98 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8001e98:	4608      	mov	r0, r1
 8001e9a:	f000 bd47 	b.w	800292c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
	...

08001ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8001ea0:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001ea2:	b510      	push	{r4, lr}
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	6003      	str	r3, [r0, #0]
 8001ea8:	f00d fd7d 	bl	800f9a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001eac:	4620      	mov	r0, r4
 8001eae:	bd10      	pop	{r4, pc}
 8001eb0:	0801f3cc 	.word	0x0801f3cc

08001eb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001eb4:	b510      	push	{r4, lr}
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	f7ff fff2 	bl	8001ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ebc:	2114      	movs	r1, #20
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f01b fd73 	bl	801d9aa <_ZdlPvj>
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	bd10      	pop	{r4, pc}

08001ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001ec8:	4b03      	ldr	r3, [pc, #12]	; (8001ed8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001eca:	b510      	push	{r4, lr}
 8001ecc:	4604      	mov	r4, r0
 8001ece:	6003      	str	r3, [r0, #0]
 8001ed0:	f00d fd69 	bl	800f9a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	bd10      	pop	{r4, pc}
 8001ed8:	0801f398 	.word	0x0801f398

08001edc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001edc:	b510      	push	{r4, lr}
 8001ede:	4604      	mov	r4, r0
 8001ee0:	f7ff fff2 	bl	8001ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001ee4:	21e8      	movs	r1, #232	; 0xe8
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f01b fd5f 	bl	801d9aa <_ZdlPvj>
 8001eec:	4620      	mov	r0, r4
 8001eee:	bd10      	pop	{r4, pc}

08001ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8001ef2:	b510      	push	{r4, lr}
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	6003      	str	r3, [r0, #0]
 8001ef8:	f00d fd55 	bl	800f9a6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8001efc:	4620      	mov	r0, r4
 8001efe:	bd10      	pop	{r4, pc}
 8001f00:	0801f364 	.word	0x0801f364

08001f04 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8001f04:	b510      	push	{r4, lr}
 8001f06:	4604      	mov	r4, r0
 8001f08:	f7ff fff2 	bl	8001ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f0c:	2118      	movs	r1, #24
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f01b fd4b 	bl	801d9aa <_ZdlPvj>
 8001f14:	4620      	mov	r0, r4
 8001f16:	bd10      	pop	{r4, pc}

08001f18 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_ZN12FrontendHeapD1Ev+0x24>)
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	6003      	str	r3, [r0, #0]
 8001f20:	f500 708a 	add.w	r0, r0, #276	; 0x114
 8001f24:	f7ff ffbc 	bl	8001ea0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f28:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8001f2c:	f7ff ffcc 	bl	8001ec8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f30:	f104 0014 	add.w	r0, r4, #20
 8001f34:	f7ff ffdc 	bl	8001ef0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8001f38:	4620      	mov	r0, r4
 8001f3a:	bd10      	pop	{r4, pc}
 8001f3c:	0801f400 	.word	0x0801f400

08001f40 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8001f40:	b508      	push	{r3, lr}
 8001f42:	4802      	ldr	r0, [pc, #8]	; (8001f4c <__tcf_0+0xc>)
 8001f44:	f7ff ffe8 	bl	8001f18 <_ZN12FrontendHeapD1Ev>
 8001f48:	bd08      	pop	{r3, pc}
 8001f4a:	bf00      	nop
 8001f4c:	240004c0 	.word	0x240004c0

08001f50 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8001f50:	b510      	push	{r4, lr}
 8001f52:	4604      	mov	r4, r0
 8001f54:	f7ff ffe0 	bl	8001f18 <_ZN12FrontendHeapD1Ev>
 8001f58:	f44f 7121 	mov.w	r1, #644	; 0x284
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f01b fd24 	bl	801d9aa <_ZdlPvj>
 8001f62:	4620      	mov	r0, r4
 8001f64:	bd10      	pop	{r4, pc}
	...

08001f68 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8001f68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8001f6c:	f000 fb6a 	bl	8002644 <_ZN14BitmapDatabase11getInstanceEv>
 8001f70:	2400      	movs	r4, #0
 8001f72:	4605      	mov	r5, r0
 8001f74:	f000 fb6a 	bl	800264c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8001f78:	4623      	mov	r3, r4
 8001f7a:	4601      	mov	r1, r0
 8001f7c:	4622      	mov	r2, r4
 8001f7e:	4628      	mov	r0, r5
 8001f80:	9400      	str	r4, [sp, #0]
 8001f82:	f013 fc6f 	bl	8015864 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8001f86:	4b25      	ldr	r3, [pc, #148]	; (800201c <touchgfx_init+0xb4>)
 8001f88:	4a25      	ldr	r2, [pc, #148]	; (8002020 <touchgfx_init+0xb8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8001f8a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8001f8c:	4d25      	ldr	r5, [pc, #148]	; (8002024 <touchgfx_init+0xbc>)
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f000 ff56 	bl	8002e40 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8001f94:	4824      	ldr	r0, [pc, #144]	; (8002028 <touchgfx_init+0xc0>)
 8001f96:	f013 fb1d 	bl	80155d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8001f9a:	782b      	ldrb	r3, [r5, #0]
 8001f9c:	f3bf 8f5b 	dmb	ish
 8001fa0:	07db      	lsls	r3, r3, #31
 8001fa2:	d435      	bmi.n	8002010 <touchgfx_init+0xa8>
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f01b fd02 	bl	801d9ae <__cxa_guard_acquire>
 8001faa:	b388      	cbz	r0, 8002010 <touchgfx_init+0xa8>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8001fac:	4c1f      	ldr	r4, [pc, #124]	; (800202c <touchgfx_init+0xc4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <touchgfx_init+0xc8>)
 8001fb0:	f504 7696 	add.w	r6, r4, #300	; 0x12c
 8001fb4:	f104 0014 	add.w	r0, r4, #20
 8001fb8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8001fbc:	f504 778a 	add.w	r7, r4, #276	; 0x114
 8001fc0:	6023      	str	r3, [r4, #0]
 8001fc2:	6060      	str	r0, [r4, #4]
 8001fc4:	f8c4 8008 	str.w	r8, [r4, #8]
 8001fc8:	60e7      	str	r7, [r4, #12]
 8001fca:	6126      	str	r6, [r4, #16]
 8001fcc:	f00d fcec 	bl	800f9a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <touchgfx_init+0xcc>)
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	6163      	str	r3, [r4, #20]
 8001fd6:	f00d fce7 	bl	800f9a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <touchgfx_init+0xd0>)
 8001fdc:	4638      	mov	r0, r7
 8001fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fe0:	f00d fce2 	bl	800f9a8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <touchgfx_init+0xd4>)
 8001fe6:	f504 7094 	add.w	r0, r4, #296	; 0x128
 8001fea:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8001fee:	f000 ffa3 	bl	8002f38 <_ZN5ModelC1Ev>
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	f504 7194 	add.w	r1, r4, #296	; 0x128
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	f000 ff93 	bl	8002f24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8001ffe:	4630      	mov	r0, r6
 8002000:	f000 fc94 	bl	800292c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 8002004:	480e      	ldr	r0, [pc, #56]	; (8002040 <touchgfx_init+0xd8>)
 8002006:	f01b fd1d 	bl	801da44 <atexit>
 800200a:	4628      	mov	r0, r5
 800200c:	f01b fcdb 	bl	801d9c6 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <touchgfx_init+0xdc>)
}
 8002012:	b002      	add	sp, #8
 8002014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 8002018:	f7ff bc24 	b.w	8001864 <_ZN11TouchGFXHAL10initializeEv>
 800201c:	24007518 	.word	0x24007518
 8002020:	24001570 	.word	0x24001570
 8002024:	240004bc 	.word	0x240004bc
 8002028:	24000008 	.word	0x24000008
 800202c:	240004c0 	.word	0x240004c0
 8002030:	0801f400 	.word	0x0801f400
 8002034:	0801f364 	.word	0x0801f364
 8002038:	0801f398 	.word	0x0801f398
 800203c:	0801f3cc 	.word	0x0801f3cc
 8002040:	08001f41 	.word	0x08001f41
 8002044:	240014e8 	.word	0x240014e8

08002048 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8002048:	4801      	ldr	r0, [pc, #4]	; (8002050 <touchgfx_taskEntry+0x8>)
 800204a:	f7ff bc29 	b.w	80018a0 <_ZN11TouchGFXHAL9taskEntryEv>
 800204e:	bf00      	nop
 8002050:	240014e8 	.word	0x240014e8

08002054 <_GLOBAL__sub_I_touchgfx_init>:
}
 8002054:	b570      	push	{r4, r5, r6, lr}
static STM32DMA dma;
 8002056:	4e26      	ldr	r6, [pc, #152]	; (80020f0 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
{
public:

    STM32TouchController() {}
 8002058:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
 800205a:	4c27      	ldr	r4, [pc, #156]	; (80020f8 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
 800205c:	4630      	mov	r0, r6
static LCD24bpp display;
 800205e:	4d27      	ldr	r5, [pc, #156]	; (80020fc <_GLOBAL__sub_I_touchgfx_init+0xa8>)
 8002060:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
 8002062:	f7ff fdbf 	bl	8001be4 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8002066:	4628      	mov	r0, r5
 8002068:	f015 fdca 	bl	8017c00 <_ZN8touchgfx8LCD24bppC1Ev>
          lastRenderMethod(HARDWARE)
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <_GLOBAL__sub_I_touchgfx_init+0xac>)
 800206e:	2200      	movs	r2, #0
 8002070:	f44f 7180 	mov.w	r1, #256	; 0x100
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002074:	4823      	ldr	r0, [pc, #140]	; (8002104 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8002076:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
 8002078:	661a      	str	r2, [r3, #96]	; 0x60
 800207a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800207e:	671a      	str	r2, [r3, #112]	; 0x70
 8002080:	60dc      	str	r4, [r3, #12]
 8002082:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
 8002086:	4920      	ldr	r1, [pc, #128]	; (8002108 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
 8002088:	e9c3 1219 	strd	r1, r2, [r3, #100]	; 0x64
 800208c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8002090:	6759      	str	r1, [r3, #116]	; 0x74
 8002092:	2101      	movs	r1, #1
 8002094:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
        instance = this;
 8002098:	491c      	ldr	r1, [pc, #112]	; (800210c <_GLOBAL__sub_I_touchgfx_init+0xb8>)
 800209a:	600b      	str	r3, [r1, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 800209c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80020a0:	8001      	strh	r1, [r0, #0]
 80020a2:	481b      	ldr	r0, [pc, #108]	; (8002110 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
 80020a4:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80020a6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80020aa:	481a      	ldr	r0, [pc, #104]	; (8002114 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
          lastRenderMethod(HARDWARE)
 80020ac:	e9c3 2204 	strd	r2, r2, [r3, #16]
 80020b0:	e9c3 2206 	strd	r2, r2, [r3, #24]
 80020b4:	e9c3 2208 	strd	r2, r2, [r3, #32]
 80020b8:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
 80020bc:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
 80020c0:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80020c4:	e9c3 2214 	strd	r2, r2, [r3, #80]	; 0x50
 80020c8:	e9c3 2216 	strd	r2, r2, [r3, #88]	; 0x58
 80020cc:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80020d0:	8001      	strh	r1, [r0, #0]
 80020d2:	4811      	ldr	r0, [pc, #68]	; (8002118 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          cc_in(0)
 80020d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80020d8:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
 80020da:	4910      	ldr	r1, [pc, #64]	; (800211c <_GLOBAL__sub_I_touchgfx_init+0xc8>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80020dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        DISPLAY_ROTATION = rotate0;
 80020e0:	700a      	strb	r2, [r1, #0]
 80020e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80020e6:	490e      	ldr	r1, [pc, #56]	; (8002120 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
 80020ea:	6019      	str	r1, [r3, #0]
 80020ec:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80020ee:	bd70      	pop	{r4, r5, r6, pc}
 80020f0:	24000748 	.word	0x24000748
 80020f4:	0801ee48 	.word	0x0801ee48
 80020f8:	24000744 	.word	0x24000744
 80020fc:	24001574 	.word	0x24001574
 8002100:	240014e8 	.word	0x240014e8
 8002104:	240074b0 	.word	0x240074b0
 8002108:	01000001 	.word	0x01000001
 800210c:	240074bc 	.word	0x240074bc
 8002110:	240074b6 	.word	0x240074b6
 8002114:	240074b2 	.word	0x240074b2
 8002118:	240074b8 	.word	0x240074b8
 800211c:	240074b4 	.word	0x240074b4
 8002120:	0801efd4 	.word	0x0801efd4
 8002124:	0801ee20 	.word	0x0801ee20

08002128 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8002128:	4801      	ldr	r0, [pc, #4]	; (8002130 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800212a:	f7ff bd0f 	b.w	8001b4c <_ZN8STM32DMAD1Ev>
 800212e:	bf00      	nop
 8002130:	24000748 	.word	0x24000748

08002134 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002134:	4b03      	ldr	r3, [pc, #12]	; (8002144 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
 8002136:	2290      	movs	r2, #144	; 0x90
 8002138:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
 800213c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
 800214a:	490a      	ldr	r1, [pc, #40]	; (8002174 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
 800214c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800214e:	480a      	ldr	r0, [pc, #40]	; (8002178 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8002150:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002154:	3b01      	subs	r3, #1
 8002156:	b29b      	uxth	r3, r3
 8002158:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 800215a:	6911      	ldr	r1, [r2, #16]
 800215c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8002160:	3901      	subs	r1, #1
 8002162:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8002166:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800216e:	4770      	bx	lr
 8002170:	50001000 	.word	0x50001000
 8002174:	240015d0 	.word	0x240015d0
 8002178:	240015ce 	.word	0x240015ce

0800217c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    HAL::endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
 800217c:	4b01      	ldr	r3, [pc, #4]	; (8002184 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
 800217e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
 8002182:	4770      	bx	lr
 8002184:	50001000 	.word	0x50001000

08002188 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8002188:	4b02      	ldr	r3, [pc, #8]	; (8002194 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 800218a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 800218c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8002190:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002192:	4770      	bx	lr
 8002194:	50001000 	.word	0x50001000

08002198 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8002198:	b570      	push	{r4, r5, r6, lr}
 800219a:	4604      	mov	r4, r0
    HAL::initialize();
 800219c:	f00d ff0b 	bl	800ffb6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80021a4:	f010 fec4 	bl	8012f30 <_ZN8touchgfx11Application11getInstanceEv>
 80021a8:	4601      	mov	r1, r0
 80021aa:	4620      	mov	r0, r4
 80021ac:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	4620      	mov	r0, r4
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x30>)
 80021b4:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 80021b8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 80021bc:	2300      	movs	r3, #0
 80021be:	46ac      	mov	ip, r5
}
 80021c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    setFrameBufferStartAddresses((void*)0x70000000, (void*)0x70060000, (void*)0);
 80021c4:	4760      	bx	ip
 80021c6:	bf00      	nop
 80021c8:	70060000 	.word	0x70060000

080021cc <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
 80021cc:	f00d beda 	b.w	800ff84 <_ZN8touchgfx3HAL10beginFrameEv>

080021d0 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
 80021d0:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
 80021d4:	b113      	cbz	r3, 80021dc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xc>
        refreshRequested = true;
 80021d6:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x10>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
    HAL::endFrame();
 80021dc:	f00d bede 	b.w	800ff9c <_ZN8touchgfx3HAL8endFrameEv>
 80021e0:	240015cc 	.word	0x240015cc

080021e4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
    }
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80021e4:	f00d bff3 	b.w	80101ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080021e8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>:
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80021e8:	4910      	ldr	r1, [pc, #64]	; (800222c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x44>)
 80021ea:	2300      	movs	r3, #0
}

void TouchGFXGeneratedHAL::InvalidateCache()
 80021ec:	b570      	push	{r4, r5, r6, lr}
 80021ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80021f2:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80021f6:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80021fa:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80021fe:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002202:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8002206:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002208:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800220c:	4602      	mov	r2, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800220e:	ea46 7582 	orr.w	r5, r6, r2, lsl #30
      } while (ways-- != 0U);
 8002212:	3a01      	subs	r2, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002214:	f8c1 5274 	str.w	r5, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8002218:	d2f9      	bcs.n	800220e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x26>
    } while(sets-- != 0U);
 800221a:	3b20      	subs	r3, #32
 800221c:	f113 0f20 	cmn.w	r3, #32
 8002220:	d1f2      	bne.n	8002208 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0+0x20>
 8002222:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002226:	f3bf 8f6f 	isb	sy
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
    {
        SCB_CleanInvalidateDCache();
    }
}
 800222a:	bd70      	pop	{r4, r5, r6, pc}
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002230:	4b03      	ldr	r3, [pc, #12]	; (8002240 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x10>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	03db      	lsls	r3, r3, #15
 8002236:	d501      	bpl.n	800223c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xc>
 8002238:	f7ff bfd6 	b.w	80021e8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:
{
 8002244:	b508      	push	{r3, lr}
    HAL::flushFrameBuffer(rect);
 8002246:	f00d fe67 	bl	800ff18 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x18>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	03db      	lsls	r3, r3, #15
 8002250:	d503      	bpl.n	800225a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x16>
}
 8002252:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002256:	f7ff bfc7 	b.w	80021e8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv.part.0>
 800225a:	bd08      	pop	{r3, pc}
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
 8002262:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800226a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800226e:	f3bf 8f6f 	isb	sy
 8002272:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 800227a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800227e:	f3bf 8f6f 	isb	sy
}
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100

08002288 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
 800228a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002294:	609a      	str	r2, [r3, #8]
}
 8002296:	4770      	bx	lr
 8002298:	e000e100 	.word	0xe000e100

0800229c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 800229c:	b510      	push	{r4, lr}
        return instance;
 800229e:	4c14      	ldr	r4, [pc, #80]	; (80022f0 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	b323      	cbz	r3, 80022ee <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80022a4:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <HAL_LTDC_LineEventCallback+0x58>)
 80022a6:	4a14      	ldr	r2, [pc, #80]	; (80022f8 <HAL_LTDC_LineEventCallback+0x5c>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	8811      	ldrh	r1, [r2, #0]
 80022ac:	428b      	cmp	r3, r1
 80022ae:	d113      	bne.n	80022d8 <HAL_LTDC_LineEventCallback+0x3c>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_LTDC_LineEventCallback+0x60>)
 80022b2:	8819      	ldrh	r1, [r3, #0]
 80022b4:	f003 fe4e 	bl	8005f54 <HAL_LTDC_ProgramLineEvent>
 80022b8:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
 80022ba:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
 80022be:	3301      	adds	r3, #1
 80022c0:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            HAL::getInstance()->vSync();
            OSWrappers::signalVSync();
 80022c4:	f7ff fc16 	bl	8001af4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 80022c8:	6820      	ldr	r0, [r4, #0]
 80022ca:	f00e fbb7 	bl	8010a3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 80022ce:	2000      	movs	r0, #0

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80022d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
 80022d4:	f7ff b9ee 	b.w	80016b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 80022d8:	f003 fe3c 	bl	8005f54 <HAL_LTDC_ProgramLineEvent>
        return instance;
 80022dc:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
 80022de:	6803      	ldr	r3, [r0, #0]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4798      	blx	r3
            GPIO::clear(GPIO::VSYNC_FREQ);
 80022e4:	2000      	movs	r0, #0
    }
 80022e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80022ea:	f7ff ba15 	b.w	8001718 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
    }
 80022ee:	bd10      	pop	{r4, pc}
 80022f0:	240074bc 	.word	0x240074bc
 80022f4:	50001000 	.word	0x50001000
 80022f8:	240015d0 	.word	0x240015d0
 80022fc:	240015ce 	.word	0x240015ce

08002300 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8002300:	2904      	cmp	r1, #4
 8002302:	d00a      	beq.n	800231a <USBH_UserProcess+0x1a>
 8002304:	2905      	cmp	r1, #5
 8002306:	d004      	beq.n	8002312 <USBH_UserProcess+0x12>
 8002308:	2902      	cmp	r1, #2
 800230a:	d105      	bne.n	8002318 <USBH_UserProcess+0x18>
  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
  break;

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800230c:	4b04      	ldr	r3, [pc, #16]	; (8002320 <USBH_UserProcess+0x20>)
 800230e:	7019      	strb	r1, [r3, #0]
  break;
 8002310:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8002312:	4b03      	ldr	r3, [pc, #12]	; (8002320 <USBH_UserProcess+0x20>)
 8002314:	2203      	movs	r2, #3

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8002316:	701a      	strb	r2, [r3, #0]

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8002318:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 800231a:	4b01      	ldr	r3, [pc, #4]	; (8002320 <USBH_UserProcess+0x20>)
 800231c:	2201      	movs	r2, #1
 800231e:	e7fa      	b.n	8002316 <USBH_UserProcess+0x16>
 8002320:	240015d2 	.word	0x240015d2

08002324 <MX_USB_HOST_Init>:
{
 8002324:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8002326:	2200      	movs	r2, #0
 8002328:	4919      	ldr	r1, [pc, #100]	; (8002390 <MX_USB_HOST_Init+0x6c>)
 800232a:	481a      	ldr	r0, [pc, #104]	; (8002394 <MX_USB_HOST_Init+0x70>)
 800232c:	f00a fb14 	bl	800c958 <USBH_Init>
 8002330:	b108      	cbz	r0, 8002336 <MX_USB_HOST_Init+0x12>
    Error_Handler();
 8002332:	f7fe fd19 	bl	8000d68 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_AUDIO_CLASS) != USBH_OK)
 8002336:	4918      	ldr	r1, [pc, #96]	; (8002398 <MX_USB_HOST_Init+0x74>)
 8002338:	4816      	ldr	r0, [pc, #88]	; (8002394 <MX_USB_HOST_Init+0x70>)
 800233a:	f00a fb57 	bl	800c9ec <USBH_RegisterClass>
 800233e:	b108      	cbz	r0, 8002344 <MX_USB_HOST_Init+0x20>
    Error_Handler();
 8002340:	f7fe fd12 	bl	8000d68 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8002344:	4915      	ldr	r1, [pc, #84]	; (800239c <MX_USB_HOST_Init+0x78>)
 8002346:	4813      	ldr	r0, [pc, #76]	; (8002394 <MX_USB_HOST_Init+0x70>)
 8002348:	f00a fb50 	bl	800c9ec <USBH_RegisterClass>
 800234c:	b108      	cbz	r0, 8002352 <MX_USB_HOST_Init+0x2e>
    Error_Handler();
 800234e:	f7fe fd0b 	bl	8000d68 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MSC_CLASS) != USBH_OK)
 8002352:	4913      	ldr	r1, [pc, #76]	; (80023a0 <MX_USB_HOST_Init+0x7c>)
 8002354:	480f      	ldr	r0, [pc, #60]	; (8002394 <MX_USB_HOST_Init+0x70>)
 8002356:	f00a fb49 	bl	800c9ec <USBH_RegisterClass>
 800235a:	b108      	cbz	r0, 8002360 <MX_USB_HOST_Init+0x3c>
    Error_Handler();
 800235c:	f7fe fd04 	bl	8000d68 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_HID_CLASS) != USBH_OK)
 8002360:	4910      	ldr	r1, [pc, #64]	; (80023a4 <MX_USB_HOST_Init+0x80>)
 8002362:	480c      	ldr	r0, [pc, #48]	; (8002394 <MX_USB_HOST_Init+0x70>)
 8002364:	f00a fb42 	bl	800c9ec <USBH_RegisterClass>
 8002368:	b108      	cbz	r0, 800236e <MX_USB_HOST_Init+0x4a>
    Error_Handler();
 800236a:	f7fe fcfd 	bl	8000d68 <Error_Handler>
  if (USBH_RegisterClass(&hUsbHostHS, USBH_MTP_CLASS) != USBH_OK)
 800236e:	490e      	ldr	r1, [pc, #56]	; (80023a8 <MX_USB_HOST_Init+0x84>)
 8002370:	4808      	ldr	r0, [pc, #32]	; (8002394 <MX_USB_HOST_Init+0x70>)
 8002372:	f00a fb3b 	bl	800c9ec <USBH_RegisterClass>
 8002376:	b108      	cbz	r0, 800237c <MX_USB_HOST_Init+0x58>
    Error_Handler();
 8002378:	f7fe fcf6 	bl	8000d68 <Error_Handler>
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800237c:	4805      	ldr	r0, [pc, #20]	; (8002394 <MX_USB_HOST_Init+0x70>)
 800237e:	f00a fbd1 	bl	800cb24 <USBH_Start>
 8002382:	b118      	cbz	r0, 800238c <MX_USB_HOST_Init+0x68>
}
 8002384:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002388:	f7fe bcee 	b.w	8000d68 <Error_Handler>
}
 800238c:	bd08      	pop	{r3, pc}
 800238e:	bf00      	nop
 8002390:	08002301 	.word	0x08002301
 8002394:	240015d4 	.word	0x240015d4
 8002398:	24000050 	.word	0x24000050
 800239c:	24000070 	.word	0x24000070
 80023a0:	240000b0 	.word	0x240000b0
 80023a4:	24000090 	.word	0x24000090
 80023a8:	240000d0 	.word	0x240000d0

080023ac <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80023ac:	b530      	push	{r4, r5, lr}
 80023ae:	b0b5      	sub	sp, #212	; 0xd4
 80023b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b2:	2214      	movs	r2, #20
 80023b4:	2100      	movs	r1, #0
 80023b6:	a802      	add	r0, sp, #8
 80023b8:	f01b fcac 	bl	801dd14 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023bc:	22b4      	movs	r2, #180	; 0xb4
 80023be:	2100      	movs	r1, #0
 80023c0:	a807      	add	r0, sp, #28
 80023c2:	f01b fca7 	bl	801dd14 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 80023c6:	6822      	ldr	r2, [r4, #0]
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_HCD_MspInit+0x98>)
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d138      	bne.n	8002440 <HAL_HCD_MspInit+0x94>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80023ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023d2:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80023d4:	9307      	str	r3, [sp, #28]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80023d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023da:	9327      	str	r3, [sp, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023dc:	f005 fa0a 	bl	80077f4 <HAL_RCCEx_PeriphCLKConfig>
 80023e0:	b108      	cbz	r0, 80023e6 <HAL_HCD_MspInit+0x3a>
    {
      Error_Handler();
 80023e2:	f7fe fcc1 	bl	8000d68 <Error_Handler>

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023e6:	4c18      	ldr	r4, [pc, #96]	; (8002448 <HAL_HCD_MspInit+0x9c>)
    HAL_PWREx_EnableUSBVoltageDetector();
 80023e8:	f004 fc76 	bl	8006cd8 <HAL_PWREx_EnableUSBVoltageDetector>
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ec:	2500      	movs	r5, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	4815      	ldr	r0, [pc, #84]	; (800244c <HAL_HCD_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80023fe:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	9504      	str	r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800240c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002410:	e9cd 3502 	strd	r3, r5, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f002 faa8 	bl	8004968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002418:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800241c:	204d      	movs	r0, #77	; 0x4d
 800241e:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8002424:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002426:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800242a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800242e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8002436:	f002 f8e5 	bl	8004604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800243a:	204d      	movs	r0, #77	; 0x4d
 800243c:	f002 f914 	bl	8004668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8002440:	b035      	add	sp, #212	; 0xd4
 8002442:	bd30      	pop	{r4, r5, pc}
 8002444:	40040000 	.word	0x40040000
 8002448:	58024400 	.word	0x58024400
 800244c:	58020000 	.word	0x58020000

08002450 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8002450:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8002454:	f00a bec3 	b.w	800d1de <USBH_LL_IncTimer>

08002458 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8002458:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800245c:	f00a bede 	b.w	800d21c <USBH_LL_Connect>

08002460 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8002460:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8002464:	f00a beef 	b.w	800d246 <USBH_LL_Disconnect>

08002468 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8002468:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800246c:	f00a bf0b 	b.w	800d286 <USBH_LL_NotifyURBChange>

08002470 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8002470:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8002474:	f00a bec1 	b.w	800d1fa <USBH_LL_PortEnabled>

08002478 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8002478:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 800247c:	f00a beca 	b.w	800d214 <USBH_LL_PortDisabled>

08002480 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8002480:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 8002482:	f890 359c 	ldrb.w	r3, [r0, #1436]	; 0x59c
{
 8002486:	4604      	mov	r4, r0
  if (phost->id == HOST_HS) {
 8002488:	b9eb      	cbnz	r3, 80024c6 <USBH_LL_Init+0x46>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800248a:	4810      	ldr	r0, [pc, #64]	; (80024cc <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_HS;

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
  hhcd_USB_OTG_HS.Init.Host_channels = 16;
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800248c:	f04f 0c10 	mov.w	ip, #16
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002490:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <USBH_LL_Init+0x50>)
  phost->pData = &hhcd_USB_OTG_HS;
 8002492:	f8c4 05a0 	str.w	r0, [r4, #1440]	; 0x5a0
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002496:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8002498:	2201      	movs	r2, #1
  hhcd_USB_OTG_HS.pData = phost;
 800249a:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800249e:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80024a0:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80024a2:	6343      	str	r3, [r0, #52]	; 0x34
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80024a4:	e9c0 c202 	strd	ip, r2, [r0, #8]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80024a8:	2202      	movs	r2, #2
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80024aa:	e9c0 2306 	strd	r2, r3, [r0, #24]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 80024ae:	f002 fc39 	bl	8004d24 <HAL_HCD_Init>
 80024b2:	b108      	cbz	r0, 80024b8 <USBH_LL_Init+0x38>
  {
    Error_Handler( );
 80024b4:	f7fe fc58 	bl	8000d68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <USBH_LL_Init+0x4c>)
 80024ba:	f003 f806 	bl	80054ca <HAL_HCD_GetCurrentFrame>
 80024be:	4601      	mov	r1, r0
 80024c0:	4620      	mov	r0, r4
 80024c2:	f00a fe89 	bl	800d1d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 80024c6:	2000      	movs	r0, #0
 80024c8:	bd10      	pop	{r4, pc}
 80024ca:	bf00      	nop
 80024cc:	24001b88 	.word	0x24001b88
 80024d0:	40040000 	.word	0x40040000

080024d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80024d4:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80024d6:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 80024da:	f002 fff9 	bl	80054d0 <HAL_HCD_GetCurrentSpeed>
 80024de:	2803      	cmp	r0, #3
 80024e0:	bf28      	it	cs
 80024e2:	2001      	movcs	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 80024e4:	b2c0      	uxtb	r0, r0
 80024e6:	bd08      	pop	{r3, pc}

080024e8 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80024e8:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 80024ec:	f002 bfe8 	b.w	80054c0 <HAL_HCD_HC_GetXferCount>

080024f0 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80024f0:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 80024f4:	f002 bfde 	b.w	80054b4 <HAL_HCD_HC_GetURBState>

080024f8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80024f8:	b508      	push	{r3, lr}
  if (phost->id == HOST_HS) {
 80024fa:	f890 359c 	ldrb.w	r3, [r0, #1436]	; 0x59c
 80024fe:	b913      	cbnz	r3, 8002506 <USBH_LL_DriverVBUS+0xe>
    MX_DriverVbusHS(state);
 8002500:	4608      	mov	r0, r1
 8002502:	f000 f879 	bl	80025f8 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8002506:	20c8      	movs	r0, #200	; 0xc8
 8002508:	f002 f858 	bl	80045bc <HAL_Delay>
  return USBH_OK;
}
 800250c:	2000      	movs	r0, #0
 800250e:	bd08      	pop	{r3, pc}

08002510 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8002510:	f8d0 35a0 	ldr.w	r3, [r0, #1440]	; 0x5a0

  if(pHandle->hc[pipe].ep_is_in)
 8002514:	202c      	movs	r0, #44	; 0x2c
 8002516:	fb00 3101 	mla	r1, r0, r1, r3
 800251a:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800251e:	b11b      	cbz	r3, 8002528 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8002520:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8002524:	2000      	movs	r0, #0
 8002526:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8002528:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 800252c:	e7fa      	b.n	8002524 <USBH_LL_SetToggle+0x14>

0800252e <USBH_LL_GetToggle>:
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  uint8_t toggle = 0;
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800252e:	f8d0 35a0 	ldr.w	r3, [r0, #1440]	; 0x5a0

  if(pHandle->hc[pipe].ep_is_in)
 8002532:	222c      	movs	r2, #44	; 0x2c
 8002534:	fb02 3101 	mla	r1, r2, r1, r3
 8002538:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800253c:	b113      	cbz	r3, 8002544 <USBH_LL_GetToggle+0x16>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800253e:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 8002542:	4770      	bx	lr
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8002544:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  }
  return toggle;
}
 8002548:	4770      	bx	lr

0800254a <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800254a:	f002 b837 	b.w	80045bc <HAL_Delay>
	...

08002550 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8002550:	2803      	cmp	r0, #3
 8002552:	bf9a      	itte	ls
 8002554:	4b01      	ldrls	r3, [pc, #4]	; (800255c <USBH_Get_USB_Status+0xc>)
 8002556:	5c18      	ldrbls	r0, [r3, r0]
{
 8002558:	2002      	movhi	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 800255a:	4770      	bx	lr
 800255c:	0801f40c 	.word	0x0801f40c

08002560 <USBH_LL_Start>:
{
 8002560:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8002562:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8002566:	f002 ff7b 	bl	8005460 <HAL_HCD_Start>
}
 800256a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 800256e:	f7ff bfef 	b.w	8002550 <USBH_Get_USB_Status>

08002572 <USBH_LL_Stop>:
{
 8002572:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8002574:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 8002578:	f002 ff87 	bl	800548a <HAL_HCD_Stop>
}
 800257c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8002580:	f7ff bfe6 	b.w	8002550 <USBH_Get_USB_Status>

08002584 <USBH_LL_ResetPort>:
{
 8002584:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8002586:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 800258a:	f002 ff90 	bl	80054ae <HAL_HCD_ResetPort>
}
 800258e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 8002592:	f7ff bfdd 	b.w	8002550 <USBH_Get_USB_Status>

08002596 <USBH_LL_OpenPipe>:
{
 8002596:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002598:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800259c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
 80025a0:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80025a4:	9400      	str	r4, [sp, #0]
 80025a6:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80025aa:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 80025ae:	f002 fb71 	bl	8004c94 <HAL_HCD_HC_Init>
}
 80025b2:	b004      	add	sp, #16
 80025b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 80025b8:	f7ff bfca 	b.w	8002550 <USBH_Get_USB_Status>

080025bc <USBH_LL_ClosePipe>:
{
 80025bc:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80025be:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 80025c2:	f002 fb9d 	bl	8004d00 <HAL_HCD_HC_Halt>
}
 80025c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status = USBH_Get_USB_Status(hal_status);
 80025ca:	f7ff bfc1 	b.w	8002550 <USBH_Get_USB_Status>

080025ce <USBH_LL_SubmitURB>:
{
 80025ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80025d0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80025d4:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80025d8:	f89d 4020 	ldrb.w	r4, [sp, #32]
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80025dc:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80025e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80025e2:	e9cd 4500 	strd	r4, r5, [sp]
 80025e6:	f8d0 05a0 	ldr.w	r0, [r0, #1440]	; 0x5a0
 80025ea:	f002 fbe7 	bl	8004dbc <HAL_HCD_HC_SubmitRequest>
}
 80025ee:	b004      	add	sp, #16
 80025f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usb_status =  USBH_Get_USB_Status(hal_status);
 80025f4:	f7ff bfac 	b.w	8002550 <USBH_Get_USB_Status>

080025f8 <MX_DriverVbusHS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOH,GPIO_PIN_5,(GPIO_PinState)data);
 80025f8:	1e02      	subs	r2, r0, #0
 80025fa:	f04f 0120 	mov.w	r1, #32
 80025fe:	4802      	ldr	r0, [pc, #8]	; (8002608 <MX_DriverVbusHS+0x10>)
 8002600:	bf18      	it	ne
 8002602:	2201      	movne	r2, #1
 8002604:	f002 bb38 	b.w	8004c78 <HAL_GPIO_WritePin>
 8002608:	58021c00 	.word	0x58021c00

0800260c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800260c:	4770      	bx	lr

0800260e <_ZN23ApplicationFontProviderD0Ev>:
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
 8002612:	2104      	movs	r1, #4
 8002614:	f01b f9c9 	bl	801d9aa <_ZdlPvj>
 8002618:	4620      	mov	r0, r4
 800261a:	bd10      	pop	{r4, pc}

0800261c <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 800261c:	2901      	cmp	r1, #1
{
 800261e:	b508      	push	{r3, lr}
    switch (typography)
 8002620:	d006      	beq.n	8002630 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8002622:	2902      	cmp	r1, #2
 8002624:	d008      	beq.n	8002638 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8002626:	b959      	cbnz	r1, 8002640 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8002628:	f000 fc56 	bl	8002ed8 <_ZN17TypedTextDatabase8getFontsEv>
 800262c:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 800262e:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8002630:	f000 fc52 	bl	8002ed8 <_ZN17TypedTextDatabase8getFontsEv>
 8002634:	6840      	ldr	r0, [r0, #4]
 8002636:	e7fa      	b.n	800262e <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8002638:	f000 fc4e 	bl	8002ed8 <_ZN17TypedTextDatabase8getFontsEv>
 800263c:	6880      	ldr	r0, [r0, #8]
 800263e:	e7f6      	b.n	800262e <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8002640:	2000      	movs	r0, #0
 8002642:	e7f4      	b.n	800262e <_ZN23ApplicationFontProvider7getFontEt+0x12>

08002644 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8002644:	4800      	ldr	r0, [pc, #0]	; (8002648 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8002646:	4770      	bx	lr
 8002648:	0801f424 	.word	0x0801f424

0800264c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 800264c:	2001      	movs	r0, #1
 800264e:	4770      	bx	lr

08002650 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8002650:	b513      	push	{r0, r1, r4, lr}
 8002652:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8002654:	b151      	cbz	r1, 800266c <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002656:	6803      	ldr	r3, [r0, #0]
 8002658:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 800265a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 800265c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8002660:	689c      	ldr	r4, [r3, #8]
 8002662:	f10d 0303 	add.w	r3, sp, #3
 8002666:	47a0      	blx	r4
        return glyph;
    }
 8002668:	b002      	add	sp, #8
 800266a:	bd10      	pop	{r4, pc}
            return 0;
 800266c:	4608      	mov	r0, r1
 800266e:	e7fb      	b.n	8002668 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08002670 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8002670:	8940      	ldrh	r0, [r0, #10]
 8002672:	4770      	bx	lr

08002674 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8002674:	8980      	ldrh	r0, [r0, #12]
 8002676:	4770      	bx	lr

08002678 <_ZNK8touchgfx4Font13getFontHeightEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
    {
        return fontHeight;
    }
 8002678:	8880      	ldrh	r0, [r0, #4]
 800267a:	4770      	bx	lr

0800267c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
    {
        return fontHeight + pixelsBelowBaseline;
 800267c:	7983      	ldrb	r3, [r0, #6]
 800267e:	8880      	ldrh	r0, [r0, #4]
 8002680:	4418      	add	r0, r3
    }
 8002682:	b280      	uxth	r0, r0
 8002684:	4770      	bx	lr

08002686 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8002686:	79c0      	ldrb	r0, [r0, #7]
    }
 8002688:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800268c:	4770      	bx	lr

0800268e <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 800268e:	79c0      	ldrb	r0, [r0, #7]
    }
 8002690:	09c0      	lsrs	r0, r0, #7
 8002692:	4770      	bx	lr

08002694 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8002694:	4770      	bx	lr

08002696 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8002696:	b510      	push	{r4, lr}
 8002698:	4604      	mov	r4, r0
    }
 800269a:	2108      	movs	r1, #8
 800269c:	f01b f985 	bl	801d9aa <_ZdlPvj>
 80026a0:	4620      	mov	r0, r4
 80026a2:	bd10      	pop	{r4, pc}

080026a4 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 80026a4:	4770      	bx	lr

080026a6 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 80026a6:	4770      	bx	lr

080026a8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 80026a8:	f500 7396 	add.w	r3, r0, #300	; 0x12c
 80026ac:	6808      	ldr	r0, [r1, #0]
 80026ae:	6849      	ldr	r1, [r1, #4]
 80026b0:	c303      	stmia	r3!, {r0, r1}
    }
 80026b2:	4770      	bx	lr

080026b4 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 80026b4:	4770      	bx	lr

080026b6 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 80026b6:	4770      	bx	lr

080026b8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 80026b8:	6041      	str	r1, [r0, #4]
    }
 80026ba:	4770      	bx	lr

080026bc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 80026bc:	4770      	bx	lr
	...

080026c0 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 80026c2:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 80026c6:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 80026d0:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 80026d4:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	08002781 	.word	0x08002781

080026e0 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 80026e0:	2301      	movs	r3, #1
 80026e2:	7203      	strb	r3, [r0, #8]
    }
 80026e4:	4770      	bx	lr

080026e6 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 80026e6:	4770      	bx	lr

080026e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 80026e8:	4770      	bx	lr

080026ea <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80026ea:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 80026ec:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80026ee:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80026f0:	68c2      	ldr	r2, [r0, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	1054      	asrs	r4, r2, #1
 80026f6:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80026fa:	07d2      	lsls	r2, r2, #31
 80026fc:	bf48      	it	mi
 80026fe:	590a      	ldrmi	r2, [r1, r4]
    }
 8002700:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8002704:	bf48      	it	mi
 8002706:	58d3      	ldrmi	r3, [r2, r3]
 8002708:	4718      	bx	r3

0800270a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
 800270a:	6843      	ldr	r3, [r0, #4]
 800270c:	b12b      	cbz	r3, 800271a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x10>
 800270e:	6883      	ldr	r3, [r0, #8]
 8002710:	b92b      	cbnz	r3, 800271e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8002712:	68c0      	ldr	r0, [r0, #12]
 8002714:	f000 0001 	and.w	r0, r0, #1
 8002718:	4770      	bx	lr
 800271a:	4618      	mov	r0, r3
 800271c:	4770      	bx	lr
 800271e:	2001      	movs	r0, #1
    }
 8002720:	4770      	bx	lr

08002722 <_ZN8touchgfx12NoTransitionD0Ev>:
 8002722:	b510      	push	{r4, lr}
 8002724:	4604      	mov	r4, r0
 8002726:	210c      	movs	r1, #12
 8002728:	f01b f93f 	bl	801d9aa <_ZdlPvj>
 800272c:	4620      	mov	r0, r4
 800272e:	bd10      	pop	{r4, pc}

08002730 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8002730:	b510      	push	{r4, lr}
 8002732:	4604      	mov	r4, r0
 8002734:	2110      	movs	r1, #16
 8002736:	f01b f938 	bl	801d9aa <_ZdlPvj>
 800273a:	4620      	mov	r0, r4
 800273c:	bd10      	pop	{r4, pc}

0800273e <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 800273e:	b510      	push	{r4, lr}
 8002740:	4604      	mov	r4, r0
 8002742:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002746:	f01b f930 	bl	801d9aa <_ZdlPvj>
 800274a:	4620      	mov	r0, r4
 800274c:	bd10      	pop	{r4, pc}

0800274e <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 800274e:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
 8002750:	f010 fbee 	bl	8012f30 <_ZN8touchgfx11Application11getInstanceEv>
    }
 8002754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
 8002758:	f010 bf90 	b.w	801367c <_ZN8touchgfx11Application10invalidateEv>

0800275c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800275c:	b510      	push	{r4, lr}
 800275e:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002760:	f8d0 013c 	ldr.w	r0, [r0, #316]	; 0x13c
 8002764:	b158      	cbz	r0, 800277e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8002766:	6803      	ldr	r3, [r0, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4798      	blx	r3
 800276c:	b138      	cbz	r0, 800277e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 800276e:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
 8002772:	6803      	ldr	r3, [r0, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    }
 800277e:	bd10      	pop	{r4, pc}

08002780 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8002780:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8002784:	e9d0 5a54 	ldrd	r5, sl, [r0, #336]	; 0x150
{
 8002788:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800278a:	68a8      	ldr	r0, [r5, #8]
 800278c:	6803      	ldr	r3, [r0, #0]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4798      	blx	r3
 8002792:	28df      	cmp	r0, #223	; 0xdf
 8002794:	d805      	bhi.n	80027a2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x22>
 8002796:	4b45      	ldr	r3, [pc, #276]	; (80028ac <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8002798:	21a3      	movs	r1, #163	; 0xa3
 800279a:	4a45      	ldr	r2, [pc, #276]	; (80028b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800279c:	4845      	ldr	r0, [pc, #276]	; (80028b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 800279e:	f01b f933 	bl	801da08 <__assert_func>
 80027a2:	6868      	ldr	r0, [r5, #4]
 80027a4:	6803      	ldr	r3, [r0, #0]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	4798      	blx	r3
 80027aa:	280f      	cmp	r0, #15
 80027ac:	d803      	bhi.n	80027b6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x36>
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 80027b0:	21a4      	movs	r1, #164	; 0xa4
 80027b2:	4a3f      	ldr	r2, [pc, #252]	; (80028b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80027b4:	e7f2      	b.n	800279c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 80027b6:	68e8      	ldr	r0, [r5, #12]
 80027b8:	6803      	ldr	r3, [r0, #0]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4798      	blx	r3
 80027be:	280b      	cmp	r0, #11
 80027c0:	d803      	bhi.n	80027ca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4a>
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 80027c4:	21a5      	movs	r1, #165	; 0xa5
 80027c6:	4a3a      	ldr	r2, [pc, #232]	; (80028b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 80027c8:	e7e8      	b.n	800279c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 80027ca:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80028c4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 80027ce:	f010 fbaf 	bl	8012f30 <_ZN8touchgfx11Application11getInstanceEv>
 80027d2:	f010 fbb3 	bl	8012f3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80027d6:	f8d9 0000 	ldr.w	r0, [r9]
 80027da:	b110      	cbz	r0, 80027e2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x62>
        (*currentTrans)->tearDown();
 80027dc:	6803      	ldr	r3, [r0, #0]
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4798      	blx	r3
    if (*currentTrans)
 80027e2:	f8d9 0000 	ldr.w	r0, [r9]
 80027e6:	b110      	cbz	r0, 80027ee <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x6e>
        (*currentTrans)->~Transition();
 80027e8:	6803      	ldr	r3, [r0, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4798      	blx	r3
    if (*currentScreen)
 80027ee:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 80028c8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 80027f2:	f8d8 0000 	ldr.w	r0, [r8]
 80027f6:	b110      	cbz	r0, 80027fe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x7e>
        (*currentScreen)->tearDownScreen();
 80027f8:	6803      	ldr	r3, [r0, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	4798      	blx	r3
    if (*currentPresenter)
 80027fe:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 8002802:	b110      	cbz	r0, 800280a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8a>
        (*currentPresenter)->deactivate();
 8002804:	6803      	ldr	r3, [r0, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	4798      	blx	r3
    if (*currentScreen)
 800280a:	f8d8 0000 	ldr.w	r0, [r8]
 800280e:	b110      	cbz	r0, 8002816 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x96>
        (*currentScreen)->~Screen();
 8002810:	6803      	ldr	r3, [r0, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4798      	blx	r3
    if (*currentPresenter)
 8002816:	f8d7 0138 	ldr.w	r0, [r7, #312]	; 0x138
 800281a:	b110      	cbz	r0, 8002822 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa2>
        (*currentPresenter)->~Presenter();
 800281c:	6803      	ldr	r3, [r0, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8002822:	68e8      	ldr	r0, [r5, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8002824:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8002826:	f04f 0b00 	mov.w	fp, #0
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	4798      	blx	r3
 8002830:	4b23      	ldr	r3, [pc, #140]	; (80028c0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8002832:	4604      	mov	r4, r0
 8002834:	f8c0 b004 	str.w	fp, [r0, #4]
 8002838:	6003      	str	r3, [r0, #0]
 800283a:	4659      	mov	r1, fp
 800283c:	f880 b008 	strb.w	fp, [r0, #8]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8002840:	68a8      	ldr	r0, [r5, #8]
 8002842:	6803      	ldr	r3, [r0, #0]
 8002844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002846:	4798      	blx	r3
 8002848:	4606      	mov	r6, r0
 800284a:	f000 fba1 	bl	8002f90 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800284e:	6868      	ldr	r0, [r5, #4]
 8002850:	4659      	mov	r1, fp
 8002852:	6803      	ldr	r3, [r0, #0]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	4798      	blx	r3
 8002858:	4605      	mov	r5, r0
 800285a:	4631      	mov	r1, r6
 800285c:	f000 fb7e 	bl	8002f5c <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
 8002860:	f8c9 4000 	str.w	r4, [r9]
    *currentPresenter = newPresenter;
 8002864:	f8c7 5138 	str.w	r5, [r7, #312]	; 0x138
    *currentScreen = newScreen;
 8002868:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
 800286c:	b1e5      	cbz	r5, 80028a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x128>
 800286e:	1d2b      	adds	r3, r5, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8002870:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8002874:	4630      	mov	r0, r6
 8002876:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8002878:	f8c5 a008 	str.w	sl, [r5, #8]
 800287c:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 800287e:	63f5      	str	r5, [r6, #60]	; 0x3c
 8002880:	4798      	blx	r3
    newPresenter->activate();
 8002882:	682b      	ldr	r3, [r5, #0]
 8002884:	4628      	mov	r0, r5
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800288a:	4621      	mov	r1, r4
 800288c:	4630      	mov	r0, r6
 800288e:	f011 ff35 	bl	80146fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8002892:	6823      	ldr	r3, [r4, #0]
 8002894:	4620      	mov	r0, r4
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	4798      	blx	r3
    newTransition->invalidate();
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	4620      	mov	r0, r4
 800289e:	695b      	ldr	r3, [r3, #20]
}
 80028a0:	b001      	add	sp, #4
 80028a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a6:	4718      	bx	r3
    model->bind(newPresenter);
 80028a8:	462b      	mov	r3, r5
 80028aa:	e7e1      	b.n	8002870 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xf0>
 80028ac:	0801f448 	.word	0x0801f448
 80028b0:	0801f4d6 	.word	0x0801f4d6
 80028b4:	0801f5da 	.word	0x0801f5da
 80028b8:	0801f621 	.word	0x0801f621
 80028bc:	0801f6c4 	.word	0x0801f6c4
 80028c0:	0801f7d4 	.word	0x0801f7d4
 80028c4:	240074fc 	.word	0x240074fc
 80028c8:	240074f8 	.word	0x240074f8

080028cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 80028cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ce:	4604      	mov	r4, r0
 80028d0:	4617      	mov	r7, r2
 80028d2:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 80028d4:	f010 fb4e 	bl	8012f74 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 80028d8:	4b10      	ldr	r3, [pc, #64]	; (800291c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
          pendingScreenTransitionCallback(0)
 80028da:	2500      	movs	r5, #0
        instance = this;
 80028dc:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80028de:	4629      	mov	r1, r5
      model(m)
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 80028e2:	e9c4 7654 	strd	r7, r6, [r4, #336]	; 0x150
        return instance;
 80028e6:	4e0f      	ldr	r6, [pc, #60]	; (8002924 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 80028e8:	6023      	str	r3, [r4, #0]
 80028ea:	6830      	ldr	r0, [r6, #0]
        : pobject(0), pmemfun(0)
 80028ec:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 80028ee:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
 80028f2:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 80028f6:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 80028f8:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8002900:	4628      	mov	r0, r5
 8002902:	f000 fa9d 	bl	8002e40 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8002906:	6833      	ldr	r3, [r6, #0]
 8002908:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 800290c:	b10a      	cbz	r2, 8002912 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
 800290e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002910:	b900      	cbnz	r0, 8002914 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>
        return instance->lcdRef;
 8002912:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8002914:	f016 fa25 	bl	8018d62 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
}
 8002918:	4620      	mov	r0, r4
 800291a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800291c:	24007508 	.word	0x24007508
 8002920:	0801f788 	.word	0x0801f788
 8002924:	240074bc 	.word	0x240074bc
 8002928:	0801f770 	.word	0x0801f770

0800292c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 800292e:	f8c0 0144 	str.w	r0, [r0, #324]	; 0x144
 8002932:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
 8002936:	2300      	movs	r3, #0
 8002938:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
    pendingScreenTransitionCallback = &transitionCallback;
 800293c:	f500 73a0 	add.w	r3, r0, #320	; 0x140
 8002940:	f8c0 313c 	str.w	r3, [r0, #316]	; 0x13c
}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	08002781 	.word	0x08002781

0800294c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 800294c:	6a00      	ldr	r0, [r0, #32]
 800294e:	4770      	bx	lr

08002950 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8002950:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002952:	4770      	bx	lr

08002954 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8002954:	4770      	bx	lr

08002956 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8002956:	888b      	ldrh	r3, [r1, #4]
 8002958:	6980      	ldr	r0, [r0, #24]
 800295a:	0adb      	lsrs	r3, r3, #11
 800295c:	680a      	ldr	r2, [r1, #0]
 800295e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8002962:	4410      	add	r0, r2
 8002964:	4770      	bx	lr

08002966 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8002966:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
 8002968:	b1c2      	cbz	r2, 800299c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 800296a:	7b13      	ldrb	r3, [r2, #12]
 800296c:	b1b3      	cbz	r3, 800299c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800296e:	7b54      	ldrb	r4, [r2, #13]
 8002970:	7ad2      	ldrb	r2, [r2, #11]
 8002972:	0224      	lsls	r4, r4, #8
 8002974:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8002978:	4314      	orrs	r4, r2
 800297a:	69c2      	ldr	r2, [r0, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800297c:	b298      	uxth	r0, r3
    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800297e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
 8002982:	8813      	ldrh	r3, [r2, #0]
 8002984:	428b      	cmp	r3, r1
 8002986:	d102      	bne.n	800298e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8002988:	f992 0002 	ldrsb.w	r0, [r2, #2]
        {
            break;
        }
    }
    return 0;
}
 800298c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800298e:	d805      	bhi.n	800299c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8002990:	3801      	subs	r0, #1
 8002992:	3204      	adds	r2, #4
 8002994:	b280      	uxth	r0, r0
 8002996:	2800      	cmp	r0, #0
 8002998:	d1f3      	bne.n	8002982 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800299a:	e7f7      	b.n	800298c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800299c:	2000      	movs	r0, #0
 800299e:	e7f5      	b.n	800298c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

080029a0 <_ZN8touchgfx13GeneratedFontD0Ev>:
 80029a0:	b510      	push	{r4, lr}
 80029a2:	4604      	mov	r4, r0
 80029a4:	2128      	movs	r1, #40	; 0x28
 80029a6:	f01b f800 	bl	801d9aa <_ZdlPvj>
 80029aa:	4620      	mov	r0, r4
 80029ac:	bd10      	pop	{r4, pc}
	...

080029b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 80029b0:	b530      	push	{r4, r5, lr}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	4604      	mov	r4, r0
      arabicTable(formsTable)
 80029b6:	f8bd 5050 	ldrh.w	r5, [sp, #80]	; 0x50
 80029ba:	9506      	str	r5, [sp, #24]
 80029bc:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 80029c0:	9505      	str	r5, [sp, #20]
 80029c2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80029c6:	9504      	str	r5, [sp, #16]
 80029c8:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 80029cc:	9503      	str	r5, [sp, #12]
 80029ce:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80029d2:	9502      	str	r5, [sp, #8]
 80029d4:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 80029d8:	9501      	str	r5, [sp, #4]
 80029da:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 80029de:	9500      	str	r5, [sp, #0]
 80029e0:	f011 faec 	bl	8013fbc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x50>)
}
 80029e6:	4620      	mov	r0, r4
      arabicTable(formsTable)
 80029e8:	6023      	str	r3, [r4, #0]
 80029ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80029ec:	61a3      	str	r3, [r4, #24]
 80029ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80029f0:	61e3      	str	r3, [r4, #28]
 80029f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80029f4:	6223      	str	r3, [r4, #32]
 80029f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80029f8:	6263      	str	r3, [r4, #36]	; 0x24
}
 80029fa:	b009      	add	sp, #36	; 0x24
 80029fc:	bd30      	pop	{r4, r5, pc}
 80029fe:	bf00      	nop
 8002a00:	0801f7f8 	.word	0x0801f7f8

08002a04 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8002a04:	2000      	movs	r0, #0
 8002a06:	4770      	bx	lr

08002a08 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8002a08:	8081      	strh	r1, [r0, #4]
    }
 8002a0a:	4770      	bx	lr

08002a0c <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8002a0c:	80c1      	strh	r1, [r0, #6]
    }
 8002a0e:	4770      	bx	lr

08002a10 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8002a10:	8101      	strh	r1, [r0, #8]
    }
 8002a12:	4770      	bx	lr

08002a14 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8002a14:	8141      	strh	r1, [r0, #10]
    }
 8002a16:	4770      	bx	lr

08002a18 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8002a18:	4770      	bx	lr

08002a1a <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8002a1a:	4770      	bx	lr

08002a1c <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8002a1c:	4770      	bx	lr

08002a1e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8002a1e:	4770      	bx	lr

08002a20 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8002a20:	4770      	bx	lr

08002a22 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8002a22:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8002a24:	88c4      	ldrh	r4, [r0, #6]
 8002a26:	6803      	ldr	r3, [r0, #0]
 8002a28:	1b12      	subs	r2, r2, r4
 8002a2a:	8884      	ldrh	r4, [r0, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	1b09      	subs	r1, r1, r4
 8002a30:	b212      	sxth	r2, r2
    }
 8002a32:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8002a36:	b209      	sxth	r1, r1
 8002a38:	4718      	bx	r3

08002a3a <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8002a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a3e:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
 8002a44:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8002a46:	6813      	ldr	r3, [r2, #0]
 8002a48:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8002a4a:	6010      	str	r0, [r2, #0]
    }
 8002a4c:	4770      	bx	lr

08002a4e <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8002a4e:	4770      	bx	lr

08002a50 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8002a50:	4770      	bx	lr

08002a52 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8002a52:	4770      	bx	lr

08002a54 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8002a54:	4770      	bx	lr

08002a56 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8002a56:	4770      	bx	lr

08002a58 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8002a58:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002a5c:	b11a      	cbz	r2, 8002a66 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8002a5e:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8002a62:	b102      	cbz	r2, 8002a66 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8002a64:	6018      	str	r0, [r3, #0]
        }
    }
 8002a66:	4770      	bx	lr

08002a68 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8002a68:	4770      	bx	lr

08002a6a <_ZN15Screen1ViewBase11setupScreenEv>:
}

void Screen1ViewBase::setupScreen()
{

}
 8002a6a:	4770      	bx	lr

08002a6c <_ZN15Screen1ViewBaseD0Ev>:
 8002a6c:	b510      	push	{r4, lr}
 8002a6e:	4604      	mov	r4, r0
 8002a70:	21e0      	movs	r1, #224	; 0xe0
 8002a72:	f01a ff9a 	bl	801d9aa <_ZdlPvj>
 8002a76:	4620      	mov	r0, r4
 8002a78:	bd10      	pop	{r4, pc}

08002a7a <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 8002a7a:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 8002a7c:	b570      	push	{r4, r5, r6, lr}
 8002a7e:	4604      	mov	r4, r0
        setX(x);
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    void setXY(int16_t x, int16_t y)
 8002a82:	4615      	mov	r5, r2
        setX(x);
 8002a84:	4798      	blx	r3
        setY(y);
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    }
 8002a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 8002a92:	4718      	bx	r3

08002a94 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8002a94:	b570      	push	{r4, r5, r6, lr}
 8002a96:	4604      	mov	r4, r0
 8002a98:	461d      	mov	r5, r3
 8002a9a:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
        setXY(x, y);
 8002a9e:	f7ff ffec 	bl	8002a7a <_ZN8touchgfx8Drawable5setXYEss>
        setWidth(width);
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	4798      	blx	r3
        setHeight(height);
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	4631      	mov	r1, r6
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    }
 8002ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 8002ab8:	4718      	bx	r3
	...

08002abc <_ZN8touchgfx3BoxC1Ev>:
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8002abc:	4a09      	ldr	r2, [pc, #36]	; (8002ae4 <_ZN8touchgfx3BoxC1Ev+0x28>)
          visible(true)
 8002abe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ac2:	6002      	str	r2, [r0, #0]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	8481      	strh	r1, [r0, #36]	; 0x24
 8002ac8:	21ff      	movs	r1, #255	; 0xff
        : color(col)
 8002aca:	6282      	str	r2, [r0, #40]	; 0x28
 8002acc:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
        : x(0), y(0), width(0), height(0)
 8002ad0:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8002ad4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8002ad8:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002adc:	e9c0 2207 	strd	r2, r2, [r0, #28]
    {
    }
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	08020ab8 	.word	0x08020ab8

08002ae8 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8002ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aec:	4604      	mov	r4, r0
 8002aee:	b08b      	sub	sp, #44	; 0x2c
        : presenter(0)
 8002af0:	2500      	movs	r5, #0
 8002af2:	f011 fc57 	bl	80143a4 <_ZN8touchgfx6ScreenC1Ev>
 8002af6:	4626      	mov	r6, r4
 8002af8:	4b3c      	ldr	r3, [pc, #240]	; (8002bec <_ZN15Screen1ViewBaseC1Ev+0x104>)
 8002afa:	f104 086c 	add.w	r8, r4, #108	; 0x6c
 8002afe:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002b00:	f846 3b40 	str.w	r3, [r6], #64
 8002b04:	4630      	mov	r0, r6
 8002b06:	f7ff ffd9 	bl	8002abc <_ZN8touchgfx3BoxC1Ev>
 8002b0a:	4640      	mov	r0, r8
 8002b0c:	f7ff ffd6 	bl	8002abc <_ZN8touchgfx3BoxC1Ev>
 8002b10:	f44f 7380 	mov.w	r3, #256	; 0x100
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002b14:	f04f 3aff 	mov.w	sl, #4294967295
    __background.setPosition(0, 0, 480, 272);
 8002b18:	f44f 7b88 	mov.w	fp, #272	; 0x110
 8002b1c:	f8a4 30bc 	strh.w	r3, [r4, #188]	; 0xbc
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8002b20:	f04f 497f 	mov.w	r9, #4278190080	; 0xff000000
 */
class TextArea : public Widget
{
public:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <_ZN15Screen1ViewBaseC1Ev+0x108>)
Screen1ViewBase::Screen1ViewBase()
 8002b26:	f104 0798 	add.w	r7, r4, #152	; 0x98
    __background.setPosition(0, 0, 480, 272);
 8002b2a:	462a      	mov	r2, r5
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8002b32:	4630      	mov	r0, r6
        : typedTextId(id)
 8002b34:	4b2f      	ldr	r3, [pc, #188]	; (8002bf4 <_ZN15Screen1ViewBaseC1Ev+0x10c>)
        : color(col)
 8002b36:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 8002b3a:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 8002b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b42:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
 8002b46:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
 8002b4a:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8002b4e:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 8002b52:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
 8002b56:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b5a:	f8cd b000 	str.w	fp, [sp]
        : x(0), y(0), width(0), height(0)
 8002b5e:	e9c4 5527 	strd	r5, r5, [r4, #156]	; 0x9c
 8002b62:	e9c4 5529 	strd	r5, r5, [r4, #164]	; 0xa4
 8002b66:	e9c4 552b 	strd	r5, r5, [r4, #172]	; 0xac
 8002b6a:	e9c4 552d 	strd	r5, r5, [r4, #180]	; 0xb4
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 8002b6e:	e9c4 a536 	strd	sl, r5, [r4, #216]	; 0xd8
 8002b72:	f7ff ff8f 	bl	8002a94 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setPosition(0, 0, 480, 272);
 8002b76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002b7a:	462a      	mov	r2, r5
 8002b7c:	4629      	mov	r1, r5
 8002b7e:	4640      	mov	r0, r8
 8002b80:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
 8002b84:	f8cd b000 	str.w	fp, [sp]
 8002b88:	f7ff ff84 	bl	8002a94 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setXY(0, 0);
 8002b8c:	462a      	mov	r2, r5
 8002b8e:	4629      	mov	r1, r5
 8002b90:	4638      	mov	r0, r7
 8002b92:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
 8002b96:	f7ff ff70 	bl	8002a7a <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8002b9a:	f8c4 90c8 	str.w	r9, [r4, #200]	; 0xc8
        boundingArea = calculateBoundingArea();
 8002b9e:	f10d 0910 	add.w	r9, sp, #16
 8002ba2:	4639      	mov	r1, r7
        linespace = space;
 8002ba4:	f8a4 50cc 	strh.w	r5, [r4, #204]	; 0xcc
        boundingArea = calculateBoundingArea();
 8002ba8:	4648      	mov	r0, r9
 8002baa:	f00e f9e9 	bl	8010f80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8002bae:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 8002bb2:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 8002bb6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <_ZN15Screen1ViewBaseC1Ev+0x10c>)
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_04OE));
 8002bbc:	a908      	add	r1, sp, #32
 8002bbe:	4638      	mov	r0, r7
 8002bc0:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
 8002bc4:	9308      	str	r3, [sp, #32]
 8002bc6:	f00e fc6b 	bl	80114a0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8002bca:	1d20      	adds	r0, r4, #4
 8002bcc:	4631      	mov	r1, r6
 8002bce:	9003      	str	r0, [sp, #12]
 8002bd0:	f00c fefe 	bl	800f9d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002bd4:	4641      	mov	r1, r8
 8002bd6:	9803      	ldr	r0, [sp, #12]
 8002bd8:	f00c fefa 	bl	800f9d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8002bdc:	9803      	ldr	r0, [sp, #12]
 8002bde:	4639      	mov	r1, r7
 8002be0:	f00c fef6 	bl	800f9d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8002be4:	4620      	mov	r0, r4
 8002be6:	b00b      	add	sp, #44	; 0x2c
 8002be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bec:	0801f850 	.word	0x0801f850
 8002bf0:	08020a28 	.word	0x08020a28
 8002bf4:	0801f440 	.word	0x0801f440

08002bf8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002bf8:	4770      	bx	lr
	...

08002bfc <_Z23getFont_verdana_10_4bppv>:
{
 8002bfc:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002bfe:	4d15      	ldr	r5, [pc, #84]	; (8002c54 <_Z23getFont_verdana_10_4bppv+0x58>)
{
 8002c00:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8002c02:	782c      	ldrb	r4, [r5, #0]
 8002c04:	f3bf 8f5b 	dmb	ish
 8002c08:	f014 0401 	ands.w	r4, r4, #1
 8002c0c:	d11e      	bne.n	8002c4c <_Z23getFont_verdana_10_4bppv+0x50>
 8002c0e:	4628      	mov	r0, r5
 8002c10:	f01a fecd 	bl	801d9ae <__cxa_guard_acquire>
 8002c14:	b1d0      	cbz	r0, 8002c4c <_Z23getFont_verdana_10_4bppv+0x50>
 8002c16:	233f      	movs	r3, #63	; 0x3f
 8002c18:	2201      	movs	r2, #1
 8002c1a:	490f      	ldr	r1, [pc, #60]	; (8002c58 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8002c1c:	9307      	str	r3, [sp, #28]
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <_Z23getFont_verdana_10_4bppv+0x60>)
 8002c20:	480f      	ldr	r0, [pc, #60]	; (8002c60 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002c22:	9306      	str	r3, [sp, #24]
 8002c24:	4b0f      	ldr	r3, [pc, #60]	; (8002c64 <_Z23getFont_verdana_10_4bppv+0x68>)
 8002c26:	9408      	str	r4, [sp, #32]
 8002c28:	9403      	str	r4, [sp, #12]
 8002c2a:	9400      	str	r4, [sp, #0]
 8002c2c:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002c30:	2304      	movs	r3, #4
 8002c32:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002c36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002c3a:	230a      	movs	r3, #10
 8002c3c:	f7ff feb8 	bl	80029b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002c40:	4809      	ldr	r0, [pc, #36]	; (8002c68 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8002c42:	f01a feff 	bl	801da44 <atexit>
 8002c46:	4628      	mov	r0, r5
 8002c48:	f01a febd 	bl	801d9c6 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8002c4c:	4804      	ldr	r0, [pc, #16]	; (8002c60 <_Z23getFont_verdana_10_4bppv+0x64>)
 8002c4e:	b00d      	add	sp, #52	; 0x34
 8002c50:	bd30      	pop	{r4, r5, pc}
 8002c52:	bf00      	nop
 8002c54:	24001e8c 	.word	0x24001e8c
 8002c58:	080210e0 	.word	0x080210e0
 8002c5c:	0802112c 	.word	0x0802112c
 8002c60:	24001e90 	.word	0x24001e90
 8002c64:	08021138 	.word	0x08021138
 8002c68:	08002bf9 	.word	0x08002bf9

08002c6c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 3, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002c6c:	4770      	bx	lr
	...

08002c70 <_Z23getFont_verdana_20_4bppv>:
{
 8002c70:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 3, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002c72:	4d15      	ldr	r5, [pc, #84]	; (8002cc8 <_Z23getFont_verdana_20_4bppv+0x58>)
{
 8002c74:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 3, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8002c76:	782c      	ldrb	r4, [r5, #0]
 8002c78:	f3bf 8f5b 	dmb	ish
 8002c7c:	f014 0401 	ands.w	r4, r4, #1
 8002c80:	d11f      	bne.n	8002cc2 <_Z23getFont_verdana_20_4bppv+0x52>
 8002c82:	4628      	mov	r0, r5
 8002c84:	f01a fe93 	bl	801d9ae <__cxa_guard_acquire>
 8002c88:	b1d8      	cbz	r0, 8002cc2 <_Z23getFont_verdana_20_4bppv+0x52>
 8002c8a:	233f      	movs	r3, #63	; 0x3f
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	490f      	ldr	r1, [pc, #60]	; (8002ccc <_Z23getFont_verdana_20_4bppv+0x5c>)
 8002c90:	9307      	str	r3, [sp, #28]
 8002c92:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <_Z23getFont_verdana_20_4bppv+0x60>)
 8002c94:	480f      	ldr	r0, [pc, #60]	; (8002cd4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002c96:	9306      	str	r3, [sp, #24]
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <_Z23getFont_verdana_20_4bppv+0x68>)
 8002c9a:	9408      	str	r4, [sp, #32]
 8002c9c:	9403      	str	r4, [sp, #12]
 8002c9e:	9400      	str	r4, [sp, #0]
 8002ca0:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002caa:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002cae:	2314      	movs	r3, #20
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	f7ff fe7d 	bl	80029b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002cb6:	4809      	ldr	r0, [pc, #36]	; (8002cdc <_Z23getFont_verdana_20_4bppv+0x6c>)
 8002cb8:	f01a fec4 	bl	801da44 <atexit>
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f01a fe82 	bl	801d9c6 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8002cc2:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <_Z23getFont_verdana_20_4bppv+0x64>)
 8002cc4:	b00d      	add	sp, #52	; 0x34
 8002cc6:	bd30      	pop	{r4, r5, pc}
 8002cc8:	24001eb8 	.word	0x24001eb8
 8002ccc:	080210f0 	.word	0x080210f0
 8002cd0:	08021130 	.word	0x08021130
 8002cd4:	24001ebc 	.word	0x24001ebc
 8002cd8:	0802113c 	.word	0x0802113c
 8002cdc:	08002c6d 	.word	0x08002c6d

08002ce0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002ce0:	4770      	bx	lr
	...

08002ce4 <_Z23getFont_verdana_40_4bppv>:
{
 8002ce4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002ce6:	4d15      	ldr	r5, [pc, #84]	; (8002d3c <_Z23getFont_verdana_40_4bppv+0x58>)
{
 8002ce8:	b08d      	sub	sp, #52	; 0x34
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8002cea:	782c      	ldrb	r4, [r5, #0]
 8002cec:	f3bf 8f5b 	dmb	ish
 8002cf0:	f014 0401 	ands.w	r4, r4, #1
 8002cf4:	d11e      	bne.n	8002d34 <_Z23getFont_verdana_40_4bppv+0x50>
 8002cf6:	4628      	mov	r0, r5
 8002cf8:	f01a fe59 	bl	801d9ae <__cxa_guard_acquire>
 8002cfc:	b1d0      	cbz	r0, 8002d34 <_Z23getFont_verdana_40_4bppv+0x50>
 8002cfe:	233f      	movs	r3, #63	; 0x3f
 8002d00:	2201      	movs	r2, #1
 8002d02:	490f      	ldr	r1, [pc, #60]	; (8002d40 <_Z23getFont_verdana_40_4bppv+0x5c>)
 8002d04:	9307      	str	r3, [sp, #28]
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <_Z23getFont_verdana_40_4bppv+0x60>)
 8002d08:	480f      	ldr	r0, [pc, #60]	; (8002d48 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002d0a:	9306      	str	r3, [sp, #24]
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <_Z23getFont_verdana_40_4bppv+0x68>)
 8002d0e:	9408      	str	r4, [sp, #32]
 8002d10:	9403      	str	r4, [sp, #12]
 8002d12:	9400      	str	r4, [sp, #0]
 8002d14:	e9cd 4304 	strd	r4, r3, [sp, #16]
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8002d1e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d22:	2328      	movs	r3, #40	; 0x28
 8002d24:	f7ff fe44 	bl	80029b0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8002d28:	4809      	ldr	r0, [pc, #36]	; (8002d50 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8002d2a:	f01a fe8b 	bl	801da44 <atexit>
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f01a fe49 	bl	801d9c6 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <_Z23getFont_verdana_40_4bppv+0x64>)
 8002d36:	b00d      	add	sp, #52	; 0x34
 8002d38:	bd30      	pop	{r4, r5, pc}
 8002d3a:	bf00      	nop
 8002d3c:	24001ee4 	.word	0x24001ee4
 8002d40:	0802111c 	.word	0x0802111c
 8002d44:	08021134 	.word	0x08021134
 8002d48:	24001ee8 	.word	0x24001ee8
 8002d4c:	08021140 	.word	0x08021140
 8002d50:	08002ce1 	.word	0x08002ce1

08002d54 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
 8002d54:	2000      	movs	r0, #0
 8002d56:	4770      	bx	lr

08002d58 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
 8002d58:	2000      	movs	r0, #0
 8002d5a:	4770      	bx	lr

08002d5c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002d5c:	b40e      	push	{r1, r2, r3}
 8002d5e:	b503      	push	{r0, r1, lr}
 8002d60:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002d62:	2100      	movs	r1, #0
{
 8002d64:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8002d68:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8002d6a:	f010 ff57 	bl	8013c1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002d6e:	b002      	add	sp, #8
 8002d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d74:	b003      	add	sp, #12
 8002d76:	4770      	bx	lr

08002d78 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8002d78:	b40c      	push	{r2, r3}
 8002d7a:	b507      	push	{r0, r1, r2, lr}
 8002d7c:	ab04      	add	r3, sp, #16
 8002d7e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8002d82:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8002d84:	f010 ff4a 	bl	8013c1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8002d88:	b003      	add	sp, #12
 8002d8a:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d8e:	b002      	add	sp, #8
 8002d90:	4770      	bx	lr
	...

08002d94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8002d94:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 8002d96:	b510      	push	{r4, lr}
 8002d98:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8002d9a:	b373      	cbz	r3, 8002dfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8002d9c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
 8002d9e:	b92b      	cbnz	r3, 8002dac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8002da2:	21c0      	movs	r1, #192	; 0xc0
 8002da4:	4a18      	ldr	r2, [pc, #96]	; (8002e08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8002da6:	4819      	ldr	r0, [pc, #100]	; (8002e0c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8002da8:	f01a fe2e 	bl	801da08 <__assert_func>
            return buffer[pos];
 8002dac:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8002dae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002db2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002db4:	b30b      	cbz	r3, 8002dfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8002db6:	f012 f9d1 	bl	801515c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8002dba:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d803      	bhi.n	8002dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8002dc0:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8002dc2:	21c5      	movs	r1, #197	; 0xc5
 8002dc4:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8002dc6:	e7ee      	b.n	8002da6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8002dc8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8002dca:	f640 103f 	movw	r0, #2367	; 0x93f
 8002dce:	1c53      	adds	r3, r2, #1
 8002dd0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8002dd2:	2b09      	cmp	r3, #9
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	bf88      	it	hi
 8002dd8:	f1a3 010a 	subhi.w	r1, r3, #10
 8002ddc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8002de0:	8c49      	ldrh	r1, [r1, #34]	; 0x22
 8002de2:	4281      	cmp	r1, r0
 8002de4:	d109      	bne.n	8002dfa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8002de6:	2b0a      	cmp	r3, #10
 8002de8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8002dec:	bf28      	it	cs
 8002dee:	2300      	movcs	r3, #0
            return buffer[pos];
 8002df0:	8c50      	ldrh	r0, [r2, #34]	; 0x22
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 8002df2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002df6:	8458      	strh	r0, [r3, #34]	; 0x22
            buffer[pos] = newChar;
 8002df8:	8451      	strh	r1, [r2, #34]	; 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8002dfa:	4620      	mov	r0, r4
}
 8002dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 8002e00:	f012 b8ae 	b.w	8014f60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8002e04:	0801f87c 	.word	0x0801f87c
 8002e08:	0801f885 	.word	0x0801f885
 8002e0c:	0801f930 	.word	0x0801f930
 8002e10:	0801f97a 	.word	0x0801f97a
 8002e14:	0801f988 	.word	0x0801f988

08002e18 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8002e18:	f012 b86b 	b.w	8014ef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08002e1c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8002e1c:	b510      	push	{r4, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	ac02      	add	r4, sp, #8
 8002e22:	e884 0006 	stmia.w	r4, {r1, r2}
 8002e26:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 8002e28:	ab0a      	add	r3, sp, #40	; 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002e2a:	4621      	mov	r1, r4
    va_start(pArg, format);
 8002e2c:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8002e2e:	9301      	str	r3, [sp, #4]
 8002e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	9b08      	ldr	r3, [sp, #32]
 8002e36:	f00f fbb1 	bl	801259c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8002e3a:	b006      	add	sp, #24
 8002e3c:	bd10      	pop	{r4, pc}
	...

08002e40 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8002e40:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8002e42:	bb18      	cbnz	r0, 8002e8c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8002e46:	4813      	ldr	r0, [pc, #76]	; (8002e94 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4913      	ldr	r1, [pc, #76]	; (8002e98 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8002e4c:	b1b3      	cbz	r3, 8002e7c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002e4e:	681a      	ldr	r2, [r3, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002e50:	689c      	ldr	r4, [r3, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002e52:	441a      	add	r2, r3
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8002e54:	441c      	add	r4, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8002e56:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	600a      	str	r2, [r1, #0]
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8002e5e:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8002e64:	f000 f838 	bl	8002ed8 <_ZN17TypedTextDatabase8getFontsEv>
 8002e68:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 8002e6a:	f000 f833 	bl	8002ed4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8002e70:	601c      	str	r4, [r3, #0]
        fonts = f;
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8002e74:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8002e78:	8018      	strh	r0, [r3, #0]
    }
}
 8002e7a:	e007      	b.n	8002e8c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8002e7e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8002e82:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8002e86:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8002e88:	2c00      	cmp	r4, #0
 8002e8a:	d1e8      	bne.n	8002e5e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8002e8c:	bd38      	pop	{r3, r4, r5, pc}
 8002e8e:	bf00      	nop
 8002e90:	24001f10 	.word	0x24001f10
 8002e94:	24001f14 	.word	0x24001f14
 8002e98:	24001f18 	.word	0x24001f18
 8002e9c:	24001f1c 	.word	0x24001f1c
 8002ea0:	2400750c 	.word	0x2400750c
 8002ea4:	24007514 	.word	0x24007514
 8002ea8:	24007510 	.word	0x24007510
 8002eac:	08021148 	.word	0x08021148
 8002eb0:	08021144 	.word	0x08021144
 8002eb4:	08021154 	.word	0x08021154

08002eb8 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
}
 8002ec4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	24001f18 	.word	0x24001f18
 8002ed0:	24001f14 	.word	0x24001f14

08002ed4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	4770      	bx	lr

08002ed8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8002ed8:	4800      	ldr	r0, [pc, #0]	; (8002edc <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8002eda:	4770      	bx	lr
 8002edc:	24001f20 	.word	0x24001f20

08002ee0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8002ee0:	b510      	push	{r4, lr}
};
 8002ee2:	4c05      	ldr	r4, [pc, #20]	; (8002ef8 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8002ee4:	f7ff fec4 	bl	8002c70 <_Z23getFont_verdana_20_4bppv>
};
 8002ee8:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8002eea:	f7ff fefb 	bl	8002ce4 <_Z23getFont_verdana_40_4bppv>
};
 8002eee:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8002ef0:	f7ff fe84 	bl	8002bfc <_Z23getFont_verdana_10_4bppv>
};
 8002ef4:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8002ef6:	bd10      	pop	{r4, pc}
 8002ef8:	24001f20 	.word	0x24001f20

08002efc <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002efc:	4770      	bx	lr

08002efe <_ZN19FrontendApplicationD0Ev>:
 8002efe:	b510      	push	{r4, lr}
 8002f00:	4604      	mov	r4, r0
 8002f02:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002f06:	f01a fd50 	bl	801d9aa <_ZdlPvj>
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	bd10      	pop	{r4, pc}

08002f0e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002f0e:	b510      	push	{r4, lr}
 8002f10:	4604      	mov	r4, r0
    {
        model.tick();
 8002f12:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
 8002f16:	f000 f812 	bl	8002f3e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002f1a:	4620      	mov	r0, r4
    }
 8002f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8002f20:	f00f beb4 	b.w	8012c8c <_ZN8touchgfx11Application15handleTickEventEv>

08002f24 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8002f24:	b510      	push	{r4, lr}
 8002f26:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8002f28:	f7ff fcd0 	bl	80028cc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8002f2c:	4b01      	ldr	r3, [pc, #4]	; (8002f34 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8002f2e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8002f30:	6023      	str	r3, [r4, #0]
}
 8002f32:	bd10      	pop	{r4, pc}
 8002f34:	0801fa64 	.word	0x0801fa64

08002f38 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	6002      	str	r2, [r0, #0]
{

}
 8002f3c:	4770      	bx	lr

08002f3e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 8002f3e:	4770      	bx	lr

08002f40 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 8002f40:	4770      	bx	lr

08002f42 <_ZThn4_N16Screen1PresenterD1Ev>:
 8002f42:	3804      	subs	r0, #4
 8002f44:	4770      	bx	lr

08002f46 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8002f46:	4770      	bx	lr

08002f48 <_ZN16Screen1PresenterD0Ev>:
 8002f48:	b510      	push	{r4, lr}
 8002f4a:	4604      	mov	r4, r0
 8002f4c:	2110      	movs	r1, #16
 8002f4e:	f01a fd2c 	bl	801d9aa <_ZdlPvj>
 8002f52:	4620      	mov	r0, r4
 8002f54:	bd10      	pop	{r4, pc}

08002f56 <_ZThn4_N16Screen1PresenterD0Ev>:
 8002f56:	f1a0 0004 	sub.w	r0, r0, #4
 8002f5a:	e7f5      	b.n	8002f48 <_ZN16Screen1PresenterD0Ev>

08002f5c <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8002f5c:	2200      	movs	r2, #0
    : view(v)
 8002f5e:	60c1      	str	r1, [r0, #12]
 8002f60:	6082      	str	r2, [r0, #8]
 8002f62:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <_ZN16Screen1PresenterC1ER11Screen1View+0x18>)
Screen1Presenter::Screen1Presenter(Screen1View& v)
 8002f64:	b510      	push	{r4, lr}
    : view(v)
 8002f66:	f102 0408 	add.w	r4, r2, #8
 8002f6a:	3220      	adds	r2, #32
 8002f6c:	6004      	str	r4, [r0, #0]
 8002f6e:	6042      	str	r2, [r0, #4]
}
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	bf00      	nop
 8002f74:	0801faa8 	.word	0x0801faa8

08002f78 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8002f78:	4770      	bx	lr

08002f7a <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 8002f7a:	4770      	bx	lr

08002f7c <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 8002f7c:	f7ff bd75 	b.w	8002a6a <_ZN15Screen1ViewBase11setupScreenEv>

08002f80 <_ZN11Screen1ViewD0Ev>:
 8002f80:	b510      	push	{r4, lr}
 8002f82:	4604      	mov	r4, r0
 8002f84:	21e0      	movs	r1, #224	; 0xe0
 8002f86:	f01a fd10 	bl	801d9aa <_ZdlPvj>
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	bd10      	pop	{r4, pc}
	...

08002f90 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4604      	mov	r4, r0
 8002f94:	f7ff fda8 	bl	8002ae8 <_ZN15Screen1ViewBaseC1Ev>
 8002f98:	4b01      	ldr	r3, [pc, #4]	; (8002fa0 <_ZN11Screen1ViewC1Ev+0x10>)
}
 8002f9a:	4620      	mov	r0, r4
Screen1View::Screen1View()
 8002f9c:	6023      	str	r3, [r4, #0]
}
 8002f9e:	bd10      	pop	{r4, pc}
 8002fa0:	0801fad8 	.word	0x0801fad8

08002fa4 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8002fa4:	f240 1301 	movw	r3, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002fa8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0

  return FT5336_OK;
}
 8002fac:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8002fae:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 8002fb0:	2305      	movs	r3, #5
 8002fb2:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 8002fb4:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002fb8:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8002fbc:	4770      	bx	lr

08002fbe <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
 8002fbe:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002fc2:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8002fc4:	bf04      	itt	eq
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	f880 3024 	strbeq.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
 8002fcc:	2000      	movs	r0, #0
 8002fce:	4770      	bx	lr

08002fd0 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	4770      	bx	lr

08002fd4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fd4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fd6:	6904      	ldr	r4, [r0, #16]
 8002fd8:	8900      	ldrh	r0, [r0, #8]
 8002fda:	46a4      	mov	ip, r4
}
 8002fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002fe0:	4760      	bx	ip

08002fe2 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8002fe2:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fe4:	68c4      	ldr	r4, [r0, #12]
 8002fe6:	8900      	ldrh	r0, [r0, #8]
 8002fe8:	46a4      	mov	ip, r4
}
 8002fea:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fee:	4760      	bx	ip

08002ff0 <FT5336_GestureConfig>:
{
 8002ff0:	e92d 4320 	stmdb	sp!, {r5, r8, r9, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002ff4:	f100 0818 	add.w	r8, r0, #24
{
 8002ff8:	4689      	mov	r9, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8002ffa:	7809      	ldrb	r1, [r1, #0]
 8002ffc:	4640      	mov	r0, r8
 8002ffe:	f000 f8fb 	bl	80031f8 <ft5336_radian_value>
 8003002:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8003004:	f899 1004 	ldrb.w	r1, [r9, #4]
 8003008:	4640      	mov	r0, r8
 800300a:	f000 f901 	bl	8003210 <ft5336_offset_left_right>
 800300e:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8003010:	f899 1008 	ldrb.w	r1, [r9, #8]
 8003014:	4640      	mov	r0, r8
 8003016:	f000 f907 	bl	8003228 <ft5336_offset_up_down>
 800301a:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800301c:	f899 100c 	ldrb.w	r1, [r9, #12]
 8003020:	4640      	mov	r0, r8
 8003022:	f000 f90d 	bl	8003240 <ft5336_disatnce_left_right>
 8003026:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8003028:	f899 1010 	ldrb.w	r1, [r9, #16]
 800302c:	4640      	mov	r0, r8
 800302e:	f000 f913 	bl	8003258 <ft5336_distance_up_down>
 8003032:	4405      	add	r5, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8003034:	f899 1014 	ldrb.w	r1, [r9, #20]
 8003038:	4640      	mov	r0, r8
 800303a:	f000 f919 	bl	8003270 <ft5336_distance_zoom>
  if(ret != FT5336_OK)
 800303e:	42c5      	cmn	r5, r0
}
 8003040:	bf14      	ite	ne
 8003042:	f04f 30ff 	movne.w	r0, #4294967295
 8003046:	2000      	moveq	r0, #0
 8003048:	e8bd 8320 	ldmia.w	sp!, {r5, r8, r9, pc}

0800304c <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800304c:	3018      	adds	r0, #24
 800304e:	f000 b927 	b.w	80032a0 <ft5336_chip_id>

08003052 <FT5336_GetState>:
{
 8003052:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003054:	f100 0518 	add.w	r5, r0, #24
{
 8003058:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800305a:	a901      	add	r1, sp, #4
 800305c:	4628      	mov	r0, r5
 800305e:	f000 f8be 	bl	80031de <ft5336_td_status>
 8003062:	bb08      	cbnz	r0, 80030a8 <FT5336_GetState+0x56>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 8003064:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8003068:	2b05      	cmp	r3, #5
 800306a:	bf98      	it	ls
 800306c:	4618      	movls	r0, r3
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800306e:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003070:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003072:	2103      	movs	r1, #3
 8003074:	4628      	mov	r0, r5
 8003076:	eb0d 0203 	add.w	r2, sp, r3
 800307a:	f000 f89d 	bl	80031b8 <ft5336_read_reg>
 800307e:	b9b0      	cbnz	r0, 80030ae <FT5336_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003080:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003084:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800308e:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003090:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 8003094:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 8003096:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030a0:	4313      	orrs	r3, r2
 80030a2:	60a3      	str	r3, [r4, #8]
}
 80030a4:	b003      	add	sp, #12
 80030a6:	bd30      	pop	{r4, r5, pc}
    ret = FT5336_ERROR;
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	e7df      	b.n	800306e <FT5336_GetState+0x1c>
    ret = FT5336_ERROR;
 80030ae:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80030b2:	e7f7      	b.n	80030a4 <FT5336_GetState+0x52>

080030b4 <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 80030b4:	3018      	adds	r0, #24
 80030b6:	f000 b88d 	b.w	80031d4 <ft5336_gest_id>

080030ba <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 80030ba:	2101      	movs	r1, #1
 80030bc:	3018      	adds	r0, #24
 80030be:	f000 b8e3 	b.w	8003288 <ft5336_g_mode>

080030c2 <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 80030c2:	2100      	movs	r1, #0
 80030c4:	3018      	adds	r0, #24
 80030c6:	f000 b8df 	b.w	8003288 <ft5336_g_mode>

080030ca <FT5336_Init>:
{
 80030ca:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80030cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80030d0:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80030d2:	b96b      	cbnz	r3, 80030f0 <FT5336_Init+0x26>
    pObj->IO.Init();
 80030d4:	6803      	ldr	r3, [r0, #0]
 80030d6:	4798      	blx	r3
    ret += FT5336_DisableIT(pObj);
 80030d8:	4620      	mov	r0, r4
 80030da:	f7ff fff2 	bl	80030c2 <FT5336_DisableIT>
  if(ret != FT5336_OK)
 80030de:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80030e0:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
 80030e4:	bf18      	it	ne
 80030e6:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80030e8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
 80030ec:	4240      	negs	r0, r0
}
 80030ee:	bd10      	pop	{r4, pc}
  int32_t ret = FT5336_OK;
 80030f0:	2000      	movs	r0, #0
  return ret;
 80030f2:	e7fc      	b.n	80030ee <FT5336_Init+0x24>

080030f4 <FT5336_ClearIT>:
 80030f4:	2000      	movs	r0, #0
 80030f6:	4770      	bx	lr

080030f8 <FT5336_GetMultiTouchState>:
{
 80030f8:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 80030fa:	f100 0518 	add.w	r5, r0, #24
{
 80030fe:	b088      	sub	sp, #32
 8003100:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 8003102:	4628      	mov	r0, r5
 8003104:	4669      	mov	r1, sp
 8003106:	f000 f86a 	bl	80031de <ft5336_td_status>
 800310a:	bb90      	cbnz	r0, 8003172 <FT5336_GetMultiTouchState+0x7a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800310c:	f89d 3000 	ldrb.w	r3, [sp]
      ret = (int32_t)nb_touch;
 8003110:	2b05      	cmp	r3, #5
 8003112:	bf98      	it	ls
 8003114:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 8003116:	6020      	str	r0, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 8003118:	231e      	movs	r3, #30
 800311a:	466a      	mov	r2, sp
 800311c:	2103      	movs	r1, #3
 800311e:	4628      	mov	r0, r5
 8003120:	f000 f84a 	bl	80031b8 <ft5336_read_reg>
 8003124:	bb40      	cbnz	r0, 8003178 <FT5336_GetMultiTouchState+0x80>
 8003126:	1d22      	adds	r2, r4, #4
 8003128:	466b      	mov	r3, sp
 800312a:	3418      	adds	r4, #24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800312c:	781d      	ldrb	r5, [r3, #0]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800312e:	3306      	adds	r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003130:	f813 6c05 	ldrb.w	r6, [r3, #-5]
 8003134:	0229      	lsls	r1, r5, #8
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 8003136:	09ad      	lsrs	r5, r5, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003138:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800313c:	4331      	orrs	r1, r6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800313e:	f813 6c03 	ldrb.w	r6, [r3, #-3]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 8003142:	f842 1b04 	str.w	r1, [r2], #4
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 8003146:	4294      	cmp	r4, r2
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 8003148:	f813 1c04 	ldrb.w	r1, [r3, #-4]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800314c:	6395      	str	r5, [r2, #56]	; 0x38
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800314e:	ea4f 2101 	mov.w	r1, r1, lsl #8
 8003152:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003156:	ea41 0106 	orr.w	r1, r1, r6
 800315a:	6111      	str	r1, [r2, #16]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800315c:	f813 1c02 	ldrb.w	r1, [r3, #-2]
 8003160:	6251      	str	r1, [r2, #36]	; 0x24
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 8003162:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8003166:	ea4f 1111 	mov.w	r1, r1, lsr #4
 800316a:	64d1      	str	r1, [r2, #76]	; 0x4c
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800316c:	d1de      	bne.n	800312c <FT5336_GetMultiTouchState+0x34>
}
 800316e:	b008      	add	sp, #32
 8003170:	bd70      	pop	{r4, r5, r6, pc}
    ret = FT5336_ERROR;
 8003172:	f04f 30ff 	mov.w	r0, #4294967295
 8003176:	e7ce      	b.n	8003116 <FT5336_GetMultiTouchState+0x1e>
    ret = FT5336_ERROR;
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800317c:	e7f7      	b.n	800316e <FT5336_GetMultiTouchState+0x76>
	...

08003180 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
 8003180:	b190      	cbz	r0, 80031a8 <FT5336_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8003182:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8003184:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003186:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8003188:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800318a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800318c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800318e:	68ca      	ldr	r2, [r1, #12]
 8003190:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003192:	690a      	ldr	r2, [r1, #16]
 8003194:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003196:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8003198:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800319a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800319c:	4a04      	ldr	r2, [pc, #16]	; (80031b0 <FT5336_RegisterBusIO+0x30>)
 800319e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80031a0:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <FT5336_RegisterBusIO+0x34>)
 80031a2:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80031a4:	b103      	cbz	r3, 80031a8 <FT5336_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80031a6:	4718      	bx	r3
}
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	08002fd5 	.word	0x08002fd5
 80031b4:	08002fe3 	.word	0x08002fe3

080031b8 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80031b8:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80031ba:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80031be:	46a4      	mov	ip, r4
}
 80031c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80031c4:	4760      	bx	ip

080031c6 <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80031c6:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80031c8:	6804      	ldr	r4, [r0, #0]
 80031ca:	6880      	ldr	r0, [r0, #8]
 80031cc:	46a4      	mov	ip, r4
}
 80031ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80031d2:	4760      	bx	ip

080031d4 <ft5336_gest_id>:
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80031d4:	2301      	movs	r3, #1
{
 80031d6:	460a      	mov	r2, r1
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 80031d8:	4619      	mov	r1, r3
 80031da:	f7ff bfed 	b.w	80031b8 <ft5336_read_reg>

080031de <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 80031de:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80031e0:	460a      	mov	r2, r1
{
 80031e2:	460c      	mov	r4, r1
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 80031e4:	2301      	movs	r3, #1
 80031e6:	2102      	movs	r1, #2
 80031e8:	f7ff ffe6 	bl	80031b8 <ft5336_read_reg>
  
  if(ret == 0)
 80031ec:	b918      	cbnz	r0, 80031f6 <ft5336_td_status+0x18>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 80031ee:	7823      	ldrb	r3, [r4, #0]
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80031f6:	bd10      	pop	{r4, pc}

080031f8 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 80031f8:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 80031fa:	2301      	movs	r3, #1
{
 80031fc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 8003200:	f10d 0207 	add.w	r2, sp, #7
 8003204:	2191      	movs	r1, #145	; 0x91
 8003206:	f7ff ffde 	bl	80031c6 <ft5336_write_reg>
}
 800320a:	b003      	add	sp, #12
 800320c:	f85d fb04 	ldr.w	pc, [sp], #4

08003210 <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003210:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003212:	2301      	movs	r3, #1
{
 8003214:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 8003218:	f10d 0207 	add.w	r2, sp, #7
 800321c:	2192      	movs	r1, #146	; 0x92
 800321e:	f7ff ffd2 	bl	80031c6 <ft5336_write_reg>
}
 8003222:	b003      	add	sp, #12
 8003224:	f85d fb04 	ldr.w	pc, [sp], #4

08003228 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003228:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800322a:	2301      	movs	r3, #1
{
 800322c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 8003230:	f10d 0207 	add.w	r2, sp, #7
 8003234:	2193      	movs	r1, #147	; 0x93
 8003236:	f7ff ffc6 	bl	80031c6 <ft5336_write_reg>
}
 800323a:	b003      	add	sp, #12
 800323c:	f85d fb04 	ldr.w	pc, [sp], #4

08003240 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 8003240:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003242:	2301      	movs	r3, #1
{
 8003244:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 8003248:	f10d 0207 	add.w	r2, sp, #7
 800324c:	2194      	movs	r1, #148	; 0x94
 800324e:	f7ff ffba 	bl	80031c6 <ft5336_write_reg>
}
 8003252:	b003      	add	sp, #12
 8003254:	f85d fb04 	ldr.w	pc, [sp], #4

08003258 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 8003258:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800325a:	2301      	movs	r3, #1
{
 800325c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 8003260:	f10d 0207 	add.w	r2, sp, #7
 8003264:	2195      	movs	r1, #149	; 0x95
 8003266:	f7ff ffae 	bl	80031c6 <ft5336_write_reg>
}
 800326a:	b003      	add	sp, #12
 800326c:	f85d fb04 	ldr.w	pc, [sp], #4

08003270 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 8003270:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003272:	2301      	movs	r3, #1
{
 8003274:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 8003278:	f10d 0207 	add.w	r2, sp, #7
 800327c:	2196      	movs	r1, #150	; 0x96
 800327e:	f7ff ffa2 	bl	80031c6 <ft5336_write_reg>
}
 8003282:	b003      	add	sp, #12
 8003284:	f85d fb04 	ldr.w	pc, [sp], #4

08003288 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 8003288:	b507      	push	{r0, r1, r2, lr}
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800328a:	2301      	movs	r3, #1
{
 800328c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 8003290:	f10d 0207 	add.w	r2, sp, #7
 8003294:	21a4      	movs	r1, #164	; 0xa4
 8003296:	f7ff ff96 	bl	80031c6 <ft5336_write_reg>
}
 800329a:	b003      	add	sp, #12
 800329c:	f85d fb04 	ldr.w	pc, [sp], #4

080032a0 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 80032a0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 80032a2:	2301      	movs	r3, #1
 80032a4:	21a8      	movs	r1, #168	; 0xa8
 80032a6:	f7ff bf87 	b.w	80031b8 <ft5336_read_reg>

080032aa <MX25LM51245G_GetFlashInfo>:
  */
int32_t MX25LM51245G_GetFlashInfo(MX25LM51245G_Info_t *pInfo)
{
  /* Configure the structure with the memory configuration */
  pInfo->FlashSize              = MX25LM51245G_FLASH_SIZE;
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80032aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
  pInfo->ProgPageSize           = MX25LM51245G_PAGE_SIZE;
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80032b2:	f44f 7180 	mov.w	r1, #256	; 0x100
  pInfo->EraseSectorSize        = MX25LM51245G_SECTOR_64K;
 80032b6:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSubSectorSize     = MX25LM51245G_SUBSECTOR_4K;
 80032ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032c2:	e9c0 3202 	strd	r3, r2, [r0, #8]
  pInfo->EraseSubSectorNumber   = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80032c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  pInfo->EraseSubSector1Size    = MX25LM51245G_SUBSECTOR_4K;
 80032ca:	e9c0 3204 	strd	r3, r2, [r0, #16]
  pInfo->EraseSubSector1Number  = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_SUBSECTOR_4K);
 80032ce:	6183      	str	r3, [r0, #24]
  pInfo->ProgPagesNumber        = (MX25LM51245G_FLASH_SIZE/MX25LM51245G_PAGE_SIZE);
 80032d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80032d4:	e9c0 1307 	strd	r1, r3, [r0, #28]

  return MX25LM51245G_OK;
};
 80032d8:	2000      	movs	r0, #0
 80032da:	4770      	bx	lr

080032dc <MX25LM51245G_AutoPollingMemReady>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate
  * @retval error status
  */
int32_t MX25LM51245G_AutoPollingMemReady(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80032dc:	b570      	push	{r4, r5, r6, lr}
 80032de:	b09a      	sub	sp, #104	; 0x68
 80032e0:	460d      	mov	r5, r1
 80032e2:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef  s_command = {0};
 80032e4:	2100      	movs	r1, #0
{
 80032e6:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef  s_command = {0};
 80032e8:	a806      	add	r0, sp, #24
 80032ea:	2250      	movs	r2, #80	; 0x50
 80032ec:	f01a fd12 	bl	801dd14 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 80032f0:	2214      	movs	r2, #20
 80032f2:	2100      	movs	r1, #0
 80032f4:	a801      	add	r0, sp, #4
 80032f6:	f01a fd0d 	bl	801dd14 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80032fa:	b92d      	cbnz	r5, 8003308 <MX25LM51245G_AutoPollingMemReady+0x2c>
 80032fc:	2c01      	cmp	r4, #1
 80032fe:	d159      	bne.n	80033b4 <MX25LM51245G_AutoPollingMemReady+0xd8>
  {
    return MX25LM51245G_ERROR;
 8003300:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 8003304:	b01a      	add	sp, #104	; 0x68
 8003306:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003308:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800330a:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800330c:	9309      	str	r3, [sp, #36]	; 0x24
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800330e:	f04f 0110 	mov.w	r1, #16
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003316:	bf0c      	ite	eq
 8003318:	2308      	moveq	r3, #8
 800331a:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800331c:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800331e:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003320:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003322:	bf0c      	ite	eq
 8003324:	2300      	moveq	r3, #0
 8003326:	2310      	movne	r3, #16
 8003328:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800332a:	f240 53fa 	movw	r3, #1530	; 0x5fa
 800332e:	bf08      	it	eq
 8003330:	2305      	moveq	r3, #5
 8003332:	9308      	str	r3, [sp, #32]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003334:	bf0c      	ite	eq
 8003336:	2300      	moveq	r3, #0
 8003338:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800333c:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 800333e:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003340:	bf0c      	ite	eq
 8003342:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 8003346:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003348:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800334a:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800334c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003350:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003352:	bf0c      	ite	eq
 8003354:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8003358:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800335c:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800335e:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003360:	bf0c      	ite	eq
 8003362:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 8003366:	2300      	movne	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003368:	2d00      	cmp	r5, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 800336a:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800336c:	bf0c      	ite	eq
 800336e:	2300      	moveq	r3, #0
 8003370:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003372:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003374:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003376:	bf0c      	ite	eq
 8003378:	2302      	moveq	r3, #2
 800337a:	2301      	movne	r3, #1
 800337c:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 800337e:	bf0c      	ite	eq
 8003380:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8003384:	2300      	movne	r3, #0
 8003386:	9318      	str	r3, [sp, #96]	; 0x60
  s_config.Mask          = MX25LM51245G_SR_WIP;
 8003388:	2301      	movs	r3, #1
 800338a:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800338c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003390:	e9cd 3104 	strd	r3, r1, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003394:	a906      	add	r1, sp, #24
 8003396:	f002 ffc4 	bl	8006322 <HAL_OSPI_Command>
 800339a:	2800      	cmp	r0, #0
 800339c:	d1b0      	bne.n	8003300 <MX25LM51245G_AutoPollingMemReady+0x24>
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800339e:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a2:	a901      	add	r1, sp, #4
 80033a4:	4630      	mov	r0, r6
 80033a6:	f003 f8f9 	bl	800659c <HAL_OSPI_AutoPolling>
 80033aa:	3800      	subs	r0, #0
 80033ac:	bf18      	it	ne
 80033ae:	2001      	movne	r0, #1
 80033b0:	4240      	negs	r0, r0
 80033b2:	e7a7      	b.n	8003304 <MX25LM51245G_AutoPollingMemReady+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e7a8      	b.n	800330a <MX25LM51245G_AutoPollingMemReady+0x2e>

080033b8 <MX25LM51245G_EnableSTRMemoryMappedMode>:
  * @param  Mode Interface mode
  * @param  AddressSize Address size
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableSTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_AddressSize_t AddressSize)
{
 80033b8:	b570      	push	{r4, r5, r6, lr}
 80033ba:	b096      	sub	sp, #88	; 0x58
 80033bc:	460c      	mov	r4, r1
 80033be:	4606      	mov	r6, r0
 80033c0:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef      s_command = {0};
 80033c2:	2100      	movs	r1, #0
 80033c4:	2250      	movs	r2, #80	; 0x50
 80033c6:	a802      	add	r0, sp, #8
 80033c8:	f01a fca4 	bl	801dd14 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80033cc:	2300      	movs	r3, #0

  /* OPI mode and 3-bytes address size not supported by memory */
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80033ce:	2c01      	cmp	r4, #1
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80033d0:	e9cd 3300 	strd	r3, r3, [sp]
  if ((Mode == MX25LM51245G_OPI_MODE) && (AddressSize == MX25LM51245G_3BYTES_SIZE))
 80033d4:	d104      	bne.n	80033e0 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
 80033d6:	b91d      	cbnz	r5, 80033e0 <MX25LM51245G_EnableSTRMemoryMappedMode+0x28>
  {
    return MX25LM51245G_ERROR;
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80033dc:	b016      	add	sp, #88	; 0x58
 80033de:	bd70      	pop	{r4, r5, r6, pc}
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80033e0:	2301      	movs	r3, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033e2:	2c00      	cmp	r4, #0
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80033e4:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80033e6:	bf18      	it	ne
 80033e8:	2304      	movne	r3, #4
 80033ea:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80033ec:	bf0c      	ite	eq
 80033ee:	2300      	moveq	r3, #0
 80033f0:	2310      	movne	r3, #16
 80033f2:	9306      	str	r3, [sp, #24]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 80033f4:	d140      	bne.n	8003478 <MX25LM51245G_EnableSTRMemoryMappedMode+0xc0>
 80033f6:	2d00      	cmp	r5, #0
 80033f8:	bf0c      	ite	eq
 80033fa:	230b      	moveq	r3, #11
 80033fc:	230c      	movne	r3, #12
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 80033fe:	2c00      	cmp	r4, #0
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003400:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003402:	f241 3288 	movw	r2, #5000	; 0x1388
 8003406:	a902      	add	r1, sp, #8
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003408:	bf0c      	ite	eq
 800340a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800340e:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003412:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003414:	4630      	mov	r0, r6
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003416:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003418:	bf0c      	ite	eq
 800341a:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 800341e:	f44f 5340 	movne.w	r3, #12288	; 0x3000
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003422:	2c00      	cmp	r4, #0
  s_command.AddressSize        = (AddressSize == MX25LM51245G_3BYTES_SIZE) ? HAL_OSPI_ADDRESS_24_BITS : HAL_OSPI_ADDRESS_32_BITS;
 8003424:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003426:	bf0c      	ite	eq
 8003428:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800342c:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8003430:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? DUMMY_CYCLES_READ : DUMMY_CYCLES_READ_OCTAL;
 8003432:	bf0c      	ite	eq
 8003434:	2308      	moveq	r3, #8
 8003436:	2306      	movne	r3, #6
 8003438:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800343a:	f002 ff72 	bl	8006322 <HAL_OSPI_Command>
 800343e:	2800      	cmp	r0, #0
 8003440:	d1ca      	bne.n	80033d8 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_command.OperationType      = HAL_OSPI_OPTYPE_WRITE_CFG;
 8003442:	2302      	movs	r3, #2
 8003444:	9302      	str	r3, [sp, #8]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003446:	b9d4      	cbnz	r4, 800347e <MX25LM51245G_EnableSTRMemoryMappedMode+0xc6>
 8003448:	2d00      	cmp	r5, #0
 800344a:	bf18      	it	ne
 800344c:	2312      	movne	r3, #18
 800344e:	9304      	str	r3, [sp, #16]
  s_command.DummyCycles        = 0U;
 8003450:	2300      	movs	r3, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003452:	f241 3288 	movw	r2, #5000	; 0x1388
 8003456:	a902      	add	r1, sp, #8
 8003458:	4630      	mov	r0, r6
  s_command.DummyCycles        = 0U;
 800345a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800345c:	f002 ff61 	bl	8006322 <HAL_OSPI_Command>
 8003460:	2800      	cmp	r0, #0
 8003462:	d1b9      	bne.n	80033d8 <MX25LM51245G_EnableSTRMemoryMappedMode+0x20>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8003464:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003466:	4669      	mov	r1, sp
 8003468:	4630      	mov	r0, r6
 800346a:	f003 f8e7 	bl	800663c <HAL_OSPI_MemoryMapped>
 800346e:	3800      	subs	r0, #0
 8003470:	bf18      	it	ne
 8003472:	2001      	movne	r0, #1
 8003474:	4240      	negs	r0, r0
 8003476:	e7b1      	b.n	80033dc <MX25LM51245G_EnableSTRMemoryMappedMode+0x24>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_FAST_READ_CMD : MX25LM51245G_4_BYTE_ADDR_FAST_READ_CMD) : MX25LM51245G_OCTA_READ_CMD;
 8003478:	f64e 4313 	movw	r3, #60435	; 0xec13
 800347c:	e7bf      	b.n	80033fe <MX25LM51245G_EnableSTRMemoryMappedMode+0x46>
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? ((AddressSize == MX25LM51245G_3BYTES_SIZE) ? MX25LM51245G_PAGE_PROG_CMD : MX25LM51245G_4_BYTE_PAGE_PROG_CMD) : MX25LM51245G_OCTA_PAGE_PROG_CMD;
 800347e:	f241 23ed 	movw	r3, #4845	; 0x12ed
 8003482:	e7e4      	b.n	800344e <MX25LM51245G_EnableSTRMemoryMappedMode+0x96>

08003484 <MX25LM51245G_EnableDTRMemoryMappedMode>:
  * @param  AddressSize Address size
  * @note   Only OPI mode support DTR transfer rate
  * @retval OSPI memory status
  */
int32_t MX25LM51245G_EnableDTRMemoryMappedMode(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode)
{
 8003484:	b510      	push	{r4, lr}
 8003486:	b096      	sub	sp, #88	; 0x58
 8003488:	4604      	mov	r4, r0
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Mode);

  OSPI_RegularCmdTypeDef      s_command = {0};
 800348a:	224c      	movs	r2, #76	; 0x4c
 800348c:	2100      	movs	r1, #0
 800348e:	a803      	add	r0, sp, #12
 8003490:	f01a fc40 	bl	801dd14 <memset>
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 8003494:	2300      	movs	r3, #0
  /* Initialize the read command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
  s_command.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_ENABLE;
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 8003496:	f04f 0c08 	mov.w	ip, #8
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
  s_command.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_ENABLE;
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 800349a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4620      	mov	r0, r4
  OSPI_MemoryMappedTypeDef s_mem_mapped_cfg = {0};
 80034a4:	e9cd 3300 	strd	r3, r3, [sp]
  s_command.OperationType      = HAL_OSPI_OPTYPE_READ_CFG;
 80034a8:	2301      	movs	r3, #1
 80034aa:	9302      	str	r3, [sp, #8]
  s_command.InstructionMode    = HAL_OSPI_INSTRUCTION_8_LINES;
 80034ac:	2304      	movs	r3, #4
 80034ae:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = HAL_OSPI_INSTRUCTION_16_BITS;
 80034b0:	2310      	movs	r3, #16
 80034b2:	e9cd 3c06 	strd	r3, ip, [sp, #24]
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80034b6:	f64e 6311 	movw	r3, #60945	; 0xee11
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80034ba:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
  s_command.Instruction        = MX25LM51245G_OCTA_READ_DTR_CMD;
 80034be:	9304      	str	r3, [sp, #16]
  s_command.AddressMode        = HAL_OSPI_ADDRESS_8_LINES;
 80034c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c4:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 80034c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80034ca:	e9cd 310a 	strd	r3, r1, [sp, #40]	; 0x28
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80034ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034d2:	a902      	add	r1, sp, #8
  s_command.DataMode           = HAL_OSPI_DATA_8_LINES;
 80034d4:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = DUMMY_CYCLES_READ_OCTAL_DTR;
 80034d6:	2306      	movs	r3, #6
 80034d8:	e9cd c312 	strd	ip, r3, [sp, #72]	; 0x48
  s_command.DQSMode            = HAL_OSPI_DQS_ENABLE;
 80034dc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80034e0:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034e2:	f002 ff1e 	bl	8006322 <HAL_OSPI_Command>
 80034e6:	b118      	cbz	r0, 80034f0 <MX25LM51245G_EnableDTRMemoryMappedMode+0x6c>
  {
    return MX25LM51245G_ERROR;
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80034ec:	b016      	add	sp, #88	; 0x58
 80034ee:	bd10      	pop	{r4, pc}
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80034f0:	2302      	movs	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	a902      	add	r1, sp, #8
  s_command.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 80034f8:	9302      	str	r3, [sp, #8]
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 80034fa:	f241 23ed 	movw	r3, #4845	; 0x12ed
  s_command.DQSMode       = HAL_OSPI_DQS_DISABLE;
 80034fe:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003502:	4620      	mov	r0, r4
  s_command.Instruction   = MX25LM51245G_OCTA_PAGE_PROG_CMD;
 8003504:	9304      	str	r3, [sp, #16]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003506:	f002 ff0c 	bl	8006322 <HAL_OSPI_Command>
 800350a:	2800      	cmp	r0, #0
 800350c:	d1ec      	bne.n	80034e8 <MX25LM51245G_EnableDTRMemoryMappedMode+0x64>
  s_mem_mapped_cfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 800350e:	9000      	str	r0, [sp, #0]
  if (HAL_OSPI_MemoryMapped(Ctx, &s_mem_mapped_cfg) != HAL_OK)
 8003510:	4669      	mov	r1, sp
 8003512:	4620      	mov	r0, r4
 8003514:	f003 f892 	bl	800663c <HAL_OSPI_MemoryMapped>
 8003518:	3800      	subs	r0, #0
 800351a:	bf18      	it	ne
 800351c:	2001      	movne	r0, #1
 800351e:	4240      	negs	r0, r0
 8003520:	e7e4      	b.n	80034ec <MX25LM51245G_EnableDTRMemoryMappedMode+0x68>

08003522 <MX25LM51245G_WriteEnable>:
  * @param  Mode Interface mode
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_WriteEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 8003522:	b570      	push	{r4, r5, r6, lr}
 8003524:	b09a      	sub	sp, #104	; 0x68
 8003526:	460d      	mov	r5, r1
 8003528:	4606      	mov	r6, r0
  OSPI_RegularCmdTypeDef     s_command = {0};
 800352a:	2100      	movs	r1, #0
{
 800352c:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef     s_command = {0};
 800352e:	a806      	add	r0, sp, #24
 8003530:	2250      	movs	r2, #80	; 0x50
 8003532:	f01a fbef 	bl	801dd14 <memset>
  OSPI_AutoPollingTypeDef s_config = {0};
 8003536:	2214      	movs	r2, #20
 8003538:	2100      	movs	r1, #0
 800353a:	a801      	add	r0, sp, #4
 800353c:	f01a fbea 	bl	801dd14 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003540:	b92d      	cbnz	r5, 800354e <MX25LM51245G_WriteEnable+0x2c>
 8003542:	2c01      	cmp	r4, #1
 8003544:	d169      	bne.n	800361a <MX25LM51245G_WriteEnable+0xf8>
  {
    return MX25LM51245G_ERROR;
 8003546:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800354a:	b01a      	add	sp, #104	; 0x68
 800354c:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800354e:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003550:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003552:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	a906      	add	r1, sp, #24
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800355a:	bf0c      	ite	eq
 800355c:	2308      	moveq	r3, #8
 800355e:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003560:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003562:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003564:	930b      	str	r3, [sp, #44]	; 0x2c
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003566:	bf0c      	ite	eq
 8003568:	2300      	moveq	r3, #0
 800356a:	2310      	movne	r3, #16
 800356c:	930a      	str	r3, [sp, #40]	; 0x28
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_ENABLE_CMD : MX25LM51245G_OCTA_WRITE_ENABLE_CMD;
 800356e:	f240 63f9 	movw	r3, #1785	; 0x6f9
 8003572:	bf08      	it	eq
 8003574:	2306      	moveq	r3, #6
 8003576:	9308      	str	r3, [sp, #32]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003578:	f002 fed3 	bl	8006322 <HAL_OSPI_Command>
 800357c:	2800      	cmp	r0, #0
 800357e:	d1e2      	bne.n	8003546 <MX25LM51245G_WriteEnable+0x24>
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003580:	2d00      	cmp	r5, #0
 8003582:	f240 53fa 	movw	r3, #1530	; 0x5fa
  s_command.Address        = 0U;
 8003586:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003588:	f241 3288 	movw	r2, #5000	; 0x1388
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 800358c:	bf08      	it	eq
 800358e:	2305      	moveq	r3, #5
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003590:	a906      	add	r1, sp, #24
 8003592:	4630      	mov	r0, r6
  s_command.Instruction    = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_STATUS_REG_CMD : MX25LM51245G_OCTA_READ_STATUS_REG_CMD;
 8003594:	9308      	str	r3, [sp, #32]
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 8003596:	bf0c      	ite	eq
 8003598:	2300      	moveq	r3, #0
 800359a:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800359e:	2c01      	cmp	r4, #1
  s_command.AddressMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_NONE : HAL_OSPI_ADDRESS_8_LINES;
 80035a0:	930d      	str	r3, [sp, #52]	; 0x34
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80035a2:	bf0c      	ite	eq
 80035a4:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 80035a8:	2300      	movne	r3, #0
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80035aa:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 80035ac:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.AddressSize    = HAL_OSPI_ADDRESS_32_BITS;
 80035ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035b2:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80035b4:	bf0c      	ite	eq
 80035b6:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 80035ba:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80035be:	2c01      	cmp	r4, #1
  s_command.DataMode       = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 80035c0:	9314      	str	r3, [sp, #80]	; 0x50
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80035c2:	bf0c      	ite	eq
 80035c4:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 80035c8:	2300      	movne	r3, #0
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80035ca:	2d00      	cmp	r5, #0
  s_command.DataDtrMode    = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 80035cc:	9316      	str	r3, [sp, #88]	; 0x58
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80035ce:	bf0c      	ite	eq
 80035d0:	2300      	moveq	r3, #0
 80035d2:	2305      	movne	r3, #5
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80035d4:	2c01      	cmp	r4, #1
  s_command.DummyCycles    = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 80035d6:	9317      	str	r3, [sp, #92]	; 0x5c
  s_command.NbData         = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 80035d8:	bf0c      	ite	eq
 80035da:	2302      	moveq	r3, #2
 80035dc:	2301      	movne	r3, #1
 80035de:	9315      	str	r3, [sp, #84]	; 0x54
  s_command.DQSMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 80035e0:	bf0c      	ite	eq
 80035e2:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 80035e6:	2300      	movne	r3, #0
 80035e8:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035ea:	f002 fe9a 	bl	8006322 <HAL_OSPI_Command>
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d1a9      	bne.n	8003546 <MX25LM51245G_WriteEnable+0x24>
  s_config.Match           = 2U;
 80035f2:	2302      	movs	r3, #2
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80035f4:	2210      	movs	r2, #16
  s_config.MatchMode       = HAL_OSPI_MATCH_MODE_AND;
 80035f6:	9003      	str	r0, [sp, #12]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80035f8:	a901      	add	r1, sp, #4
 80035fa:	4630      	mov	r0, r6
  s_config.Mask            = 2U;
 80035fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
  s_config.AutomaticStop   = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8003600:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003604:	e9cd 3204 	strd	r3, r2, [sp, #16]
  if (HAL_OSPI_AutoPolling(Ctx, &s_config, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003608:	f241 3288 	movw	r2, #5000	; 0x1388
 800360c:	f002 ffc6 	bl	800659c <HAL_OSPI_AutoPolling>
 8003610:	3800      	subs	r0, #0
 8003612:	bf18      	it	ne
 8003614:	2001      	movne	r0, #1
 8003616:	4240      	negs	r0, r0
 8003618:	e797      	b.n	800354a <MX25LM51245G_WriteEnable+0x28>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800361a:	2301      	movs	r3, #1
 800361c:	e798      	b.n	8003550 <MX25LM51245G_WriteEnable+0x2e>

0800361e <MX25LM51245G_WriteCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value Value to write to configuration register
  * @retval error status
  */
int32_t MX25LM51245G_WriteCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t WriteAddr, uint8_t Value)
{
 800361e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003620:	b095      	sub	sp, #84	; 0x54
 8003622:	460d      	mov	r5, r1
 8003624:	4606      	mov	r6, r0
 8003626:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003628:	2100      	movs	r1, #0
 800362a:	2250      	movs	r2, #80	; 0x50
 800362c:	4668      	mov	r0, sp
{
 800362e:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 8003630:	f01a fb70 	bl	801dd14 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003634:	b92d      	cbnz	r5, 8003642 <MX25LM51245G_WriteCfg2Register+0x24>
 8003636:	2c01      	cmp	r4, #1
 8003638:	d14a      	bne.n	80036d0 <MX25LM51245G_WriteCfg2Register+0xb2>
  {
    return MX25LM51245G_ERROR;
 800363a:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800363e:	b015      	add	sp, #84	; 0x54
 8003640:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003642:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003644:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003646:	9303      	str	r3, [sp, #12]
  s_command.Address            = WriteAddr;
 8003648:	9706      	str	r7, [sp, #24]
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800364a:	bf0c      	ite	eq
 800364c:	2308      	moveq	r3, #8
 800364e:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003650:	2d00      	cmp	r5, #0
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003652:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003654:	bf0c      	ite	eq
 8003656:	2300      	moveq	r3, #0
 8003658:	2310      	movne	r3, #16
 800365a:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_WRITE_CFG_REG2_CMD : MX25LM51245G_OCTA_WRITE_CFG_REG2_CMD;
 800365c:	f247 238d 	movw	r3, #29325	; 0x728d
 8003660:	bf08      	it	eq
 8003662:	2372      	moveq	r3, #114	; 0x72
 8003664:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003666:	bf0c      	ite	eq
 8003668:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800366c:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003670:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003672:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003674:	bf0c      	ite	eq
 8003676:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 800367a:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800367c:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003680:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003684:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003686:	bf0c      	ite	eq
 8003688:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800368c:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003690:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003692:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003694:	bf0c      	ite	eq
 8003696:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 800369a:	2300      	movne	r3, #0
 800369c:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 800369e:	b1cd      	cbz	r5, 80036d4 <MX25LM51245G_WriteCfg2Register+0xb6>
 80036a0:	2c01      	cmp	r4, #1
 80036a2:	bf14      	ite	ne
 80036a4:	2301      	movne	r3, #1
 80036a6:	2302      	moveq	r3, #2
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ac:	4669      	mov	r1, sp
 80036ae:	4630      	mov	r0, r6
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80036b0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036b2:	f002 fe36 	bl	8006322 <HAL_OSPI_Command>
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d1bf      	bne.n	800363a <MX25LM51245G_WriteCfg2Register+0x1c>
  if (HAL_OSPI_Transmit(Ctx, &Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	a91a      	add	r1, sp, #104	; 0x68
 80036c0:	4630      	mov	r0, r6
 80036c2:	f002 fed9 	bl	8006478 <HAL_OSPI_Transmit>
 80036c6:	3800      	subs	r0, #0
 80036c8:	bf18      	it	ne
 80036ca:	2001      	movne	r0, #1
 80036cc:	4240      	negs	r0, r0
 80036ce:	e7b6      	b.n	800363e <MX25LM51245G_WriteCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e7b7      	b.n	8003644 <MX25LM51245G_WriteCfg2Register+0x26>
  s_command.NbData             = (Mode == MX25LM51245G_SPI_MODE) ? 1U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U);
 80036d4:	2301      	movs	r3, #1
 80036d6:	e7e7      	b.n	80036a8 <MX25LM51245G_WriteCfg2Register+0x8a>

080036d8 <MX25LM51245G_ReadCfg2Register>:
  * @param  Rate Transfer rate STR or DTR
  * @param  Value configuration register 2 value pointer
  * @retval error status
  */
int32_t MX25LM51245G_ReadCfg2Register(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate, uint32_t ReadAddr, uint8_t *Value)
{
 80036d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036da:	b095      	sub	sp, #84	; 0x54
 80036dc:	460d      	mov	r5, r1
 80036de:	4606      	mov	r6, r0
 80036e0:	4614      	mov	r4, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80036e2:	2100      	movs	r1, #0
 80036e4:	2250      	movs	r2, #80	; 0x50
 80036e6:	4668      	mov	r0, sp
{
 80036e8:	461f      	mov	r7, r3
  OSPI_RegularCmdTypeDef s_command = {0};
 80036ea:	f01a fb13 	bl	801dd14 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80036ee:	b92d      	cbnz	r5, 80036fc <MX25LM51245G_ReadCfg2Register+0x24>
 80036f0:	2c01      	cmp	r4, #1
 80036f2:	d153      	bne.n	800379c <MX25LM51245G_ReadCfg2Register+0xc4>
  {
    return MX25LM51245G_ERROR;
 80036f4:	f04f 30ff 	mov.w	r0, #4294967295
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80036f8:	b015      	add	sp, #84	; 0x54
 80036fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80036fc:	2304      	movs	r3, #4
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80036fe:	2c01      	cmp	r4, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003700:	9303      	str	r3, [sp, #12]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003702:	f241 3288 	movw	r2, #5000	; 0x1388
 8003706:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003708:	bf0c      	ite	eq
 800370a:	2308      	moveq	r3, #8
 800370c:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800370e:	2d00      	cmp	r5, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003710:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003712:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003714:	bf0c      	ite	eq
 8003716:	2300      	moveq	r3, #0
 8003718:	2310      	movne	r3, #16
  s_command.Address            = ReadAddr;
 800371a:	9706      	str	r7, [sp, #24]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800371c:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_READ_CFG_REG2_CMD : MX25LM51245G_OCTA_READ_CFG_REG2_CMD;
 800371e:	f247 138e 	movw	r3, #29070	; 0x718e
 8003722:	bf08      	it	eq
 8003724:	2371      	moveq	r3, #113	; 0x71
 8003726:	9302      	str	r3, [sp, #8]
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003728:	bf0c      	ite	eq
 800372a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800372e:	f44f 6380 	movne.w	r3, #1024	; 0x400
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003732:	2c01      	cmp	r4, #1
  s_command.AddressMode        = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_ADDRESS_1_LINE : HAL_OSPI_ADDRESS_8_LINES;
 8003734:	9307      	str	r3, [sp, #28]
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003736:	bf0c      	ite	eq
 8003738:	f44f 6300 	moveq.w	r3, #2048	; 0x800
 800373c:	2300      	movne	r3, #0
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 800373e:	2d00      	cmp	r5, #0
  s_command.AddressDtrMode     = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_ADDRESS_DTR_ENABLE : HAL_OSPI_ADDRESS_DTR_DISABLE;
 8003740:	9309      	str	r3, [sp, #36]	; 0x24
  s_command.AddressSize        = HAL_OSPI_ADDRESS_32_BITS;
 8003742:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003746:	9308      	str	r3, [sp, #32]
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003748:	bf0c      	ite	eq
 800374a:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800374e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003752:	2c01      	cmp	r4, #1
  s_command.DataMode           = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_DATA_1_LINE : HAL_OSPI_DATA_8_LINES;
 8003754:	930e      	str	r3, [sp, #56]	; 0x38
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003756:	bf0c      	ite	eq
 8003758:	f04f 6300 	moveq.w	r3, #134217728	; 0x8000000
 800375c:	2300      	movne	r3, #0
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800375e:	2d00      	cmp	r5, #0
  s_command.DataDtrMode        = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DATA_DTR_ENABLE : HAL_OSPI_DATA_DTR_DISABLE;
 8003760:	9310      	str	r3, [sp, #64]	; 0x40
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 8003762:	bf0c      	ite	eq
 8003764:	2300      	moveq	r3, #0
 8003766:	2305      	movne	r3, #5
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 8003768:	2c01      	cmp	r4, #1
  s_command.DummyCycles        = (Mode == MX25LM51245G_SPI_MODE) ? 0U : ((Rate == MX25LM51245G_DTR_TRANSFER) ? DUMMY_CYCLES_REG_OCTAL_DTR : DUMMY_CYCLES_REG_OCTAL);
 800376a:	9311      	str	r3, [sp, #68]	; 0x44
  s_command.NbData             = (Rate == MX25LM51245G_DTR_TRANSFER) ? 2U : 1U;
 800376c:	bf0c      	ite	eq
 800376e:	2302      	moveq	r3, #2
 8003770:	2301      	movne	r3, #1
 8003772:	930f      	str	r3, [sp, #60]	; 0x3c
  s_command.DQSMode            = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_DQS_ENABLE : HAL_OSPI_DQS_DISABLE;
 8003774:	bf0c      	ite	eq
 8003776:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 800377a:	2300      	movne	r3, #0
 800377c:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800377e:	f002 fdd0 	bl	8006322 <HAL_OSPI_Command>
 8003782:	2800      	cmp	r0, #0
 8003784:	d1b6      	bne.n	80036f4 <MX25LM51245G_ReadCfg2Register+0x1c>
  if (HAL_OSPI_Receive(Ctx, Value, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800378c:	4630      	mov	r0, r6
 800378e:	f002 feb3 	bl	80064f8 <HAL_OSPI_Receive>
 8003792:	3800      	subs	r0, #0
 8003794:	bf18      	it	ne
 8003796:	2001      	movne	r0, #1
 8003798:	4240      	negs	r0, r0
 800379a:	e7ad      	b.n	80036f8 <MX25LM51245G_ReadCfg2Register+0x20>
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800379c:	2301      	movs	r3, #1
 800379e:	e7ae      	b.n	80036fe <MX25LM51245G_ReadCfg2Register+0x26>

080037a0 <MX25LM51245G_ResetEnable>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetEnable(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80037a0:	b570      	push	{r4, r5, r6, lr}
 80037a2:	b094      	sub	sp, #80	; 0x50
 80037a4:	460c      	mov	r4, r1
 80037a6:	4606      	mov	r6, r0
 80037a8:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 80037aa:	2100      	movs	r1, #0
 80037ac:	2250      	movs	r2, #80	; 0x50
 80037ae:	4668      	mov	r0, sp
 80037b0:	f01a fab0 	bl	801dd14 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 80037b4:	b9f4      	cbnz	r4, 80037f4 <MX25LM51245G_ResetEnable+0x54>
 80037b6:	2d01      	cmp	r5, #1
 80037b8:	d01e      	beq.n	80037f8 <MX25LM51245G_ResetEnable+0x58>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80037ba:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80037bc:	2d01      	cmp	r5, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80037be:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c4:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80037c6:	bf0c      	ite	eq
 80037c8:	2308      	moveq	r3, #8
 80037ca:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80037cc:	2c00      	cmp	r4, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037ce:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80037d0:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 80037d2:	bf0c      	ite	eq
 80037d4:	2300      	moveq	r3, #0
 80037d6:	2310      	movne	r3, #16
 80037d8:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_ENABLE_CMD : MX25LM51245G_OCTA_RESET_ENABLE_CMD;
 80037da:	f246 6399 	movw	r3, #26265	; 0x6699
 80037de:	bf08      	it	eq
 80037e0:	2366      	moveq	r3, #102	; 0x66
 80037e2:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80037e4:	f002 fd9d 	bl	8006322 <HAL_OSPI_Command>
 80037e8:	3800      	subs	r0, #0
 80037ea:	bf18      	it	ne
 80037ec:	2001      	movne	r0, #1
 80037ee:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 80037f0:	b014      	add	sp, #80	; 0x50
 80037f2:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 80037f4:	2304      	movs	r3, #4
 80037f6:	e7e1      	b.n	80037bc <MX25LM51245G_ResetEnable+0x1c>
    return MX25LM51245G_ERROR;
 80037f8:	f04f 30ff 	mov.w	r0, #4294967295
 80037fc:	e7f8      	b.n	80037f0 <MX25LM51245G_ResetEnable+0x50>

080037fe <MX25LM51245G_ResetMemory>:
  * @param  Mode Interface select
  * @param  Rate Transfer rate STR or DTR
  * @retval error status
  */
int32_t MX25LM51245G_ResetMemory(OSPI_HandleTypeDef *Ctx, MX25LM51245G_Interface_t Mode, MX25LM51245G_Transfer_t Rate)
{
 80037fe:	b570      	push	{r4, r5, r6, lr}
 8003800:	b094      	sub	sp, #80	; 0x50
 8003802:	460c      	mov	r4, r1
 8003804:	4606      	mov	r6, r0
 8003806:	4615      	mov	r5, r2
  OSPI_RegularCmdTypeDef s_command = {0};
 8003808:	2100      	movs	r1, #0
 800380a:	2250      	movs	r2, #80	; 0x50
 800380c:	4668      	mov	r0, sp
 800380e:	f01a fa81 	bl	801dd14 <memset>

  /* SPI mode and DTR transfer not supported by memory */
  if ((Mode == MX25LM51245G_SPI_MODE) && (Rate == MX25LM51245G_DTR_TRANSFER))
 8003812:	b9f4      	cbnz	r4, 8003852 <MX25LM51245G_ResetMemory+0x54>
 8003814:	2d01      	cmp	r5, #1
 8003816:	d01e      	beq.n	8003856 <MX25LM51245G_ResetMemory+0x58>
  }

  /* Initialize the reset enable command */
  s_command.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
  s_command.FlashId            = HAL_OSPI_FLASH_ID_1;
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003818:	2301      	movs	r3, #1
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800381a:	2d01      	cmp	r5, #1
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 800381c:	9303      	str	r3, [sp, #12]
  s_command.DummyCycles        = 0U;
  s_command.DQSMode            = HAL_OSPI_DQS_DISABLE;
  s_command.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800381e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003822:	4669      	mov	r1, sp
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8003824:	bf0c      	ite	eq
 8003826:	2308      	moveq	r3, #8
 8003828:	2300      	movne	r3, #0
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 800382a:	2c00      	cmp	r4, #0
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800382c:	4630      	mov	r0, r6
  s_command.InstructionDtrMode = (Rate == MX25LM51245G_DTR_TRANSFER) ? HAL_OSPI_INSTRUCTION_DTR_ENABLE : HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800382e:	9305      	str	r3, [sp, #20]
  s_command.InstructionSize    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_8_BITS : HAL_OSPI_INSTRUCTION_16_BITS;
 8003830:	bf0c      	ite	eq
 8003832:	2300      	moveq	r3, #0
 8003834:	2310      	movne	r3, #16
 8003836:	9304      	str	r3, [sp, #16]
  s_command.Instruction        = (Mode == MX25LM51245G_SPI_MODE) ? MX25LM51245G_RESET_MEMORY_CMD : MX25LM51245G_OCTA_RESET_MEMORY_CMD;
 8003838:	f649 1366 	movw	r3, #39270	; 0x9966
 800383c:	bf08      	it	eq
 800383e:	2399      	moveq	r3, #153	; 0x99
 8003840:	9302      	str	r3, [sp, #8]
  if (HAL_OSPI_Command(Ctx, &s_command, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8003842:	f002 fd6e 	bl	8006322 <HAL_OSPI_Command>
 8003846:	3800      	subs	r0, #0
 8003848:	bf18      	it	ne
 800384a:	2001      	movne	r0, #1
 800384c:	4240      	negs	r0, r0
  {
    return MX25LM51245G_ERROR;
  }

  return MX25LM51245G_OK;
}
 800384e:	b014      	add	sp, #80	; 0x50
 8003850:	bd70      	pop	{r4, r5, r6, pc}
  s_command.InstructionMode    = (Mode == MX25LM51245G_SPI_MODE) ? HAL_OSPI_INSTRUCTION_1_LINE : HAL_OSPI_INSTRUCTION_8_LINES;
 8003852:	2304      	movs	r3, #4
 8003854:	e7e1      	b.n	800381a <MX25LM51245G_ResetMemory+0x1c>
    return MX25LM51245G_ERROR;
 8003856:	f04f 30ff 	mov.w	r0, #4294967295
 800385a:	e7f8      	b.n	800384e <MX25LM51245G_ResetMemory+0x50>

0800385c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  if (I2c4InitCounter > 0U)
 800385c:	4a11      	ldr	r2, [pc, #68]	; (80038a4 <BSP_I2C4_DeInit+0x48>)
{
 800385e:	b508      	push	{r3, lr}
  if (I2c4InitCounter > 0U)
 8003860:	6813      	ldr	r3, [r2, #0]
 8003862:	b90b      	cbnz	r3, 8003868 <BSP_I2C4_DeInit+0xc>
  int32_t ret  = BSP_ERROR_NONE;
 8003864:	2000      	movs	r0, #0
      }
    }
  }

  return ret;
}
 8003866:	bd08      	pop	{r3, pc}
    if (--I2c4InitCounter == 0U)
 8003868:	3b01      	subs	r3, #1
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1f9      	bne.n	8003864 <BSP_I2C4_DeInit+0x8>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8003870:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003874:	480c      	ldr	r0, [pc, #48]	; (80038a8 <BSP_I2C4_DeInit+0x4c>)
 8003876:	f001 f95d 	bl	8004b34 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800387a:	480b      	ldr	r0, [pc, #44]	; (80038a8 <BSP_I2C4_DeInit+0x4c>)
 800387c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003880:	f001 f958 	bl	8004b34 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003884:	4a09      	ldr	r2, [pc, #36]	; (80038ac <BSP_I2C4_DeInit+0x50>)
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003886:	480a      	ldr	r0, [pc, #40]	; (80038b0 <BSP_I2C4_DeInit+0x54>)
  BUS_I2C4_CLK_DISABLE();
 8003888:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
 800388c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003890:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
      if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8003894:	f002 f804 	bl	80058a0 <HAL_I2C_DeInit>
 8003898:	2800      	cmp	r0, #0
 800389a:	d0e3      	beq.n	8003864 <BSP_I2C4_DeInit+0x8>
        ret = BSP_ERROR_BUS_FAILURE;
 800389c:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80038a0:	e7e1      	b.n	8003866 <BSP_I2C4_DeInit+0xa>
 80038a2:	bf00      	nop
 80038a4:	24001f2c 	.word	0x24001f2c
 80038a8:	58021400 	.word	0x58021400
 80038ac:	58024400 	.word	0x58024400
 80038b0:	24002934 	.word	0x24002934

080038b4 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80038b4:	2300      	movs	r3, #0
 80038b6:	2201      	movs	r2, #1
{
 80038b8:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80038ba:	6041      	str	r1, [r0, #4]
{
 80038bc:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80038be:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80038c0:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80038c4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80038c8:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80038cc:	f001 ff96 	bl	80057fc <HAL_I2C_Init>
 80038d0:	4601      	mov	r1, r0
 80038d2:	b108      	cbz	r0, 80038d8 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80038d4:	2001      	movs	r0, #1
}
 80038d6:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80038d8:	4620      	mov	r0, r4
 80038da:	f002 f972 	bl	8005bc2 <HAL_I2CEx_ConfigAnalogFilter>
 80038de:	4601      	mov	r1, r0
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d1f7      	bne.n	80038d4 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80038e4:	4620      	mov	r0, r4
 80038e6:	f002 f992 	bl	8005c0e <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
 80038ea:	3800      	subs	r0, #0
 80038ec:	bf18      	it	ne
 80038ee:	2001      	movne	r0, #1
 80038f0:	e7f1      	b.n	80038d6 <MX_I2C4_Init+0x22>
	...

080038f4 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80038f4:	4ba1      	ldr	r3, [pc, #644]	; (8003b7c <BSP_I2C4_Init+0x288>)
 80038f6:	48a2      	ldr	r0, [pc, #648]	; (8003b80 <BSP_I2C4_Init+0x28c>)
{
 80038f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80038fc:	6003      	str	r3, [r0, #0]
{
 80038fe:	b093      	sub	sp, #76	; 0x4c
  if (I2c4InitCounter++ == 0U)
 8003900:	4ba0      	ldr	r3, [pc, #640]	; (8003b84 <BSP_I2C4_Init+0x290>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	9200      	str	r2, [sp, #0]
 8003906:	3201      	adds	r2, #1
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	9b00      	ldr	r3, [sp, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 80c8 	bne.w	8003aa2 <BSP_I2C4_Init+0x1ae>
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003912:	f002 f951 	bl	8005bb8 <HAL_I2C_GetState>
 8003916:	2800      	cmp	r0, #0
 8003918:	f040 80c3 	bne.w	8003aa2 <BSP_I2C4_Init+0x1ae>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800391c:	4d9a      	ldr	r5, [pc, #616]	; (8003b88 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800391e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003922:	2101      	movs	r1, #1
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003924:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8003926:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800392a:	4898      	ldr	r0, [pc, #608]	; (8003b8c <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800392c:	f043 0320 	orr.w	r3, r3, #32
 8003930:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8003934:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	930a      	str	r3, [sp, #40]	; 0x28
 800393e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003940:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8003944:	f043 0320 	orr.w	r3, r3, #32
 8003948:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 800394c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8003950:	9611      	str	r6, [sp, #68]	; 0x44
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8003952:	f003 0320 	and.w	r3, r3, #32
 8003956:	930b      	str	r3, [sp, #44]	; 0x2c
 8003958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800395a:	2312      	movs	r3, #18
 800395c:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003960:	2302      	movs	r3, #2
 8003962:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8003966:	a90d      	add	r1, sp, #52	; 0x34
 8003968:	f000 fffe 	bl	8004968 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800396c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003970:	a90d      	add	r1, sp, #52	; 0x34
 8003972:	4886      	ldr	r0, [pc, #536]	; (8003b8c <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8003974:	930d      	str	r3, [sp, #52]	; 0x34
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8003976:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003978:	f000 fff6 	bl	8004968 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800397c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 8003980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003984:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8003988:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800398c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003990:	930c      	str	r3, [sp, #48]	; 0x30
 8003992:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  BUS_I2C4_FORCE_RESET();
 8003994:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8003998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399c:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
 80039a0:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 80039a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a8:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80039ac:	f003 fdf6 	bl	800759c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d070      	beq.n	8003a96 <BSP_I2C4_Init+0x1a2>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80039b4:	4b76      	ldr	r3, [pc, #472]	; (8003b90 <BSP_I2C4_Init+0x29c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
 80039b6:	f04f 0810 	mov.w	r8, #16
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80039ba:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8003b98 <BSP_I2C4_Init+0x2a4>
 80039be:	f04f 0a14 	mov.w	sl, #20
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80039c2:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 80039c6:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80039ca:	eb00 0240 	add.w	r2, r0, r0, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039ce:	f640 13f6 	movw	r3, #2550	; 0x9f6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80039d2:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80039d4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039d8:	eba3 0380 	sub.w	r3, r3, r0, lsl #2
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80039dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80039e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80039e4:	32e2      	adds	r2, #226	; 0xe2
  if (tsdadel_min <= 0)
 80039e6:	9302      	str	r3, [sp, #8]
 80039e8:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <BSP_I2C4_Init+0x2a0>)
 80039ea:	ea22 7be2 	bic.w	fp, r2, r2, asr #31
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80039ee:	9a00      	ldr	r2, [sp, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4696      	mov	lr, r2
{
 80039f4:	468c      	mov	ip, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80039f6:	2600      	movs	r6, #0
      if (tscldel >= (uint32_t)tscldel_min)
 80039f8:	f240 3479 	movw	r4, #889	; 0x379
 80039fc:	9601      	str	r6, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80039fe:	3601      	adds	r6, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8003a00:	45a4      	cmp	ip, r4
 8003a02:	d959      	bls.n	8003ab8 <BSP_I2C4_Init+0x1c4>
 8003a04:	2500      	movs	r5, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003a06:	462f      	mov	r7, r5
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003a08:	45ab      	cmp	fp, r5
 8003a0a:	d851      	bhi.n	8003ab0 <BSP_I2C4_Init+0x1bc>
 8003a0c:	9c02      	ldr	r4, [sp, #8]
 8003a0e:	42ac      	cmp	r4, r5
 8003a10:	d34e      	bcc.n	8003ab0 <BSP_I2C4_Init+0x1bc>
            if(presc != prev_presc)
 8003a12:	4590      	cmp	r8, r2
 8003a14:	d04c      	beq.n	8003ab0 <BSP_I2C4_Init+0x1bc>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a16:	fb0a f803 	mul.w	r8, sl, r3
              I2c_valid_timing_nbr ++;
 8003a1a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8003a1c:	9c01      	ldr	r4, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a1e:	eb09 0e08 	add.w	lr, r9, r8
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003a22:	2b7f      	cmp	r3, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8003a24:	f849 2008 	str.w	r2, [r9, r8]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003a28:	e9ce 4701 	strd	r4, r7, [lr, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8003a2c:	d93d      	bls.n	8003aaa <BSP_I2C4_Init+0x1b6>
 8003a2e:	4a59      	ldr	r2, [pc, #356]	; (8003b94 <BSP_I2C4_Init+0x2a0>)
 8003a30:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a32:	4b58      	ldr	r3, [pc, #352]	; (8003b94 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003a34:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a38:	4957      	ldr	r1, [pc, #348]	; (8003b98 <BSP_I2C4_Init+0x2a4>)
 8003a3a:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a3c:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003a3e:	9203      	str	r2, [sp, #12]
 8003a40:	f04f 32ff 	mov.w	r2, #4294967295
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a44:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003a46:	0043      	lsls	r3, r0, #1
 8003a48:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8003a4c:	f5c3 5b90 	rsb	fp, r3, #4608	; 0x1200
 8003a50:	f5a3 5311 	sub.w	r3, r3, #9280	; 0x2440
 8003a54:	f10b 0b0c 	add.w	fp, fp, #12
 8003a58:	9409      	str	r4, [sp, #36]	; 0x24
 8003a5a:	3b0a      	subs	r3, #10
 8003a5c:	9302      	str	r3, [sp, #8]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003a5e:	9b05      	ldr	r3, [sp, #20]
 8003a60:	429f      	cmp	r7, r3
 8003a62:	d134      	bne.n	8003ace <BSP_I2C4_Init+0x1da>
        if (idx < I2C_VALID_TIMING_NBR)
 8003a64:	2a7f      	cmp	r2, #127	; 0x7f
 8003a66:	d816      	bhi.n	8003a96 <BSP_I2C4_Init+0x1a2>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003a68:	2314      	movs	r3, #20
 8003a6a:	435a      	muls	r2, r3
 8003a6c:	4b4a      	ldr	r3, [pc, #296]	; (8003b98 <BSP_I2C4_Init+0x2a4>)
 8003a6e:	1899      	adds	r1, r3, r2
 8003a70:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8003a72:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003a74:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8003a78:	684b      	ldr	r3, [r1, #4]
 8003a7a:	051b      	lsls	r3, r3, #20
 8003a7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003a80:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8003a82:	688b      	ldr	r3, [r1, #8]
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003a8a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8003a8c:	68cb      	ldr	r3, [r1, #12]
 8003a8e:	021b      	lsls	r3, r3, #8
 8003a90:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8003a92:	4323      	orrs	r3, r4
 8003a94:	9300      	str	r3, [sp, #0]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003a96:	9900      	ldr	r1, [sp, #0]
 8003a98:	4839      	ldr	r0, [pc, #228]	; (8003b80 <BSP_I2C4_Init+0x28c>)
 8003a9a:	f7ff ff0b 	bl	80038b4 <MX_I2C4_Init>
 8003a9e:	2800      	cmp	r0, #0
 8003aa0:	d169      	bne.n	8003b76 <BSP_I2C4_Init+0x282>
  int32_t ret = BSP_ERROR_NONE;
 8003aa2:	2000      	movs	r0, #0
}
 8003aa4:	b013      	add	sp, #76	; 0x4c
 8003aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aaa:	4690      	mov	r8, r2
 8003aac:	f04f 0e01 	mov.w	lr, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8003ab0:	3701      	adds	r7, #1
 8003ab2:	440d      	add	r5, r1
 8003ab4:	2f10      	cmp	r7, #16
 8003ab6:	d1a7      	bne.n	8003a08 <BSP_I2C4_Init+0x114>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003ab8:	2e10      	cmp	r6, #16
 8003aba:	448c      	add	ip, r1
 8003abc:	d19c      	bne.n	80039f8 <BSP_I2C4_Init+0x104>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003abe:	3201      	adds	r2, #1
 8003ac0:	4401      	add	r1, r0
 8003ac2:	2a10      	cmp	r2, #16
 8003ac4:	d196      	bne.n	80039f4 <BSP_I2C4_Init+0x100>
 8003ac6:	f1be 0f00 	cmp.w	lr, #0
 8003aca:	d1b0      	bne.n	8003a2e <BSP_I2C4_Init+0x13a>
 8003acc:	e7b1      	b.n	8003a32 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003ace:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003ad0:	f04f 0c00 	mov.w	ip, #0
 8003ad4:	9c09      	ldr	r4, [sp, #36]	; 0x24
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003ad6:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003ada:	441c      	add	r4, r3
 8003adc:	ebab 0503 	sub.w	r5, fp, r3
 8003ae0:	9404      	str	r4, [sp, #16]
 8003ae2:	006c      	lsls	r4, r5, #1
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8003ae4:	9d04      	ldr	r5, [sp, #16]
 8003ae6:	9401      	str	r4, [sp, #4]
 8003ae8:	9c02      	ldr	r4, [sp, #8]
 8003aea:	441c      	add	r4, r3
 8003aec:	9408      	str	r4, [sp, #32]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003aee:	f241 245c 	movw	r4, #4700	; 0x125c
 8003af2:	f8cd c018 	str.w	ip, [sp, #24]
 8003af6:	f1a5 0632 	sub.w	r6, r5, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8003afa:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003afe:	42a5      	cmp	r5, r4
 8003b00:	d92e      	bls.n	8003b60 <BSP_I2C4_Init+0x26c>
 8003b02:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8003b06:	d22b      	bcs.n	8003b60 <BSP_I2C4_Init+0x26c>
 8003b08:	9c08      	ldr	r4, [sp, #32]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003b0a:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8003b0e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003b12:	1966      	adds	r6, r4, r5
 8003b14:	f8dd 9004 	ldr.w	r9, [sp, #4]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003b18:	f206 6a83 	addw	sl, r6, #1667	; 0x683
 8003b1c:	f241 0447 	movw	r4, #4167	; 0x1047
 8003b20:	f8cd e01c 	str.w	lr, [sp, #28]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8003b24:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003b28:	45a2      	cmp	sl, r4
 8003b2a:	d812      	bhi.n	8003b52 <BSP_I2C4_Init+0x25e>
 8003b2c:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8003b30:	d30f      	bcc.n	8003b52 <BSP_I2C4_Init+0x25e>
 8003b32:	4540      	cmp	r0, r8
 8003b34:	d20d      	bcs.n	8003b52 <BSP_I2C4_Init+0x25e>
              error = -error;
 8003b36:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8003b3a:	bf28      	it	cs
 8003b3c:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8003b3e:	9c03      	ldr	r4, [sp, #12]
 8003b40:	45a2      	cmp	sl, r4
 8003b42:	d206      	bcs.n	8003b52 <BSP_I2C4_Init+0x25e>
              I2c_valid_timing[count].scll = scll;
 8003b44:	9a06      	ldr	r2, [sp, #24]
              I2c_valid_timing[count].sclh = sclh;
 8003b46:	f8cd a00c 	str.w	sl, [sp, #12]
              I2c_valid_timing[count].scll = scll;
 8003b4a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8003b4c:	9a07      	ldr	r2, [sp, #28]
 8003b4e:	60ca      	str	r2, [r1, #12]
 8003b50:	463a      	mov	r2, r7
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003b52:	f5be 7f80 	cmp.w	lr, #256	; 0x100
 8003b56:	eba9 0903 	sub.w	r9, r9, r3
 8003b5a:	441e      	add	r6, r3
 8003b5c:	4498      	add	r8, r3
 8003b5e:	d1db      	bne.n	8003b18 <BSP_I2C4_Init+0x224>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8003b60:	9c01      	ldr	r4, [sp, #4]
 8003b62:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8003b66:	441d      	add	r5, r3
 8003b68:	eba4 0403 	sub.w	r4, r4, r3
 8003b6c:	9401      	str	r4, [sp, #4]
 8003b6e:	d1be      	bne.n	8003aee <BSP_I2C4_Init+0x1fa>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8003b70:	3701      	adds	r7, #1
 8003b72:	3114      	adds	r1, #20
 8003b74:	e773      	b.n	8003a5e <BSP_I2C4_Init+0x16a>
          ret = BSP_ERROR_BUS_FAILURE;
 8003b76:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8003b7a:	e793      	b.n	8003aa4 <BSP_I2C4_Init+0x1b0>
 8003b7c:	58001c00 	.word	0x58001c00
 8003b80:	24002934 	.word	0x24002934
 8003b84:	24001f2c 	.word	0x24001f2c
 8003b88:	58024400 	.word	0x58024400
 8003b8c:	58021400 	.word	0x58021400
 8003b90:	3b9aca00 	.word	0x3b9aca00
 8003b94:	24002930 	.word	0x24002930
 8003b98:	24001f30 	.word	0x24001f30

08003b9c <BSP_I2C4_WriteReg>:
{
 8003b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003b9e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003ba2:	9200      	str	r2, [sp, #0]
 8003ba4:	460a      	mov	r2, r1
 8003ba6:	4601      	mov	r1, r0
 8003ba8:	4808      	ldr	r0, [pc, #32]	; (8003bcc <BSP_I2C4_WriteReg+0x30>)
 8003baa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003bae:	2301      	movs	r3, #1
 8003bb0:	f001 fe8f 	bl	80058d2 <HAL_I2C_Mem_Write>
 8003bb4:	b140      	cbz	r0, 8003bc8 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <BSP_I2C4_WriteReg+0x30>)
 8003bb8:	f002 f801 	bl	8005bbe <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003bbc:	2804      	cmp	r0, #4
 8003bbe:	bf0c      	ite	eq
 8003bc0:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003bc4:	f06f 0003 	mvnne.w	r0, #3
}
 8003bc8:	b004      	add	sp, #16
 8003bca:	bd10      	pop	{r4, pc}
 8003bcc:	24002934 	.word	0x24002934

08003bd0 <BSP_I2C4_ReadReg>:
{
 8003bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Reg        The target register address to read
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003bd2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003bd6:	9200      	str	r2, [sp, #0]
 8003bd8:	460a      	mov	r2, r1
 8003bda:	4601      	mov	r1, r0
 8003bdc:	4808      	ldr	r0, [pc, #32]	; (8003c00 <BSP_I2C4_ReadReg+0x30>)
 8003bde:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003be2:	2301      	movs	r3, #1
 8003be4:	f001 ff2c 	bl	8005a40 <HAL_I2C_Mem_Read>
 8003be8:	b140      	cbz	r0, 8003bfc <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003bea:	4805      	ldr	r0, [pc, #20]	; (8003c00 <BSP_I2C4_ReadReg+0x30>)
 8003bec:	f001 ffe7 	bl	8005bbe <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003bf0:	2804      	cmp	r0, #4
 8003bf2:	bf0c      	ite	eq
 8003bf4:	f06f 0065 	mvneq.w	r0, #101	; 0x65
 8003bf8:	f06f 0003 	mvnne.w	r0, #3
}
 8003bfc:	b004      	add	sp, #16
 8003bfe:	bd10      	pop	{r4, pc}
 8003c00:	24002934 	.word	0x24002934

08003c04 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8003c04:	f000 bcd4 	b.w	80045b0 <HAL_GetTick>

08003c08 <OSPI_NOR_EnterSOPIMode.constprop.0>:
/**
  * @brief  This function enables the octal STR mode of the memory.
  * @param  Instance  OSPI instance
  * @retval BSP status
  */
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8003c08:	b530      	push	{r4, r5, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003c0a:	4c21      	ldr	r4, [pc, #132]	; (8003c90 <OSPI_NOR_EnterSOPIMode.constprop.0+0x88>)
static int32_t OSPI_NOR_EnterSOPIMode(uint32_t Instance)
 8003c0c:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003c0e:	4821      	ldr	r0, [pc, #132]	; (8003c94 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003c10:	78a2      	ldrb	r2, [r4, #2]
 8003c12:	7861      	ldrb	r1, [r4, #1]
 8003c14:	f7ff fc85 	bl	8003522 <MX25LM51245G_WriteEnable>
 8003c18:	b118      	cbz	r0, 8003c22 <OSPI_NOR_EnterSOPIMode.constprop.0+0x1a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003c1a:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8003c1e:	b005      	add	sp, #20
 8003c20:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8003c22:	2303      	movs	r3, #3
 8003c24:	481b      	ldr	r0, [pc, #108]	; (8003c94 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c2c:	78a2      	ldrb	r2, [r4, #2]
 8003c2e:	7861      	ldrb	r1, [r4, #1]
 8003c30:	f7ff fcf5 	bl	800361e <MX25LM51245G_WriteCfg2Register>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d1f0      	bne.n	8003c1a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003c38:	78a2      	ldrb	r2, [r4, #2]
 8003c3a:	7861      	ldrb	r1, [r4, #1]
 8003c3c:	4815      	ldr	r0, [pc, #84]	; (8003c94 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003c3e:	f7ff fc70 	bl	8003522 <MX25LM51245G_WriteEnable>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d1e8      	bne.n	8003c1a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_SOPI) != MX25LM51245G_OK)
 8003c48:	2501      	movs	r5, #1
 8003c4a:	4812      	ldr	r0, [pc, #72]	; (8003c94 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003c4c:	9500      	str	r5, [sp, #0]
 8003c4e:	78a2      	ldrb	r2, [r4, #2]
 8003c50:	7861      	ldrb	r1, [r4, #1]
 8003c52:	f7ff fce4 	bl	800361e <MX25LM51245G_WriteCfg2Register>
 8003c56:	4604      	mov	r4, r0
 8003c58:	2800      	cmp	r0, #0
 8003c5a:	d1de      	bne.n	8003c1a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003c5c:	2028      	movs	r0, #40	; 0x28
 8003c5e:	f000 fcad 	bl	80045bc <HAL_Delay>
    if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003c62:	4622      	mov	r2, r4
 8003c64:	4629      	mov	r1, r5
 8003c66:	480b      	ldr	r0, [pc, #44]	; (8003c94 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003c68:	f7ff fb38 	bl	80032dc <MX25LM51245G_AutoPollingMemReady>
 8003c6c:	2800      	cmp	r0, #0
 8003c6e:	d1d4      	bne.n	8003c1a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003c70:	ab03      	add	r3, sp, #12
 8003c72:	4602      	mov	r2, r0
 8003c74:	4629      	mov	r1, r5
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4806      	ldr	r0, [pc, #24]	; (8003c94 <OSPI_NOR_EnterSOPIMode.constprop.0+0x8c>)
 8003c7c:	f7ff fd2c 	bl	80036d8 <MX25LM51245G_ReadCfg2Register>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d1ca      	bne.n	8003c1a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
    else if (reg[0] != MX25LM51245G_CR2_SOPI)
 8003c84:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003c88:	42ab      	cmp	r3, r5
 8003c8a:	d0c8      	beq.n	8003c1e <OSPI_NOR_EnterSOPIMode.constprop.0+0x16>
 8003c8c:	e7c5      	b.n	8003c1a <OSPI_NOR_EnterSOPIMode.constprop.0+0x12>
 8003c8e:	bf00      	nop
 8003c90:	24002980 	.word	0x24002980
 8003c94:	24002988 	.word	0x24002988

08003c98 <OSPI_NOR_EnterDOPIMode.constprop.0>:
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8003c98:	b530      	push	{r4, r5, lr}
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003c9a:	4d27      	ldr	r5, [pc, #156]	; (8003d38 <OSPI_NOR_EnterDOPIMode.constprop.0+0xa0>)
static int32_t OSPI_NOR_EnterDOPIMode(uint32_t Instance)
 8003c9c:	b085      	sub	sp, #20
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003c9e:	4c27      	ldr	r4, [pc, #156]	; (8003d3c <OSPI_NOR_EnterDOPIMode.constprop.0+0xa4>)
 8003ca0:	78aa      	ldrb	r2, [r5, #2]
 8003ca2:	7869      	ldrb	r1, [r5, #1]
 8003ca4:	4620      	mov	r0, r4
 8003ca6:	f7ff fc3c 	bl	8003522 <MX25LM51245G_WriteEnable>
 8003caa:	b118      	cbz	r0, 8003cb4 <OSPI_NOR_EnterDOPIMode.constprop.0+0x1c>
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003cac:	f06f 0004 	mvn.w	r0, #4
}
 8003cb0:	b005      	add	sp, #20
 8003cb2:	bd30      	pop	{r4, r5, pc}
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG3_ADDR, CONF_OSPI_DUMMY_CYCLES) != MX25LM51245G_OK)
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	78aa      	ldrb	r2, [r5, #2]
 8003cb8:	7869      	ldrb	r1, [r5, #1]
 8003cba:	4620      	mov	r0, r4
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cc2:	f7ff fcac 	bl	800361e <MX25LM51245G_WriteCfg2Register>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d1f0      	bne.n	8003cac <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003cca:	78aa      	ldrb	r2, [r5, #2]
 8003ccc:	4620      	mov	r0, r4
 8003cce:	7869      	ldrb	r1, [r5, #1]
 8003cd0:	f7ff fc27 	bl	8003522 <MX25LM51245G_WriteEnable>
 8003cd4:	2800      	cmp	r0, #0
 8003cd6:	d1e9      	bne.n	8003cac <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
  else if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, MX25LM51245G_CR2_DOPI) != MX25LM51245G_OK)
 8003cd8:	2302      	movs	r3, #2
 8003cda:	78aa      	ldrb	r2, [r5, #2]
 8003cdc:	7869      	ldrb	r1, [r5, #1]
 8003cde:	9300      	str	r3, [sp, #0]
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f7ff fc9b 	bl	800361e <MX25LM51245G_WriteCfg2Register>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d1df      	bne.n	8003cac <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003cec:	2028      	movs	r0, #40	; 0x28
 8003cee:	f000 fc65 	bl	80045bc <HAL_Delay>
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003cf6:	4620      	mov	r0, r4
    hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003cf8:	60e3      	str	r3, [r4, #12]
    hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8003cfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003d00:	f002 fa88 	bl	8006214 <HAL_OSPI_Init>
 8003d04:	b9a8      	cbnz	r0, 8003d32 <OSPI_NOR_EnterDOPIMode.constprop.0+0x9a>
    else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 8003d06:	2201      	movs	r2, #1
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	f7ff fae6 	bl	80032dc <MX25LM51245G_AutoPollingMemReady>
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d1cb      	bne.n	8003cac <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003d14:	ab03      	add	r3, sp, #12
 8003d16:	2201      	movs	r2, #1
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f7ff fcda 	bl	80036d8 <MX25LM51245G_ReadCfg2Register>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d1c1      	bne.n	8003cac <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
    else if (reg[0] != MX25LM51245G_CR2_DOPI)
 8003d28:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d0bf      	beq.n	8003cb0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8003d30:	e7bc      	b.n	8003cac <OSPI_NOR_EnterDOPIMode.constprop.0+0x14>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003d32:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003d36:	e7bb      	b.n	8003cb0 <OSPI_NOR_EnterDOPIMode.constprop.0+0x18>
 8003d38:	24002980 	.word	0x24002980
 8003d3c:	24002988 	.word	0x24002988

08003d40 <MX_OSPI_NOR_Init>:
  hospi->Init.FifoThreshold      = 4;
 8003d40:	4a0e      	ldr	r2, [pc, #56]	; (8003d7c <MX_OSPI_NOR_Init+0x3c>)
 8003d42:	2304      	movs	r3, #4
 8003d44:	e9c0 2300 	strd	r2, r3, [r0]
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8003d48:	680a      	ldr	r2, [r1, #0]
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8003d4a:	2300      	movs	r3, #0
  hospi->Init.DeviceSize         = Config->MemorySize; /* 512 MBits */
 8003d4c:	6102      	str	r2, [r0, #16]
  hospi->Init.ChipSelectHighTime = 2;
 8003d4e:	2202      	movs	r2, #2
  hospi->Init.DualQuad           = HAL_OSPI_DUALQUAD_DISABLE;
 8003d50:	6083      	str	r3, [r0, #8]
  hospi->Init.FreeRunningClock   = HAL_OSPI_FREERUNCLK_DISABLE;
 8003d52:	e9c0 2305 	strd	r2, r3, [r0, #20]
  hospi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8003d56:	684a      	ldr	r2, [r1, #4]
 8003d58:	6242      	str	r2, [r0, #36]	; 0x24
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8003d5a:	688a      	ldr	r2, [r1, #8]
  hospi->Init.ChipSelectBoundary = 0;
 8003d5c:	6303      	str	r3, [r0, #48]	; 0x30
  hospi->Init.SampleShifting     = Config->SampleShifting;
 8003d5e:	6282      	str	r2, [r0, #40]	; 0x28
  if (Config->TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8003d60:	68ca      	ldr	r2, [r1, #12]
 8003d62:	2a01      	cmp	r2, #1
  hospi->Init.WrapSize           = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8003d64:	e9c0 3307 	strd	r3, r3, [r0, #28]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003d68:	bf09      	itett	eq
 8003d6a:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8003d6e:	60c3      	strne	r3, [r0, #12]
    hospi->Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8003d70:	60c3      	streq	r3, [r0, #12]
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8003d72:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
    hospi->Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003d76:	62c3      	str	r3, [r0, #44]	; 0x2c
  return HAL_OSPI_Init(hospi);
 8003d78:	f002 ba4c 	b.w	8006214 <HAL_OSPI_Init>
 8003d7c:	52005000 	.word	0x52005000

08003d80 <BSP_OSPI_NOR_EnableMemoryMappedMode>:
{
 8003d80:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003d82:	b998      	cbnz	r0, 8003dac <BSP_OSPI_NOR_EnableMemoryMappedMode+0x2c>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8003d84:	4c0b      	ldr	r4, [pc, #44]	; (8003db4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x34>)
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8003d86:	78a3      	ldrb	r3, [r4, #2]
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8003d88:	7861      	ldrb	r1, [r4, #1]
    if(Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8003d8a:	b95b      	cbnz	r3, 8003da4 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x24>
      if(MX25LM51245G_EnableMemoryMappedModeSTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, MX25LM51245G_4BYTES_SIZE) != MX25LM51245G_OK)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	480a      	ldr	r0, [pc, #40]	; (8003db8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8003d90:	f7ff fb12 	bl	80033b8 <MX25LM51245G_EnableSTRMemoryMappedMode>
 8003d94:	b110      	cbz	r0, 8003d9c <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003d96:	f06f 0004 	mvn.w	r0, #4
}
 8003d9a:	bd10      	pop	{r4, pc}
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003d9c:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8003d9e:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_MMP;
 8003da0:	7023      	strb	r3, [r4, #0]
 8003da2:	e7fa      	b.n	8003d9a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
      if(MX25LM51245G_EnableMemoryMappedModeDTR(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode) != MX25LM51245G_OK)
 8003da4:	4804      	ldr	r0, [pc, #16]	; (8003db8 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x38>)
 8003da6:	f7ff fb6d 	bl	8003484 <MX25LM51245G_EnableDTRMemoryMappedMode>
 8003daa:	e7f3      	b.n	8003d94 <BSP_OSPI_NOR_EnableMemoryMappedMode+0x14>
    ret = BSP_ERROR_WRONG_PARAM;
 8003dac:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8003db0:	e7f3      	b.n	8003d9a <BSP_OSPI_NOR_EnableMemoryMappedMode+0x1a>
 8003db2:	bf00      	nop
 8003db4:	24002980 	.word	0x24002980
 8003db8:	24002988 	.word	0x24002988

08003dbc <BSP_OSPI_NOR_DisableMemoryMappedMode>:
{
 8003dbc:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003dbe:	b950      	cbnz	r0, 8003dd6 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x1a>
    if(Ospi_Nor_Ctx[Instance].IsInitialized != OSPI_ACCESS_MMP)
 8003dc0:	4c09      	ldr	r4, [pc, #36]	; (8003de8 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x2c>)
 8003dc2:	7823      	ldrb	r3, [r4, #0]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d109      	bne.n	8003ddc <BSP_OSPI_NOR_DisableMemoryMappedMode+0x20>
    else if(HAL_OSPI_Abort(&hospi_nor[Instance]) != HAL_OK)
 8003dc8:	4808      	ldr	r0, [pc, #32]	; (8003dec <BSP_OSPI_NOR_DisableMemoryMappedMode+0x30>)
 8003dca:	f002 fc66 	bl	800669a <HAL_OSPI_Abort>
 8003dce:	b940      	cbnz	r0, 8003de2 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x26>
      Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	7023      	strb	r3, [r4, #0]
}
 8003dd4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8003dd6:	f06f 0001 	mvn.w	r0, #1
 8003dda:	e7fb      	b.n	8003dd4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_OSPI_MMP_UNLOCK_FAILURE;
 8003ddc:	f06f 001a 	mvn.w	r0, #26
 8003de0:	e7f8      	b.n	8003dd4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003de2:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8003de6:	e7f5      	b.n	8003dd4 <BSP_OSPI_NOR_DisableMemoryMappedMode+0x18>
 8003de8:	24002980 	.word	0x24002980
 8003dec:	24002988 	.word	0x24002988

08003df0 <BSP_OSPI_NOR_DeInit>:
{
 8003df0:	b510      	push	{r4, lr}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d156      	bne.n	8003ea4 <BSP_OSPI_NOR_DeInit+0xb4>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8003df6:	4c2d      	ldr	r4, [pc, #180]	; (8003eac <BSP_OSPI_NOR_DeInit+0xbc>)
 8003df8:	7823      	ldrb	r3, [r4, #0]
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d04b      	beq.n	8003e96 <BSP_OSPI_NOR_DeInit+0xa6>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8003dfe:	2300      	movs	r3, #0
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8003e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003e04:	482a      	ldr	r0, [pc, #168]	; (8003eb0 <BSP_OSPI_NOR_DeInit+0xc0>)
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_NONE;
 8003e06:	8023      	strh	r3, [r4, #0]
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;
 8003e08:	70a3      	strb	r3, [r4, #2]
  HAL_GPIO_DeInit(OSPI_NOR_CLK_GPIO_PORT, OSPI_NOR_CLK_PIN);
 8003e0a:	f000 fe93 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_DQS_GPIO_PORT, OSPI_NOR_DQS_PIN);
 8003e0e:	2104      	movs	r1, #4
 8003e10:	4828      	ldr	r0, [pc, #160]	; (8003eb4 <BSP_OSPI_NOR_DeInit+0xc4>)
 8003e12:	f000 fe8f 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_CS_GPIO_PORT, OSPI_NOR_CS_PIN);
 8003e16:	2140      	movs	r1, #64	; 0x40
 8003e18:	4827      	ldr	r0, [pc, #156]	; (8003eb8 <BSP_OSPI_NOR_DeInit+0xc8>)
 8003e1a:	f000 fe8b 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D0_GPIO_PORT, OSPI_NOR_D0_PIN);
 8003e1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e22:	4826      	ldr	r0, [pc, #152]	; (8003ebc <BSP_OSPI_NOR_DeInit+0xcc>)
 8003e24:	f000 fe86 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D1_GPIO_PORT, OSPI_NOR_D1_PIN);
 8003e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003e2c:	4823      	ldr	r0, [pc, #140]	; (8003ebc <BSP_OSPI_NOR_DeInit+0xcc>)
 8003e2e:	f000 fe81 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D2_GPIO_PORT, OSPI_NOR_D2_PIN);
 8003e32:	2104      	movs	r1, #4
 8003e34:	4822      	ldr	r0, [pc, #136]	; (8003ec0 <BSP_OSPI_NOR_DeInit+0xd0>)
 8003e36:	f000 fe7d 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D3_GPIO_PORT, OSPI_NOR_D3_PIN);
 8003e3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003e3e:	481f      	ldr	r0, [pc, #124]	; (8003ebc <BSP_OSPI_NOR_DeInit+0xcc>)
 8003e40:	f000 fe78 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D4_GPIO_PORT, OSPI_NOR_D4_PIN);
 8003e44:	2110      	movs	r1, #16
 8003e46:	481d      	ldr	r0, [pc, #116]	; (8003ebc <BSP_OSPI_NOR_DeInit+0xcc>)
 8003e48:	f000 fe74 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D5_GPIO_PORT, OSPI_NOR_D5_PIN);
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	481b      	ldr	r0, [pc, #108]	; (8003ebc <BSP_OSPI_NOR_DeInit+0xcc>)
 8003e50:	f000 fe70 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D6_GPIO_PORT, OSPI_NOR_D6_PIN);
 8003e54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e58:	4817      	ldr	r0, [pc, #92]	; (8003eb8 <BSP_OSPI_NOR_DeInit+0xc8>)
 8003e5a:	f000 fe6b 	bl	8004b34 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(OSPI_NOR_D7_GPIO_PORT, OSPI_NOR_D7_PIN);
 8003e5e:	2180      	movs	r1, #128	; 0x80
 8003e60:	4816      	ldr	r0, [pc, #88]	; (8003ebc <BSP_OSPI_NOR_DeInit+0xcc>)
 8003e62:	f000 fe67 	bl	8004b34 <HAL_GPIO_DeInit>
  OSPI_NOR_FORCE_RESET();
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <BSP_OSPI_NOR_DeInit+0xd4>)
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8003e68:	4817      	ldr	r0, [pc, #92]	; (8003ec8 <BSP_OSPI_NOR_DeInit+0xd8>)
  OSPI_NOR_FORCE_RESET();
 8003e6a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e70:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 8003e72:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e78:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_DISABLE();
 8003e7a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003e7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e82:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    if (HAL_OSPI_DeInit(&hospi_nor[Instance]) != HAL_OK)
 8003e86:	f002 fa39 	bl	80062fc <HAL_OSPI_DeInit>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2000      	moveq	r0, #0
 8003e90:	f06f 0003 	mvnne.w	r0, #3
}
 8003e94:	bd10      	pop	{r4, pc}
      if(BSP_OSPI_NOR_DisableMemoryMappedMode(Instance) != BSP_ERROR_NONE)
 8003e96:	f7ff ff91 	bl	8003dbc <BSP_OSPI_NOR_DisableMemoryMappedMode>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d0af      	beq.n	8003dfe <BSP_OSPI_NOR_DeInit+0xe>
        return BSP_ERROR_COMPONENT_FAILURE;
 8003e9e:	f06f 0004 	mvn.w	r0, #4
 8003ea2:	e7f7      	b.n	8003e94 <BSP_OSPI_NOR_DeInit+0xa4>
    ret = BSP_ERROR_WRONG_PARAM;
 8003ea4:	f06f 0001 	mvn.w	r0, #1
 8003ea8:	e7f4      	b.n	8003e94 <BSP_OSPI_NOR_DeInit+0xa4>
 8003eaa:	bf00      	nop
 8003eac:	24002980 	.word	0x24002980
 8003eb0:	58021400 	.word	0x58021400
 8003eb4:	58020400 	.word	0x58020400
 8003eb8:	58021800 	.word	0x58021800
 8003ebc:	58020c00 	.word	0x58020c00
 8003ec0:	58021000 	.word	0x58021000
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	24002988 	.word	0x24002988

08003ecc <BSP_OSPI_NOR_ConfigFlash>:
{
 8003ecc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003ed0:	460d      	mov	r5, r1
 8003ed2:	4616      	mov	r6, r2
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d158      	bne.n	8003f8a <BSP_OSPI_NOR_ConfigFlash+0xbe>
    if(Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_MMP)
 8003ed8:	4c2f      	ldr	r4, [pc, #188]	; (8003f98 <BSP_OSPI_NOR_ConfigFlash+0xcc>)
 8003eda:	7823      	ldrb	r3, [r4, #0]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d057      	beq.n	8003f90 <BSP_OSPI_NOR_ConfigFlash+0xc4>
      switch(Ospi_Nor_Ctx[Instance].InterfaceMode)
 8003ee0:	7863      	ldrb	r3, [r4, #1]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d148      	bne.n	8003f78 <BSP_OSPI_NOR_ConfigFlash+0xac>
        if((Mode != BSP_OSPI_NOR_OPI_MODE) || (Rate != Ospi_Nor_Ctx[Instance].TransferRate))
 8003ee6:	2901      	cmp	r1, #1
 8003ee8:	78a2      	ldrb	r2, [r4, #2]
 8003eea:	d109      	bne.n	8003f00 <BSP_OSPI_NOR_ConfigFlash+0x34>
 8003eec:	4296      	cmp	r6, r2
 8003eee:	d107      	bne.n	8003f00 <BSP_OSPI_NOR_ConfigFlash+0x34>
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003ef0:	2301      	movs	r3, #1
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8003ef2:	2000      	movs	r0, #0
        Ospi_Nor_Ctx[Instance].InterfaceMode = Mode;
 8003ef4:	7065      	strb	r5, [r4, #1]
        Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;
 8003ef6:	7023      	strb	r3, [r4, #0]
        Ospi_Nor_Ctx[Instance].TransferRate  = Rate;
 8003ef8:	70a6      	strb	r6, [r4, #2]
}
 8003efa:	b004      	add	sp, #16
 8003efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  /* Enable write operations */
  else if (MX25LM51245G_WriteEnable(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8003f00:	4f26      	ldr	r7, [pc, #152]	; (8003f9c <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 8003f02:	2101      	movs	r1, #1
 8003f04:	4638      	mov	r0, r7
 8003f06:	f7ff fb0c 	bl	8003522 <MX25LM51245G_WriteEnable>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	bb88      	cbnz	r0, 8003f72 <BSP_OSPI_NOR_ConfigFlash+0xa6>
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    /* Write Configuration register 2 (with SPI protocol) */
    reg[0] = 0;
 8003f0e:	f88d 000c 	strb.w	r0, [sp, #12]
    reg[1] = 0;
 8003f12:	f88d 000d 	strb.w	r0, [sp, #13]
    if (MX25LM51245G_WriteCfg2Register(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate, MX25LM51245G_CR2_REG1_ADDR, reg[0]) != MX25LM51245G_OK)
 8003f16:	9000      	str	r0, [sp, #0]
 8003f18:	4638      	mov	r0, r7
 8003f1a:	78a2      	ldrb	r2, [r4, #2]
 8003f1c:	7861      	ldrb	r1, [r4, #1]
 8003f1e:	f7ff fb7e 	bl	800361e <MX25LM51245G_WriteCfg2Register>
 8003f22:	4680      	mov	r8, r0
 8003f24:	bb28      	cbnz	r0, 8003f72 <BSP_OSPI_NOR_ConfigFlash+0xa6>
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else
    {
      /* Wait that the configuration is effective and check that memory is ready */
      HAL_Delay(MX25LM51245G_WRITE_REG_MAX_TIME);
 8003f26:	2028      	movs	r0, #40	; 0x28
 8003f28:	f000 fb48 	bl	80045bc <HAL_Delay>

      if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_DTR_TRANSFER)
 8003f2c:	78a3      	ldrb	r3, [r4, #2]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d106      	bne.n	8003f40 <BSP_OSPI_NOR_ConfigFlash+0x74>
      {
        /* Reconfigure the memory type of the peripheral */
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003f32:	4638      	mov	r0, r7
        hospi_nor[Instance].Init.MemoryType            = HAL_OSPI_MEMTYPE_MICRON;
 8003f34:	f8c7 800c 	str.w	r8, [r7, #12]
        hospi_nor[Instance].Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8003f38:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        if (HAL_OSPI_Init(&hospi_nor[Instance]) != HAL_OK)
 8003f3c:	f002 f96a 	bl	8006214 <HAL_OSPI_Init>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }

      /* Check Flash busy ? */
      if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8003f40:	2200      	movs	r2, #0
 8003f42:	4816      	ldr	r0, [pc, #88]	; (8003f9c <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 8003f44:	4611      	mov	r1, r2
 8003f46:	f7ff f9c9 	bl	80032dc <MX25LM51245G_AutoPollingMemReady>
 8003f4a:	b990      	cbnz	r0, 8003f72 <BSP_OSPI_NOR_ConfigFlash+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      /* Check the configuration has been correctly done */
      else if (MX25LM51245G_ReadCfg2Register(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER, MX25LM51245G_CR2_REG1_ADDR, reg) != MX25LM51245G_OK)
 8003f4c:	ab03      	add	r3, sp, #12
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4601      	mov	r1, r0
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	4603      	mov	r3, r0
 8003f56:	4811      	ldr	r0, [pc, #68]	; (8003f9c <BSP_OSPI_NOR_ConfigFlash+0xd0>)
 8003f58:	f7ff fbbe 	bl	80036d8 <MX25LM51245G_ReadCfg2Register>
 8003f5c:	b948      	cbnz	r0, 8003f72 <BSP_OSPI_NOR_ConfigFlash+0xa6>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      else if (reg[0] != 0)
 8003f5e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8003f62:	b933      	cbnz	r3, 8003f72 <BSP_OSPI_NOR_ConfigFlash+0xa6>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8003f64:	2d01      	cmp	r5, #1
 8003f66:	d1c3      	bne.n	8003ef0 <BSP_OSPI_NOR_ConfigFlash+0x24>
            if (Ospi_Nor_Ctx[Instance].TransferRate == BSP_OSPI_NOR_STR_TRANSFER)
 8003f68:	78a3      	ldrb	r3, [r4, #2]
 8003f6a:	b94b      	cbnz	r3, 8003f80 <BSP_OSPI_NOR_ConfigFlash+0xb4>
            ret = OSPI_NOR_EnterDOPIMode(Instance);
 8003f6c:	f7ff fe94 	bl	8003c98 <OSPI_NOR_EnterDOPIMode.constprop.0>
 8003f70:	e008      	b.n	8003f84 <BSP_OSPI_NOR_ConfigFlash+0xb8>
          if ((ret == BSP_ERROR_NONE) && (Mode == BSP_OSPI_NOR_OPI_MODE))
 8003f72:	f06f 0004 	mvn.w	r0, #4
 8003f76:	e7c0      	b.n	8003efa <BSP_OSPI_NOR_ConfigFlash+0x2e>
        if(Mode == BSP_OSPI_NOR_OPI_MODE)
 8003f78:	2901      	cmp	r1, #1
 8003f7a:	d1b9      	bne.n	8003ef0 <BSP_OSPI_NOR_ConfigFlash+0x24>
          if(Rate == BSP_OSPI_NOR_STR_TRANSFER)
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d1f5      	bne.n	8003f6c <BSP_OSPI_NOR_ConfigFlash+0xa0>
            ret = OSPI_NOR_EnterSOPIMode(Instance);
 8003f80:	f7ff fe42 	bl	8003c08 <OSPI_NOR_EnterSOPIMode.constprop.0>
      if(ret == BSP_ERROR_NONE)
 8003f84:	2800      	cmp	r0, #0
 8003f86:	d1b8      	bne.n	8003efa <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8003f88:	e7b2      	b.n	8003ef0 <BSP_OSPI_NOR_ConfigFlash+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8003f8a:	f06f 0001 	mvn.w	r0, #1
 8003f8e:	e7b4      	b.n	8003efa <BSP_OSPI_NOR_ConfigFlash+0x2e>
      ret = BSP_ERROR_OSPI_MMP_LOCK_FAILURE;
 8003f90:	f06f 0019 	mvn.w	r0, #25
  return ret;
 8003f94:	e7b1      	b.n	8003efa <BSP_OSPI_NOR_ConfigFlash+0x2e>
 8003f96:	bf00      	nop
 8003f98:	24002980 	.word	0x24002980
 8003f9c:	24002988 	.word	0x24002988

08003fa0 <MX_OSPI_ClockConfig>:
{
 8003fa0:	b500      	push	{lr}
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003fa2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
{
 8003fa6:	b0af      	sub	sp, #188	; 0xbc
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8003fa8:	2250      	movs	r2, #80	; 0x50
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI ;
 8003faa:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003fac:	2320      	movs	r3, #32
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003fae:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_PLL2;
 8003fb0:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8003fb2:	2305      	movs	r3, #5
 8003fb4:	e9cd 3202 	strd	r3, r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8003fb8:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003fba:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003fbc:	e9cd 3305 	strd	r3, r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003fc0:	2300      	movs	r3, #0
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003fc2:	e9cd 3308 	strd	r3, r3, [sp, #32]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8003fc6:	9307      	str	r3, [sp, #28]
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003fc8:	f003 fc14 	bl	80077f4 <HAL_RCCEx_PeriphCLKConfig>
}
 8003fcc:	b02f      	add	sp, #188	; 0xbc
 8003fce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08003fd4 <BSP_OSPI_NOR_Init>:
{
 8003fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003fd8:	460d      	mov	r5, r1
 8003fda:	b09b      	sub	sp, #108	; 0x6c
  if(Instance >= OSPI_NOR_INSTANCES_NUMBER)
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	f040 8160 	bne.w	80042a2 <BSP_OSPI_NOR_Init+0x2ce>
    if (Ospi_Nor_Ctx[Instance].IsInitialized == OSPI_ACCESS_NONE)
 8003fe2:	4eb1      	ldr	r6, [pc, #708]	; (80042a8 <BSP_OSPI_NOR_Init+0x2d4>)
 8003fe4:	7834      	ldrb	r4, [r6, #0]
 8003fe6:	2c00      	cmp	r4, #0
 8003fe8:	f040 8159 	bne.w	800429e <BSP_OSPI_NOR_Init+0x2ca>
  OSPI_NOR_CLK_ENABLE();
 8003fec:	4baf      	ldr	r3, [pc, #700]	; (80042ac <BSP_OSPI_NOR_Init+0x2d8>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003fee:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8003ff2:	f04f 080a 	mov.w	r8, #10
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003ff6:	a911      	add	r1, sp, #68	; 0x44
  OSPI_NOR_CLK_ENABLE();
 8003ff8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8003ffc:	2704      	movs	r7, #4
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 8003ffe:	48ac      	ldr	r0, [pc, #688]	; (80042b0 <BSP_OSPI_NOR_Init+0x2dc>)
  OSPI_NOR_CLK_ENABLE();
 8004000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004004:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8004008:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800400c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004010:	9201      	str	r2, [sp, #4]
 8004012:	9a01      	ldr	r2, [sp, #4]
  OSPI_NOR_FORCE_RESET();
 8004014:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800401a:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_RELEASE_RESET();
 800401c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800401e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004022:	67da      	str	r2, [r3, #124]	; 0x7c
  OSPI_NOR_CLK_GPIO_CLK_ENABLE();
 8004024:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004028:	f042 0220 	orr.w	r2, r2, #32
 800402c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004030:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004034:	f002 0220 	and.w	r2, r2, #32
 8004038:	9202      	str	r2, [sp, #8]
 800403a:	9a02      	ldr	r2, [sp, #8]
  OSPI_NOR_DQS_GPIO_CLK_ENABLE();
 800403c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004040:	f042 0202 	orr.w	r2, r2, #2
 8004044:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004048:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800404c:	f002 0202 	and.w	r2, r2, #2
 8004050:	9203      	str	r2, [sp, #12]
 8004052:	9a03      	ldr	r2, [sp, #12]
  OSPI_NOR_CS_GPIO_CLK_ENABLE();
 8004054:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800405c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004060:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004064:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004068:	9204      	str	r2, [sp, #16]
 800406a:	9a04      	ldr	r2, [sp, #16]
  OSPI_NOR_D0_GPIO_CLK_ENABLE();
 800406c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004070:	f042 0208 	orr.w	r2, r2, #8
 8004074:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004078:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800407c:	f002 0208 	and.w	r2, r2, #8
 8004080:	9205      	str	r2, [sp, #20]
 8004082:	9a05      	ldr	r2, [sp, #20]
  OSPI_NOR_D1_GPIO_CLK_ENABLE();
 8004084:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004088:	f042 0208 	orr.w	r2, r2, #8
 800408c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004090:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004094:	f002 0208 	and.w	r2, r2, #8
 8004098:	9206      	str	r2, [sp, #24]
 800409a:	9a06      	ldr	r2, [sp, #24]
  OSPI_NOR_D2_GPIO_CLK_ENABLE();
 800409c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040a0:	f042 0210 	orr.w	r2, r2, #16
 80040a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80040a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040ac:	f002 0210 	and.w	r2, r2, #16
 80040b0:	9207      	str	r2, [sp, #28]
 80040b2:	9a07      	ldr	r2, [sp, #28]
  OSPI_NOR_D3_GPIO_CLK_ENABLE();
 80040b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040b8:	f042 0208 	orr.w	r2, r2, #8
 80040bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80040c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040c4:	f002 0208 	and.w	r2, r2, #8
 80040c8:	9208      	str	r2, [sp, #32]
 80040ca:	9a08      	ldr	r2, [sp, #32]
  OSPI_NOR_D4_GPIO_CLK_ENABLE();
 80040cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040d0:	f042 0208 	orr.w	r2, r2, #8
 80040d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80040d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040dc:	f002 0208 	and.w	r2, r2, #8
 80040e0:	9209      	str	r2, [sp, #36]	; 0x24
 80040e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  OSPI_NOR_D5_GPIO_CLK_ENABLE();
 80040e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040e8:	f042 0208 	orr.w	r2, r2, #8
 80040ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80040f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80040f4:	f002 0208 	and.w	r2, r2, #8
 80040f8:	920a      	str	r2, [sp, #40]	; 0x28
 80040fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  OSPI_NOR_D6_GPIO_CLK_ENABLE();
 80040fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004100:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004104:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8004108:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800410c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8004110:	920b      	str	r2, [sp, #44]	; 0x2c
 8004112:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004114:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8004118:	f042 0208 	orr.w	r2, r2, #8
 800411c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004120:	2201      	movs	r2, #1
  OSPI_NOR_D7_GPIO_CLK_ENABLE();
 8004122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	930c      	str	r3, [sp, #48]	; 0x30
 800412c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800412e:	2340      	movs	r3, #64	; 0x40
 8004130:	e9cd 3911 	strd	r3, r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004134:	2303      	movs	r3, #3
  GPIO_InitStruct.Alternate = OSPI_NOR_CS_PIN_AF;
 8004136:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800413a:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  HAL_GPIO_Init(OSPI_NOR_CS_GPIO_PORT, &GPIO_InitStruct);
 800413e:	f000 fc13 	bl	8004968 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 8004142:	a911      	add	r1, sp, #68	; 0x44
 8004144:	485b      	ldr	r0, [pc, #364]	; (80042b4 <BSP_OSPI_NOR_Init+0x2e0>)
  GPIO_InitStruct.Pin       = OSPI_NOR_DQS_PIN;
 8004146:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004148:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_DQS_PIN_AF;
 800414a:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_DQS_GPIO_PORT, &GPIO_InitStruct);
 800414e:	f000 fc0b 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 8004152:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004156:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004158:	2409      	movs	r4, #9
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 800415a:	a911      	add	r1, sp, #68	; 0x44
 800415c:	4856      	ldr	r0, [pc, #344]	; (80042b8 <BSP_OSPI_NOR_Init+0x2e4>)
  GPIO_InitStruct.Pin       = OSPI_NOR_CLK_PIN;
 800415e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_CLK_PIN_AF;
 8004160:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_CLK_GPIO_PORT, &GPIO_InitStruct);
 8004162:	f000 fc01 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 8004166:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 800416a:	a911      	add	r1, sp, #68	; 0x44
 800416c:	4853      	ldr	r0, [pc, #332]	; (80042bc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D0_PIN;
 800416e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D0_PIN_AF;
 8004170:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D0_GPIO_PORT, &GPIO_InitStruct);
 8004172:	f000 fbf9 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 8004176:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 800417a:	a911      	add	r1, sp, #68	; 0x44
 800417c:	484f      	ldr	r0, [pc, #316]	; (80042bc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D1_PIN;
 800417e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D1_PIN_AF;
 8004180:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D1_GPIO_PORT, &GPIO_InitStruct);
 8004182:	f000 fbf1 	bl	8004968 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004186:	a911      	add	r1, sp, #68	; 0x44
 8004188:	484d      	ldr	r0, [pc, #308]	; (80042c0 <BSP_OSPI_NOR_Init+0x2ec>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D2_PIN;
 800418a:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 800418c:	2720      	movs	r7, #32
  GPIO_InitStruct.Alternate = OSPI_NOR_D2_PIN_AF;
 800418e:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D2_GPIO_PORT, &GPIO_InitStruct);
 8004190:	f000 fbea 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 8004194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 8004198:	a911      	add	r1, sp, #68	; 0x44
 800419a:	4848      	ldr	r0, [pc, #288]	; (80042bc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D3_PIN;
 800419c:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D3_PIN_AF;
 800419e:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D3_GPIO_PORT, &GPIO_InitStruct);
 80041a0:	f000 fbe2 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 80041a4:	2310      	movs	r3, #16
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 80041a6:	a911      	add	r1, sp, #68	; 0x44
 80041a8:	4844      	ldr	r0, [pc, #272]	; (80042bc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D4_PIN;
 80041aa:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D4_PIN_AF;
 80041ac:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D4_GPIO_PORT, &GPIO_InitStruct);
 80041b0:	f000 fbda 	bl	8004968 <HAL_GPIO_Init>
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 80041b4:	a911      	add	r1, sp, #68	; 0x44
 80041b6:	4841      	ldr	r0, [pc, #260]	; (80042bc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D5_PIN;
 80041b8:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D5_PIN_AF;
 80041ba:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D5_GPIO_PORT, &GPIO_InitStruct);
 80041be:	f000 fbd3 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 80041c2:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 80041c6:	a911      	add	r1, sp, #68	; 0x44
 80041c8:	4839      	ldr	r0, [pc, #228]	; (80042b0 <BSP_OSPI_NOR_Init+0x2dc>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D6_PIN;
 80041ca:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D6_PIN_AF;
 80041cc:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D6_GPIO_PORT, &GPIO_InitStruct);
 80041ce:	f000 fbcb 	bl	8004968 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 80041d2:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 80041d4:	a911      	add	r1, sp, #68	; 0x44
 80041d6:	4839      	ldr	r0, [pc, #228]	; (80042bc <BSP_OSPI_NOR_Init+0x2e8>)
  GPIO_InitStruct.Pin       = OSPI_NOR_D7_PIN;
 80041d8:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Alternate = OSPI_NOR_D7_PIN_AF;
 80041da:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
  HAL_GPIO_Init(OSPI_NOR_D7_GPIO_PORT, &GPIO_InitStruct);
 80041de:	f000 fbc3 	bl	8004968 <HAL_GPIO_Init>
      (void)MX25LM51245G_GetFlashInfo(&pInfo);
 80041e2:	a811      	add	r0, sp, #68	; 0x44
 80041e4:	f7ff f861 	bl	80032aa <MX25LM51245G_GetFlashInfo>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
      ospi_config.ClockPrescaler = 2U;
 80041ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80041ee:	fa93 f3a3 	rbit	r3, r3
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041f2:	b10b      	cbz	r3, 80041f8 <BSP_OSPI_NOR_Init+0x224>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80041f4:	fab3 f783 	clz	r7, r3
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80041f8:	2300      	movs	r3, #0
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 80041fa:	4832      	ldr	r0, [pc, #200]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
      ospi_config.MemorySize     = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize);
 80041fc:	970d      	str	r7, [sp, #52]	; 0x34
      ospi_config.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80041fe:	930f      	str	r3, [sp, #60]	; 0x3c
      ospi_config.TransferRate   = Init->TransferRate;
 8004200:	786b      	ldrb	r3, [r5, #1]
 8004202:	9310      	str	r3, [sp, #64]	; 0x40
      if (MX_OSPI_ClockConfig(&hospi_nor[Instance]) != HAL_OK)
 8004204:	f7ff fecc 	bl	8003fa0 <MX_OSPI_ClockConfig>
 8004208:	b120      	cbz	r0, 8004214 <BSP_OSPI_NOR_Init+0x240>
        ret = BSP_ERROR_PERIPH_FAILURE;
 800420a:	f06f 0003 	mvn.w	r0, #3
}
 800420e:	b01b      	add	sp, #108	; 0x6c
 8004210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      else if (MX_OSPI_NOR_Init(&hospi_nor[Instance], &ospi_config) != HAL_OK)
 8004214:	a90d      	add	r1, sp, #52	; 0x34
 8004216:	482b      	ldr	r0, [pc, #172]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004218:	f7ff fd92 	bl	8003d40 <MX_OSPI_NOR_Init>
 800421c:	4602      	mov	r2, r0
 800421e:	2800      	cmp	r0, #0
 8004220:	d1f3      	bne.n	800420a <BSP_OSPI_NOR_Init+0x236>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004222:	4601      	mov	r1, r0
 8004224:	4827      	ldr	r0, [pc, #156]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004226:	f7ff fabb 	bl	80037a0 <MX25LM51245G_ResetEnable>
 800422a:	4602      	mov	r2, r0
 800422c:	b110      	cbz	r0, 8004234 <BSP_OSPI_NOR_Init+0x260>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800422e:	f06f 0004 	mvn.w	r0, #4
 8004232:	e7ec      	b.n	800420e <BSP_OSPI_NOR_Init+0x23a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_SPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004234:	4601      	mov	r1, r0
 8004236:	4823      	ldr	r0, [pc, #140]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004238:	f7ff fae1 	bl	80037fe <MX25LM51245G_ResetMemory>
 800423c:	4602      	mov	r2, r0
 800423e:	2800      	cmp	r0, #0
 8004240:	d1f5      	bne.n	800422e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004242:	2101      	movs	r1, #1
 8004244:	481f      	ldr	r0, [pc, #124]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004246:	f7ff faab 	bl	80037a0 <MX25LM51245G_ResetEnable>
 800424a:	4602      	mov	r2, r0
 800424c:	2800      	cmp	r0, #0
 800424e:	d1ee      	bne.n	800422e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_STR_TRANSFER) != MX25LM51245G_OK)
 8004250:	2101      	movs	r1, #1
 8004252:	481c      	ldr	r0, [pc, #112]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004254:	f7ff fad3 	bl	80037fe <MX25LM51245G_ResetMemory>
 8004258:	2800      	cmp	r0, #0
 800425a:	d1e8      	bne.n	800422e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetEnable(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800425c:	2201      	movs	r2, #1
 800425e:	4819      	ldr	r0, [pc, #100]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 8004260:	4611      	mov	r1, r2
 8004262:	f7ff fa9d 	bl	80037a0 <MX25LM51245G_ResetEnable>
 8004266:	2800      	cmp	r0, #0
 8004268:	d1e1      	bne.n	800422e <BSP_OSPI_NOR_Init+0x25a>
  else if(MX25LM51245G_ResetMemory(&hospi_nor[Instance], BSP_OSPI_NOR_OPI_MODE, BSP_OSPI_NOR_DTR_TRANSFER) != MX25LM51245G_OK)
 800426a:	2201      	movs	r2, #1
 800426c:	4815      	ldr	r0, [pc, #84]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 800426e:	4611      	mov	r1, r2
 8004270:	f7ff fac5 	bl	80037fe <MX25LM51245G_ResetMemory>
 8004274:	2800      	cmp	r0, #0
 8004276:	d1da      	bne.n	800422e <BSP_OSPI_NOR_Init+0x25a>
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 8004278:	2301      	movs	r3, #1
    Ospi_Nor_Ctx[Instance].TransferRate  = BSP_OSPI_NOR_STR_TRANSFER;     /* After reset S/W setting to STR mode          */
 800427a:	70b0      	strb	r0, [r6, #2]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 800427c:	2064      	movs	r0, #100	; 0x64
    Ospi_Nor_Ctx[Instance].IsInitialized = OSPI_ACCESS_INDIRECT;      /* After reset S/W setting to indirect access   */
 800427e:	8033      	strh	r3, [r6, #0]
    HAL_Delay(MX25LM51245G_RESET_MAX_TIME);
 8004280:	f000 f99c 	bl	80045bc <HAL_Delay>
      else if (MX25LM51245G_AutoPollingMemReady(&hospi_nor[Instance], Ospi_Nor_Ctx[Instance].InterfaceMode, Ospi_Nor_Ctx[Instance].TransferRate) != MX25LM51245G_OK)
 8004284:	78b2      	ldrb	r2, [r6, #2]
 8004286:	7871      	ldrb	r1, [r6, #1]
 8004288:	480e      	ldr	r0, [pc, #56]	; (80042c4 <BSP_OSPI_NOR_Init+0x2f0>)
 800428a:	f7ff f827 	bl	80032dc <MX25LM51245G_AutoPollingMemReady>
 800428e:	2800      	cmp	r0, #0
 8004290:	d1cd      	bne.n	800422e <BSP_OSPI_NOR_Init+0x25a>
      else if (BSP_OSPI_NOR_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8004292:	786a      	ldrb	r2, [r5, #1]
 8004294:	7829      	ldrb	r1, [r5, #0]
 8004296:	f7ff fe19 	bl	8003ecc <BSP_OSPI_NOR_ConfigFlash>
 800429a:	2800      	cmp	r0, #0
 800429c:	d1c7      	bne.n	800422e <BSP_OSPI_NOR_Init+0x25a>
        ret = BSP_ERROR_NONE;
 800429e:	2000      	movs	r0, #0
 80042a0:	e7b5      	b.n	800420e <BSP_OSPI_NOR_Init+0x23a>
    ret = BSP_ERROR_WRONG_PARAM;
 80042a2:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80042a6:	e7b2      	b.n	800420e <BSP_OSPI_NOR_Init+0x23a>
 80042a8:	24002980 	.word	0x24002980
 80042ac:	58024400 	.word	0x58024400
 80042b0:	58021800 	.word	0x58021800
 80042b4:	58020400 	.word	0x58020400
 80042b8:	58021400 	.word	0x58021400
 80042bc:	58020c00 	.word	0x58020c00
 80042c0:	58021000 	.word	0x58021000
 80042c4:	24002988 	.word	0x24002988

080042c8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80042c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042cc:	460c      	mov	r4, r1
 80042ce:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d163      	bne.n	800439c <BSP_TS_Init+0xd4>
 80042d4:	680b      	ldr	r3, [r1, #0]
 80042d6:	1e5a      	subs	r2, r3, #1
 80042d8:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
 80042dc:	d25e      	bcs.n	800439c <BSP_TS_Init+0xd4>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80042de:	684a      	ldr	r2, [r1, #4]
  if((Instance >= TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80042e0:	1e51      	subs	r1, r2, #1
 80042e2:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
 80042e6:	d259      	bcs.n	800439c <BSP_TS_Init+0xd4>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf28      	it	cs
 80042ec:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80042ee:	68e2      	ldr	r2, [r4, #12]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d853      	bhi.n	800439c <BSP_TS_Init+0xd4>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 80042f4:	2370      	movs	r3, #112	; 0x70
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80042f6:	4d2b      	ldr	r5, [pc, #172]	; (80043a4 <BSP_TS_Init+0xdc>)
  uint32_t ft5336_id       = 0;
 80042f8:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 80042fa:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
 80042fc:	f8ad 3010 	strh.w	r3, [sp, #16]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004300:	4628      	mov	r0, r5
  IOCtx.Init        = BSP_I2C4_Init;
 8004302:	4b29      	ldr	r3, [pc, #164]	; (80043a8 <BSP_TS_Init+0xe0>)
 8004304:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <BSP_TS_Init+0xe4>)
 8004308:	9303      	str	r3, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800430a:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <BSP_TS_Init+0xe8>)
 800430c:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800430e:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <BSP_TS_Init+0xec>)
 8004310:	9305      	str	r3, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
 8004312:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <BSP_TS_Init+0xf0>)
 8004314:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 8004316:	f7fe ff33 	bl	8003180 <FT5336_RegisterBusIO>
 800431a:	b128      	cbz	r0, 8004328 <BSP_TS_Init+0x60>
      ret = BSP_ERROR_NO_INIT;
 800431c:	f04f 35ff 	mov.w	r5, #4294967295
}
 8004320:	4628      	mov	r0, r5
 8004322:	b008      	add	sp, #32
 8004324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 8004328:	a901      	add	r1, sp, #4
 800432a:	4628      	mov	r0, r5
 800432c:	f7fe fe8e 	bl	800304c <FT5336_ReadID>
 8004330:	2800      	cmp	r0, #0
 8004332:	d1f3      	bne.n	800431c <BSP_TS_Init+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
 8004334:	9b01      	ldr	r3, [sp, #4]
 8004336:	2b51      	cmp	r3, #81	; 0x51
 8004338:	d1f0      	bne.n	800431c <BSP_TS_Init+0x54>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800433a:	4b20      	ldr	r3, [pc, #128]	; (80043bc <BSP_TS_Init+0xf4>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800433c:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
 800433e:	4f20      	ldr	r7, [pc, #128]	; (80043c0 <BSP_TS_Init+0xf8>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004340:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80043c8 <BSP_TS_Init+0x100>
    Ts_CompObj[Instance] = &FT5336Obj;
 8004344:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 8004346:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4798      	blx	r3
 800434e:	4605      	mov	r5, r0
 8004350:	2800      	cmp	r0, #0
 8004352:	d1e3      	bne.n	800431c <BSP_TS_Init+0x54>
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004354:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8004356:	a902      	add	r1, sp, #8
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 8004358:	4e1a      	ldr	r6, [pc, #104]	; (80043c4 <BSP_TS_Init+0xfc>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800435a:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width       = TS_Init->Width;
 800435c:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height      = TS_Init->Height;
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation = TS_Init->Orientation;
 8004362:	68a3      	ldr	r3, [r4, #8]
 8004364:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy    = TS_Init->Accuracy;
 8004366:	68e3      	ldr	r3, [r4, #12]
 8004368:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800436a:	f8d8 3000 	ldr.w	r3, [r8]
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	4798      	blx	r3
 8004372:	2800      	cmp	r0, #0
 8004374:	db0f      	blt.n	8004396 <BSP_TS_Init+0xce>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8004376:	9b03      	ldr	r3, [sp, #12]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004378:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800437a:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800437c:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800437e:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8004380:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004382:	68e3      	ldr	r3, [r4, #12]
 8004384:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8004386:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004388:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800438a:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800438c:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800438e:	6273      	str	r3, [r6, #36]	; 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8004390:	e9c6 2307 	strd	r2, r3, [r6, #28]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 8004394:	e7c4      	b.n	8004320 <BSP_TS_Init+0x58>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8004396:	f06f 0504 	mvn.w	r5, #4
 800439a:	e7c1      	b.n	8004320 <BSP_TS_Init+0x58>
    ret = BSP_ERROR_WRONG_PARAM;
 800439c:	f06f 0501 	mvn.w	r5, #1
  return ret;
 80043a0:	e7be      	b.n	8004320 <BSP_TS_Init+0x58>
 80043a2:	bf00      	nop
 80043a4:	240029e4 	.word	0x240029e4
 80043a8:	080038f5 	.word	0x080038f5
 80043ac:	0800385d 	.word	0x0800385d
 80043b0:	08003bd1 	.word	0x08003bd1
 80043b4:	08003b9d 	.word	0x08003b9d
 80043b8:	08003c05 	.word	0x08003c05
 80043bc:	2400000c 	.word	0x2400000c
 80043c0:	24002a0c 	.word	0x24002a0c
 80043c4:	24002a10 	.word	0x24002a10
 80043c8:	24002a38 	.word	0x24002a38

080043cc <BSP_TS_GetState>:
{
 80043cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80043d0:	460d      	mov	r5, r1
  if(Instance >= TS_INSTANCES_NBR)
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d153      	bne.n	800447e <BSP_TS_GetState+0xb2>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80043d6:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <BSP_TS_GetState+0xb8>)
 80043d8:	a901      	add	r1, sp, #4
 80043da:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <BSP_TS_GetState+0xbc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6810      	ldr	r0, [r2, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4798      	blx	r3
 80043e4:	2800      	cmp	r0, #0
 80043e6:	db47      	blt.n	8004478 <BSP_TS_GetState+0xac>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80043e8:	4928      	ldr	r1, [pc, #160]	; (800448c <BSP_TS_GetState+0xc0>)
    else if(state.TouchDetected != 0U)
 80043ea:	9801      	ldr	r0, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80043ec:	698f      	ldr	r7, [r1, #24]
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80043ee:	6a0e      	ldr	r6, [r1, #32]
    else if(state.TouchDetected != 0U)
 80043f0:	2800      	cmp	r0, #0
 80043f2:	d03d      	beq.n	8004470 <BSP_TS_GetState+0xa4>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80043f4:	f8d1 e008 	ldr.w	lr, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 80043f8:	f8d1 8010 	ldr.w	r8, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80043fc:	f01e 0f08 	tst.w	lr, #8
      y_oriented = state.TouchY;
 8004400:	e9dd c302 	ldrd	ip, r3, [sp, #8]
        x_oriented = state.TouchY;
 8004404:	bf19      	ittee	ne
 8004406:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8004408:	4664      	movne	r4, ip
      y_oriented = state.TouchY;
 800440a:	461c      	moveq	r4, r3
      x_oriented = state.TouchX;
 800440c:	4662      	moveq	r2, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800440e:	f01e 0f02 	tst.w	lr, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 8004412:	bf1c      	itt	ne
 8004414:	f108 32ff 	addne.w	r2, r8, #4294967295
 8004418:	eba2 020c 	subne.w	r2, r2, ip
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800441c:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8004420:	f01e 0f04 	tst.w	lr, #4
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 8004424:	bf18      	it	ne
 8004426:	ebac 0403 	subne.w	r4, ip, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800442a:	680b      	ldr	r3, [r1, #0]
 800442c:	4353      	muls	r3, r2
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800442e:	684a      	ldr	r2, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8004430:	6028      	str	r0, [r5, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004432:	4362      	muls	r2, r4
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004434:	68cc      	ldr	r4, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004436:	fbb3 f3f8 	udiv	r3, r3, r8
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800443a:	fbb2 f2fc 	udiv	r2, r2, ip
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800443e:	42bb      	cmp	r3, r7
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8004440:	606b      	str	r3, [r5, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8004442:	60aa      	str	r2, [r5, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8004444:	bf8c      	ite	hi
 8004446:	eba3 0c07 	subhi.w	ip, r3, r7
 800444a:	eba7 0c03 	subls.w	ip, r7, r3
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800444e:	42b2      	cmp	r2, r6
 8004450:	bf8c      	ite	hi
 8004452:	1b90      	subhi	r0, r2, r6
 8004454:	1ab0      	subls	r0, r6, r2
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8004456:	4564      	cmp	r4, ip
 8004458:	d301      	bcc.n	800445e <BSP_TS_GetState+0x92>
 800445a:	4284      	cmp	r4, r0
 800445c:	d205      	bcs.n	800446a <BSP_TS_GetState+0x9e>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800445e:	618b      	str	r3, [r1, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8004460:	620a      	str	r2, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8004462:	2000      	movs	r0, #0
}
 8004464:	b004      	add	sp, #16
 8004466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800446a:	e9c5 7601 	strd	r7, r6, [r5, #4]
 800446e:	e7f8      	b.n	8004462 <BSP_TS_GetState+0x96>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8004470:	e9c5 0700 	strd	r0, r7, [r5]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8004474:	60ae      	str	r6, [r5, #8]
 8004476:	e7f5      	b.n	8004464 <BSP_TS_GetState+0x98>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004478:	f06f 0004 	mvn.w	r0, #4
 800447c:	e7f2      	b.n	8004464 <BSP_TS_GetState+0x98>
    ret = BSP_ERROR_WRONG_PARAM;
 800447e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8004482:	e7ef      	b.n	8004464 <BSP_TS_GetState+0x98>
 8004484:	24002a38 	.word	0x24002a38
 8004488:	24002a0c 	.word	0x24002a0c
 800448c:	24002a10 	.word	0x24002a10

08004490 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004490:	4a22      	ldr	r2, [pc, #136]	; (800451c <SystemInit+0x8c>)
 8004492:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004496:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800449a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800449e:	4a20      	ldr	r2, [pc, #128]	; (8004520 <SystemInit+0x90>)
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d805      	bhi.n	80044b6 <SystemInit+0x26>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	f023 030f 	bic.w	r3, r3, #15
 80044b0:	f043 0307 	orr.w	r3, r3, #7
 80044b4:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80044b6:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <SystemInit+0x94>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80044c0:	2200      	movs	r2, #0
 80044c2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80044c4:	4a18      	ldr	r2, [pc, #96]	; (8004528 <SystemInit+0x98>)
 80044c6:	6819      	ldr	r1, [r3, #0]
 80044c8:	400a      	ands	r2, r1
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044ca:	4915      	ldr	r1, [pc, #84]	; (8004520 <SystemInit+0x90>)
  RCC->CR &= 0xEAF6ED7FU;
 80044cc:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80044ce:	680a      	ldr	r2, [r1, #0]
 80044d0:	0712      	lsls	r2, r2, #28
 80044d2:	d505      	bpl.n	80044e0 <SystemInit+0x50>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80044d4:	680a      	ldr	r2, [r1, #0]
 80044d6:	f022 020f 	bic.w	r2, r2, #15
 80044da:	f042 0207 	orr.w	r2, r2, #7
 80044de:	600a      	str	r2, [r1, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80044e0:	2200      	movs	r2, #0

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80044e2:	4912      	ldr	r1, [pc, #72]	; (800452c <SystemInit+0x9c>)
  RCC->D1CFGR = 0x00000000;
 80044e4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80044e6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80044e8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80044ea:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80044ec:	4910      	ldr	r1, [pc, #64]	; (8004530 <SystemInit+0xa0>)
 80044ee:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80044f0:	4910      	ldr	r1, [pc, #64]	; (8004534 <SystemInit+0xa4>)
 80044f2:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80044f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80044f6:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80044f8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80044fa:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80044fc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80044fe:	6819      	ldr	r1, [r3, #0]
 8004500:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8004504:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004506:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004508:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800450c:	4b0a      	ldr	r3, [pc, #40]	; (8004538 <SystemInit+0xa8>)
 800450e:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004514:	4b01      	ldr	r3, [pc, #4]	; (800451c <SystemInit+0x8c>)
 8004516:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	e000ed00 	.word	0xe000ed00
 8004520:	52002000 	.word	0x52002000
 8004524:	58024400 	.word	0x58024400
 8004528:	eaf6ed7f 	.word	0xeaf6ed7f
 800452c:	02020200 	.word	0x02020200
 8004530:	01ff0000 	.word	0x01ff0000
 8004534:	01010280 	.word	0x01010280
 8004538:	52004000 	.word	0x52004000

0800453c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800453c:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800453e:	2003      	movs	r0, #3
 8004540:	f000 f84e 	bl	80045e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004544:	f002 fe30 	bl	80071a8 <HAL_RCC_GetSysClockFreq>
 8004548:	490f      	ldr	r1, [pc, #60]	; (8004588 <HAL_Init+0x4c>)
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <HAL_Init+0x50>)
 800454c:	698b      	ldr	r3, [r1, #24]
 800454e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004552:	5cd3      	ldrb	r3, [r2, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800455a:	698b      	ldr	r3, [r1, #24]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	5cd3      	ldrb	r3, [r2, r3]
 8004562:	4a0b      	ldr	r2, [pc, #44]	; (8004590 <HAL_Init+0x54>)
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa20 f303 	lsr.w	r3, r0, r3
 800456c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800456e:	4b09      	ldr	r3, [pc, #36]	; (8004594 <HAL_Init+0x58>)
 8004570:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004572:	2000      	movs	r0, #0
 8004574:	f7fc ff32 	bl	80013dc <HAL_InitTick>
 8004578:	4604      	mov	r4, r0
 800457a:	b918      	cbnz	r0, 8004584 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800457c:	f7fc fbf6 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8004580:	4620      	mov	r0, r4
 8004582:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004584:	2401      	movs	r4, #1
 8004586:	e7fb      	b.n	8004580 <HAL_Init+0x44>
 8004588:	58024400 	.word	0x58024400
 800458c:	0801fb04 	.word	0x0801fb04
 8004590:	24000040 	.word	0x24000040
 8004594:	2400003c 	.word	0x2400003c

08004598 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004598:	4a03      	ldr	r2, [pc, #12]	; (80045a8 <HAL_IncTick+0x10>)
 800459a:	4b04      	ldr	r3, [pc, #16]	; (80045ac <HAL_IncTick+0x14>)
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	440b      	add	r3, r1
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	24002a3c 	.word	0x24002a3c
 80045ac:	24000044 	.word	0x24000044

080045b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80045b0:	4b01      	ldr	r3, [pc, #4]	; (80045b8 <HAL_GetTick+0x8>)
 80045b2:	6818      	ldr	r0, [r3, #0]
}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	24002a3c 	.word	0x24002a3c

080045bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045bc:	b538      	push	{r3, r4, r5, lr}
 80045be:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80045c0:	f7ff fff6 	bl	80045b0 <HAL_GetTick>
 80045c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045c6:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80045c8:	bf1e      	ittt	ne
 80045ca:	4b04      	ldrne	r3, [pc, #16]	; (80045dc <HAL_Delay+0x20>)
 80045cc:	781b      	ldrbne	r3, [r3, #0]
 80045ce:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045d0:	f7ff ffee 	bl	80045b0 <HAL_GetTick>
 80045d4:	1b43      	subs	r3, r0, r5
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	d3fa      	bcc.n	80045d0 <HAL_Delay+0x14>
  {
  }
}
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	24000044 	.word	0x24000044

080045e0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e0:	4907      	ldr	r1, [pc, #28]	; (8004600 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80045ee:	0412      	lsls	r2, r2, #16
 80045f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80045fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80045fe:	4770      	bx	lr
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004606:	b530      	push	{r4, r5, lr}
 8004608:	68dc      	ldr	r4, [r3, #12]
 800460a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800460e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004612:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004614:	2d04      	cmp	r5, #4
 8004616:	bf28      	it	cs
 8004618:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800461a:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800461c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004620:	bf8c      	ite	hi
 8004622:	3c03      	subhi	r4, #3
 8004624:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004626:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 800462a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004630:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004634:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	fa01 f104 	lsl.w	r1, r1, r4
 800463c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004640:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004644:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004646:	db06      	blt.n	8004656 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004648:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800464c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004650:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004654:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004656:	f000 000f 	and.w	r0, r0, #15
 800465a:	4a02      	ldr	r2, [pc, #8]	; (8004664 <HAL_NVIC_SetPriority+0x60>)
 800465c:	5413      	strb	r3, [r2, r0]
 800465e:	e7f9      	b.n	8004654 <HAL_NVIC_SetPriority+0x50>
 8004660:	e000ed00 	.word	0xe000ed00
 8004664:	e000ed14 	.word	0xe000ed14

08004668 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004668:	2800      	cmp	r0, #0
 800466a:	db08      	blt.n	800467e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466c:	2301      	movs	r3, #1
 800466e:	0942      	lsrs	r2, r0, #5
 8004670:	f000 001f 	and.w	r0, r0, #31
 8004674:	fa03 f000 	lsl.w	r0, r3, r0
 8004678:	4b01      	ldr	r3, [pc, #4]	; (8004680 <HAL_NVIC_EnableIRQ+0x18>)
 800467a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100

08004684 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8004684:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <HAL_MPU_Disable+0x18>)
 800468a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004690:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	e000ed00 	.word	0xe000ed00

080046a0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80046a0:	4b06      	ldr	r3, [pc, #24]	; (80046bc <HAL_MPU_Enable+0x1c>)
 80046a2:	f040 0001 	orr.w	r0, r0, #1
 80046a6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80046aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80046b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80046b6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80046ba:	4770      	bx	lr
 80046bc:	e000ed00 	.word	0xe000ed00

080046c0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80046c0:	7843      	ldrb	r3, [r0, #1]
 80046c2:	4a14      	ldr	r2, [pc, #80]	; (8004714 <HAL_MPU_ConfigRegion+0x54>)
{
 80046c4:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80046c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80046ca:	7801      	ldrb	r1, [r0, #0]
 80046cc:	b1e9      	cbz	r1, 800470a <HAL_MPU_ConfigRegion+0x4a>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80046ce:	6843      	ldr	r3, [r0, #4]
 80046d0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046d4:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046d6:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80046d8:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80046da:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046de:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80046e0:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046e2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80046e6:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046e8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80046ec:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046ee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80046f2:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80046f8:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80046fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80046fe:	7a01      	ldrb	r1, [r0, #8]
 8004700:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004704:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004708:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 800470a:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800470e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
}
 8004712:	e7f9      	b.n	8004708 <HAL_MPU_ConfigRegion+0x48>
 8004714:	e000ed00 	.word	0xe000ed00

08004718 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004718:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800471a:	4604      	mov	r4, r0
 800471c:	b908      	cbnz	r0, 8004722 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800471e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004720:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004722:	7f43      	ldrb	r3, [r0, #29]
 8004724:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004728:	b913      	cbnz	r3, 8004730 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800472a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800472c:	f7fc fb36 	bl	8000d9c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004730:	2302      	movs	r3, #2
 8004732:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004734:	7923      	ldrb	r3, [r4, #4]
 8004736:	b9e3      	cbnz	r3, 8004772 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	4a13      	ldr	r2, [pc, #76]	; (8004788 <HAL_CRC_Init+0x70>)
 800473c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	f022 0218 	bic.w	r2, r2, #24
 8004744:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004746:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004748:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800474a:	b9d2      	cbnz	r2, 8004782 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004750:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8004752:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	6961      	ldr	r1, [r4, #20]
 8004758:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800475c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800475e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004760:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004768:	430a      	orrs	r2, r1
 800476a:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 800476c:	2301      	movs	r3, #1
 800476e:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8004770:	e7d6      	b.n	8004720 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004772:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004776:	4620      	mov	r0, r4
 8004778:	f000 f808 	bl	800478c <HAL_CRCEx_Polynomial_Set>
 800477c:	2800      	cmp	r0, #0
 800477e:	d0e2      	beq.n	8004746 <HAL_CRC_Init+0x2e>
 8004780:	e7cd      	b.n	800471e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004782:	6922      	ldr	r2, [r4, #16]
 8004784:	e7e4      	b.n	8004750 <HAL_CRC_Init+0x38>
 8004786:	bf00      	nop
 8004788:	04c11db7 	.word	0x04c11db7

0800478c <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800478c:	231f      	movs	r3, #31
{
 800478e:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004790:	3b01      	subs	r3, #1
 8004792:	d31c      	bcc.n	80047ce <HAL_CRCEx_Polynomial_Set+0x42>
 8004794:	fa21 f403 	lsr.w	r4, r1, r3
 8004798:	07e4      	lsls	r4, r4, #31
 800479a:	d5f9      	bpl.n	8004790 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 800479c:	2a10      	cmp	r2, #16
 800479e:	d012      	beq.n	80047c6 <HAL_CRCEx_Polynomial_Set+0x3a>
 80047a0:	d804      	bhi.n	80047ac <HAL_CRCEx_Polynomial_Set+0x20>
 80047a2:	b13a      	cbz	r2, 80047b4 <HAL_CRCEx_Polynomial_Set+0x28>
 80047a4:	2a08      	cmp	r2, #8
 80047a6:	d010      	beq.n	80047ca <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80047a8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80047aa:	e00b      	b.n	80047c4 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80047ac:	2a18      	cmp	r2, #24
 80047ae:	d1fb      	bne.n	80047a8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80047b0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80047b2:	d8f9      	bhi.n	80047a8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80047b4:	6800      	ldr	r0, [r0, #0]
 80047b6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80047b8:	6883      	ldr	r3, [r0, #8]
 80047ba:	f023 0318 	bic.w	r3, r3, #24
 80047be:	431a      	orrs	r2, r3
 80047c0:	6082      	str	r2, [r0, #8]
 80047c2:	2000      	movs	r0, #0
}
 80047c4:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80047c6:	2b07      	cmp	r3, #7
 80047c8:	e7f3      	b.n	80047b2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80047ca:	2b0f      	cmp	r3, #15
 80047cc:	e7f1      	b.n	80047b2 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80047ce:	2a00      	cmp	r2, #0
 80047d0:	d1ea      	bne.n	80047a8 <HAL_CRCEx_Polynomial_Set+0x1c>
 80047d2:	e7ef      	b.n	80047b4 <HAL_CRCEx_Polynomial_Set+0x28>

080047d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80047d4:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80047d6:	4604      	mov	r4, r0
 80047d8:	2800      	cmp	r0, #0
 80047da:	d036      	beq.n	800484a <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80047dc:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80047e0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80047e4:	b91b      	cbnz	r3, 80047ee <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80047e6:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80047ea:	f7fc faef 	bl	8000dcc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047ee:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80047f0:	69e0      	ldr	r0, [r4, #28]
 80047f2:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80047f4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80047f8:	6823      	ldr	r3, [r4, #0]
 80047fa:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80047fc:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8004804:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800480c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800480e:	68a2      	ldr	r2, [r4, #8]
 8004810:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8004814:	4302      	orrs	r2, r0
 8004816:	f021 0101 	bic.w	r1, r1, #1
 800481a:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800481c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800481e:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004820:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004822:	0c12      	lsrs	r2, r2, #16
 8004824:	0412      	lsls	r2, r2, #16
 8004826:	430a      	orrs	r2, r1
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800482a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800482c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8004830:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8004834:	0552      	lsls	r2, r2, #21
 8004836:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800483a:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800483c:	430a      	orrs	r2, r1
 800483e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004840:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004842:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004844:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
 8004848:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800484a:	2001      	movs	r0, #1
 800484c:	e7fc      	b.n	8004848 <HAL_DMA2D_Init+0x74>

0800484e <HAL_DMA2D_LineEventCallback>:
 800484e:	4770      	bx	lr

08004850 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8004850:	4770      	bx	lr

08004852 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004852:	6803      	ldr	r3, [r0, #0]
{
 8004854:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004856:	685e      	ldr	r6, [r3, #4]
{
 8004858:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800485a:	681d      	ldr	r5, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800485c:	07f2      	lsls	r2, r6, #31
 800485e:	d514      	bpl.n	800488a <HAL_DMA2D_IRQHandler+0x38>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004860:	05e9      	lsls	r1, r5, #23
 8004862:	d512      	bpl.n	800488a <HAL_DMA2D_IRQHandler+0x38>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800486a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800486c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	6642      	str	r2, [r0, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004874:	2201      	movs	r2, #1
 8004876:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004878:	2304      	movs	r3, #4
 800487a:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800487e:	2300      	movs	r3, #0
 8004880:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8004884:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004886:	b103      	cbz	r3, 800488a <HAL_DMA2D_IRQHandler+0x38>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004888:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800488a:	06b2      	lsls	r2, r6, #26
 800488c:	d516      	bpl.n	80048bc <HAL_DMA2D_IRQHandler+0x6a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800488e:	04ab      	lsls	r3, r5, #18
 8004890:	d514      	bpl.n	80048bc <HAL_DMA2D_IRQHandler+0x6a>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800489c:	2220      	movs	r2, #32
 800489e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80048a8:	2304      	movs	r3, #4
 80048aa:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048ae:	2300      	movs	r3, #0
 80048b0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80048b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b6:	b10b      	cbz	r3, 80048bc <HAL_DMA2D_IRQHandler+0x6a>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80048b8:	4620      	mov	r0, r4
 80048ba:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80048bc:	0730      	lsls	r0, r6, #28
 80048be:	d516      	bpl.n	80048ee <HAL_DMA2D_IRQHandler+0x9c>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80048c0:	0529      	lsls	r1, r5, #20
 80048c2:	d514      	bpl.n	80048ee <HAL_DMA2D_IRQHandler+0x9c>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048cc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80048ce:	2208      	movs	r2, #8
 80048d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80048d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d4:	f043 0304 	orr.w	r3, r3, #4
 80048d8:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80048da:	2304      	movs	r3, #4
 80048dc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80048e0:	2300      	movs	r3, #0
 80048e2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 80048e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048e8:	b10b      	cbz	r3, 80048ee <HAL_DMA2D_IRQHandler+0x9c>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80048ea:	4620      	mov	r0, r4
 80048ec:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80048ee:	0772      	lsls	r2, r6, #29
 80048f0:	d50b      	bpl.n	800490a <HAL_DMA2D_IRQHandler+0xb8>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80048f2:	056b      	lsls	r3, r5, #21
 80048f4:	d509      	bpl.n	800490a <HAL_DMA2D_IRQHandler+0xb8>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80048f6:	6823      	ldr	r3, [r4, #0]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80048f8:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004900:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004902:	2204      	movs	r2, #4
 8004904:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004906:	f7ff ffa2 	bl	800484e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800490a:	07b0      	lsls	r0, r6, #30
 800490c:	d514      	bpl.n	8004938 <HAL_DMA2D_IRQHandler+0xe6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800490e:	05a9      	lsls	r1, r5, #22
 8004910:	d512      	bpl.n	8004938 <HAL_DMA2D_IRQHandler+0xe6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800491a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800491c:	2202      	movs	r2, #2
 800491e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004922:	6663      	str	r3, [r4, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004924:	2301      	movs	r3, #1
 8004926:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800492a:	2300      	movs	r3, #0
 800492c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8004930:	6a23      	ldr	r3, [r4, #32]
 8004932:	b10b      	cbz	r3, 8004938 <HAL_DMA2D_IRQHandler+0xe6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004938:	06f2      	lsls	r2, r6, #27
 800493a:	d513      	bpl.n	8004964 <HAL_DMA2D_IRQHandler+0x112>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800493c:	04eb      	lsls	r3, r5, #19
 800493e:	d511      	bpl.n	8004964 <HAL_DMA2D_IRQHandler+0x112>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004940:	6823      	ldr	r3, [r4, #0]

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004942:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800494a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800494c:	2210      	movs	r2, #16
 800494e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004952:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004954:	2301      	movs	r3, #1
 8004956:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
 800495a:	2300      	movs	r3, #0
 800495c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004960:	f7ff ff76 	bl	8004850 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004964:	bd70      	pop	{r4, r5, r6, pc}
	...

08004968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800496c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800496e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8004b30 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004972:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004976:	680a      	ldr	r2, [r1, #0]
 8004978:	fa32 f503 	lsrs.w	r5, r2, r3
 800497c:	d102      	bne.n	8004984 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800497e:	b003      	add	sp, #12
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004984:	f04f 0e01 	mov.w	lr, #1
 8004988:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00U)
 800498c:	ea1e 0202 	ands.w	r2, lr, r2
 8004990:	f000 80b9 	beq.w	8004b06 <HAL_GPIO_Init+0x19e>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004994:	684e      	ldr	r6, [r1, #4]
 8004996:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800499a:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800499e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049a2:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a6:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049a8:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049ac:	2f01      	cmp	r7, #1
 80049ae:	d834      	bhi.n	8004a1a <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80049b0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049b2:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049b6:	68cf      	ldr	r7, [r1, #12]
 80049b8:	fa07 f708 	lsl.w	r7, r7, r8
 80049bc:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80049c0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80049c2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049c4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049c8:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80049cc:	409f      	lsls	r7, r3
 80049ce:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80049d2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80049d4:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d6:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049d8:	ea07 0e0c 	and.w	lr, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049dc:	688f      	ldr	r7, [r1, #8]
 80049de:	fa07 f708 	lsl.w	r7, r7, r8
 80049e2:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->PUPDR = temp;
 80049e6:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049e8:	d119      	bne.n	8004a1e <HAL_GPIO_Init+0xb6>
        temp = GPIOx->AFR[position >> 3U];
 80049ea:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049ee:	f003 0b07 	and.w	fp, r3, #7
 80049f2:	f04f 0e0f 	mov.w	lr, #15
 80049f6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80049fa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80049fe:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a02:	fa0e fe0b 	lsl.w	lr, lr, fp
 8004a06:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a0a:	690f      	ldr	r7, [r1, #16]
 8004a0c:	fa07 f70b 	lsl.w	r7, r7, fp
 8004a10:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004a14:	f8ca 7020 	str.w	r7, [sl, #32]
 8004a18:	e001      	b.n	8004a1e <HAL_GPIO_Init+0xb6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a1a:	2d03      	cmp	r5, #3
 8004a1c:	d1da      	bne.n	80049d4 <HAL_GPIO_Init+0x6c>
      temp = GPIOx->MODER;
 8004a1e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a20:	fa05 f508 	lsl.w	r5, r5, r8
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a24:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a28:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a2c:	ea47 0705 	orr.w	r7, r7, r5
      GPIOx->MODER = temp;
 8004a30:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a32:	d068      	beq.n	8004b06 <HAL_GPIO_Init+0x19e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a34:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8004a38:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a3c:	f003 0c03 	and.w	ip, r3, #3
 8004a40:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a44:	f045 0502 	orr.w	r5, r5, #2
 8004a48:	f107 47b0 	add.w	r7, r7, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a4c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a50:	f8c9 50f4 	str.w	r5, [r9, #244]	; 0xf4
 8004a54:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8004a58:	f8d9 50f4 	ldr.w	r5, [r9, #244]	; 0xf4
 8004a5c:	f005 0502 	and.w	r5, r5, #2
 8004a60:	9501      	str	r5, [sp, #4]
 8004a62:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a64:	fa0e f50c 	lsl.w	r5, lr, ip
        temp = SYSCFG->EXTICR[position >> 2U];
 8004a68:	f8d7 8008 	ldr.w	r8, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a6c:	ea28 0e05 	bic.w	lr, r8, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a70:	4d2e      	ldr	r5, [pc, #184]	; (8004b2c <HAL_GPIO_Init+0x1c4>)
 8004a72:	42a8      	cmp	r0, r5
 8004a74:	d049      	beq.n	8004b0a <HAL_GPIO_Init+0x1a2>
 8004a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a7a:	42a8      	cmp	r0, r5
 8004a7c:	d047      	beq.n	8004b0e <HAL_GPIO_Init+0x1a6>
 8004a7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a82:	42a8      	cmp	r0, r5
 8004a84:	d045      	beq.n	8004b12 <HAL_GPIO_Init+0x1aa>
 8004a86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a8a:	42a8      	cmp	r0, r5
 8004a8c:	d043      	beq.n	8004b16 <HAL_GPIO_Init+0x1ae>
 8004a8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a92:	42a8      	cmp	r0, r5
 8004a94:	d041      	beq.n	8004b1a <HAL_GPIO_Init+0x1b2>
 8004a96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a9a:	42a8      	cmp	r0, r5
 8004a9c:	d03f      	beq.n	8004b1e <HAL_GPIO_Init+0x1b6>
 8004a9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004aa2:	42a8      	cmp	r0, r5
 8004aa4:	d03d      	beq.n	8004b22 <HAL_GPIO_Init+0x1ba>
 8004aa6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004aaa:	42a8      	cmp	r0, r5
 8004aac:	d03b      	beq.n	8004b26 <HAL_GPIO_Init+0x1be>
 8004aae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004ab2:	42a8      	cmp	r0, r5
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2509      	moveq	r5, #9
 8004ab8:	250a      	movne	r5, #10
 8004aba:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004abe:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ac2:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ac6:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8004ac8:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8004acc:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8004ace:	bf0c      	ite	eq
 8004ad0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8004ad2:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        EXTI->RTSR1 = temp;
 8004ad8:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8004ada:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8004adc:	bf0c      	ite	eq
 8004ade:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8004ae0:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ae2:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        EXTI->FTSR1 = temp;
 8004ae6:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8004ae8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
        temp &= ~(iocurrent);
 8004aec:	bf0c      	ite	eq
 8004aee:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8004af0:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004af2:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8004af4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8004af8:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        temp &= ~(iocurrent);
 8004afc:	bf54      	ite	pl
 8004afe:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8004b00:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8004b02:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    position++;
 8004b06:	3301      	adds	r3, #1
 8004b08:	e735      	b.n	8004976 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	e7d5      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b0e:	2501      	movs	r5, #1
 8004b10:	e7d3      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b12:	2502      	movs	r5, #2
 8004b14:	e7d1      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b16:	2503      	movs	r5, #3
 8004b18:	e7cf      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b1a:	2504      	movs	r5, #4
 8004b1c:	e7cd      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b1e:	2505      	movs	r5, #5
 8004b20:	e7cb      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b22:	2506      	movs	r5, #6
 8004b24:	e7c9      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b26:	2507      	movs	r5, #7
 8004b28:	e7c7      	b.n	8004aba <HAL_GPIO_Init+0x152>
 8004b2a:	bf00      	nop
 8004b2c:	58020000 	.word	0x58020000
 8004b30:	58024400 	.word	0x58024400

08004b34 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8004b38:	2200      	movs	r2, #0
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004b3a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8004c5c <HAL_GPIO_DeInit+0x128>
 8004b3e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8004c60 <HAL_GPIO_DeInit+0x12c>
 8004b42:	f8df a120 	ldr.w	sl, [pc, #288]	; 8004c64 <HAL_GPIO_DeInit+0x130>
 8004b46:	f8df b120 	ldr.w	fp, [pc, #288]	; 8004c68 <HAL_GPIO_DeInit+0x134>
  while ((GPIO_Pin >> position) != 0x00U)
 8004b4a:	fa31 f302 	lsrs.w	r3, r1, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8004b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8004b54:	2301      	movs	r3, #1
 8004b56:	fa03 fc02 	lsl.w	ip, r3, r2
    if (iocurrent != 0x00U)
 8004b5a:	ea1c 0601 	ands.w	r6, ip, r1
 8004b5e:	d069      	beq.n	8004c34 <HAL_GPIO_DeInit+0x100>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b60:	f022 0403 	bic.w	r4, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004b64:	f002 0703 	and.w	r7, r2, #3
 8004b68:	250f      	movs	r5, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004b6a:	4b3b      	ldr	r3, [pc, #236]	; (8004c58 <HAL_GPIO_DeInit+0x124>)
 8004b6c:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004b70:	00bf      	lsls	r7, r7, #2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004b72:	4298      	cmp	r0, r3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004b74:	fa05 f507 	lsl.w	r5, r5, r7
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b78:	f8d4 e408 	ldr.w	lr, [r4, #1032]	; 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8004b7c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004b80:	ea05 0e0e 	and.w	lr, r5, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004b84:	d058      	beq.n	8004c38 <HAL_GPIO_DeInit+0x104>
 8004b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	d056      	beq.n	8004c3c <HAL_GPIO_DeInit+0x108>
 8004b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b92:	4298      	cmp	r0, r3
 8004b94:	d054      	beq.n	8004c40 <HAL_GPIO_DeInit+0x10c>
 8004b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b9a:	4298      	cmp	r0, r3
 8004b9c:	d052      	beq.n	8004c44 <HAL_GPIO_DeInit+0x110>
 8004b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba2:	4298      	cmp	r0, r3
 8004ba4:	d050      	beq.n	8004c48 <HAL_GPIO_DeInit+0x114>
 8004ba6:	4540      	cmp	r0, r8
 8004ba8:	d050      	beq.n	8004c4c <HAL_GPIO_DeInit+0x118>
 8004baa:	4548      	cmp	r0, r9
 8004bac:	d050      	beq.n	8004c50 <HAL_GPIO_DeInit+0x11c>
 8004bae:	4550      	cmp	r0, sl
 8004bb0:	d050      	beq.n	8004c54 <HAL_GPIO_DeInit+0x120>
 8004bb2:	4558      	cmp	r0, fp
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2309      	moveq	r3, #9
 8004bb8:	230a      	movne	r3, #10
 8004bba:	40bb      	lsls	r3, r7
 8004bbc:	4573      	cmp	r3, lr
 8004bbe:	d119      	bne.n	8004bf4 <HAL_GPIO_DeInit+0xc0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bc4:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
 8004bc8:	ea27 0706 	bic.w	r7, r7, r6
 8004bcc:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8004bd0:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
 8004bd4:	ea27 0706 	bic.w	r7, r7, r6
 8004bd8:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8004bdc:	685f      	ldr	r7, [r3, #4]
 8004bde:	ea27 0706 	bic.w	r7, r7, r6
 8004be2:	605f      	str	r7, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8004be4:	681f      	ldr	r7, [r3, #0]
 8004be6:	ea27 0606 	bic.w	r6, r7, r6
 8004bea:	601e      	str	r6, [r3, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004bec:	68a3      	ldr	r3, [r4, #8]
 8004bee:	ea23 0305 	bic.w	r3, r3, r5
 8004bf2:	60a3      	str	r3, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004bf4:	2503      	movs	r5, #3
 8004bf6:	0053      	lsls	r3, r2, #1
 8004bf8:	6804      	ldr	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004bfa:	f002 0707 	and.w	r7, r2, #7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004bfe:	fa05 f303 	lsl.w	r3, r5, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004c02:	260f      	movs	r6, #15
 8004c04:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004c06:	431c      	orrs	r4, r3
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004c08:	40be      	lsls	r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004c0a:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004c0c:	fa22 f405 	lsr.w	r4, r2, r5
 8004c10:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8004c14:	6a25      	ldr	r5, [r4, #32]
 8004c16:	ea25 0606 	bic.w	r6, r5, r6
 8004c1a:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c1c:	68c4      	ldr	r4, [r0, #12]
 8004c1e:	ea24 0403 	bic.w	r4, r4, r3
 8004c22:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c24:	6844      	ldr	r4, [r0, #4]
 8004c26:	ea24 040c 	bic.w	r4, r4, ip
 8004c2a:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c2c:	6884      	ldr	r4, [r0, #8]
 8004c2e:	ea24 0303 	bic.w	r3, r4, r3
 8004c32:	6083      	str	r3, [r0, #8]
    position++;
 8004c34:	3201      	adds	r2, #1
 8004c36:	e788      	b.n	8004b4a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e7be      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e7bc      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e7ba      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c44:	2303      	movs	r3, #3
 8004c46:	e7b8      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	e7b6      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c4c:	2305      	movs	r3, #5
 8004c4e:	e7b4      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c50:	2306      	movs	r3, #6
 8004c52:	e7b2      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c54:	2307      	movs	r3, #7
 8004c56:	e7b0      	b.n	8004bba <HAL_GPIO_DeInit+0x86>
 8004c58:	58020000 	.word	0x58020000
 8004c5c:	58021400 	.word	0x58021400
 8004c60:	58021800 	.word	0x58021800
 8004c64:	58021c00 	.word	0x58021c00
 8004c68:	58022400 	.word	0x58022400

08004c6c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c6c:	6903      	ldr	r3, [r0, #16]
 8004c6e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004c70:	bf14      	ite	ne
 8004c72:	2001      	movne	r0, #1
 8004c74:	2000      	moveq	r0, #0
 8004c76:	4770      	bx	lr

08004c78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c78:	b10a      	cbz	r2, 8004c7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c7a:	6181      	str	r1, [r0, #24]
  }
}
 8004c7c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c7e:	0409      	lsls	r1, r1, #16
 8004c80:	e7fb      	b.n	8004c7a <HAL_GPIO_WritePin+0x2>

08004c82 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c82:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c84:	ea01 0203 	and.w	r2, r1, r3
 8004c88:	ea21 0103 	bic.w	r1, r1, r3
 8004c8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004c90:	6181      	str	r1, [r0, #24]
}
 8004c92:	4770      	bx	lr

08004c94 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c98:	4605      	mov	r5, r0
 8004c9a:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004c9c:	f895 42f8 	ldrb.w	r4, [r5, #760]	; 0x2f8
{
 8004ca0:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8004ca4:	2c01      	cmp	r4, #1
{
 8004ca6:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 8004caa:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8004cae:	d025      	beq.n	8004cfc <HAL_HCD_HC_Init+0x68>
 8004cb0:	2401      	movs	r4, #1
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 8004cb2:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8004cb4:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004cb6:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  __HAL_LOCK(hhcd);
 8004cba:	f885 42f8 	strb.w	r4, [r5, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8004cbe:	242c      	movs	r4, #44	; 0x2c
 8004cc0:	fb04 5401 	mla	r4, r4, r1, r5
 8004cc4:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004cc8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8004ccc:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8004cd0:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004cd4:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 8004cd8:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8004cdc:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 8004ce0:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 8004ce4:	6828      	ldr	r0, [r5, #0]
 8004ce6:	f8cd e000 	str.w	lr, [sp]
 8004cea:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8004cee:	f004 fae2 	bl	80092b6 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004cf2:	f885 72f8 	strb.w	r7, [r5, #760]	; 0x2f8

  return status;
}
 8004cf6:	b005      	add	sp, #20
 8004cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 8004cfc:	2002      	movs	r0, #2
 8004cfe:	e7fa      	b.n	8004cf6 <HAL_HCD_HC_Init+0x62>

08004d00 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004d00:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8004d02:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 8004d06:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d009      	beq.n	8004d20 <HAL_HCD_HC_Halt+0x20>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d12:	6800      	ldr	r0, [r0, #0]
 8004d14:	f004 fb64 	bl	80093e0 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 8004d1e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8004d20:	2002      	movs	r0, #2
 8004d22:	e7fc      	b.n	8004d1e <HAL_HCD_HC_Halt+0x1e>

08004d24 <HAL_HCD_Init>:
{
 8004d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8004d28:	4606      	mov	r6, r0
{
 8004d2a:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	d043      	beq.n	8004db8 <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004d30:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 8004d34:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004d36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d3a:	b91b      	cbnz	r3, 8004d44 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8004d3c:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8004d40:	f7fd fb34 	bl	80023ac <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8004d44:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004d46:	466d      	mov	r5, sp
 8004d48:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004d4c:	4637      	mov	r7, r6
  hhcd->State = HAL_HCD_STATE_BUSY;
 8004d4e:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8004d54:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d56:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8004d5a:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8004d5e:	bf08      	it	eq
 8004d60:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 8004d62:	f004 f91d 	bl	8008fa0 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d76:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004d7a:	6830      	ldr	r0, [r6, #0]
 8004d7c:	f004 f8c0 	bl	8008f00 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004d80:	f857 0b10 	ldr.w	r0, [r7], #16
 8004d84:	2101      	movs	r1, #1
 8004d86:	f004 f911 	bl	8008fac <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004d8a:	46ec      	mov	ip, sp
 8004d8c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004d8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004d92:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004d94:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004d98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004da0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8004da4:	6830      	ldr	r0, [r6, #0]
 8004da6:	f004 f9b5 	bl	8009114 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8004daa:	2301      	movs	r3, #1
  return HAL_OK;
 8004dac:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8004dae:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
}
 8004db2:	b00a      	add	sp, #40	; 0x28
 8004db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004db8:	2001      	movs	r0, #1
 8004dba:	e7fa      	b.n	8004db2 <HAL_HCD_Init+0x8e>

08004dbc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004dbc:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 8004dbe:	262c      	movs	r6, #44	; 0x2c
{
 8004dc0:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8004dc4:	9d05      	ldr	r5, [sp, #20]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004dc6:	fb06 0601 	mla	r6, r6, r1, r0
{
 8004dca:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8004dce:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004dd2:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004dd6:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
 8004dda:	b97f      	cbnz	r7, 8004dfc <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ddc:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004dde:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 8004de0:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004de4:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
  switch (ep_type)
 8004de8:	d03c      	beq.n	8004e64 <HAL_HCD_HC_SubmitRequest+0xa8>
 8004dea:	42bb      	cmp	r3, r7
 8004dec:	d03a      	beq.n	8004e64 <HAL_HCD_HC_SubmitRequest+0xa8>
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d11f      	bne.n	8004e32 <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004df2:	232c      	movs	r3, #44	; 0x2c
 8004df4:	2200      	movs	r2, #0
 8004df6:	fb03 0301 	mla	r3, r3, r1, r0
 8004dfa:	e030      	b.n	8004e5e <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004dfc:	f04f 0c02 	mov.w	ip, #2
 8004e00:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d814      	bhi.n	8004e32 <HAL_HCD_HC_SubmitRequest+0x76>
 8004e08:	a601      	add	r6, pc, #4	; (adr r6, 8004e10 <HAL_HCD_HC_SubmitRequest+0x54>)
 8004e0a:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004df3 	.word	0x08004df3
 8004e18:	08004e65 	.word	0x08004e65
 8004e1c:	08004e65 	.word	0x08004e65
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004e20:	2f01      	cmp	r7, #1
 8004e22:	d106      	bne.n	8004e32 <HAL_HCD_HC_SubmitRequest+0x76>
 8004e24:	b92a      	cbnz	r2, 8004e32 <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
 8004e26:	232c      	movs	r3, #44	; 0x2c
          hhcd->hc[ch_num].toggle_out = 1U;
 8004e28:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
 8004e2c:	b99c      	cbnz	r4, 8004e56 <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
 8004e2e:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004e32:	222c      	movs	r2, #44	; 0x2c
 8004e34:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8004e38:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e3c:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_len  = length;
 8004e3e:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].xfer_count = 0U;
 8004e40:	2400      	movs	r4, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004e42:	645d      	str	r5, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e44:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004e46:	f8a3 4060 	strh.w	r4, [r3, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 8004e4a:	651c      	str	r4, [r3, #80]	; 0x50
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e4c:	7c02      	ldrb	r2, [r0, #16]
 8004e4e:	6800      	ldr	r0, [r0, #0]
}
 8004e50:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004e52:	f004 bb33 	b.w	80094bc <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e56:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 8004e5a:	2e00      	cmp	r6, #0
 8004e5c:	d1e9      	bne.n	8004e32 <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8004e62:	e7e6      	b.n	8004e32 <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
 8004e64:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e66:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8004e6a:	b92a      	cbnz	r2, 8004e78 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004e6c:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 8004e70:	2e00      	cmp	r6, #0
 8004e72:	d0f4      	beq.n	8004e5e <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004e74:	2202      	movs	r2, #2
 8004e76:	e7f2      	b.n	8004e5e <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004e78:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8004e7c:	2a00      	cmp	r2, #0
 8004e7e:	d1f9      	bne.n	8004e74 <HAL_HCD_HC_SubmitRequest+0xb8>
 8004e80:	e7ed      	b.n	8004e5e <HAL_HCD_HC_SubmitRequest+0xa2>
 8004e82:	bf00      	nop

08004e84 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e88:	6806      	ldr	r6, [r0, #0]
{
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f004 f93b 	bl	800910a <USB_GetMode>
 8004e94:	2801      	cmp	r0, #1
 8004e96:	f040 80f3 	bne.w	8005080 <HAL_HCD_IRQHandler+0x1fc>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004e9a:	6820      	ldr	r0, [r4, #0]
 8004e9c:	f004 f931 	bl	8009102 <USB_ReadInterrupts>
 8004ea0:	2800      	cmp	r0, #0
 8004ea2:	f000 80ed 	beq.w	8005080 <HAL_HCD_IRQHandler+0x1fc>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ea6:	6820      	ldr	r0, [r4, #0]
 8004ea8:	f004 f92b 	bl	8009102 <USB_ReadInterrupts>
 8004eac:	0283      	lsls	r3, r0, #10
 8004eae:	d503      	bpl.n	8004eb8 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004eb6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	f004 f922 	bl	8009102 <USB_ReadInterrupts>
 8004ebe:	02c7      	lsls	r7, r0, #11
 8004ec0:	d503      	bpl.n	8004eca <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ec2:	6823      	ldr	r3, [r4, #0]
 8004ec4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ec8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	f004 f919 	bl	8009102 <USB_ReadInterrupts>
 8004ed0:	0145      	lsls	r5, r0, #5
 8004ed2:	d503      	bpl.n	8004edc <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004eda:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	f004 f910 	bl	8009102 <USB_ReadInterrupts>
 8004ee2:	0780      	lsls	r0, r0, #30
 8004ee4:	d502      	bpl.n	8004eec <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	f004 f908 	bl	8009102 <USB_ReadInterrupts>
 8004ef2:	0081      	lsls	r1, r0, #2
 8004ef4:	d515      	bpl.n	8004f22 <HAL_HCD_IRQHandler+0x9e>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004efc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004efe:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8004f02:	07da      	lsls	r2, r3, #31
 8004f04:	d40d      	bmi.n	8004f22 <HAL_HCD_IRQHandler+0x9e>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004f06:	2110      	movs	r1, #16
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f004 f87d 	bl	8009008 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004f0e:	4630      	mov	r0, r6
 8004f10:	f004 f8a0 	bl	8009054 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f14:	2101      	movs	r1, #1
 8004f16:	6820      	ldr	r0, [r4, #0]
 8004f18:	f004 f962 	bl	80091e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f7fd fa9f 	bl	8002460 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004f22:	6820      	ldr	r0, [r4, #0]
 8004f24:	f004 f8ed 	bl	8009102 <USB_ReadInterrupts>
 8004f28:	01c3      	lsls	r3, r0, #7
 8004f2a:	d53d      	bpl.n	8004fa8 <HAL_HCD_IRQHandler+0x124>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2c:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f2e:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8004f32:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8004f34:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8004f38:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f3a:	9b03      	ldr	r3, [sp, #12]
 8004f3c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f40:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f42:	9b02      	ldr	r3, [sp, #8]
 8004f44:	079f      	lsls	r7, r3, #30
 8004f46:	d509      	bpl.n	8004f5c <HAL_HCD_IRQHandler+0xd8>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f48:	9b02      	ldr	r3, [sp, #8]
 8004f4a:	07d8      	lsls	r0, r3, #31
 8004f4c:	d502      	bpl.n	8004f54 <HAL_HCD_IRQHandler+0xd0>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7fd fa82 	bl	8002458 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f54:	9b03      	ldr	r3, [sp, #12]
 8004f56:	f043 0302 	orr.w	r3, r3, #2
 8004f5a:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004f5c:	9b02      	ldr	r3, [sp, #8]
 8004f5e:	0719      	lsls	r1, r3, #28
 8004f60:	d518      	bpl.n	8004f94 <HAL_HCD_IRQHandler+0x110>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004f6a:	9b02      	ldr	r3, [sp, #8]
 8004f6c:	075a      	lsls	r2, r3, #29
 8004f6e:	f140 8092 	bpl.w	8005096 <HAL_HCD_IRQHandler+0x212>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004f72:	69a1      	ldr	r1, [r4, #24]
 8004f74:	2902      	cmp	r1, #2
 8004f76:	f040 8086 	bne.w	8005086 <HAL_HCD_IRQHandler+0x202>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f7a:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004f7c:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004f7e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004f82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004f86:	bf18      	it	ne
 8004f88:	2101      	movne	r1, #1
 8004f8a:	f004 f929 	bl	80091e0 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f7fd fa6e 	bl	8002470 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004f94:	9b02      	ldr	r3, [sp, #8]
 8004f96:	069b      	lsls	r3, r3, #26
 8004f98:	d503      	bpl.n	8004fa2 <HAL_HCD_IRQHandler+0x11e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	f004 f8aa 	bl	8009102 <USB_ReadInterrupts>
 8004fae:	0707      	lsls	r7, r0, #28
 8004fb0:	d505      	bpl.n	8004fbe <HAL_HCD_IRQHandler+0x13a>
      HAL_HCD_SOF_Callback(hhcd);
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7fd fa4c 	bl	8002450 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	2208      	movs	r2, #8
 8004fbc:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004fbe:	6820      	ldr	r0, [r4, #0]
 8004fc0:	f004 f89f 	bl	8009102 <USB_ReadInterrupts>
 8004fc4:	06c5      	lsls	r5, r0, #27
 8004fc6:	d544      	bpl.n	8005052 <HAL_HCD_IRQHandler+0x1ce>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fc8:	6827      	ldr	r7, [r4, #0]
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f023 0310 	bic.w	r3, r3, #16
 8004fd0:	61bb      	str	r3, [r7, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004fd4:	f3c3 4243 	ubfx	r2, r3, #17, #4
  switch (pktsts)
 8004fd8:	2a02      	cmp	r2, #2
 8004fda:	d135      	bne.n	8005048 <HAL_HCD_IRQHandler+0x1c4>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004fdc:	f3c3 190a 	ubfx	r9, r3, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004fe0:	f1b9 0f00 	cmp.w	r9, #0
 8004fe4:	d030      	beq.n	8005048 <HAL_HCD_IRQHandler+0x1c4>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004fe6:	f003 080f 	and.w	r8, r3, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004fea:	252c      	movs	r5, #44	; 0x2c
 8004fec:	fb05 4508 	mla	r5, r5, r8, r4
 8004ff0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8004ff2:	b349      	cbz	r1, 8005048 <HAL_HCD_IRQHandler+0x1c4>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004ff4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8004ff6:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8004ff8:	444b      	add	r3, r9
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d84f      	bhi.n	800509e <HAL_HCD_IRQHandler+0x21a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004ffe:	464a      	mov	r2, r9
 8005000:	4638      	mov	r0, r7
 8005002:	f004 f85e 	bl	80090c2 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005006:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005008:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800500c:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005010:	444b      	add	r3, r9
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005012:	ea4f 1248 	mov.w	r2, r8, lsl #5
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005016:	4589      	cmp	r9, r1
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005018:	eb07 1848 	add.w	r8, r7, r8, lsl #5
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800501c:	646b      	str	r3, [r5, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800501e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8005020:	444b      	add	r3, r9
 8005022:	652b      	str	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005024:	f8d8 3010 	ldr.w	r3, [r8, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005028:	d10e      	bne.n	8005048 <HAL_HCD_IRQHandler+0x1c4>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800502a:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800502e:	b15b      	cbz	r3, 8005048 <HAL_HCD_IRQHandler+0x1c4>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005030:	59d3      	ldr	r3, [r2, r7]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005036:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800503a:	51d3      	str	r3, [r2, r7]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800503c:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8005040:	f083 0301 	eor.w	r3, r3, #1
 8005044:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005048:	6822      	ldr	r2, [r4, #0]
 800504a:	6993      	ldr	r3, [r2, #24]
 800504c:	f043 0310 	orr.w	r3, r3, #16
 8005050:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8005052:	6820      	ldr	r0, [r4, #0]
 8005054:	f004 f855 	bl	8009102 <USB_ReadInterrupts>
 8005058:	0180      	lsls	r0, r0, #6
 800505a:	d511      	bpl.n	8005080 <HAL_HCD_IRQHandler+0x1fc>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800505c:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800505e:	f04f 0900 	mov.w	r9, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005062:	f004 f9b8 	bl	80093d6 <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005066:	252c      	movs	r5, #44	; 0x2c
 8005068:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800506c:	2702      	movs	r7, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800506e:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	68a3      	ldr	r3, [r4, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005074:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005076:	454b      	cmp	r3, r9
 8005078:	d815      	bhi.n	80050a6 <HAL_HCD_IRQHandler+0x222>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800507a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800507e:	6143      	str	r3, [r0, #20]
}
 8005080:	b005      	add	sp, #20
 8005082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005086:	68e3      	ldr	r3, [r4, #12]
 8005088:	2b01      	cmp	r3, #1
 800508a:	d180      	bne.n	8004f8e <HAL_HCD_IRQHandler+0x10a>
          USBx_HOST->HFIR = 60000U;
 800508c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005090:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8005094:	e77b      	b.n	8004f8e <HAL_HCD_IRQHandler+0x10a>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005096:	4620      	mov	r0, r4
 8005098:	f7fd f9ee 	bl	8002478 <HAL_HCD_PortDisabled_Callback>
 800509c:	e77a      	b.n	8004f94 <HAL_HCD_IRQHandler+0x110>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800509e:	2304      	movs	r3, #4
 80050a0:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 80050a4:	e7d0      	b.n	8005048 <HAL_HCD_IRQHandler+0x1c4>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80050a6:	f009 030f 	and.w	r3, r9, #15
 80050aa:	9a01      	ldr	r2, [sp, #4]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	07d9      	lsls	r1, r3, #31
 80050b2:	f140 8085 	bpl.w	80051c0 <HAL_HCD_IRQHandler+0x33c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050b6:	9b00      	ldr	r3, [sp, #0]
 80050b8:	fa5f fb89 	uxtb.w	fp, r9
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050bc:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050c0:	681a      	ldr	r2, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050c2:	ea4f 184b 	mov.w	r8, fp, lsl #5
 80050c6:	eb0a 164b 	add.w	r6, sl, fp, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050ca:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050ce:	68b2      	ldr	r2, [r6, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80050d0:	f000 80e2 	beq.w	8005298 <HAL_HCD_IRQHandler+0x414>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050d4:	0752      	lsls	r2, r2, #29
 80050d6:	d506      	bpl.n	80050e6 <HAL_HCD_IRQHandler+0x262>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050d8:	2204      	movs	r2, #4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80050da:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050dc:	f04f 0c06 	mov.w	ip, #6
 80050e0:	fb05 420b 	mla	r2, r5, fp, r4
 80050e4:	e009      	b.n	80050fa <HAL_HCD_IRQHandler+0x276>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80050e6:	68b2      	ldr	r2, [r6, #8]
 80050e8:	05d3      	lsls	r3, r2, #23
 80050ea:	d50c      	bpl.n	8005106 <HAL_HCD_IRQHandler+0x282>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80050ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 80050f0:	f04f 0c07 	mov.w	ip, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80050f4:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80050f6:	fb05 420b 	mla	r2, r5, fp, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050fa:	4659      	mov	r1, fp
    hhcd->hc[ch_num].state = HC_XACTERR;
 80050fc:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005100:	f004 f96e 	bl	80093e0 <USB_HC_Halt>
 8005104:	e004      	b.n	8005110 <HAL_HCD_IRQHandler+0x28c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005106:	68b2      	ldr	r2, [r6, #8]
 8005108:	0691      	lsls	r1, r2, #26
 800510a:	d50c      	bpl.n	8005126 <HAL_HCD_IRQHandler+0x2a2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800510c:	2220      	movs	r2, #32
 800510e:	60b2      	str	r2, [r6, #8]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005110:	68b2      	ldr	r2, [r6, #8]
 8005112:	0592      	lsls	r2, r2, #22
 8005114:	d521      	bpl.n	800515a <HAL_HCD_IRQHandler+0x2d6>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005116:	4659      	mov	r1, fp
 8005118:	6820      	ldr	r0, [r4, #0]
 800511a:	f004 f961 	bl	80093e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800511e:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005122:	60b2      	str	r2, [r6, #8]
 8005124:	e04c      	b.n	80051c0 <HAL_HCD_IRQHandler+0x33c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005126:	68b2      	ldr	r2, [r6, #8]
 8005128:	0712      	lsls	r2, r2, #28
 800512a:	d506      	bpl.n	800513a <HAL_HCD_IRQHandler+0x2b6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800512c:	2208      	movs	r2, #8
    hhcd->hc[ch_num].state = HC_STALL;
 800512e:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005132:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005134:	fb05 420b 	mla	r2, r5, fp, r4
 8005138:	e7df      	b.n	80050fa <HAL_HCD_IRQHandler+0x276>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800513a:	68b2      	ldr	r2, [r6, #8]
 800513c:	0553      	lsls	r3, r2, #21
 800513e:	d507      	bpl.n	8005150 <HAL_HCD_IRQHandler+0x2cc>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005140:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005144:	f04f 0c08 	mov.w	ip, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005148:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800514a:	fb05 420b 	mla	r2, r5, fp, r4
 800514e:	e7d4      	b.n	80050fa <HAL_HCD_IRQHandler+0x276>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005150:	68b2      	ldr	r2, [r6, #8]
 8005152:	0611      	lsls	r1, r2, #24
 8005154:	d5dc      	bpl.n	8005110 <HAL_HCD_IRQHandler+0x28c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005156:	2280      	movs	r2, #128	; 0x80
 8005158:	e7bf      	b.n	80050da <HAL_HCD_IRQHandler+0x256>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800515a:	68b2      	ldr	r2, [r6, #8]
 800515c:	07d3      	lsls	r3, r2, #31
 800515e:	d544      	bpl.n	80051ea <HAL_HCD_IRQHandler+0x366>
    if (hhcd->Init.dma_enable != 0U)
 8005160:	6922      	ldr	r2, [r4, #16]
 8005162:	b142      	cbz	r2, 8005176 <HAL_HCD_IRQHandler+0x2f2>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005164:	6932      	ldr	r2, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005166:	fb05 400b 	mla	r0, r5, fp, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800516a:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800516e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005170:	eba2 020c 	sub.w	r2, r2, ip
 8005174:	6502      	str	r2, [r0, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8005176:	fb05 400b 	mla	r0, r5, fp, r4
 800517a:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800517c:	2300      	movs	r3, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 800517e:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005182:	65c3      	str	r3, [r0, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005184:	60b2      	str	r2, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005186:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800518a:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 800518e:	d11d      	bne.n	80051cc <HAL_HCD_IRQHandler+0x348>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005190:	4659      	mov	r1, fp
 8005192:	6820      	ldr	r0, [r4, #0]
 8005194:	f004 f924 	bl	80093e0 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005198:	2210      	movs	r2, #16
 800519a:	60b2      	str	r2, [r6, #8]
    if (hhcd->Init.dma_enable == 1U)
 800519c:	6923      	ldr	r3, [r4, #16]
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800519e:	fb05 410b 	mla	r1, r5, fp, r4
    if (hhcd->Init.dma_enable == 1U)
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d106      	bne.n	80051b4 <HAL_HCD_IRQHandler+0x330>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80051a6:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 80051aa:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 80051ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80051b0:	07d8      	lsls	r0, r3, #31
 80051b2:	d505      	bpl.n	80051c0 <HAL_HCD_IRQHandler+0x33c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80051b4:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 80051b8:	f083 0301 	eor.w	r3, r3, #1
 80051bc:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80051c0:	9b00      	ldr	r3, [sp, #0]
 80051c2:	f109 0901 	add.w	r9, r9, #1
 80051c6:	3320      	adds	r3, #32
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	e752      	b.n	8005072 <HAL_HCD_IRQHandler+0x1ee>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80051cc:	2a01      	cmp	r2, #1
 80051ce:	d1e5      	bne.n	800519c <HAL_HCD_IRQHandler+0x318>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80051d0:	f858 300a 	ldr.w	r3, [r8, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051d4:	4659      	mov	r1, fp
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80051d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051da:	f848 300a 	str.w	r3, [r8, sl]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80051de:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80051e2:	4620      	mov	r0, r4
 80051e4:	f7fd f940 	bl	8002468 <HAL_HCD_HC_NotifyURBChange_Callback>
 80051e8:	e7d8      	b.n	800519c <HAL_HCD_IRQHandler+0x318>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80051ea:	68b3      	ldr	r3, [r6, #8]
 80051ec:	f013 0302 	ands.w	r3, r3, #2
 80051f0:	d035      	beq.n	800525e <HAL_HCD_IRQHandler+0x3da>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80051f2:	fb05 400b 	mla	r0, r5, fp, r4
 80051f6:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
 80051fa:	2a01      	cmp	r2, #1
 80051fc:	d10b      	bne.n	8005216 <HAL_HCD_IRQHandler+0x392>
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051fe:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005202:	fb05 430b 	mla	r3, r5, fp, r4
 8005206:	4659      	mov	r1, fp
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005208:	60b7      	str	r7, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800520a:	4620      	mov	r0, r4
 800520c:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8005210:	f7fd f92a 	bl	8002468 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005214:	e7d4      	b.n	80051c0 <HAL_HCD_IRQHandler+0x33c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005216:	2a05      	cmp	r2, #5
 8005218:	d0f1      	beq.n	80051fe <HAL_HCD_IRQHandler+0x37a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800521a:	2a06      	cmp	r2, #6
 800521c:	d001      	beq.n	8005222 <HAL_HCD_IRQHandler+0x39e>
 800521e:	2a08      	cmp	r2, #8
 8005220:	d109      	bne.n	8005236 <HAL_HCD_IRQHandler+0x3b2>
      hhcd->hc[ch_num].ErrCnt++;
 8005222:	fb05 400b 	mla	r0, r5, fp, r4
 8005226:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005228:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800522a:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 800522c:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800522e:	d904      	bls.n	800523a <HAL_HCD_IRQHandler+0x3b6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	65c3      	str	r3, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005234:	e011      	b.n	800525a <HAL_HCD_IRQHandler+0x3d6>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005236:	2a03      	cmp	r2, #3
 8005238:	d10a      	bne.n	8005250 <HAL_HCD_IRQHandler+0x3cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800523a:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800523e:	f858 200a 	ldr.w	r2, [r8, sl]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005242:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005246:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800524a:	f848 200a 	str.w	r2, [r8, sl]
 800524e:	e7d8      	b.n	8005202 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005250:	2a07      	cmp	r2, #7
 8005252:	d1d6      	bne.n	8005202 <HAL_HCD_IRQHandler+0x37e>
      hhcd->hc[ch_num].ErrCnt++;
 8005254:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005256:	3201      	adds	r2, #1
 8005258:	65c2      	str	r2, [r0, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800525a:	2204      	movs	r2, #4
 800525c:	e7cf      	b.n	80051fe <HAL_HCD_IRQHandler+0x37a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800525e:	68b2      	ldr	r2, [r6, #8]
 8005260:	06d2      	lsls	r2, r2, #27
 8005262:	d5ad      	bpl.n	80051c0 <HAL_HCD_IRQHandler+0x33c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005264:	fb05 4e0b 	mla	lr, r5, fp, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005268:	6820      	ldr	r0, [r4, #0]
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800526a:	f89e 203f 	ldrb.w	r2, [lr, #63]	; 0x3f
 800526e:	2a03      	cmp	r2, #3
 8005270:	d106      	bne.n	8005280 <HAL_HCD_IRQHandler+0x3fc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005272:	f8ce 305c 	str.w	r3, [lr, #92]	; 0x5c
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005276:	4659      	mov	r1, fp
 8005278:	f004 f8b2 	bl	80093e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800527c:	2210      	movs	r2, #16
 800527e:	e750      	b.n	8005122 <HAL_HCD_IRQHandler+0x29e>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005280:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8005284:	d1fa      	bne.n	800527c <HAL_HCD_IRQHandler+0x3f8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005286:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 800528a:	6922      	ldr	r2, [r4, #16]
 800528c:	2a00      	cmp	r2, #0
 800528e:	d1f5      	bne.n	800527c <HAL_HCD_IRQHandler+0x3f8>
        hhcd->hc[ch_num].state = HC_NAK;
 8005290:	2203      	movs	r2, #3
 8005292:	f88e 2061 	strb.w	r2, [lr, #97]	; 0x61
 8005296:	e7ee      	b.n	8005276 <HAL_HCD_IRQHandler+0x3f2>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005298:	f012 0204 	ands.w	r2, r2, #4
 800529c:	d007      	beq.n	80052ae <HAL_HCD_IRQHandler+0x42a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800529e:	2204      	movs	r2, #4
    hhcd->hc[ch_num].state = HC_XACTERR;
 80052a0:	fb05 430b 	mla	r3, r5, fp, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80052a4:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80052a6:	2206      	movs	r2, #6
    hhcd->hc[ch_num].state = HC_STALL;
 80052a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80052ac:	e010      	b.n	80052d0 <HAL_HCD_IRQHandler+0x44c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80052ae:	68b3      	ldr	r3, [r6, #8]
 80052b0:	069b      	lsls	r3, r3, #26
 80052b2:	d511      	bpl.n	80052d8 <HAL_HCD_IRQHandler+0x454>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80052b4:	2320      	movs	r3, #32
 80052b6:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80052b8:	fb05 430b 	mla	r3, r5, fp, r4
 80052bc:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
 80052c0:	f1bc 0f01 	cmp.w	ip, #1
 80052c4:	f47f af7c 	bne.w	80051c0 <HAL_HCD_IRQHandler+0x33c>
      hhcd->hc[ch_num].do_ping = 0U;
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80052cc:	f883 7060 	strb.w	r7, [r3, #96]	; 0x60
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d0:	4659      	mov	r1, fp
 80052d2:	f004 f885 	bl	80093e0 <USB_HC_Halt>
 80052d6:	e773      	b.n	80051c0 <HAL_HCD_IRQHandler+0x33c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80052d8:	68b3      	ldr	r3, [r6, #8]
 80052da:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 80052de:	d003      	beq.n	80052e8 <HAL_HCD_IRQHandler+0x464>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80052e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e4:	60b2      	str	r2, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e6:	e7f3      	b.n	80052d0 <HAL_HCD_IRQHandler+0x44c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052e8:	68b2      	ldr	r2, [r6, #8]
 80052ea:	f012 0201 	ands.w	r2, r2, #1
 80052ee:	d010      	beq.n	8005312 <HAL_HCD_IRQHandler+0x48e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80052f0:	fb05 420b 	mla	r2, r5, fp, r4
 80052f4:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80052f6:	68b3      	ldr	r3, [r6, #8]
 80052f8:	0659      	lsls	r1, r3, #25
 80052fa:	d505      	bpl.n	8005308 <HAL_HCD_IRQHandler+0x484>
      hhcd->hc[ch_num].do_ping = 1U;
 80052fc:	f04f 0c01 	mov.w	ip, #1
 8005300:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005304:	2240      	movs	r2, #64	; 0x40
 8005306:	60b2      	str	r2, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005308:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 800530a:	fb05 430b 	mla	r3, r5, fp, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800530e:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005310:	e7ca      	b.n	80052a8 <HAL_HCD_IRQHandler+0x424>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005312:	68b3      	ldr	r3, [r6, #8]
 8005314:	065b      	lsls	r3, r3, #25
 8005316:	d510      	bpl.n	800533a <HAL_HCD_IRQHandler+0x4b6>
    hhcd->hc[ch_num].state = HC_NYET;
 8005318:	fb05 4c0b 	mla	ip, r5, fp, r4
 800531c:	f04f 0e04 	mov.w	lr, #4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005320:	4659      	mov	r1, fp
    hhcd->hc[ch_num].state = HC_NYET;
 8005322:	f88c e061 	strb.w	lr, [ip, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8005326:	f04f 0e01 	mov.w	lr, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800532a:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    hhcd->hc[ch_num].do_ping = 1U;
 800532e:	f88c e03d 	strb.w	lr, [ip, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005332:	f004 f855 	bl	80093e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005336:	2240      	movs	r2, #64	; 0x40
 8005338:	e6f3      	b.n	8005122 <HAL_HCD_IRQHandler+0x29e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800533a:	68b2      	ldr	r2, [r6, #8]
 800533c:	0711      	lsls	r1, r2, #28
 800533e:	d505      	bpl.n	800534c <HAL_HCD_IRQHandler+0x4c8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005340:	2208      	movs	r2, #8
    hhcd->hc[ch_num].state = HC_STALL;
 8005342:	fb05 430b 	mla	r3, r5, fp, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005346:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8005348:	2205      	movs	r2, #5
 800534a:	e7ad      	b.n	80052a8 <HAL_HCD_IRQHandler+0x424>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800534c:	68b2      	ldr	r2, [r6, #8]
 800534e:	06d2      	lsls	r2, r2, #27
 8005350:	d514      	bpl.n	800537c <HAL_HCD_IRQHandler+0x4f8>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005352:	fb05 420b 	mla	r2, r5, fp, r4
 8005356:	2300      	movs	r3, #0
    hhcd->hc[ch_num].state = HC_NAK;
 8005358:	f04f 0c03 	mov.w	ip, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 800535c:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (hhcd->hc[ch_num].do_ping == 0U)
 800535e:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8005362:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005366:	2b00      	cmp	r3, #0
 8005368:	d185      	bne.n	8005276 <HAL_HCD_IRQHandler+0x3f2>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800536a:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 800536e:	2b00      	cmp	r3, #0
 8005370:	d181      	bne.n	8005276 <HAL_HCD_IRQHandler+0x3f2>
        hhcd->hc[ch_num].do_ping = 1U;
 8005372:	f04f 0c01 	mov.w	ip, #1
 8005376:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800537a:	e77c      	b.n	8005276 <HAL_HCD_IRQHandler+0x3f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800537c:	68b2      	ldr	r2, [r6, #8]
 800537e:	0613      	lsls	r3, r2, #24
 8005380:	d520      	bpl.n	80053c4 <HAL_HCD_IRQHandler+0x540>
    if (hhcd->Init.dma_enable == 0U)
 8005382:	6922      	ldr	r2, [r4, #16]
 8005384:	b952      	cbnz	r2, 800539c <HAL_HCD_IRQHandler+0x518>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005386:	fb05 420b 	mla	r2, r5, fp, r4
 800538a:	f04f 0c06 	mov.w	ip, #6
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800538e:	4659      	mov	r1, fp
      hhcd->hc[ch_num].state = HC_XACTERR;
 8005390:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005394:	f004 f824 	bl	80093e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	e6c2      	b.n	8005122 <HAL_HCD_IRQHandler+0x29e>
      hhcd->hc[ch_num].ErrCnt++;
 800539c:	fb05 400b 	mla	r0, r5, fp, r4
 80053a0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80053a2:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053a4:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 80053a6:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80053a8:	d909      	bls.n	80053be <HAL_HCD_IRQHandler+0x53a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053aa:	2300      	movs	r3, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053ac:	2204      	movs	r2, #4
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053ae:	4659      	mov	r1, fp
        hhcd->hc[ch_num].ErrCnt = 0U;
 80053b0:	65c3      	str	r3, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053b2:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80053b6:	4620      	mov	r0, r4
 80053b8:	f7fd f856 	bl	8002468 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053bc:	e7ec      	b.n	8005398 <HAL_HCD_IRQHandler+0x514>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80053be:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
 80053c2:	e7e9      	b.n	8005398 <HAL_HCD_IRQHandler+0x514>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80053c4:	68b2      	ldr	r2, [r6, #8]
 80053c6:	0551      	lsls	r1, r2, #21
 80053c8:	d50b      	bpl.n	80053e2 <HAL_HCD_IRQHandler+0x55e>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80053ca:	fb05 420b 	mla	r2, r5, fp, r4
 80053ce:	f04f 0c08 	mov.w	ip, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053d2:	4659      	mov	r1, fp
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80053d4:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053d8:	f004 f802 	bl	80093e0 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80053dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053e0:	e69f      	b.n	8005122 <HAL_HCD_IRQHandler+0x29e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80053e2:	68b2      	ldr	r2, [r6, #8]
 80053e4:	0792      	lsls	r2, r2, #30
 80053e6:	f57f aeeb 	bpl.w	80051c0 <HAL_HCD_IRQHandler+0x33c>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80053ea:	fb05 420b 	mla	r2, r5, fp, r4
 80053ee:	f892 0061 	ldrb.w	r0, [r2, #97]	; 0x61
 80053f2:	2801      	cmp	r0, #1
 80053f4:	d121      	bne.n	800543a <HAL_HCD_IRQHandler+0x5b6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80053f6:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80053fa:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 80053fe:	3802      	subs	r0, #2
 8005400:	2801      	cmp	r0, #1
 8005402:	f63f aefe 	bhi.w	8005202 <HAL_HCD_IRQHandler+0x37e>
        if (hhcd->Init.dma_enable == 0U)
 8005406:	6920      	ldr	r0, [r4, #16]
 8005408:	b930      	cbnz	r0, 8005418 <HAL_HCD_IRQHandler+0x594>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800540a:	f892 0055 	ldrb.w	r0, [r2, #85]	; 0x55
 800540e:	f080 0001 	eor.w	r0, r0, #1
 8005412:	f882 0055 	strb.w	r0, [r2, #85]	; 0x55
 8005416:	e6f4      	b.n	8005202 <HAL_HCD_IRQHandler+0x37e>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005418:	2801      	cmp	r0, #1
 800541a:	f47f aef2 	bne.w	8005202 <HAL_HCD_IRQHandler+0x37e>
 800541e:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8005420:	2800      	cmp	r0, #0
 8005422:	f43f aeee 	beq.w	8005202 <HAL_HCD_IRQHandler+0x37e>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005426:	f8b2 c040 	ldrh.w	ip, [r2, #64]	; 0x40
 800542a:	3801      	subs	r0, #1
 800542c:	4460      	add	r0, ip
 800542e:	fbb0 f0fc 	udiv	r0, r0, ip
          if ((num_packets & 1U) != 0U)
 8005432:	07c3      	lsls	r3, r0, #31
 8005434:	f57f aee5 	bpl.w	8005202 <HAL_HCD_IRQHandler+0x37e>
 8005438:	e7e7      	b.n	800540a <HAL_HCD_IRQHandler+0x586>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800543a:	2803      	cmp	r0, #3
 800543c:	d102      	bne.n	8005444 <HAL_HCD_IRQHandler+0x5c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800543e:	f882 7060 	strb.w	r7, [r2, #96]	; 0x60
 8005442:	e6de      	b.n	8005202 <HAL_HCD_IRQHandler+0x37e>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005444:	2804      	cmp	r0, #4
 8005446:	d0fa      	beq.n	800543e <HAL_HCD_IRQHandler+0x5ba>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005448:	2805      	cmp	r0, #5
 800544a:	d102      	bne.n	8005452 <HAL_HCD_IRQHandler+0x5ce>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800544c:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
 8005450:	e6d7      	b.n	8005202 <HAL_HCD_IRQHandler+0x37e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005452:	2806      	cmp	r0, #6
 8005454:	f43f aee5 	beq.w	8005222 <HAL_HCD_IRQHandler+0x39e>
 8005458:	2808      	cmp	r0, #8
 800545a:	f47f aed2 	bne.w	8005202 <HAL_HCD_IRQHandler+0x37e>
 800545e:	e6e0      	b.n	8005222 <HAL_HCD_IRQHandler+0x39e>

08005460 <HAL_HCD_Start>:
{
 8005460:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8005462:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 8005466:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8005468:	2b01      	cmp	r3, #1
 800546a:	d00c      	beq.n	8005486 <HAL_HCD_Start+0x26>
 800546c:	2101      	movs	r1, #1
 800546e:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8005472:	6800      	ldr	r0, [r0, #0]
 8005474:	f003 feef 	bl	8009256 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	f003 fd8b 	bl	8008f94 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800547e:	2000      	movs	r0, #0
 8005480:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8005484:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8005486:	2002      	movs	r0, #2
 8005488:	e7fc      	b.n	8005484 <HAL_HCD_Start+0x24>

0800548a <HAL_HCD_Stop>:
{
 800548a:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 800548c:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
{
 8005490:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8005492:	2b01      	cmp	r3, #1
 8005494:	d009      	beq.n	80054aa <HAL_HCD_Stop+0x20>
 8005496:	2301      	movs	r3, #1
 8005498:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800549c:	6800      	ldr	r0, [r0, #0]
 800549e:	f004 f8b4 	bl	800960a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80054a2:	2000      	movs	r0, #0
 80054a4:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 80054a8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80054aa:	2002      	movs	r0, #2
 80054ac:	e7fc      	b.n	80054a8 <HAL_HCD_Stop+0x1e>

080054ae <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80054ae:	6800      	ldr	r0, [r0, #0]
 80054b0:	f003 beb3 	b.w	800921a <USB_ResetPort>

080054b4 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80054b4:	232c      	movs	r3, #44	; 0x2c
 80054b6:	fb03 0101 	mla	r1, r3, r1, r0
}
 80054ba:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 80054be:	4770      	bx	lr

080054c0 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80054c0:	232c      	movs	r3, #44	; 0x2c
 80054c2:	fb03 0101 	mla	r1, r3, r1, r0
}
 80054c6:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80054c8:	4770      	bx	lr

080054ca <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80054ca:	6800      	ldr	r0, [r0, #0]
 80054cc:	f003 beee 	b.w	80092ac <USB_GetCurrentFrame>

080054d0 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80054d0:	6800      	ldr	r0, [r0, #0]
 80054d2:	f003 bee0 	b.w	8009296 <USB_GetHostSpeed>

080054d6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80054d6:	6803      	ldr	r3, [r0, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	0791      	lsls	r1, r2, #30
 80054dc:	d501      	bpl.n	80054e2 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80054de:	2200      	movs	r2, #0
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	07d2      	lsls	r2, r2, #31
 80054e6:	d403      	bmi.n	80054f0 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054e8:	699a      	ldr	r2, [r3, #24]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	619a      	str	r2, [r3, #24]
  }
}
 80054f0:	4770      	bx	lr
	...

080054f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054f4:	b530      	push	{r4, r5, lr}
 80054f6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054fc:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054fe:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8005500:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005502:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005506:	4a05      	ldr	r2, [pc, #20]	; (800551c <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005508:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 800550a:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800550e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8005512:	ea20 0002 	bic.w	r0, r0, r2
 8005516:	4303      	orrs	r3, r0
 8005518:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800551a:	bd30      	pop	{r4, r5, pc}
 800551c:	03ff63ff 	.word	0x03ff63ff

08005520 <I2C_IsErrorOccurred>:
{
 8005520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8005524:	6803      	ldr	r3, [r0, #0]
{
 8005526:	4605      	mov	r5, r0
 8005528:	4688      	mov	r8, r1
 800552a:	4617      	mov	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800552c:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800552e:	f014 0410 	ands.w	r4, r4, #16
 8005532:	d079      	beq.n	8005628 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005534:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005536:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8005538:	f04f 0920 	mov.w	r9, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	699a      	ldr	r2, [r3, #24]
 8005542:	0694      	lsls	r4, r2, #26
 8005544:	d436      	bmi.n	80055b4 <I2C_IsErrorOccurred+0x94>
 8005546:	b10e      	cbz	r6, 800554c <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8005548:	2404      	movs	r4, #4
 800554a:	e039      	b.n	80055c0 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 800554c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005550:	d0f6      	beq.n	8005540 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005552:	f7ff f82d 	bl	80045b0 <HAL_GetTick>
 8005556:	1bc0      	subs	r0, r0, r7
 8005558:	4540      	cmp	r0, r8
 800555a:	d802      	bhi.n	8005562 <I2C_IsErrorOccurred+0x42>
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	d1ed      	bne.n	800553e <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005562:	682b      	ldr	r3, [r5, #0]
 8005564:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8005566:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800556a:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800556c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800556e:	0400      	lsls	r0, r0, #16
 8005570:	d50a      	bpl.n	8005588 <I2C_IsErrorOccurred+0x68>
 8005572:	0449      	lsls	r1, r1, #17
 8005574:	d408      	bmi.n	8005588 <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8005576:	2a20      	cmp	r2, #32
 8005578:	d006      	beq.n	8005588 <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005580:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005582:	f7ff f815 	bl	80045b0 <HAL_GetTick>
 8005586:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	699c      	ldr	r4, [r3, #24]
 800558c:	f014 0420 	ands.w	r4, r4, #32
 8005590:	d1d5      	bne.n	800553e <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005592:	f7ff f80d 	bl	80045b0 <HAL_GetTick>
 8005596:	1bc0      	subs	r0, r0, r7
 8005598:	2819      	cmp	r0, #25
 800559a:	d9f5      	bls.n	8005588 <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800559c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 800559e:	2601      	movs	r6, #1
              __HAL_UNLOCK(hi2c);
 80055a0:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a4:	f043 0320 	orr.w	r3, r3, #32
 80055a8:	646b      	str	r3, [r5, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ae:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 80055b2:	e7e9      	b.n	8005588 <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 80055b4:	2e00      	cmp	r6, #0
 80055b6:	d1c7      	bne.n	8005548 <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b8:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 80055ba:	2404      	movs	r4, #4
    status = HAL_ERROR;
 80055bc:	2601      	movs	r6, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055be:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 80055c0:	682b      	ldr	r3, [r5, #0]
 80055c2:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80055c4:	05d0      	lsls	r0, r2, #23
 80055c6:	d505      	bpl.n	80055d4 <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055c8:	f44f 7180 	mov.w	r1, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 80055cc:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 80055d0:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80055d2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80055d4:	0551      	lsls	r1, r2, #21
 80055d6:	d505      	bpl.n	80055e4 <I2C_IsErrorOccurred+0xc4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 80055dc:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 80055e0:	2601      	movs	r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80055e2:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055e4:	0592      	lsls	r2, r2, #22
 80055e6:	d521      	bpl.n	800562c <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80055ec:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055f0:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80055f2:	4628      	mov	r0, r5
    __HAL_UNLOCK(hi2c);
 80055f4:	2601      	movs	r6, #1
    I2C_Flush_TXDR(hi2c);
 80055f6:	f7ff ff6e 	bl	80054d6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80055fa:	682a      	ldr	r2, [r5, #0]
 80055fc:	6853      	ldr	r3, [r2, #4]
 80055fe:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005602:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005606:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8005610:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005612:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8005614:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8005616:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005618:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800561c:	2300      	movs	r3, #0
 800561e:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005622:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8005626:	e003      	b.n	8005630 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8005628:	4626      	mov	r6, r4
 800562a:	e7c9      	b.n	80055c0 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 800562c:	2e00      	cmp	r6, #0
 800562e:	d1e0      	bne.n	80055f2 <I2C_IsErrorOccurred+0xd2>
}
 8005630:	4630      	mov	r0, r6
 8005632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005636 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005636:	b570      	push	{r4, r5, r6, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	460d      	mov	r5, r1
 800563c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	079b      	lsls	r3, r3, #30
 8005644:	d501      	bpl.n	800564a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8005646:	2000      	movs	r0, #0
}
 8005648:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800564a:	4632      	mov	r2, r6
 800564c:	4629      	mov	r1, r5
 800564e:	4620      	mov	r0, r4
 8005650:	f7ff ff66 	bl	8005520 <I2C_IsErrorOccurred>
 8005654:	b9a0      	cbnz	r0, 8005680 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8005656:	1c6a      	adds	r2, r5, #1
 8005658:	d0f1      	beq.n	800563e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7fe ffa9 	bl	80045b0 <HAL_GetTick>
 800565e:	1b80      	subs	r0, r0, r6
 8005660:	42a8      	cmp	r0, r5
 8005662:	d801      	bhi.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8005664:	2d00      	cmp	r5, #0
 8005666:	d1ea      	bne.n	800563e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005668:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800566a:	f043 0320 	orr.w	r3, r3, #32
 800566e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005670:	2320      	movs	r3, #32
 8005672:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005676:	2300      	movs	r3, #0
 8005678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 800567c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005680:	2001      	movs	r0, #1
 8005682:	e7e1      	b.n	8005648 <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08005684 <I2C_WaitOnFlagUntilTimeout>:
{
 8005684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005688:	9f06      	ldr	r7, [sp, #24]
 800568a:	4604      	mov	r4, r0
 800568c:	4688      	mov	r8, r1
 800568e:	4616      	mov	r6, r2
 8005690:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	6993      	ldr	r3, [r2, #24]
 8005696:	ea38 0303 	bics.w	r3, r8, r3
 800569a:	bf0c      	ite	eq
 800569c:	2301      	moveq	r3, #1
 800569e:	2300      	movne	r3, #0
 80056a0:	42b3      	cmp	r3, r6
 80056a2:	d001      	beq.n	80056a8 <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 80056a4:	2000      	movs	r0, #0
 80056a6:	e015      	b.n	80056d4 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80056a8:	1c6b      	adds	r3, r5, #1
 80056aa:	d0f3      	beq.n	8005694 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056ac:	f7fe ff80 	bl	80045b0 <HAL_GetTick>
 80056b0:	1bc0      	subs	r0, r0, r7
 80056b2:	42a8      	cmp	r0, r5
 80056b4:	d801      	bhi.n	80056ba <I2C_WaitOnFlagUntilTimeout+0x36>
 80056b6:	2d00      	cmp	r5, #0
 80056b8:	d1eb      	bne.n	8005692 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80056bc:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056be:	f043 0320 	orr.w	r3, r3, #32
 80056c2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80056c4:	2320      	movs	r3, #32
 80056c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80056d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80056d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056d8 <I2C_RequestMemoryWrite>:
{
 80056d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80056dc:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056de:	4b18      	ldr	r3, [pc, #96]	; (8005740 <I2C_RequestMemoryWrite+0x68>)
{
 80056e0:	4605      	mov	r5, r0
 80056e2:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	b2f2      	uxtb	r2, r6
 80056e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
{
 80056ec:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056f0:	f7ff ff00 	bl	80054f4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056f4:	4628      	mov	r0, r5
 80056f6:	4642      	mov	r2, r8
 80056f8:	4639      	mov	r1, r7
 80056fa:	f7ff ff9c 	bl	8005636 <I2C_WaitOnTXISFlagUntilTimeout>
 80056fe:	b118      	cbz	r0, 8005708 <I2C_RequestMemoryWrite+0x30>
    return HAL_ERROR;
 8005700:	2001      	movs	r0, #1
}
 8005702:	b002      	add	sp, #8
 8005704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005708:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800570a:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800570c:	d10d      	bne.n	800572a <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800570e:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005710:	2200      	movs	r2, #0
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005716:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005718:	463b      	mov	r3, r7
 800571a:	f8cd 8000 	str.w	r8, [sp]
 800571e:	f7ff ffb1 	bl	8005684 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8005722:	3800      	subs	r0, #0
 8005724:	bf18      	it	ne
 8005726:	2001      	movne	r0, #1
 8005728:	e7eb      	b.n	8005702 <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800572a:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800572c:	4639      	mov	r1, r7
 800572e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005730:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005732:	4642      	mov	r2, r8
 8005734:	f7ff ff7f 	bl	8005636 <I2C_WaitOnTXISFlagUntilTimeout>
 8005738:	2800      	cmp	r0, #0
 800573a:	d1e1      	bne.n	8005700 <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	e7e6      	b.n	800570e <I2C_RequestMemoryWrite+0x36>
 8005740:	80002000 	.word	0x80002000

08005744 <I2C_RequestMemoryRead>:
{
 8005744:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005748:	461e      	mov	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800574a:	4b18      	ldr	r3, [pc, #96]	; (80057ac <I2C_RequestMemoryRead+0x68>)
{
 800574c:	4605      	mov	r5, r0
 800574e:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	b2f2      	uxtb	r2, r6
 8005754:	2300      	movs	r3, #0
{
 8005756:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800575a:	f7ff fecb 	bl	80054f4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800575e:	4628      	mov	r0, r5
 8005760:	4642      	mov	r2, r8
 8005762:	4639      	mov	r1, r7
 8005764:	f7ff ff67 	bl	8005636 <I2C_WaitOnTXISFlagUntilTimeout>
 8005768:	b118      	cbz	r0, 8005772 <I2C_RequestMemoryRead+0x2e>
    return HAL_ERROR;
 800576a:	2001      	movs	r0, #1
}
 800576c:	b002      	add	sp, #8
 800576e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005772:	2e01      	cmp	r6, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005776:	d10d      	bne.n	8005794 <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005778:	b2e4      	uxtb	r4, r4
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800577a:	2200      	movs	r2, #0
 800577c:	2140      	movs	r1, #64	; 0x40
 800577e:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005780:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005782:	463b      	mov	r3, r7
 8005784:	f8cd 8000 	str.w	r8, [sp]
 8005788:	f7ff ff7c 	bl	8005684 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800578c:	3800      	subs	r0, #0
 800578e:	bf18      	it	ne
 8005790:	2001      	movne	r0, #1
 8005792:	e7eb      	b.n	800576c <I2C_RequestMemoryRead+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005794:	0a22      	lsrs	r2, r4, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005796:	4639      	mov	r1, r7
 8005798:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800579a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579c:	4642      	mov	r2, r8
 800579e:	f7ff ff4a 	bl	8005636 <I2C_WaitOnTXISFlagUntilTimeout>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d1e1      	bne.n	800576a <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80057a6:	682b      	ldr	r3, [r5, #0]
 80057a8:	e7e6      	b.n	8005778 <I2C_RequestMemoryRead+0x34>
 80057aa:	bf00      	nop
 80057ac:	80002000 	.word	0x80002000

080057b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4604      	mov	r4, r0
 80057b4:	460d      	mov	r5, r1
 80057b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	069b      	lsls	r3, r3, #26
 80057be:	d501      	bpl.n	80057c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80057c0:	2000      	movs	r0, #0
}
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c4:	4632      	mov	r2, r6
 80057c6:	4629      	mov	r1, r5
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7ff fea9 	bl	8005520 <I2C_IsErrorOccurred>
 80057ce:	b990      	cbnz	r0, 80057f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d0:	f7fe feee 	bl	80045b0 <HAL_GetTick>
 80057d4:	1b80      	subs	r0, r0, r6
 80057d6:	42a8      	cmp	r0, r5
 80057d8:	d801      	bhi.n	80057de <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80057da:	2d00      	cmp	r5, #0
 80057dc:	d1ec      	bne.n	80057b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057e0:	f043 0320 	orr.w	r3, r3, #32
 80057e4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80057e6:	2320      	movs	r3, #32
 80057e8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ec:	2300      	movs	r3, #0
 80057ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80057f2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80057f6:	2001      	movs	r0, #1
 80057f8:	e7e3      	b.n	80057c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

080057fa <HAL_I2C_MspInit>:
}
 80057fa:	4770      	bx	lr

080057fc <HAL_I2C_Init>:
{
 80057fc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80057fe:	4604      	mov	r4, r0
 8005800:	2800      	cmp	r0, #0
 8005802:	d04a      	beq.n	800589a <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005804:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005808:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800580c:	b91b      	cbnz	r3, 8005816 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800580e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005812:	f7ff fff2 	bl	80057fa <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005816:	2324      	movs	r3, #36	; 0x24
 8005818:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	f022 0201 	bic.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005826:	6862      	ldr	r2, [r4, #4]
 8005828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800582c:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005834:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005836:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800583a:	2901      	cmp	r1, #1
 800583c:	d124      	bne.n	8005888 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800583e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005842:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005844:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005846:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005848:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800584c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005850:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005858:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800585a:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 800585e:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005860:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005862:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005866:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005868:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005878:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800587a:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800587c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005880:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005882:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8005886:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005888:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800588c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800588e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005890:	d1d8      	bne.n	8005844 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005896:	605a      	str	r2, [r3, #4]
 8005898:	e7d4      	b.n	8005844 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800589a:	2001      	movs	r0, #1
 800589c:	e7f3      	b.n	8005886 <HAL_I2C_Init+0x8a>

0800589e <HAL_I2C_MspDeInit>:
 800589e:	4770      	bx	lr

080058a0 <HAL_I2C_DeInit>:
{
 80058a0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80058a2:	4604      	mov	r4, r0
 80058a4:	b198      	cbz	r0, 80058ce <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80058a6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a8:	2324      	movs	r3, #36	; 0x24
 80058aa:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80058ae:	6813      	ldr	r3, [r2, #0]
 80058b0:	f023 0301 	bic.w	r3, r3, #1
 80058b4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80058b6:	f7ff fff2 	bl	800589e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ba:	2000      	movs	r0, #0
 80058bc:	6460      	str	r0, [r4, #68]	; 0x44
  __HAL_UNLOCK(hi2c);
 80058be:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80058c2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058c6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80058cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80058ce:	2001      	movs	r0, #1
 80058d0:	e7fc      	b.n	80058cc <HAL_I2C_DeInit+0x2c>

080058d2 <HAL_I2C_Mem_Write>:
{
 80058d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d6:	b085      	sub	sp, #20
 80058d8:	469b      	mov	fp, r3
 80058da:	4604      	mov	r4, r0
 80058dc:	460f      	mov	r7, r1
 80058de:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80058e2:	4692      	mov	sl, r2
 80058e4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 80058e8:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80058ea:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	f040 80a3 	bne.w	8005a3a <HAL_I2C_Mem_Write+0x168>
    if ((pData == NULL) || (Size == 0U))
 80058f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058f6:	b10b      	cbz	r3, 80058fc <HAL_I2C_Mem_Write+0x2a>
 80058f8:	9b03      	ldr	r3, [sp, #12]
 80058fa:	b933      	cbnz	r3, 800590a <HAL_I2C_Mem_Write+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80058fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005900:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005902:	2001      	movs	r0, #1
}
 8005904:	b005      	add	sp, #20
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800590a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800590e:	2b01      	cmp	r3, #1
 8005910:	f000 8093 	beq.w	8005a3a <HAL_I2C_Mem_Write+0x168>
 8005914:	2501      	movs	r5, #1
 8005916:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800591a:	f7fe fe49 	bl	80045b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800591e:	2319      	movs	r3, #25
 8005920:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005922:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005924:	462a      	mov	r2, r5
 8005926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800592a:	4620      	mov	r0, r4
 800592c:	f7ff feaa 	bl	8005684 <I2C_WaitOnFlagUntilTimeout>
 8005930:	4680      	mov	r8, r0
 8005932:	2800      	cmp	r0, #0
 8005934:	d1e5      	bne.n	8005902 <HAL_I2C_Mem_Write+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005936:	2321      	movs	r3, #33	; 0x21
    hi2c->XferISR   = NULL;
 8005938:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800593a:	4652      	mov	r2, sl
 800593c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800593e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005942:	2340      	movs	r3, #64	; 0x40
 8005944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800594a:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800594c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800594e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005950:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005952:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005956:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005958:	465b      	mov	r3, fp
 800595a:	f7ff febd 	bl	80056d8 <I2C_RequestMemoryWrite>
 800595e:	b110      	cbz	r0, 8005966 <HAL_I2C_Mem_Write+0x94>
      __HAL_UNLOCK(hi2c);
 8005960:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005964:	e7cd      	b.n	8005902 <HAL_I2C_Mem_Write+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005966:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2bff      	cmp	r3, #255	; 0xff
 800596c:	d955      	bls.n	8005a1a <HAL_I2C_Mem_Write+0x148>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800596e:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005974:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005976:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005978:	4639      	mov	r1, r7
 800597a:	4620      	mov	r0, r4
 800597c:	f7ff fdba 	bl	80054f4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005980:	4632      	mov	r2, r6
 8005982:	4649      	mov	r1, r9
 8005984:	4620      	mov	r0, r4
 8005986:	f7ff fe56 	bl	8005636 <I2C_WaitOnTXISFlagUntilTimeout>
 800598a:	2800      	cmp	r0, #0
 800598c:	d1b9      	bne.n	8005902 <HAL_I2C_Mem_Write+0x30>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800598e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005990:	6822      	ldr	r2, [r4, #0]
 8005992:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005996:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005998:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800599a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800599c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800599e:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80059a0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80059a2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80059a4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80059a6:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80059aa:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	b1ab      	cbz	r3, 80059dc <HAL_I2C_Mem_Write+0x10a>
 80059b0:	b9a2      	cbnz	r2, 80059dc <HAL_I2C_Mem_Write+0x10a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059b2:	464b      	mov	r3, r9
 80059b4:	2180      	movs	r1, #128	; 0x80
 80059b6:	4620      	mov	r0, r4
 80059b8:	9600      	str	r6, [sp, #0]
 80059ba:	f7ff fe63 	bl	8005684 <I2C_WaitOnFlagUntilTimeout>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d19f      	bne.n	8005902 <HAL_I2C_Mem_Write+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	2bff      	cmp	r3, #255	; 0xff
 80059c8:	d92f      	bls.n	8005a2a <HAL_I2C_Mem_Write+0x158>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ca:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059d0:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059d2:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059d4:	4639      	mov	r1, r7
 80059d6:	4620      	mov	r0, r4
 80059d8:	f7ff fd8c 	bl	80054f4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80059dc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1cd      	bne.n	8005980 <HAL_I2C_Mem_Write+0xae>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e4:	4632      	mov	r2, r6
 80059e6:	4649      	mov	r1, r9
 80059e8:	4620      	mov	r0, r4
 80059ea:	f7ff fee1 	bl	80057b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d187      	bne.n	8005902 <HAL_I2C_Mem_Write+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	2120      	movs	r1, #32
 80059f6:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80059fe:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005a02:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a0c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005a10:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a14:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005a18:	e774      	b.n	8005904 <HAL_I2C_Mem_Write+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005a1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a20:	9000      	str	r0, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8005a22:	b292      	uxth	r2, r2
 8005a24:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	e7a6      	b.n	8005978 <HAL_I2C_Mem_Write+0xa6>
          hi2c->XferSize = hi2c->XferCount;
 8005a2a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a30:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005a32:	b292      	uxth	r2, r2
 8005a34:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	e7cc      	b.n	80059d4 <HAL_I2C_Mem_Write+0x102>
    return HAL_BUSY;
 8005a3a:	2002      	movs	r0, #2
 8005a3c:	e762      	b.n	8005904 <HAL_I2C_Mem_Write+0x32>
	...

08005a40 <HAL_I2C_Mem_Read>:
{
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	b085      	sub	sp, #20
 8005a46:	469b      	mov	fp, r3
 8005a48:	4604      	mov	r4, r0
 8005a4a:	460f      	mov	r7, r1
 8005a4c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005a50:	4692      	mov	sl, r2
 8005a52:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005a56:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a58:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005a5c:	2b20      	cmp	r3, #32
 8005a5e:	f040 80a7 	bne.w	8005bb0 <HAL_I2C_Mem_Read+0x170>
    if ((pData == NULL) || (Size == 0U))
 8005a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a64:	b10b      	cbz	r3, 8005a6a <HAL_I2C_Mem_Read+0x2a>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	b933      	cbnz	r3, 8005a78 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8005a70:	2001      	movs	r0, #1
}
 8005a72:	b005      	add	sp, #20
 8005a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005a78:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	f000 8097 	beq.w	8005bb0 <HAL_I2C_Mem_Read+0x170>
 8005a82:	2501      	movs	r5, #1
 8005a84:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005a88:	f7fe fd92 	bl	80045b0 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a8c:	2319      	movs	r3, #25
 8005a8e:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8005a90:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a92:	462a      	mov	r2, r5
 8005a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f7ff fdf3 	bl	8005684 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	4680      	mov	r8, r0
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d1e5      	bne.n	8005a70 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005aa4:	2322      	movs	r3, #34	; 0x22
    hi2c->XferISR   = NULL;
 8005aa6:	6360      	str	r0, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aa8:	4652      	mov	r2, sl
 8005aaa:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005aac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ab0:	2340      	movs	r3, #64	; 0x40
 8005ab2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8005ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab8:	6460      	str	r0, [r4, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aba:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8005abc:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005abe:	9b03      	ldr	r3, [sp, #12]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ac0:	e9cd 9600 	strd	r9, r6, [sp]
    hi2c->XferCount = Size;
 8005ac4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ac6:	465b      	mov	r3, fp
 8005ac8:	f7ff fe3c 	bl	8005744 <I2C_RequestMemoryRead>
 8005acc:	b110      	cbz	r0, 8005ad4 <HAL_I2C_Mem_Read+0x94>
      __HAL_UNLOCK(hi2c);
 8005ace:	f884 8040 	strb.w	r8, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005ad2:	e7cd      	b.n	8005a70 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2bff      	cmp	r3, #255	; 0xff
 8005ada:	4b36      	ldr	r3, [pc, #216]	; (8005bb4 <HAL_I2C_Mem_Read+0x174>)
 8005adc:	d958      	bls.n	8005b90 <HAL_I2C_Mem_Read+0x150>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ade:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ae6:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ae8:	4639      	mov	r1, r7
 8005aea:	4620      	mov	r0, r4
 8005aec:	f7ff fd02 	bl	80054f4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005af0:	464b      	mov	r3, r9
 8005af2:	2200      	movs	r2, #0
 8005af4:	2104      	movs	r1, #4
 8005af6:	4620      	mov	r0, r4
 8005af8:	9600      	str	r6, [sp, #0]
 8005afa:	f7ff fdc3 	bl	8005684 <I2C_WaitOnFlagUntilTimeout>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d1b6      	bne.n	8005a70 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b08:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005b0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005b0e:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8005b10:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8005b12:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b14:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b16:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8005b18:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8005b1a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	b1ab      	cbz	r3, 8005b52 <HAL_I2C_Mem_Read+0x112>
 8005b26:	b9a2      	cbnz	r2, 8005b52 <HAL_I2C_Mem_Read+0x112>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b28:	464b      	mov	r3, r9
 8005b2a:	2180      	movs	r1, #128	; 0x80
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	9600      	str	r6, [sp, #0]
 8005b30:	f7ff fda8 	bl	8005684 <I2C_WaitOnFlagUntilTimeout>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d19b      	bne.n	8005a70 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2bff      	cmp	r3, #255	; 0xff
 8005b3e:	d92f      	bls.n	8005ba0 <HAL_I2C_Mem_Read+0x160>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b40:	22ff      	movs	r2, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b46:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b48:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b4a:	4639      	mov	r1, r7
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	f7ff fcd1 	bl	80054f4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005b52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1ca      	bne.n	8005af0 <HAL_I2C_Mem_Read+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5a:	4632      	mov	r2, r6
 8005b5c:	4649      	mov	r1, r9
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f7ff fe26 	bl	80057b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b64:	2800      	cmp	r0, #0
 8005b66:	d183      	bne.n	8005a70 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	2120      	movs	r1, #32
 8005b6c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8005b74:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8005b78:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8005b7c:	f022 0201 	bic.w	r2, r2, #1
 8005b80:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005b86:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b8a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005b8e:	e770      	b.n	8005a72 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8005b90:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8005b98:	b292      	uxth	r2, r2
 8005b9a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	e7a3      	b.n	8005ae8 <HAL_I2C_Mem_Read+0xa8>
          hi2c->XferSize = hi2c->XferCount;
 8005ba0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ba6:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005ba8:	b292      	uxth	r2, r2
 8005baa:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	e7cc      	b.n	8005b4a <HAL_I2C_Mem_Read+0x10a>
    return HAL_BUSY;
 8005bb0:	2002      	movs	r0, #2
 8005bb2:	e75e      	b.n	8005a72 <HAL_I2C_Mem_Read+0x32>
 8005bb4:	80002400 	.word	0x80002400

08005bb8 <HAL_I2C_GetState>:
  return hi2c->State;
 8005bb8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8005bbc:	4770      	bx	lr

08005bbe <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8005bbe:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005bc2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	b2dc      	uxtb	r4, r3
 8005bcc:	d11d      	bne.n	8005c0a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bce:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d019      	beq.n	8005c0a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd6:	2324      	movs	r3, #36	; 0x24
 8005bd8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bdc:	6803      	ldr	r3, [r0, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	f022 0201 	bic.w	r2, r2, #1
 8005be4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005bec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4311      	orrs	r1, r2
 8005bf2:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfc:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005bfe:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005c02:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005c06:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005c08:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005c0a:	2002      	movs	r0, #2
 8005c0c:	e7fc      	b.n	8005c08 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08005c0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005c0e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c10:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005c14:	2b20      	cmp	r3, #32
 8005c16:	b2dc      	uxtb	r4, r3
 8005c18:	d11c      	bne.n	8005c54 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c1a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d018      	beq.n	8005c54 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c22:	2324      	movs	r3, #36	; 0x24
 8005c24:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c28:	6803      	ldr	r3, [r0, #0]
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	f022 0201 	bic.w	r2, r2, #1
 8005c30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005c32:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005c34:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005c38:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005c3c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	f042 0201 	orr.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c46:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005c48:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005c4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8005c50:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005c52:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8005c54:	2002      	movs	r0, #2
 8005c56:	e7fc      	b.n	8005c52 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08005c58 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c58:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c5a:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c5c:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c60:	3284      	adds	r2, #132	; 0x84
 8005c62:	1883      	adds	r3, r0, r2
{
 8005c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c68:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c6a:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c6e:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005c70:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c74:	684c      	ldr	r4, [r1, #4]
 8005c76:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c7a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005c7e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c82:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c84:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c86:	68c5      	ldr	r5, [r0, #12]
 8005c88:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8005c8c:	443d      	add	r5, r7
 8005c8e:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c92:	68ce      	ldr	r6, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c94:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c96:	68c5      	ldr	r5, [r0, #12]
 8005c98:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8005c9c:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c9e:	689d      	ldr	r5, [r3, #8]
 8005ca0:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8005ca4:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ca6:	688d      	ldr	r5, [r1, #8]
 8005ca8:	68c7      	ldr	r7, [r0, #12]
 8005caa:	3501      	adds	r5, #1
 8005cac:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8005cb0:	443d      	add	r5, r7
 8005cb2:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005cb6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005cb8:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005cba:	691d      	ldr	r5, [r3, #16]
 8005cbc:	f025 0507 	bic.w	r5, r5, #7
 8005cc0:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005cc2:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005cc4:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005cc6:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005cca:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005cce:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005cd2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005cd6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005cda:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005cde:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8005ce2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005ce4:	695d      	ldr	r5, [r3, #20]
 8005ce6:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8005cea:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005cec:	694d      	ldr	r5, [r1, #20]
 8005cee:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005cf0:	69dd      	ldr	r5, [r3, #28]
 8005cf2:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8005cf6:	f025 0507 	bic.w	r5, r5, #7
 8005cfa:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005cfc:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8005d00:	433d      	orrs	r5, r7
 8005d02:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d04:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d06:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005d08:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005d0c:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005d0e:	b31e      	cbz	r6, 8005d58 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005d10:	2e01      	cmp	r6, #1
 8005d12:	d023      	beq.n	8005d5c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005d14:	1eb5      	subs	r5, r6, #2
 8005d16:	2d02      	cmp	r5, #2
 8005d18:	d922      	bls.n	8005d60 <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005d1a:	2e07      	cmp	r6, #7
 8005d1c:	bf0c      	ite	eq
 8005d1e:	2502      	moveq	r5, #2
 8005d20:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d22:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005d24:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d28:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005d2c:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005d2e:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005d30:	3407      	adds	r4, #7
 8005d32:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d34:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8005d36:	436e      	muls	r6, r5
 8005d38:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8005d3c:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005d3e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005d40:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8005d44:	f024 0407 	bic.w	r4, r4, #7
 8005d48:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005d4a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005d4c:	5883      	ldr	r3, [r0, r2]
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	5083      	str	r3, [r0, r2]
}
 8005d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005d58:	2504      	movs	r5, #4
 8005d5a:	e7e2      	b.n	8005d22 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005d5c:	2503      	movs	r5, #3
 8005d5e:	e7e0      	b.n	8005d22 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005d60:	2502      	movs	r5, #2
 8005d62:	e7de      	b.n	8005d22 <LTDC_SetConfig+0xca>

08005d64 <HAL_LTDC_Init>:
{
 8005d64:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005d66:	4604      	mov	r4, r0
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d063      	beq.n	8005e34 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d6c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005d70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d74:	b91b      	cbnz	r3, 8005d7e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005d76:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005d7a:	f7fb f84b 	bl	8000e14 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005d7e:	2302      	movs	r3, #2
 8005d80:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005d8c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005d8e:	6999      	ldr	r1, [r3, #24]
 8005d90:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005d94:	4302      	orrs	r2, r0
 8005d96:	68e0      	ldr	r0, [r4, #12]
 8005d98:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005d9a:	6920      	ldr	r0, [r4, #16]
 8005d9c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005d9e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005da0:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005da2:	4925      	ldr	r1, [pc, #148]	; (8005e38 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005da4:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	400a      	ands	r2, r1
 8005daa:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005db2:	69a0      	ldr	r0, [r4, #24]
 8005db4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005db6:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005db8:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	400a      	ands	r2, r1
 8005dbe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005dc6:	6a20      	ldr	r0, [r4, #32]
 8005dc8:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005dca:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005dcc:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005dda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005ddc:	4302      	orrs	r2, r0
 8005dde:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	4011      	ands	r1, r2
 8005de4:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005de6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005de8:	695a      	ldr	r2, [r3, #20]
 8005dea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005dee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005df0:	430a      	orrs	r2, r1
 8005df2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005df6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005dfa:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005dfe:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005e02:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e06:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005e10:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e14:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005e16:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1a:	f042 0206 	orr.w	r2, r2, #6
 8005e1e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	f042 0201 	orr.w	r2, r2, #1
 8005e26:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e28:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005e2a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8005e2e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005e34:	2001      	movs	r0, #1
 8005e36:	e7fc      	b.n	8005e32 <HAL_LTDC_Init+0xce>
 8005e38:	f000f800 	.word	0xf000f800

08005e3c <HAL_LTDC_ErrorCallback>:
 8005e3c:	4770      	bx	lr

08005e3e <HAL_LTDC_ReloadEventCallback>:
 8005e3e:	4770      	bx	lr

08005e40 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e40:	6803      	ldr	r3, [r0, #0]
{
 8005e42:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005e44:	6b9e      	ldr	r6, [r3, #56]	; 0x38
{
 8005e46:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005e48:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005e4a:	0772      	lsls	r2, r6, #29
 8005e4c:	d514      	bpl.n	8005e78 <HAL_LTDC_IRQHandler+0x38>
 8005e4e:	0769      	lsls	r1, r5, #29
 8005e50:	d512      	bpl.n	8005e78 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005e52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e54:	f022 0204 	bic.w	r2, r2, #4
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005e5a:	2204      	movs	r2, #4
 8005e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005e5e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005e62:	f043 0301 	orr.w	r3, r3, #1
 8005e66:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8005e6a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e6c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005e70:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005e74:	f7ff ffe2 	bl	8005e3c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005e78:	07b2      	lsls	r2, r6, #30
 8005e7a:	d516      	bpl.n	8005eaa <HAL_LTDC_IRQHandler+0x6a>
 8005e7c:	07ab      	lsls	r3, r5, #30
 8005e7e:	d514      	bpl.n	8005eaa <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e80:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8005e82:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005e84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e86:	f022 0202 	bic.w	r2, r2, #2
 8005e8a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005e8c:	2202      	movs	r2, #2
 8005e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005e90:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005e94:	4313      	orrs	r3, r2
 8005e96:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005e9a:	2304      	movs	r3, #4
 8005e9c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005ea6:	f7ff ffc9 	bl	8005e3c <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005eaa:	07f0      	lsls	r0, r6, #31
 8005eac:	d510      	bpl.n	8005ed0 <HAL_LTDC_IRQHandler+0x90>
 8005eae:	07e9      	lsls	r1, r5, #31
 8005eb0:	d50e      	bpl.n	8005ed0 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005eb2:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8005eb4:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 8005ec2:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ec4:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005ec8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8005ecc:	f7fc f9e6 	bl	800229c <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005ed0:	0732      	lsls	r2, r6, #28
 8005ed2:	d511      	bpl.n	8005ef8 <HAL_LTDC_IRQHandler+0xb8>
 8005ed4:	072b      	lsls	r3, r5, #28
 8005ed6:	d50f      	bpl.n	8005ef8 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ed8:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005eda:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ede:	f022 0208 	bic.w	r2, r2, #8
 8005ee2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ee4:	2208      	movs	r2, #8
 8005ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005ef4:	f7ff ffa3 	bl	8005e3e <HAL_LTDC_ReloadEventCallback>
}
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}

08005efa <HAL_LTDC_ConfigLayer>:
{
 8005efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8005efe:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8005f02:	4606      	mov	r6, r0
 8005f04:	460f      	mov	r7, r1
 8005f06:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f04f 0002 	mov.w	r0, #2
 8005f0e:	d01f      	beq.n	8005f50 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f10:	2434      	movs	r4, #52	; 0x34
  __HAL_LOCK(hltdc);
 8005f12:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f16:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f18:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f1c:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8005f20:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f24:	3438      	adds	r4, #56	; 0x38
 8005f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f32:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f34:	4630      	mov	r0, r6
 8005f36:	4662      	mov	r2, ip
 8005f38:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f3a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f3c:	f7ff fe8c 	bl	8005c58 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f40:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8005f42:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f44:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f48:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005f4c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f54 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
 8005f54:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f04f 0302 	mov.w	r3, #2
 8005f5e:	d012      	beq.n	8005f86 <HAL_LTDC_ProgramLineEvent+0x32>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f60:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005f64:	6803      	ldr	r3, [r0, #0]
 8005f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f68:	f022 0201 	bic.w	r2, r2, #1
 8005f6c:	635a      	str	r2, [r3, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
 8005f6e:	4a07      	ldr	r2, [pc, #28]	; (8005f8c <HAL_LTDC_ProgramLineEvent+0x38>)
 8005f70:	6411      	str	r1, [r2, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f74:	f042 0201 	orr.w	r2, r2, #1
 8005f78:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005f80:	2300      	movs	r3, #0
 8005f82:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8005f86:	4618      	mov	r0, r3
}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	50001000 	.word	0x50001000

08005f90 <HAL_MDMA_Abort>:
  *        and the Channel will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort(MDMA_HandleTypeDef *hmdma)
{
 8005f90:	b538      	push	{r3, r4, r5, lr}
 8005f92:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8005f94:	f7fe fb0c 	bl	80045b0 <HAL_GetTick>
 8005f98:	4605      	mov	r5, r0

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8005f9a:	b144      	cbz	r4, 8005fae <HAL_MDMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8005f9c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d006      	beq.n	8005fb2 <HAL_MDMA_Abort+0x22>
  {
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8005fa4:	2380      	movs	r3, #128	; 0x80
 8005fa6:	66a3      	str	r3, [r4, #104]	; 0x68

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 8005fa8:	2300      	movs	r3, #0
 8005faa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8005fae:	2001      	movs	r0, #1
 8005fb0:	e015      	b.n	8005fde <HAL_MDMA_Abort+0x4e>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
 8005fba:	60da      	str	r2, [r3, #12]

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	f022 0201 	bic.w	r2, r2, #1
 8005fc2:	60da      	str	r2, [r3, #12]

    /* Check if the MDMA Channel is effectively disabled */
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8005fc4:	6822      	ldr	r2, [r4, #0]
 8005fc6:	68d3      	ldr	r3, [r2, #12]
 8005fc8:	f013 0301 	ands.w	r3, r3, #1
 8005fcc:	d108      	bne.n	8005fe0 <HAL_MDMA_Abort+0x50>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags */
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8005fce:	211f      	movs	r1, #31

    /* Change the MDMA state*/
    hmdma->State = HAL_MDMA_STATE_READY;
  }

  return HAL_OK;
 8005fd0:	4618      	mov	r0, r3
    __HAL_MDMA_CLEAR_FLAG(hmdma, (MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BT | MDMA_FLAG_BRT | MDMA_FLAG_BFTC));
 8005fd2:	6051      	str	r1, [r2, #4]
    hmdma->State = HAL_MDMA_STATE_READY;
 8005fd4:	2201      	movs	r2, #1
    __HAL_UNLOCK(hmdma);
 8005fd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hmdma->State = HAL_MDMA_STATE_READY;
 8005fda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
}
 8005fde:	bd38      	pop	{r3, r4, r5, pc}
      if( (HAL_GetTick()  - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8005fe0:	f7fe fae6 	bl	80045b0 <HAL_GetTick>
 8005fe4:	1b40      	subs	r0, r0, r5
 8005fe6:	2805      	cmp	r0, #5
 8005fe8:	d9ec      	bls.n	8005fc4 <HAL_MDMA_Abort+0x34>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_TIMEOUT;
 8005fea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff0:	66a3      	str	r3, [r4, #104]	; 0x68
        __HAL_UNLOCK(hmdma);
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_ERROR;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        return HAL_ERROR;
 8005ffe:	e7d6      	b.n	8005fae <HAL_MDMA_Abort+0x1e>

08006000 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8006000:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006004:	6804      	ldr	r4, [r0, #0]
 8006006:	6823      	ldr	r3, [r4, #0]
 8006008:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800600c:	6023      	str	r3, [r4, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 800600e:	6883      	ldr	r3, [r0, #8]
 8006010:	b92b      	cbnz	r3, 800601e <OSPI_ConfigCmd+0x1e>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8006012:	6823      	ldr	r3, [r4, #0]
 8006014:	684a      	ldr	r2, [r1, #4]
 8006016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800601a:	4313      	orrs	r3, r2
 800601c:	6023      	str	r3, [r4, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800601e:	680b      	ldr	r3, [r1, #0]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d150      	bne.n	80060c6 <OSPI_ConfigCmd+0xc6>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8006024:	f504 72c0 	add.w	r2, r4, #384	; 0x180
    tcr_reg = &(hospi->Instance->WTCR);
 8006028:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ir_reg  = &(hospi->Instance->WIR);
 800602c:	f504 75c8 	add.w	r5, r4, #400	; 0x190
    abr_reg = &(hospi->Instance->WABR);
 8006030:	f504 7cd0 	add.w	ip, r4, #416	; 0x1a0
    ir_reg  = &(hospi->Instance->IR);
    abr_reg = &(hospi->Instance->ABR);
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8006034:	e9d1 3712 	ldrd	r3, r7, [r1, #72]	; 0x48
 8006038:	433b      	orrs	r3, r7
 800603a:	6013      	str	r3, [r2, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800603c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800603e:	b16b      	cbz	r3, 800605c <OSPI_ConfigCmd+0x5c>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8006040:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006042:	f8cc 3000 	str.w	r3, [ip]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8006046:	6b4f      	ldr	r7, [r1, #52]	; 0x34
 8006048:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800604a:	f8d2 c000 	ldr.w	ip, [r2]
 800604e:	433b      	orrs	r3, r7
 8006050:	6b0f      	ldr	r7, [r1, #48]	; 0x30
 8006052:	433b      	orrs	r3, r7
 8006054:	f42c 177c 	bic.w	r7, ip, #4128768	; 0x3f0000
 8006058:	433b      	orrs	r3, r7
 800605a:	6013      	str	r3, [r2, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 800605c:	6833      	ldr	r3, [r6, #0]
 800605e:	6c4f      	ldr	r7, [r1, #68]	; 0x44
 8006060:	f023 031f 	bic.w	r3, r3, #31
 8006064:	433b      	orrs	r3, r7
 8006066:	6033      	str	r3, [r6, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006068:	f8d1 e038 	ldr.w	lr, [r1, #56]	; 0x38
 800606c:	f1be 0f00 	cmp.w	lr, #0
 8006070:	d004      	beq.n	800607c <OSPI_ConfigCmd+0x7c>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8006072:	680b      	ldr	r3, [r1, #0]
 8006074:	b913      	cbnz	r3, 800607c <OSPI_ConfigCmd+0x7c>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8006076:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006078:	3b01      	subs	r3, #1
 800607a:	6423      	str	r3, [r4, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 800607c:	68cb      	ldr	r3, [r1, #12]
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800607e:	f8d1 901c 	ldr.w	r9, [r1, #28]
  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8006082:	2b00      	cmp	r3, #0
 8006084:	d07b      	beq.n	800617e <OSPI_ConfigCmd+0x17e>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006086:	e9d1 c804 	ldrd	ip, r8, [r1, #16]
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800608a:	f1b9 0f00 	cmp.w	r9, #0
 800608e:	d04a      	beq.n	8006126 <OSPI_ConfigCmd+0x126>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006090:	e9d1 6708 	ldrd	r6, r7, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006094:	f1be 0f00 	cmp.w	lr, #0
 8006098:	d029      	beq.n	80060ee <OSPI_ConfigCmd+0xee>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800609a:	ea4e 0303 	orr.w	r3, lr, r3
 800609e:	6810      	ldr	r0, [r2, #0]
 80060a0:	ea43 0309 	orr.w	r3, r3, r9
 80060a4:	ea43 0308 	orr.w	r3, r3, r8
 80060a8:	ea43 030c 	orr.w	r3, r3, ip
 80060ac:	433b      	orrs	r3, r7
 80060ae:	4333      	orrs	r3, r6
 80060b0:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 80060b2:	4333      	orrs	r3, r6
 80060b4:	4e42      	ldr	r6, [pc, #264]	; (80061c0 <OSPI_ConfigCmd+0x1c0>)
 80060b6:	4006      	ands	r6, r0
 80060b8:	4333      	orrs	r3, r6

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80060ba:	6013      	str	r3, [r2, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80060bc:	688b      	ldr	r3, [r1, #8]
 80060be:	602b      	str	r3, [r5, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80060c0:	698b      	ldr	r3, [r1, #24]
 80060c2:	64a3      	str	r3, [r4, #72]	; 0x48
 80060c4:	e044      	b.n	8006150 <OSPI_ConfigCmd+0x150>
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 80060c6:	2b03      	cmp	r3, #3
    ccr_reg = &(hospi->Instance->WPCCR);
 80060c8:	bf01      	itttt	eq
 80060ca:	f504 72a0 	addeq.w	r2, r4, #320	; 0x140
    tcr_reg = &(hospi->Instance->WPTCR);
 80060ce:	f504 76a4 	addeq.w	r6, r4, #328	; 0x148
    ir_reg  = &(hospi->Instance->WPIR);
 80060d2:	f504 75a8 	addeq.w	r5, r4, #336	; 0x150
    abr_reg = &(hospi->Instance->WPABR);
 80060d6:	f504 7cb0 	addeq.w	ip, r4, #352	; 0x160
    ccr_reg = &(hospi->Instance->CCR);
 80060da:	bf1f      	itttt	ne
 80060dc:	f504 7280 	addne.w	r2, r4, #256	; 0x100
    tcr_reg = &(hospi->Instance->TCR);
 80060e0:	f504 7684 	addne.w	r6, r4, #264	; 0x108
    ir_reg  = &(hospi->Instance->IR);
 80060e4:	f504 7588 	addne.w	r5, r4, #272	; 0x110
    abr_reg = &(hospi->Instance->ABR);
 80060e8:	f504 7c90 	addne.w	ip, r4, #288	; 0x120
 80060ec:	e7a2      	b.n	8006034 <OSPI_ConfigCmd+0x34>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80060ee:	ea43 0309 	orr.w	r3, r3, r9
 80060f2:	f8d2 e000 	ldr.w	lr, [r2]
 80060f6:	ea43 0308 	orr.w	r3, r3, r8
 80060fa:	f42e 5e7c 	bic.w	lr, lr, #16128	; 0x3f00
 80060fe:	ea43 030c 	orr.w	r3, r3, ip
 8006102:	f02e 0e3f 	bic.w	lr, lr, #63	; 0x3f
 8006106:	433b      	orrs	r3, r7
 8006108:	4333      	orrs	r3, r6
 800610a:	ea43 030e 	orr.w	r3, r3, lr
 800610e:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006110:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006112:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006116:	d1d1      	bne.n	80060bc <OSPI_ConfigCmd+0xbc>
 8006118:	694b      	ldr	r3, [r1, #20]
 800611a:	2b08      	cmp	r3, #8
 800611c:	d1ce      	bne.n	80060bc <OSPI_ConfigCmd+0xbc>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800611e:	6813      	ldr	r3, [r2, #0]
 8006120:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006124:	e7c9      	b.n	80060ba <OSPI_ConfigCmd+0xba>
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8006126:	f1be 0f00 	cmp.w	lr, #0
 800612a:	d014      	beq.n	8006156 <OSPI_ConfigCmd+0x156>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 800612c:	ea4e 0303 	orr.w	r3, lr, r3
 8006130:	6810      	ldr	r0, [r2, #0]
 8006132:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8006134:	ea43 0308 	orr.w	r3, r3, r8
 8006138:	ea43 030c 	orr.w	r3, r3, ip
 800613c:	f020 6c70 	bic.w	ip, r0, #251658240	; 0xf000000
 8006140:	4323      	orrs	r3, r4
 8006142:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
 8006146:	ea43 030c 	orr.w	r3, r3, ip
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800614a:	6013      	str	r3, [r2, #0]
      *ir_reg = cmd->Instruction;
 800614c:	688b      	ldr	r3, [r1, #8]
 800614e:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2000      	movs	r0, #0
    }
  }

  /* Return function status */
  return status;
}
 8006152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8006156:	6814      	ldr	r4, [r2, #0]
 8006158:	ea43 0308 	orr.w	r3, r3, r8
 800615c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006160:	ea43 030c 	orr.w	r3, r3, ip
 8006164:	4323      	orrs	r3, r4
 8006166:	6013      	str	r3, [r2, #0]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8006168:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800616a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800616e:	d1ed      	bne.n	800614c <OSPI_ConfigCmd+0x14c>
 8006170:	694b      	ldr	r3, [r1, #20]
 8006172:	2b08      	cmp	r3, #8
 8006174:	d1ea      	bne.n	800614c <OSPI_ConfigCmd+0x14c>
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800617c:	e7e5      	b.n	800614a <OSPI_ConfigCmd+0x14a>
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800617e:	f1b9 0f00 	cmp.w	r9, #0
 8006182:	d018      	beq.n	80061b6 <OSPI_ConfigCmd+0x1b6>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006184:	6815      	ldr	r5, [r2, #0]
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8006186:	e9d1 6008 	ldrd	r6, r0, [r1, #32]
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800618a:	f1be 0f00 	cmp.w	lr, #0
 800618e:	d00c      	beq.n	80061aa <OSPI_ConfigCmd+0x1aa>
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8006190:	ea4e 0309 	orr.w	r3, lr, r9
 8006194:	4303      	orrs	r3, r0
 8006196:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8006198:	4333      	orrs	r3, r6
 800619a:	4303      	orrs	r3, r0
 800619c:	f025 6070 	bic.w	r0, r5, #251658240	; 0xf000000
 80061a0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80061a4:	4303      	orrs	r3, r0
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	e78a      	b.n	80060c0 <OSPI_ConfigCmd+0xc0>
 80061aa:	ea40 0309 	orr.w	r3, r0, r9
 80061ae:	f425 507c 	bic.w	r0, r5, #16128	; 0x3f00
 80061b2:	4333      	orrs	r3, r6
 80061b4:	e7f6      	b.n	80061a4 <OSPI_ConfigCmd+0x1a4>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80061b6:	2308      	movs	r3, #8
 80061b8:	6543      	str	r3, [r0, #84]	; 0x54
      status = HAL_ERROR;
 80061ba:	2001      	movs	r0, #1
 80061bc:	e7c9      	b.n	8006152 <OSPI_ConfigCmd+0x152>
 80061be:	bf00      	nop
 80061c0:	f0ffc0c0 	.word	0xf0ffc0c0

080061c4 <OSPI_WaitFlagStateUntilTimeout>:
{
 80061c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061c8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80061cc:	4604      	mov	r4, r0
 80061ce:	460e      	mov	r6, r1
 80061d0:	4615      	mov	r5, r2
 80061d2:	461f      	mov	r7, r3
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	6a13      	ldr	r3, [r2, #32]
 80061d8:	4233      	tst	r3, r6
 80061da:	bf14      	ite	ne
 80061dc:	2301      	movne	r3, #1
 80061de:	2300      	moveq	r3, #0
 80061e0:	42ab      	cmp	r3, r5
 80061e2:	d101      	bne.n	80061e8 <OSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 80061e4:	2000      	movs	r0, #0
 80061e6:	e012      	b.n	800620e <OSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80061e8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80061ec:	d0f3      	beq.n	80061d6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ee:	f7fe f9df 	bl	80045b0 <HAL_GetTick>
 80061f2:	1bc0      	subs	r0, r0, r7
 80061f4:	4540      	cmp	r0, r8
 80061f6:	d802      	bhi.n	80061fe <OSPI_WaitFlagStateUntilTimeout+0x3a>
 80061f8:	f1b8 0f00 	cmp.w	r8, #0
 80061fc:	d1ea      	bne.n	80061d4 <OSPI_WaitFlagStateUntilTimeout+0x10>
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80061fe:	f44f 7300 	mov.w	r3, #512	; 0x200
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006202:	2001      	movs	r0, #1
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8006204:	6523      	str	r3, [r4, #80]	; 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8006206:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800620e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006214 <HAL_OSPI_Init>:
{
 8006214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 800621a:	f7fe f9c9 	bl	80045b0 <HAL_GetTick>
 800621e:	4603      	mov	r3, r0
  if (hospi == NULL)
 8006220:	2c00      	cmp	r4, #0
 8006222:	d067      	beq.n	80062f4 <HAL_OSPI_Init+0xe0>
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006224:	2000      	movs	r0, #0
 8006226:	6560      	str	r0, [r4, #84]	; 0x54
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006228:	6d26      	ldr	r6, [r4, #80]	; 0x50
 800622a:	2e00      	cmp	r6, #0
 800622c:	d160      	bne.n	80062f0 <HAL_OSPI_Init+0xdc>
      HAL_OSPI_MspInit(hospi);
 800622e:	4620      	mov	r0, r4
 8006230:	9303      	str	r3, [sp, #12]
 8006232:	f7fa fefb 	bl	800102c <HAL_OSPI_MspInit>
      MODIFY_REG(hospi->Instance->DCR1,
 8006236:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006238:	68e1      	ldr	r1, [r4, #12]
  hospi->Timeout = Timeout;
 800623a:	f241 3288 	movw	r2, #5000	; 0x1388
      MODIFY_REG(hospi->Instance->DCR1,
 800623e:	6825      	ldr	r5, [r4, #0]
 8006240:	4301      	orrs	r1, r0
 8006242:	69e0      	ldr	r0, [r4, #28]
 8006244:	68af      	ldr	r7, [r5, #8]
 8006246:	4301      	orrs	r1, r0
 8006248:	482b      	ldr	r0, [pc, #172]	; (80062f8 <HAL_OSPI_Init+0xe4>)
  hospi->Timeout = Timeout;
 800624a:	65a2      	str	r2, [r4, #88]	; 0x58
      MODIFY_REG(hospi->Instance->DCR1,
 800624c:	4038      	ands	r0, r7
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800624e:	9b03      	ldr	r3, [sp, #12]
      MODIFY_REG(hospi->Instance->DCR1,
 8006250:	4301      	orrs	r1, r0
 8006252:	6920      	ldr	r0, [r4, #16]
 8006254:	3801      	subs	r0, #1
 8006256:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800625a:	6960      	ldr	r0, [r4, #20]
 800625c:	3801      	subs	r0, #1
 800625e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006262:	6a20      	ldr	r0, [r4, #32]
      MODIFY_REG(hospi->Instance->DCR1,
 8006264:	60a9      	str	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006266:	68e9      	ldr	r1, [r5, #12]
 8006268:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800626c:	4301      	orrs	r1, r0
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800626e:	6b20      	ldr	r0, [r4, #48]	; 0x30
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006270:	60e9      	str	r1, [r5, #12]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006272:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006278:	6860      	ldr	r0, [r4, #4]
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800627a:	6129      	str	r1, [r5, #16]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800627c:	3801      	subs	r0, #1
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800627e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006280:	6169      	str	r1, [r5, #20]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006282:	6829      	ldr	r1, [r5, #0]
 8006284:	f421 51f8 	bic.w	r1, r1, #7936	; 0x1f00
 8006288:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800628c:	4620      	mov	r0, r4
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800628e:	6029      	str	r1, [r5, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006290:	2120      	movs	r1, #32
 8006292:	9200      	str	r2, [sp, #0]
 8006294:	4632      	mov	r2, r6
 8006296:	f7ff ff95 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800629a:	bb48      	cbnz	r0, 80062f0 <HAL_OSPI_Init+0xdc>
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062a0:	68d9      	ldr	r1, [r3, #12]
 80062a2:	3a01      	subs	r2, #1
 80062a4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80062a8:	430a      	orrs	r2, r1
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80062aa:	68a1      	ldr	r1, [r4, #8]
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80062ac:	60da      	str	r2, [r3, #12]
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b4:	430a      	orrs	r2, r1
 80062b6:	601a      	str	r2, [r3, #0]
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80062b8:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80062bc:	e9d4 250a 	ldrd	r2, r5, [r4, #40]	; 0x28
 80062c0:	f021 41a0 	bic.w	r1, r1, #1342177280	; 0x50000000
 80062c4:	432a      	orrs	r2, r5
 80062c6:	430a      	orrs	r2, r1
 80062c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        __HAL_OSPI_ENABLE(hospi);
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80062d4:	69a2      	ldr	r2, [r4, #24]
 80062d6:	2a02      	cmp	r2, #2
 80062d8:	d103      	bne.n	80062e2 <HAL_OSPI_Init+0xce>
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	f042 0202 	orr.w	r2, r2, #2
 80062e0:	609a      	str	r2, [r3, #8]
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80062e2:	68e3      	ldr	r3, [r4, #12]
 80062e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80062e8:	bf0c      	ite	eq
 80062ea:	2301      	moveq	r3, #1
          hospi->State = HAL_OSPI_STATE_READY;
 80062ec:	2302      	movne	r3, #2
 80062ee:	6523      	str	r3, [r4, #80]	; 0x50
}
 80062f0:	b005      	add	sp, #20
 80062f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_ERROR;
 80062f4:	2001      	movs	r0, #1
 80062f6:	e7fb      	b.n	80062f0 <HAL_OSPI_Init+0xdc>
 80062f8:	f8e0f8f4 	.word	0xf8e0f8f4

080062fc <HAL_OSPI_DeInit>:
{
 80062fc:	b510      	push	{r4, lr}
  if (hospi == NULL)
 80062fe:	4604      	mov	r4, r0
 8006300:	b168      	cbz	r0, 800631e <HAL_OSPI_DeInit+0x22>
     __HAL_OSPI_DISABLE(hospi);
 8006302:	6803      	ldr	r3, [r0, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	f022 0201 	bic.w	r2, r2, #1
 800630a:	601a      	str	r2, [r3, #0]
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	f022 0202 	bic.w	r2, r2, #2
 8006312:	609a      	str	r2, [r3, #8]
     HAL_OSPI_MspDeInit(hospi);
 8006314:	f7fa ffb8 	bl	8001288 <HAL_OSPI_MspDeInit>
     hospi->State = HAL_OSPI_STATE_RESET;
 8006318:	2000      	movs	r0, #0
 800631a:	6520      	str	r0, [r4, #80]	; 0x50
}
 800631c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800631e:	2001      	movs	r0, #1
 8006320:	e7fc      	b.n	800631c <HAL_OSPI_DeInit+0x20>

08006322 <HAL_OSPI_Command>:
{
 8006322:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006324:	4604      	mov	r4, r0
 8006326:	4616      	mov	r6, r2
 8006328:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800632a:	f7fe f941 	bl	80045b0 <HAL_GetTick>
  state = hospi->State;
 800632e:	6d22      	ldr	r2, [r4, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 8006330:	4603      	mov	r3, r0
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006332:	2a02      	cmp	r2, #2
 8006334:	d107      	bne.n	8006346 <HAL_OSPI_Command+0x24>
 8006336:	68e2      	ldr	r2, [r4, #12]
 8006338:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 800633c:	d109      	bne.n	8006352 <HAL_OSPI_Command+0x30>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800633e:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006340:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006342:	6563      	str	r3, [r4, #84]	; 0x54
 8006344:	e01f      	b.n	8006386 <HAL_OSPI_Command+0x64>
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8006346:	2a14      	cmp	r2, #20
 8006348:	d11f      	bne.n	800638a <HAL_OSPI_Command+0x68>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800634a:	682a      	ldr	r2, [r5, #0]
 800634c:	3a02      	subs	r2, #2
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800634e:	2a01      	cmp	r2, #1
 8006350:	d8f5      	bhi.n	800633e <HAL_OSPI_Command+0x1c>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006352:	2200      	movs	r2, #0
 8006354:	2120      	movs	r1, #32
 8006356:	4620      	mov	r0, r4
 8006358:	9600      	str	r6, [sp, #0]
 800635a:	9303      	str	r3, [sp, #12]
 800635c:	f7ff ff32 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006360:	b988      	cbnz	r0, 8006386 <HAL_OSPI_Command+0x64>
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006362:	6560      	str	r0, [r4, #84]	; 0x54
      status = OSPI_ConfigCmd(hospi, cmd);
 8006364:	4629      	mov	r1, r5
 8006366:	4620      	mov	r0, r4
 8006368:	f7ff fe4a 	bl	8006000 <OSPI_ConfigCmd>
      if (status == HAL_OK)
 800636c:	b958      	cbnz	r0, 8006386 <HAL_OSPI_Command+0x64>
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800636e:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	b992      	cbnz	r2, 800639a <HAL_OSPI_Command+0x78>
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8006374:	2201      	movs	r2, #1
 8006376:	2102      	movs	r1, #2
 8006378:	4620      	mov	r0, r4
 800637a:	9600      	str	r6, [sp, #0]
 800637c:	f7ff ff22 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	2202      	movs	r2, #2
 8006384:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006386:	b004      	add	sp, #16
 8006388:	bd70      	pop	{r4, r5, r6, pc}
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 800638a:	2a24      	cmp	r2, #36	; 0x24
 800638c:	d1d7      	bne.n	800633e <HAL_OSPI_Command+0x1c>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 800638e:	682a      	ldr	r2, [r5, #0]
 8006390:	f022 0202 	bic.w	r2, r2, #2
 8006394:	2a01      	cmp	r2, #1
 8006396:	d1d2      	bne.n	800633e <HAL_OSPI_Command+0x1c>
 8006398:	e7db      	b.n	8006352 <HAL_OSPI_Command+0x30>
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800639a:	682b      	ldr	r3, [r5, #0]
 800639c:	b90b      	cbnz	r3, 80063a2 <HAL_OSPI_Command+0x80>
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800639e:	2304      	movs	r3, #4
 80063a0:	e005      	b.n	80063ae <HAL_OSPI_Command+0x8c>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d105      	bne.n	80063b2 <HAL_OSPI_Command+0x90>
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80063a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063a8:	2b24      	cmp	r3, #36	; 0x24
 80063aa:	d0f8      	beq.n	800639e <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80063ac:	2314      	movs	r3, #20
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80063ae:	6523      	str	r3, [r4, #80]	; 0x50
 80063b0:	e7e9      	b.n	8006386 <HAL_OSPI_Command+0x64>
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d1e7      	bne.n	8006386 <HAL_OSPI_Command+0x64>
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80063b6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063b8:	2b14      	cmp	r3, #20
 80063ba:	d0f0      	beq.n	800639e <HAL_OSPI_Command+0x7c>
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80063bc:	2324      	movs	r3, #36	; 0x24
 80063be:	e7f6      	b.n	80063ae <HAL_OSPI_Command+0x8c>

080063c0 <HAL_OSPI_HyperbusCfg>:
{
 80063c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063c2:	4604      	mov	r4, r0
 80063c4:	4616      	mov	r6, r2
 80063c6:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80063c8:	f7fe f8f2 	bl	80045b0 <HAL_GetTick>
  state = hospi->State;
 80063cc:	6d22      	ldr	r2, [r4, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 80063ce:	4603      	mov	r3, r0
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 80063d0:	3a01      	subs	r2, #1
 80063d2:	2a01      	cmp	r2, #1
 80063d4:	d816      	bhi.n	8006404 <HAL_OSPI_HyperbusCfg+0x44>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2120      	movs	r1, #32
 80063da:	4620      	mov	r0, r4
 80063dc:	9600      	str	r6, [sp, #0]
 80063de:	f7ff fef1 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80063e2:	b968      	cbnz	r0, 8006400 <HAL_OSPI_HyperbusCfg+0x40>
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 80063e4:	6822      	ldr	r2, [r4, #0]
 80063e6:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
 80063ea:	430b      	orrs	r3, r1
 80063ec:	6829      	ldr	r1, [r5, #0]
 80063ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80063f2:	6869      	ldr	r1, [r5, #4]
 80063f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80063f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
      hospi->State = HAL_OSPI_STATE_READY;
 80063fc:	2302      	movs	r3, #2
 80063fe:	6523      	str	r3, [r4, #80]	; 0x50
}
 8006400:	b002      	add	sp, #8
 8006402:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006404:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006406:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006408:	6563      	str	r3, [r4, #84]	; 0x54
 800640a:	e7f9      	b.n	8006400 <HAL_OSPI_HyperbusCfg+0x40>

0800640c <HAL_OSPI_HyperbusCmd>:
{
 800640c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800640e:	4604      	mov	r4, r0
 8006410:	4616      	mov	r6, r2
 8006412:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006414:	f7fe f8cc 	bl	80045b0 <HAL_GetTick>
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 8006418:	6d22      	ldr	r2, [r4, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 800641a:	4603      	mov	r3, r0
  if ((hospi->State == HAL_OSPI_STATE_READY) && (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS))
 800641c:	2a02      	cmp	r2, #2
 800641e:	d127      	bne.n	8006470 <HAL_OSPI_HyperbusCmd+0x64>
 8006420:	68e2      	ldr	r2, [r4, #12]
 8006422:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8006426:	d123      	bne.n	8006470 <HAL_OSPI_HyperbusCmd+0x64>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006428:	2200      	movs	r2, #0
 800642a:	2120      	movs	r1, #32
 800642c:	4620      	mov	r0, r4
 800642e:	9600      	str	r6, [sp, #0]
 8006430:	f7ff fec8 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8006434:	b9d0      	cbnz	r0, 800646c <HAL_OSPI_HyperbusCmd+0x60>
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8006436:	6823      	ldr	r3, [r4, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006438:	6829      	ldr	r1, [r5, #0]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006440:	601a      	str	r2, [r3, #0]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006448:	430a      	orrs	r2, r1
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800644a:	68a9      	ldr	r1, [r5, #8]
      MODIFY_REG(hospi->Instance->DCR1, OCTOSPI_DCR1_MTYP_0, cmd->AddressSpace);
 800644c:	609a      	str	r2, [r3, #8]
      WRITE_REG(hospi->Instance->CCR, (cmd->DQSMode | OCTOSPI_CCR_DDTR | OCTOSPI_CCR_DMODE_2 |
 800644e:	692a      	ldr	r2, [r5, #16]
 8006450:	430a      	orrs	r2, r1
 8006452:	f042 220c 	orr.w	r2, r2, #201329664	; 0xc000c00
 8006456:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
      WRITE_REG(hospi->Instance->WCCR, (cmd->DQSMode | OCTOSPI_WCCR_DDTR | OCTOSPI_WCCR_DMODE_2 |
 800645a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
      WRITE_REG(hospi->Instance->DLR, (cmd->NbData - 1U));
 800645e:	68ea      	ldr	r2, [r5, #12]
 8006460:	3a01      	subs	r2, #1
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
      WRITE_REG(hospi->Instance->AR, cmd->Address);
 8006464:	686a      	ldr	r2, [r5, #4]
 8006466:	649a      	str	r2, [r3, #72]	; 0x48
      hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8006468:	2304      	movs	r3, #4
 800646a:	6523      	str	r3, [r4, #80]	; 0x50
}
 800646c:	b002      	add	sp, #8
 800646e:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006470:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006472:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006474:	6563      	str	r3, [r4, #84]	; 0x54
 8006476:	e7f9      	b.n	800646c <HAL_OSPI_HyperbusCmd+0x60>

08006478 <HAL_OSPI_Transmit>:
{
 8006478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800647a:	460f      	mov	r7, r1
 800647c:	b085      	sub	sp, #20
 800647e:	4604      	mov	r4, r0
 8006480:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8006482:	f7fe f895 	bl	80045b0 <HAL_GetTick>
 8006486:	4603      	mov	r3, r0
  if (pData == NULL)
 8006488:	b91f      	cbnz	r7, 8006492 <HAL_OSPI_Transmit+0x1a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800648a:	2308      	movs	r3, #8
      status = HAL_ERROR;
 800648c:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800648e:	6563      	str	r3, [r4, #84]	; 0x54
 8006490:	e02e      	b.n	80064f0 <HAL_OSPI_Transmit+0x78>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006492:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006494:	2a04      	cmp	r2, #4
 8006496:	d12d      	bne.n	80064f4 <HAL_OSPI_Transmit+0x7c>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006498:	6826      	ldr	r6, [r4, #0]
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800649a:	6c32      	ldr	r2, [r6, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 800649c:	6427      	str	r7, [r4, #64]	; 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800649e:	3201      	adds	r2, #1
 80064a0:	64a2      	str	r2, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 80064a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80064a4:	6462      	str	r2, [r4, #68]	; 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80064a6:	6832      	ldr	r2, [r6, #0]
 80064a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80064ac:	6032      	str	r2, [r6, #0]
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 80064ae:	2201      	movs	r2, #1
 80064b0:	2104      	movs	r1, #4
 80064b2:	4620      	mov	r0, r4
 80064b4:	9500      	str	r5, [sp, #0]
 80064b6:	9303      	str	r3, [sp, #12]
 80064b8:	f7ff fe84 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 80064bc:	b9c0      	cbnz	r0, 80064f0 <HAL_OSPI_Transmit+0x78>
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80064be:	6c22      	ldr	r2, [r4, #64]	; 0x40
      } while (hospi->XferCount > 0U);
 80064c0:	9b03      	ldr	r3, [sp, #12]
        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
        hospi->pBuffPtr++;
 80064c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064ca:	3201      	adds	r2, #1
 80064cc:	6422      	str	r2, [r4, #64]	; 0x40
        hospi->XferCount--;
 80064ce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80064d0:	3a01      	subs	r2, #1
 80064d2:	64a2      	str	r2, [r4, #72]	; 0x48
      } while (hospi->XferCount > 0U);
 80064d4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80064d6:	2a00      	cmp	r2, #0
 80064d8:	d1e9      	bne.n	80064ae <HAL_OSPI_Transmit+0x36>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80064da:	2201      	movs	r2, #1
 80064dc:	2102      	movs	r1, #2
 80064de:	4620      	mov	r0, r4
 80064e0:	9500      	str	r5, [sp, #0]
 80064e2:	f7ff fe6f 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 80064e6:	b918      	cbnz	r0, 80064f0 <HAL_OSPI_Transmit+0x78>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80064e8:	2302      	movs	r3, #2
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 80064ee:	6523      	str	r3, [r4, #80]	; 0x50
}
 80064f0:	b005      	add	sp, #20
 80064f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80064f4:	2310      	movs	r3, #16
 80064f6:	e7c9      	b.n	800648c <HAL_OSPI_Transmit+0x14>

080064f8 <HAL_OSPI_Receive>:
{
 80064f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064fa:	4604      	mov	r4, r0
 80064fc:	b085      	sub	sp, #20
 80064fe:	460f      	mov	r7, r1
 8006500:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8006502:	f7fe f855 	bl	80045b0 <HAL_GetTick>
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8006506:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8006508:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 800650a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 800650c:	f8d5 c110 	ldr.w	ip, [r5, #272]	; 0x110
  if (pData == NULL)
 8006510:	b91f      	cbnz	r7, 800651a <HAL_OSPI_Receive+0x22>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006512:	2308      	movs	r3, #8
      status = HAL_ERROR;
 8006514:	2001      	movs	r0, #1
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006516:	6563      	str	r3, [r4, #84]	; 0x54
 8006518:	e034      	b.n	8006584 <HAL_OSPI_Receive+0x8c>
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800651a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800651c:	2a04      	cmp	r2, #4
 800651e:	d13b      	bne.n	8006598 <HAL_OSPI_Receive+0xa0>
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006520:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      hospi->pBuffPtr  = pData;
 8006522:	6427      	str	r7, [r4, #64]	; 0x40
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8006524:	3201      	adds	r2, #1
 8006526:	64a2      	str	r2, [r4, #72]	; 0x48
      hospi->XferSize  = hospi->XferCount;
 8006528:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800652a:	6462      	str	r2, [r4, #68]	; 0x44
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800652c:	6829      	ldr	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800652e:	68e2      	ldr	r2, [r4, #12]
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006530:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006534:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006538:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800653c:	6029      	str	r1, [r5, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800653e:	d123      	bne.n	8006588 <HAL_OSPI_Receive+0x90>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006540:	64a8      	str	r0, [r5, #72]	; 0x48
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8006542:	2201      	movs	r2, #1
 8006544:	2106      	movs	r1, #6
 8006546:	4620      	mov	r0, r4
 8006548:	9600      	str	r6, [sp, #0]
 800654a:	9303      	str	r3, [sp, #12]
 800654c:	f7ff fe3a 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8006550:	b9c0      	cbnz	r0, 8006584 <HAL_OSPI_Receive+0x8c>
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8006552:	f895 1050 	ldrb.w	r1, [r5, #80]	; 0x50
 8006556:	6c22      	ldr	r2, [r4, #64]	; 0x40
      } while(hospi->XferCount > 0U);
 8006558:	9b03      	ldr	r3, [sp, #12]
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800655a:	7011      	strb	r1, [r2, #0]
        hospi->pBuffPtr++;
 800655c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800655e:	3201      	adds	r2, #1
 8006560:	6422      	str	r2, [r4, #64]	; 0x40
        hospi->XferCount--;
 8006562:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006564:	3a01      	subs	r2, #1
 8006566:	64a2      	str	r2, [r4, #72]	; 0x48
      } while(hospi->XferCount > 0U);
 8006568:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800656a:	2a00      	cmp	r2, #0
 800656c:	d1e9      	bne.n	8006542 <HAL_OSPI_Receive+0x4a>
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800656e:	2201      	movs	r2, #1
 8006570:	2102      	movs	r1, #2
 8006572:	4620      	mov	r0, r4
 8006574:	9600      	str	r6, [sp, #0]
 8006576:	f7ff fe25 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800657a:	b918      	cbnz	r0, 8006584 <HAL_OSPI_Receive+0x8c>
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800657c:	2302      	movs	r3, #2
 800657e:	6822      	ldr	r2, [r4, #0]
 8006580:	6253      	str	r3, [r2, #36]	; 0x24
          hospi->State = HAL_OSPI_STATE_READY;
 8006582:	6523      	str	r3, [r4, #80]	; 0x50
}
 8006584:	b005      	add	sp, #20
 8006586:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006588:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
 800658c:	f412 6fe0 	tst.w	r2, #1792	; 0x700
 8006590:	d1d6      	bne.n	8006540 <HAL_OSPI_Receive+0x48>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8006592:	f8c5 c110 	str.w	ip, [r5, #272]	; 0x110
 8006596:	e7d4      	b.n	8006542 <HAL_OSPI_Receive+0x4a>
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006598:	2310      	movs	r3, #16
 800659a:	e7bb      	b.n	8006514 <HAL_OSPI_Receive+0x1c>

0800659c <HAL_OSPI_AutoPolling>:
{
 800659c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	4616      	mov	r6, r2
 80065a4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 80065a6:	f7fe f803 	bl	80045b0 <HAL_GetTick>
  uint32_t addr_reg = hospi->Instance->AR;
 80065aa:	6822      	ldr	r2, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80065ac:	4603      	mov	r3, r0
  uint32_t addr_reg = hospi->Instance->AR;
 80065ae:	6c97      	ldr	r7, [r2, #72]	; 0x48
  uint32_t ir_reg = hospi->Instance->IR;
 80065b0:	f8d2 8110 	ldr.w	r8, [r2, #272]	; 0x110
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 80065b4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80065b6:	2a04      	cmp	r2, #4
 80065b8:	d13c      	bne.n	8006634 <HAL_OSPI_AutoPolling+0x98>
 80065ba:	68ea      	ldr	r2, [r5, #12]
 80065bc:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80065c0:	d138      	bne.n	8006634 <HAL_OSPI_AutoPolling+0x98>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80065c2:	9003      	str	r0, [sp, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	2120      	movs	r1, #32
 80065c8:	4620      	mov	r0, r4
 80065ca:	9600      	str	r6, [sp, #0]
 80065cc:	f7ff fdfa 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80065d0:	bb28      	cbnz	r0, 800661e <HAL_OSPI_AutoPolling+0x82>
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80065d2:	6829      	ldr	r1, [r5, #0]
 80065d4:	6822      	ldr	r2, [r4, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065d6:	9b03      	ldr	r3, [sp, #12]
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80065d8:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80065dc:	6869      	ldr	r1, [r5, #4]
 80065de:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80065e2:	6929      	ldr	r1, [r5, #16]
 80065e4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80065e8:	6810      	ldr	r0, [r2, #0]
 80065ea:	e9d5 1502 	ldrd	r1, r5, [r5, #8]
 80065ee:	f020 5043 	bic.w	r0, r0, #817889280	; 0x30c00000
 80065f2:	4329      	orrs	r1, r5
 80065f4:	4301      	orrs	r1, r0
 80065f6:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80065fa:	6011      	str	r1, [r2, #0]
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80065fc:	68e1      	ldr	r1, [r4, #12]
 80065fe:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006602:	d10f      	bne.n	8006624 <HAL_OSPI_AutoPolling+0x88>
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8006604:	6497      	str	r7, [r2, #72]	; 0x48
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8006606:	2201      	movs	r2, #1
 8006608:	2108      	movs	r1, #8
 800660a:	4620      	mov	r0, r4
 800660c:	9600      	str	r6, [sp, #0]
 800660e:	f7ff fdd9 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8006612:	b920      	cbnz	r0, 800661e <HAL_OSPI_AutoPolling+0x82>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	2208      	movs	r2, #8
 8006618:	625a      	str	r2, [r3, #36]	; 0x24
        hospi->State = HAL_OSPI_STATE_READY;
 800661a:	2302      	movs	r3, #2
 800661c:	6523      	str	r3, [r4, #80]	; 0x50
}
 800661e:	b004      	add	sp, #16
 8006620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8006624:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
 8006628:	f411 6fe0 	tst.w	r1, #1792	; 0x700
 800662c:	d1ea      	bne.n	8006604 <HAL_OSPI_AutoPolling+0x68>
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800662e:	f8c2 8110 	str.w	r8, [r2, #272]	; 0x110
 8006632:	e7e8      	b.n	8006606 <HAL_OSPI_AutoPolling+0x6a>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006634:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006636:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006638:	6563      	str	r3, [r4, #84]	; 0x54
 800663a:	e7f0      	b.n	800661e <HAL_OSPI_AutoPolling+0x82>

0800663c <HAL_OSPI_MemoryMapped>:
{
 800663c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800663e:	4604      	mov	r4, r0
 8006640:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8006642:	f7fd ffb5 	bl	80045b0 <HAL_GetTick>
 8006646:	4603      	mov	r3, r0
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8006648:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800664a:	2a04      	cmp	r2, #4
 800664c:	d121      	bne.n	8006692 <HAL_OSPI_MemoryMapped+0x56>
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800664e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8006650:	2120      	movs	r1, #32
 8006652:	4620      	mov	r0, r4
 8006654:	9200      	str	r2, [sp, #0]
 8006656:	2200      	movs	r2, #0
 8006658:	f7ff fdb4 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800665c:	b9b8      	cbnz	r0, 800668e <HAL_OSPI_MemoryMapped+0x52>
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 800665e:	682e      	ldr	r6, [r5, #0]
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006660:	2388      	movs	r3, #136	; 0x88
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8006662:	6822      	ldr	r2, [r4, #0]
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006664:	2e08      	cmp	r6, #8
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 8006666:	6523      	str	r3, [r4, #80]	; 0x50
      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8006668:	d108      	bne.n	800667c <HAL_OSPI_MemoryMapped+0x40>
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 800666a:	686b      	ldr	r3, [r5, #4]
 800666c:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 8006670:	2310      	movs	r3, #16
 8006672:	6253      	str	r3, [r2, #36]	; 0x24
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 8006674:	6811      	ldr	r1, [r2, #0]
 8006676:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800667a:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 800667c:	6813      	ldr	r3, [r2, #0]
 800667e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006682:	f023 0308 	bic.w	r3, r3, #8
 8006686:	4333      	orrs	r3, r6
 8006688:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 800668c:	6013      	str	r3, [r2, #0]
}
 800668e:	b002      	add	sp, #8
 8006690:	bd70      	pop	{r4, r5, r6, pc}
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006692:	2310      	movs	r3, #16
    status = HAL_ERROR;
 8006694:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006696:	6563      	str	r3, [r4, #84]	; 0x54
 8006698:	e7f9      	b.n	800668e <HAL_OSPI_MemoryMapped+0x52>

0800669a <HAL_OSPI_Abort>:
{
 800669a:	b530      	push	{r4, r5, lr}
 800669c:	4604      	mov	r4, r0
 800669e:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 80066a0:	f7fd ff86 	bl	80045b0 <HAL_GetTick>
 80066a4:	4603      	mov	r3, r0
  state = hospi->State;
 80066a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 80066a8:	f012 0f0c 	tst.w	r2, #12
 80066ac:	d035      	beq.n	800671a <HAL_OSPI_Abort+0x80>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80066ae:	6821      	ldr	r1, [r4, #0]
 80066b0:	680a      	ldr	r2, [r1, #0]
 80066b2:	f012 0204 	ands.w	r2, r2, #4
 80066b6:	d02b      	beq.n	8006710 <HAL_OSPI_Abort+0x76>
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80066b8:	680a      	ldr	r2, [r1, #0]
 80066ba:	9003      	str	r0, [sp, #12]
 80066bc:	f022 0204 	bic.w	r2, r2, #4
      status = HAL_MDMA_Abort(hospi->hmdma);
 80066c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80066c2:	600a      	str	r2, [r1, #0]
      status = HAL_MDMA_Abort(hospi->hmdma);
 80066c4:	f7ff fc64 	bl	8005f90 <HAL_MDMA_Abort>
      if (status != HAL_OK)
 80066c8:	9b03      	ldr	r3, [sp, #12]
 80066ca:	b108      	cbz	r0, 80066d0 <HAL_OSPI_Abort+0x36>
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80066cc:	2204      	movs	r2, #4
 80066ce:	6562      	str	r2, [r4, #84]	; 0x54
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	6a11      	ldr	r1, [r2, #32]
 80066d4:	0689      	lsls	r1, r1, #26
 80066d6:	d51d      	bpl.n	8006714 <HAL_OSPI_Abort+0x7a>
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80066d8:	6811      	ldr	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80066da:	4620      	mov	r0, r4
 80066dc:	9303      	str	r3, [sp, #12]
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80066de:	f041 0102 	orr.w	r1, r1, #2
 80066e2:	6011      	str	r1, [r2, #0]
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80066e4:	2102      	movs	r1, #2
 80066e6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80066e8:	9200      	str	r2, [sp, #0]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f7ff fd6a 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80066f0:	9b03      	ldr	r3, [sp, #12]
 80066f2:	b958      	cbnz	r0, 800670c <HAL_OSPI_Abort+0x72>
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80066f4:	6822      	ldr	r2, [r4, #0]
 80066f6:	2502      	movs	r5, #2
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80066f8:	2120      	movs	r1, #32
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80066fa:	6255      	str	r5, [r2, #36]	; 0x24
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80066fc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80066fe:	9200      	str	r2, [sp, #0]
 8006700:	4602      	mov	r2, r0
 8006702:	4620      	mov	r0, r4
 8006704:	f7ff fd5e 	bl	80061c4 <OSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8006708:	b900      	cbnz	r0, 800670c <HAL_OSPI_Abort+0x72>
          hospi->State = HAL_OSPI_STATE_READY;
 800670a:	6525      	str	r5, [r4, #80]	; 0x50
}
 800670c:	b005      	add	sp, #20
 800670e:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8006710:	4610      	mov	r0, r2
 8006712:	e7dd      	b.n	80066d0 <HAL_OSPI_Abort+0x36>
      hospi->State = HAL_OSPI_STATE_READY;
 8006714:	2302      	movs	r3, #2
 8006716:	6523      	str	r3, [r4, #80]	; 0x50
 8006718:	e7f8      	b.n	800670c <HAL_OSPI_Abort+0x72>
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800671a:	2310      	movs	r3, #16
    status = HAL_ERROR;
 800671c:	2001      	movs	r0, #1
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800671e:	6563      	str	r3, [r4, #84]	; 0x54
 8006720:	e7f4      	b.n	800670c <HAL_OSPI_Abort+0x72>
	...

08006724 <HAL_OSPIM_Config>:
    other_instance = 0U;
 8006724:	4ba5      	ldr	r3, [pc, #660]	; (80069bc <HAL_OSPIM_Config+0x298>)
  if (hospi->Instance == OCTOSPI1)
 8006726:	6802      	ldr	r2, [r0, #0]
{
 8006728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    other_instance = 0U;
 800672c:	429a      	cmp	r2, r3
{
 800672e:	b08f      	sub	sp, #60	; 0x3c
    instance = 1U;
 8006730:	f04f 0501 	mov.w	r5, #1
    status = HAL_ERROR;
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8006734:	f04f 0700 	mov.w	r7, #0
    other_instance = 0U;
 8006738:	bf0b      	itete	eq
 800673a:	f04f 0801 	moveq.w	r8, #1
 800673e:	f04f 0800 	movne.w	r8, #0
 8006742:	2400      	moveq	r4, #0
 8006744:	2401      	movne	r4, #1
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006746:	ab02      	add	r3, sp, #8
    cfg->IOLowPort  = 0U;
    cfg->IOHighPort = 0U;

    if (instance_nb == 2U)
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006748:	f8df e278 	ldr.w	lr, [pc, #632]	; 80069c4 <HAL_OSPIM_Config+0x2a0>
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
               | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800674c:	f8df 9278 	ldr.w	r9, [pc, #632]	; 80069c8 <HAL_OSPIM_Config+0x2a4>
    if (instance_nb == 2U)
 8006750:	2d02      	cmp	r5, #2
    cfg->IOHighPort = 0U;
 8006752:	611f      	str	r7, [r3, #16]
    cfg->DQSPort    = 0U;
 8006754:	e9c3 7700 	strd	r7, r7, [r3]
    cfg->IOLowPort  = 0U;
 8006758:	e9c3 7702 	strd	r7, r7, [r3, #8]
    if (instance_nb == 2U)
 800675c:	f040 812a 	bne.w	80069b4 <HAL_OSPIM_Config+0x290>
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8006760:	f8de 2000 	ldr.w	r2, [lr]
        value = OCTOSPIM_PCR_NCSSRC;
 8006764:	f012 0f01 	tst.w	r2, #1
 8006768:	bf0c      	ite	eq
 800676a:	464e      	moveq	r6, r9
 800676c:	f44f 7600 	movne.w	r6, #512	; 0x200
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8006770:	f04f 0c00 	mov.w	ip, #0
    {
      reg = OCTOSPIM->PCR[index];
 8006774:	eb0e 028c 	add.w	r2, lr, ip, lsl #2
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8006778:	f10c 0001 	add.w	r0, ip, #1
      reg = OCTOSPIM->PCR[index];
 800677c:	6852      	ldr	r2, [r2, #4]
      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800677e:	f012 0f01 	tst.w	r2, #1
 8006782:	d005      	beq.n	8006790 <HAL_OSPIM_Config+0x6c>
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8006784:	ea82 0c06 	eor.w	ip, r2, r6
 8006788:	f01c 0f02 	tst.w	ip, #2
          cfg->ClkPort = index+1U;
 800678c:	bf08      	it	eq
 800678e:	6018      	streq	r0, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8006790:	f012 0f10 	tst.w	r2, #16
 8006794:	d005      	beq.n	80067a2 <HAL_OSPIM_Config+0x7e>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8006796:	ea82 0c06 	eor.w	ip, r2, r6
 800679a:	f01c 0f20 	tst.w	ip, #32
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800679e:	bf08      	it	eq
 80067a0:	6058      	streq	r0, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80067a2:	f412 7f80 	tst.w	r2, #256	; 0x100
 80067a6:	d005      	beq.n	80067b4 <HAL_OSPIM_Config+0x90>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80067a8:	ea82 0c06 	eor.w	ip, r2, r6
 80067ac:	f41c 7f00 	tst.w	ip, #512	; 0x200
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80067b0:	bf08      	it	eq
 80067b2:	6098      	streq	r0, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80067b4:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80067b8:	d00d      	beq.n	80067d6 <HAL_OSPIM_Config+0xb2>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80067ba:	ea82 0c06 	eor.w	ip, r2, r6
 80067be:	f41c 2f80 	tst.w	ip, #262144	; 0x40000
 80067c2:	d108      	bne.n	80067d6 <HAL_OSPIM_Config+0xb2>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80067c4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80067c8:	bf0c      	ite	eq
 80067ca:	f440 3c80 	orreq.w	ip, r0, #65536	; 0x10000
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80067ce:	f040 7c80 	orrne.w	ip, r0, #16777216	; 0x1000000
 80067d2:	f8c3 c00c 	str.w	ip, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80067d6:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 80067da:	d00b      	beq.n	80067f4 <HAL_OSPIM_Config+0xd0>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80067dc:	ea82 0c06 	eor.w	ip, r2, r6
 80067e0:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
 80067e4:	d106      	bne.n	80067f4 <HAL_OSPIM_Config+0xd0>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80067e6:	0192      	lsls	r2, r2, #6
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80067e8:	bf54      	ite	pl
 80067ea:	f440 3280 	orrpl.w	r2, r0, #65536	; 0x10000
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80067ee:	f040 7280 	orrmi.w	r2, r0, #16777216	; 0x1000000
 80067f2:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80067f4:	2802      	cmp	r0, #2
 80067f6:	f04f 0c01 	mov.w	ip, #1
 80067fa:	d1bb      	bne.n	8006774 <HAL_OSPIM_Config+0x50>
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80067fc:	2d02      	cmp	r5, #2
 80067fe:	f103 0318 	add.w	r3, r3, #24
 8006802:	f040 80d5 	bne.w	80069b0 <HAL_OSPIM_Config+0x28c>
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006806:	4a6d      	ldr	r2, [pc, #436]	; (80069bc <HAL_OSPIM_Config+0x298>)
 8006808:	6815      	ldr	r5, [r2, #0]
 800680a:	ea15 050c 	ands.w	r5, r5, ip
 800680e:	d004      	beq.n	800681a <HAL_OSPIM_Config+0xf6>
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006810:	6813      	ldr	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006812:	4665      	mov	r5, ip
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	6013      	str	r3, [r2, #0]
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800681a:	4b69      	ldr	r3, [pc, #420]	; (80069c0 <HAL_OSPIM_Config+0x29c>)
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	07d0      	lsls	r0, r2, #31
 8006820:	f140 80ca 	bpl.w	80069b8 <HAL_OSPIM_Config+0x294>
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	601a      	str	r2, [r3, #0]
      ospi_enabled |= 0x2U;
 800682c:	f045 0302 	orr.w	r3, r5, #2
 8006830:	9301      	str	r3, [sp, #4]
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006832:	ab0e      	add	r3, sp, #56	; 0x38
 8006834:	2018      	movs	r0, #24
 8006836:	fb00 3004 	mla	r0, r0, r4, r3
 800683a:	4b62      	ldr	r3, [pc, #392]	; (80069c4 <HAL_OSPIM_Config+0x2a0>)
 800683c:	f850 2c28 	ldr.w	r2, [r0, #-40]
 8006840:	3a01      	subs	r2, #1
 8006842:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006846:	6857      	ldr	r7, [r2, #4]
 8006848:	f427 7780 	bic.w	r7, r7, #256	; 0x100
 800684c:	6057      	str	r7, [r2, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	07d2      	lsls	r2, r2, #31
 8006852:	f140 80bd 	bpl.w	80069d0 <HAL_OSPIM_Config+0x2ac>
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	f022 0201 	bic.w	r2, r2, #1
 800685c:	601a      	str	r2, [r3, #0]
      if (other_instance == 1U)
 800685e:	f1b8 0f00 	cmp.w	r8, #0
 8006862:	d02c      	beq.n	80068be <HAL_OSPIM_Config+0x19a>
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKSRC);
 8006864:	9a08      	ldr	r2, [sp, #32]
 8006866:	3a01      	subs	r2, #1
 8006868:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800686c:	6850      	ldr	r0, [r2, #4]
 800686e:	f040 0002 	orr.w	r0, r0, #2
 8006872:	6050      	str	r0, [r2, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006874:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006876:	b132      	cbz	r2, 8006886 <HAL_OSPIM_Config+0x162>
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSSRC);
 8006878:	3a01      	subs	r2, #1
 800687a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	f042 0220 	orr.w	r2, r2, #32
 8006884:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006888:	b15b      	cbz	r3, 80068a2 <HAL_OSPIM_Config+0x17e>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLSRC_1);
 800688a:	3b01      	subs	r3, #1
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006896:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80068a0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80068a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068a4:	b15b      	cbz	r3, 80068be <HAL_OSPIM_Config+0x19a>
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHSRC_1);
 80068a6:	3b01      	subs	r3, #1
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 80068b2:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80068bc:	605a      	str	r2, [r3, #4]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80068be:	ab0e      	add	r3, sp, #56	; 0x38
 80068c0:	f04f 0918 	mov.w	r9, #24
 80068c4:	f8d1 c000 	ldr.w	ip, [r1]
 80068c8:	fb09 3908 	mla	r9, r9, r8, r3
 80068cc:	f859 ac30 	ldr.w	sl, [r9, #-48]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80068d0:	f859 0c20 	ldr.w	r0, [r9, #-32]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80068d4:	45d4      	cmp	ip, sl
 80068d6:	f859 bc2c 	ldr.w	fp, [r9, #-44]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80068da:	e9d1 7e01 	ldrd	r7, lr, [r1, #4]
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80068de:	e9d1 2303 	ldrd	r2, r3, [r1, #12]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80068e2:	f000 80b3 	beq.w	8006a4c <HAL_OSPIM_Config+0x328>
 80068e6:	45bb      	cmp	fp, r7
 80068e8:	d00a      	beq.n	8006900 <HAL_OSPIM_Config+0x1dc>
 80068ea:	f859 6c28 	ldr.w	r6, [r9, #-40]
 80068ee:	4576      	cmp	r6, lr
 80068f0:	d006      	beq.n	8006900 <HAL_OSPIM_Config+0x1dc>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80068f2:	f859 9c24 	ldr.w	r9, [r9, #-36]
 80068f6:	4591      	cmp	r9, r2
 80068f8:	d002      	beq.n	8006900 <HAL_OSPIM_Config+0x1dc>
 80068fa:	4298      	cmp	r0, r3
 80068fc:	f040 80b9 	bne.w	8006a72 <HAL_OSPIM_Config+0x34e>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8006900:	f10a 39ff 	add.w	r9, sl, #4294967295
 8006904:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80069c4 <HAL_OSPIM_Config+0x2a0>
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006908:	ae0e      	add	r6, sp, #56	; 0x38
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800690a:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 800690e:	f8d9 b004 	ldr.w	fp, [r9, #4]
 8006912:	f02b 0b01 	bic.w	fp, fp, #1
 8006916:	f8c9 b004 	str.w	fp, [r9, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800691a:	f04f 0918 	mov.w	r9, #24
 800691e:	fb09 6908 	mla	r9, r9, r8, r6
 8006922:	f859 9c2c 	ldr.w	r9, [r9, #-44]
 8006926:	f1b9 0f00 	cmp.w	r9, #0
 800692a:	d009      	beq.n	8006940 <HAL_OSPIM_Config+0x21c>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800692c:	f109 39ff 	add.w	r9, r9, #4294967295
 8006930:	eb0a 0989 	add.w	r9, sl, r9, lsl #2
 8006934:	f8d9 a004 	ldr.w	sl, [r9, #4]
 8006938:	f02a 0a10 	bic.w	sl, sl, #16
 800693c:	f8c9 a004 	str.w	sl, [r9, #4]
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8006940:	f04f 0918 	mov.w	r9, #24
 8006944:	ae0e      	add	r6, sp, #56	; 0x38
 8006946:	fb09 6808 	mla	r8, r9, r8, r6
 800694a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80069cc <HAL_OSPIM_Config+0x2a8>
 800694e:	f858 6c28 	ldr.w	r6, [r8, #-40]
 8006952:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006956:	44d1      	add	r9, sl
 8006958:	f8d9 a004 	ldr.w	sl, [r9, #4]
 800695c:	f42a 7a80 	bic.w	sl, sl, #256	; 0x100
 8006960:	f8c9 a004 	str.w	sl, [r9, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006964:	f858 8c24 	ldr.w	r8, [r8, #-36]
 8006968:	f1b8 0f00 	cmp.w	r8, #0
 800696c:	d00f      	beq.n	800698e <HAL_OSPIM_Config+0x26a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800696e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006972:	f008 0801 	and.w	r8, r8, #1
 8006976:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800697a:	f108 48a4 	add.w	r8, r8, #1375731712	; 0x52000000
 800697e:	f508 4834 	add.w	r8, r8, #46080	; 0xb400
 8006982:	f8d8 9004 	ldr.w	r9, [r8, #4]
 8006986:	f429 3980 	bic.w	r9, r9, #65536	; 0x10000
 800698a:	f8c8 9004 	str.w	r9, [r8, #4]
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800698e:	2800      	cmp	r0, #0
 8006990:	d06f      	beq.n	8006a72 <HAL_OSPIM_Config+0x34e>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006992:	3801      	subs	r0, #1
 8006994:	f000 0001 	and.w	r0, r0, #1
 8006998:	0080      	lsls	r0, r0, #2
 800699a:	f100 40a4 	add.w	r0, r0, #1375731712	; 0x52000000
 800699e:	f500 4034 	add.w	r0, r0, #46080	; 0xb400
 80069a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80069a6:	f028 7880 	bic.w	r8, r8, #16777216	; 0x1000000
 80069aa:	f8c0 8004 	str.w	r8, [r0, #4]
 80069ae:	e060      	b.n	8006a72 <HAL_OSPIM_Config+0x34e>
 80069b0:	4605      	mov	r5, r0
 80069b2:	e6cd      	b.n	8006750 <HAL_OSPIM_Config+0x2c>
  uint32_t value = 0U;
 80069b4:	2600      	movs	r6, #0
 80069b6:	e6db      	b.n	8006770 <HAL_OSPIM_Config+0x4c>
 80069b8:	9501      	str	r5, [sp, #4]
 80069ba:	e73a      	b.n	8006832 <HAL_OSPIM_Config+0x10e>
 80069bc:	52005000 	.word	0x52005000
 80069c0:	5200a000 	.word	0x5200a000
 80069c4:	5200b400 	.word	0x5200b400
 80069c8:	04040222 	.word	0x04040222
 80069cc:	5200b3fc 	.word	0x5200b3fc
      if (IOM_cfg[instance].ClkPort != 0U)
 80069d0:	f850 2c30 	ldr.w	r2, [r0, #-48]
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	f43f af72 	beq.w	80068be <HAL_OSPIM_Config+0x19a>
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80069da:	3a01      	subs	r2, #1
 80069dc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80069e0:	6857      	ldr	r7, [r2, #4]
 80069e2:	f027 0701 	bic.w	r7, r7, #1
 80069e6:	6057      	str	r7, [r2, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80069e8:	f850 2c2c 	ldr.w	r2, [r0, #-44]
 80069ec:	b132      	cbz	r2, 80069fc <HAL_OSPIM_Config+0x2d8>
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80069ee:	3a01      	subs	r2, #1
 80069f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	f022 0210 	bic.w	r2, r2, #16
 80069fa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80069fc:	2318      	movs	r3, #24
 80069fe:	aa0e      	add	r2, sp, #56	; 0x38
 8006a00:	fb03 2304 	mla	r3, r3, r4, r2
 8006a04:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8006a08:	b15b      	cbz	r3, 8006a22 <HAL_OSPIM_Config+0x2fe>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006a16:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006a20:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006a22:	2318      	movs	r3, #24
 8006a24:	aa0e      	add	r2, sp, #56	; 0x38
 8006a26:	fb03 2304 	mla	r3, r3, r4, r2
 8006a2a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f43f af45 	beq.w	80068be <HAL_OSPIM_Config+0x19a>
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006a34:	3b01      	subs	r3, #1
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006a40:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006a4a:	e737      	b.n	80068bc <HAL_OSPIM_Config+0x198>
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8006a4c:	45bb      	cmp	fp, r7
 8006a4e:	f47f af57 	bne.w	8006900 <HAL_OSPIM_Config+0x1dc>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8006a52:	f859 9c24 	ldr.w	r9, [r9, #-36]
 8006a56:	4591      	cmp	r9, r2
 8006a58:	f47f af52 	bne.w	8006900 <HAL_OSPIM_Config+0x1dc>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8006a5c:	4298      	cmp	r0, r3
 8006a5e:	f47f af4f 	bne.w	8006900 <HAL_OSPIM_Config+0x1dc>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006a62:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8006c50 <HAL_OSPIM_Config+0x52c>
 8006a66:	f8d8 0000 	ldr.w	r0, [r8]
 8006a6a:	f040 0001 	orr.w	r0, r0, #1
 8006a6e:	f8c8 0000 	str.w	r0, [r8]
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8006a72:	4877      	ldr	r0, [pc, #476]	; (8006c50 <HAL_OSPIM_Config+0x52c>)
 8006a74:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006a78:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8006a7c:	f8de 8004 	ldr.w	r8, [lr, #4]
 8006a80:	f428 7840 	bic.w	r8, r8, #768	; 0x300
 8006a84:	ea48 2844 	orr.w	r8, r8, r4, lsl #9
 8006a88:	f448 7880 	orr.w	r8, r8, #256	; 0x100
 8006a8c:	f8ce 8004 	str.w	r8, [lr, #4]
    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8006a90:	6949      	ldr	r1, [r1, #20]
 8006a92:	f101 3eff 	add.w	lr, r1, #4294967295
 8006a96:	6801      	ldr	r1, [r0, #0]
 8006a98:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8006a9c:	458e      	cmp	lr, r1
 8006a9e:	d905      	bls.n	8006aac <HAL_OSPIM_Config+0x388>
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8006aa0:	6801      	ldr	r1, [r0, #0]
 8006aa2:	f421 017f 	bic.w	r1, r1, #16711680	; 0xff0000
 8006aa6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8006aaa:	6001      	str	r1, [r0, #0]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006aac:	6801      	ldr	r1, [r0, #0]
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006aae:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ab2:	f402 3e80 	and.w	lr, r2, #65536	; 0x10000
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006ab6:	f011 0f01 	tst.w	r1, #1
 8006aba:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006abe:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006ac2:	4484      	add	ip, r0
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006ac4:	d063      	beq.n	8006b8e <HAL_OSPIM_Config+0x46a>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8006ac6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006aca:	f024 0403 	bic.w	r4, r4, #3
 8006ace:	f044 0401 	orr.w	r4, r4, #1
 8006ad2:	f8cc 4004 	str.w	r4, [ip, #4]
      if (cfg->DQSPort != 0U)
 8006ad6:	b147      	cbz	r7, 8006aea <HAL_OSPIM_Config+0x3c6>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8006ad8:	3f01      	subs	r7, #1
 8006ada:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8006ade:	6844      	ldr	r4, [r0, #4]
 8006ae0:	f024 0430 	bic.w	r4, r4, #48	; 0x30
 8006ae4:	f044 0410 	orr.w	r4, r4, #16
 8006ae8:	6044      	str	r4, [r0, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006aea:	f1be 0f00 	cmp.w	lr, #0
 8006aee:	d02e      	beq.n	8006b4e <HAL_OSPIM_Config+0x42a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006af0:	3a01      	subs	r2, #1
 8006af2:	f002 0201 	and.w	r2, r2, #1
 8006af6:	0092      	lsls	r2, r2, #2
 8006af8:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8006afc:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8006b00:	6850      	ldr	r0, [r2, #4]
 8006b02:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8006b06:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006b0a:	6050      	str	r0, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006b0c:	b379      	cbz	r1, 8006b6e <HAL_OSPIM_Config+0x44a>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006b1a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006b24:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006b28:	605a      	str	r2, [r3, #4]
    if ((ospi_enabled & 0x1U) != 0U)
 8006b2a:	b125      	cbz	r5, 8006b36 <HAL_OSPIM_Config+0x412>
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006b2c:	4a49      	ldr	r2, [pc, #292]	; (8006c54 <HAL_OSPIM_Config+0x530>)
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	f043 0301 	orr.w	r3, r3, #1
 8006b34:	6013      	str	r3, [r2, #0]
    if ((ospi_enabled & 0x2U) != 0U)
 8006b36:	9b01      	ldr	r3, [sp, #4]
 8006b38:	079b      	lsls	r3, r3, #30
 8006b3a:	d504      	bpl.n	8006b46 <HAL_OSPIM_Config+0x422>
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006b3c:	4a46      	ldr	r2, [pc, #280]	; (8006c58 <HAL_OSPIM_Config+0x534>)
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	6013      	str	r3, [r2, #0]
}
 8006b46:	2000      	movs	r0, #0
 8006b48:	b00f      	add	sp, #60	; 0x3c
 8006b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006b4e:	2a00      	cmp	r2, #0
 8006b50:	d0dc      	beq.n	8006b0c <HAL_OSPIM_Config+0x3e8>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006b52:	3a01      	subs	r2, #1
 8006b54:	f002 0201 	and.w	r2, r2, #1
 8006b58:	0092      	lsls	r2, r2, #2
 8006b5a:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8006b5e:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8006b62:	6850      	ldr	r0, [r2, #4]
 8006b64:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 8006b68:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8006b6c:	e7cd      	b.n	8006b0a <HAL_OSPIM_Config+0x3e6>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0db      	beq.n	8006b2a <HAL_OSPIM_Config+0x406>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006b72:	3b01      	subs	r3, #1
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006b7e:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8006b88:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8006b8c:	e7cc      	b.n	8006b28 <HAL_OSPIM_Config+0x404>
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8006b8e:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8006b92:	f028 0803 	bic.w	r8, r8, #3
 8006b96:	ea48 0844 	orr.w	r8, r8, r4, lsl #1
 8006b9a:	f048 0801 	orr.w	r8, r8, #1
 8006b9e:	f8cc 8004 	str.w	r8, [ip, #4]
      if (cfg->DQSPort != 0U)
 8006ba2:	b157      	cbz	r7, 8006bba <HAL_OSPIM_Config+0x496>
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8006ba4:	3f01      	subs	r7, #1
 8006ba6:	eb00 0087 	add.w	r0, r0, r7, lsl #2
 8006baa:	6847      	ldr	r7, [r0, #4]
 8006bac:	f027 0730 	bic.w	r7, r7, #48	; 0x30
 8006bb0:	ea47 1744 	orr.w	r7, r7, r4, lsl #5
 8006bb4:	f047 0710 	orr.w	r7, r7, #16
 8006bb8:	6047      	str	r7, [r0, #4]
      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006bba:	f1be 0f00 	cmp.w	lr, #0
 8006bbe:	d021      	beq.n	8006c04 <HAL_OSPIM_Config+0x4e0>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006bc0:	3a01      	subs	r2, #1
 8006bc2:	f002 0201 	and.w	r2, r2, #1
 8006bc6:	0092      	lsls	r2, r2, #2
 8006bc8:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8006bcc:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8006bd0:	6850      	ldr	r0, [r2, #4]
 8006bd2:	f420 20e0 	bic.w	r0, r0, #458752	; 0x70000
 8006bd6:	ea40 4084 	orr.w	r0, r0, r4, lsl #18
 8006bda:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006bde:	6050      	str	r0, [r2, #4]
      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8006be0:	b311      	cbz	r1, 8006c28 <HAL_OSPIM_Config+0x504>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006be2:	3b01      	subs	r3, #1
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006bee:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006bf8:	ea42 4484 	orr.w	r4, r2, r4, lsl #18
 8006bfc:	f444 3440 	orr.w	r4, r4, #196608	; 0x30000
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006c00:	605c      	str	r4, [r3, #4]
 8006c02:	e792      	b.n	8006b2a <HAL_OSPIM_Config+0x406>
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	d0eb      	beq.n	8006be0 <HAL_OSPIM_Config+0x4bc>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8006c08:	3a01      	subs	r2, #1
 8006c0a:	f002 0201 	and.w	r2, r2, #1
 8006c0e:	0092      	lsls	r2, r2, #2
 8006c10:	f102 42a4 	add.w	r2, r2, #1375731712	; 0x52000000
 8006c14:	f502 4234 	add.w	r2, r2, #46080	; 0xb400
 8006c18:	6850      	ldr	r0, [r2, #4]
 8006c1a:	f020 60e0 	bic.w	r0, r0, #117440512	; 0x7000000
 8006c1e:	ea40 6084 	orr.w	r0, r0, r4, lsl #26
 8006c22:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 8006c26:	e7da      	b.n	8006bde <HAL_OSPIM_Config+0x4ba>
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f43f af7e 	beq.w	8006b2a <HAL_OSPIM_Config+0x406>
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	f003 0301 	and.w	r3, r3, #1
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	f103 43a4 	add.w	r3, r3, #1375731712	; 0x52000000
 8006c3a:	f503 4334 	add.w	r3, r3, #46080	; 0xb400
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8006c44:	ea42 6484 	orr.w	r4, r2, r4, lsl #26
 8006c48:	f044 7440 	orr.w	r4, r4, #50331648	; 0x3000000
 8006c4c:	e7d8      	b.n	8006c00 <HAL_OSPIM_Config+0x4dc>
 8006c4e:	bf00      	nop
 8006c50:	5200b400 	.word	0x5200b400
 8006c54:	52005000 	.word	0x52005000
 8006c58:	5200a000 	.word	0x5200a000

08006c5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006c5c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006c5e:	4d1d      	ldr	r5, [pc, #116]	; (8006cd4 <HAL_PWREx_ConfigSupply+0x78>)
{
 8006c60:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006c62:	68eb      	ldr	r3, [r5, #12]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	2b06      	cmp	r3, #6
 8006c6a:	d006      	beq.n	8006c7a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006c6c:	68e8      	ldr	r0, [r5, #12]
 8006c6e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006c72:	1b00      	subs	r0, r0, r4
 8006c74:	bf18      	it	ne
 8006c76:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8006c78:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006c7a:	68eb      	ldr	r3, [r5, #12]
 8006c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006c80:	4303      	orrs	r3, r0
 8006c82:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8006c84:	f7fd fc94 	bl	80045b0 <HAL_GetTick>
 8006c88:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006c8a:	686b      	ldr	r3, [r5, #4]
 8006c8c:	049b      	lsls	r3, r3, #18
 8006c8e:	d508      	bpl.n	8006ca2 <HAL_PWREx_ConfigSupply+0x46>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006c90:	f1a4 031d 	sub.w	r3, r4, #29
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d90c      	bls.n	8006cb2 <HAL_PWREx_ConfigSupply+0x56>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006c98:	3c2d      	subs	r4, #45	; 0x2d
 8006c9a:	2c01      	cmp	r4, #1
 8006c9c:	d909      	bls.n	8006cb2 <HAL_PWREx_ConfigSupply+0x56>
  return HAL_OK;
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	e7ea      	b.n	8006c78 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006ca2:	f7fd fc85 	bl	80045b0 <HAL_GetTick>
 8006ca6:	1b80      	subs	r0, r0, r6
 8006ca8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006cac:	d9ed      	bls.n	8006c8a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8006cae:	2001      	movs	r0, #1
 8006cb0:	e7e2      	b.n	8006c78 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8006cb2:	f7fd fc7d 	bl	80045b0 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006cb6:	4d07      	ldr	r5, [pc, #28]	; (8006cd4 <HAL_PWREx_ConfigSupply+0x78>)
    tickstart = HAL_GetTick ();
 8006cb8:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006cba:	68eb      	ldr	r3, [r5, #12]
 8006cbc:	f003 0311 	and.w	r3, r3, #17
 8006cc0:	2b11      	cmp	r3, #17
 8006cc2:	d0ec      	beq.n	8006c9e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006cc4:	f7fd fc74 	bl	80045b0 <HAL_GetTick>
 8006cc8:	1b00      	subs	r0, r0, r4
 8006cca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006cce:	d9f4      	bls.n	8006cba <HAL_PWREx_ConfigSupply+0x5e>
 8006cd0:	e7ed      	b.n	8006cae <HAL_PWREx_ConfigSupply+0x52>
 8006cd2:	bf00      	nop
 8006cd4:	58024800 	.word	0x58024800

08006cd8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006cd8:	4a02      	ldr	r2, [pc, #8]	; (8006ce4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8006cda:	68d3      	ldr	r3, [r2, #12]
 8006cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ce0:	60d3      	str	r3, [r2, #12]
}
 8006ce2:	4770      	bx	lr
 8006ce4:	58024800 	.word	0x58024800

08006ce8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cea:	4604      	mov	r4, r0
 8006cec:	b908      	cbnz	r0, 8006cf2 <HAL_RCC_OscConfig+0xa>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
      {
        return HAL_ERROR;
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e07f      	b.n	8006df2 <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cf2:	6803      	ldr	r3, [r0, #0]
 8006cf4:	07df      	lsls	r7, r3, #31
 8006cf6:	d453      	bmi.n	8006da0 <HAL_RCC_OscConfig+0xb8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	079e      	lsls	r6, r3, #30
 8006cfc:	f100 80a3 	bmi.w	8006e46 <HAL_RCC_OscConfig+0x15e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	06da      	lsls	r2, r3, #27
 8006d04:	d51c      	bpl.n	8006d40 <HAL_RCC_OscConfig+0x58>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d06:	4b98      	ldr	r3, [pc, #608]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006d08:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d0a:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d0c:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d10:	2a08      	cmp	r2, #8
 8006d12:	d007      	beq.n	8006d24 <HAL_RCC_OscConfig+0x3c>
 8006d14:	2a18      	cmp	r2, #24
 8006d16:	f040 80e5 	bne.w	8006ee4 <HAL_RCC_OscConfig+0x1fc>
 8006d1a:	f001 0203 	and.w	r2, r1, #3
 8006d1e:	2a01      	cmp	r2, #1
 8006d20:	f040 80e0 	bne.w	8006ee4 <HAL_RCC_OscConfig+0x1fc>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	05db      	lsls	r3, r3, #23
 8006d28:	d502      	bpl.n	8006d30 <HAL_RCC_OscConfig+0x48>
 8006d2a:	69e3      	ldr	r3, [r4, #28]
 8006d2c:	2b80      	cmp	r3, #128	; 0x80
 8006d2e:	d1de      	bne.n	8006cee <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d30:	4a8d      	ldr	r2, [pc, #564]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006d32:	6a21      	ldr	r1, [r4, #32]
 8006d34:	68d3      	ldr	r3, [r2, #12]
 8006d36:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006d3a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006d3e:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	0719      	lsls	r1, r3, #28
 8006d44:	f100 80fb 	bmi.w	8006f3e <HAL_RCC_OscConfig+0x256>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	069a      	lsls	r2, r3, #26
 8006d4c:	f100 8121 	bmi.w	8006f92 <HAL_RCC_OscConfig+0x2aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	075d      	lsls	r5, r3, #29
 8006d54:	d51e      	bpl.n	8006d94 <HAL_RCC_OscConfig+0xac>
    PWR->CR1 |= PWR_CR1_DBP;
 8006d56:	4d85      	ldr	r5, [pc, #532]	; (8006f6c <HAL_RCC_OscConfig+0x284>)
 8006d58:	682b      	ldr	r3, [r5, #0]
 8006d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d5e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006d60:	f7fd fc26 	bl	80045b0 <HAL_GetTick>
 8006d64:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d66:	682b      	ldr	r3, [r5, #0]
 8006d68:	05da      	lsls	r2, r3, #23
 8006d6a:	f140 8137 	bpl.w	8006fdc <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	4d7d      	ldr	r5, [pc, #500]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	f040 8139 	bne.w	8006fea <HAL_RCC_OscConfig+0x302>
 8006d78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d80:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006d84:	f7fd fc14 	bl	80045b0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d88:	4e77      	ldr	r6, [pc, #476]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
      tickstart = HAL_GetTick();
 8006d8a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d8c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006d8e:	079b      	lsls	r3, r3, #30
 8006d90:	f140 8151 	bpl.w	8007036 <HAL_RCC_OscConfig+0x34e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d94:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f040 8154 	bne.w	8007044 <HAL_RCC_OscConfig+0x35c>
      }
    }
  }
  return HAL_OK;
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	e028      	b.n	8006df2 <HAL_RCC_OscConfig+0x10a>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006da0:	4b71      	ldr	r3, [pc, #452]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006da2:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006da4:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006da6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006daa:	2a10      	cmp	r2, #16
 8006dac:	d005      	beq.n	8006dba <HAL_RCC_OscConfig+0xd2>
 8006dae:	2a18      	cmp	r2, #24
 8006db0:	d10a      	bne.n	8006dc8 <HAL_RCC_OscConfig+0xe0>
 8006db2:	f001 0203 	and.w	r2, r1, #3
 8006db6:	2a02      	cmp	r2, #2
 8006db8:	d106      	bne.n	8006dc8 <HAL_RCC_OscConfig+0xe0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	039d      	lsls	r5, r3, #14
 8006dbe:	d59b      	bpl.n	8006cf8 <HAL_RCC_OscConfig+0x10>
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d198      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x10>
 8006dc6:	e792      	b.n	8006cee <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc8:	6862      	ldr	r2, [r4, #4]
 8006dca:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006dce:	d111      	bne.n	8006df4 <HAL_RCC_OscConfig+0x10c>
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006dd6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006dd8:	f7fd fbea 	bl	80045b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ddc:	4e62      	ldr	r6, [pc, #392]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8006dde:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006de0:	6833      	ldr	r3, [r6, #0]
 8006de2:	0398      	lsls	r0, r3, #14
 8006de4:	d488      	bmi.n	8006cf8 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de6:	f7fd fbe3 	bl	80045b0 <HAL_GetTick>
 8006dea:	1b40      	subs	r0, r0, r5
 8006dec:	2864      	cmp	r0, #100	; 0x64
 8006dee:	d9f7      	bls.n	8006de0 <HAL_RCC_OscConfig+0xf8>
            return HAL_TIMEOUT;
 8006df0:	2003      	movs	r0, #3
}
 8006df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006df4:	4d5c      	ldr	r5, [pc, #368]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	b99a      	cbnz	r2, 8006e22 <HAL_RCC_OscConfig+0x13a>
 8006dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dfe:	602b      	str	r3, [r5, #0]
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e06:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006e08:	f7fd fbd2 	bl	80045b0 <HAL_GetTick>
 8006e0c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	0399      	lsls	r1, r3, #14
 8006e12:	f57f af71 	bpl.w	8006cf8 <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e16:	f7fd fbcb 	bl	80045b0 <HAL_GetTick>
 8006e1a:	1b80      	subs	r0, r0, r6
 8006e1c:	2864      	cmp	r0, #100	; 0x64
 8006e1e:	d9f6      	bls.n	8006e0e <HAL_RCC_OscConfig+0x126>
 8006e20:	e7e6      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e22:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8006e26:	d107      	bne.n	8006e38 <HAL_RCC_OscConfig+0x150>
 8006e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e2c:	602b      	str	r3, [r5, #0]
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e34:	602b      	str	r3, [r5, #0]
 8006e36:	e7cf      	b.n	8006dd8 <HAL_RCC_OscConfig+0xf0>
 8006e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e3c:	602b      	str	r3, [r5, #0]
 8006e3e:	682b      	ldr	r3, [r5, #0]
 8006e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e44:	e7f6      	b.n	8006e34 <HAL_RCC_OscConfig+0x14c>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e46:	4b48      	ldr	r3, [pc, #288]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006e48:	68e1      	ldr	r1, [r4, #12]
 8006e4a:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e4c:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e4e:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8006e52:	d003      	beq.n	8006e5c <HAL_RCC_OscConfig+0x174>
 8006e54:	2a18      	cmp	r2, #24
 8006e56:	d121      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1b4>
 8006e58:	0782      	lsls	r2, r0, #30
 8006e5a:	d11f      	bne.n	8006e9c <HAL_RCC_OscConfig+0x1b4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	075b      	lsls	r3, r3, #29
 8006e60:	d502      	bpl.n	8006e68 <HAL_RCC_OscConfig+0x180>
 8006e62:	2900      	cmp	r1, #0
 8006e64:	f43f af43 	beq.w	8006cee <HAL_RCC_OscConfig+0x6>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e68:	4d3f      	ldr	r5, [pc, #252]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006e6a:	682a      	ldr	r2, [r5, #0]
 8006e6c:	f022 0219 	bic.w	r2, r2, #25
 8006e70:	430a      	orrs	r2, r1
 8006e72:	602a      	str	r2, [r5, #0]
          tickstart = HAL_GetTick();
 8006e74:	f7fd fb9c 	bl	80045b0 <HAL_GetTick>
 8006e78:	4606      	mov	r6, r0
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e7a:	682b      	ldr	r3, [r5, #0]
 8006e7c:	075f      	lsls	r7, r3, #29
 8006e7e:	d507      	bpl.n	8006e90 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e80:	686b      	ldr	r3, [r5, #4]
 8006e82:	6922      	ldr	r2, [r4, #16]
 8006e84:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006e8c:	606b      	str	r3, [r5, #4]
 8006e8e:	e737      	b.n	8006d00 <HAL_RCC_OscConfig+0x18>
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e90:	f7fd fb8e 	bl	80045b0 <HAL_GetTick>
 8006e94:	1b80      	subs	r0, r0, r6
 8006e96:	2802      	cmp	r0, #2
 8006e98:	d9ef      	bls.n	8006e7a <HAL_RCC_OscConfig+0x192>
 8006e9a:	e7a9      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e9c:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e9e:	b181      	cbz	r1, 8006ec2 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ea0:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ea4:	4d30      	ldr	r5, [pc, #192]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006eaa:	f7fd fb81 	bl	80045b0 <HAL_GetTick>
 8006eae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	0758      	lsls	r0, r3, #29
 8006eb4:	d4e4      	bmi.n	8006e80 <HAL_RCC_OscConfig+0x198>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006eb6:	f7fd fb7b 	bl	80045b0 <HAL_GetTick>
 8006eba:	1b80      	subs	r0, r0, r6
 8006ebc:	2802      	cmp	r0, #2
 8006ebe:	d9f7      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x1c8>
 8006ec0:	e796      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_HSI_DISABLE();
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ec6:	4e28      	ldr	r6, [pc, #160]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_DISABLE();
 8006ec8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006eca:	f7fd fb71 	bl	80045b0 <HAL_GetTick>
 8006ece:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	0759      	lsls	r1, r3, #29
 8006ed4:	f57f af14 	bpl.w	8006d00 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ed8:	f7fd fb6a 	bl	80045b0 <HAL_GetTick>
 8006edc:	1b40      	subs	r0, r0, r5
 8006ede:	2802      	cmp	r0, #2
 8006ee0:	d9f6      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x1e8>
 8006ee2:	e785      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006ee4:	69e2      	ldr	r2, [r4, #28]
 8006ee6:	b1c2      	cbz	r2, 8006f1a <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_CSI_ENABLE();
 8006ee8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006eea:	4d1f      	ldr	r5, [pc, #124]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_ENABLE();
 8006eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ef0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ef2:	f7fd fb5d 	bl	80045b0 <HAL_GetTick>
 8006ef6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006ef8:	682b      	ldr	r3, [r5, #0]
 8006efa:	05df      	lsls	r7, r3, #23
 8006efc:	d507      	bpl.n	8006f0e <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006efe:	68eb      	ldr	r3, [r5, #12]
 8006f00:	6a22      	ldr	r2, [r4, #32]
 8006f02:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006f06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f0a:	60eb      	str	r3, [r5, #12]
 8006f0c:	e718      	b.n	8006d40 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f0e:	f7fd fb4f 	bl	80045b0 <HAL_GetTick>
 8006f12:	1b80      	subs	r0, r0, r6
 8006f14:	2802      	cmp	r0, #2
 8006f16:	d9ef      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x210>
 8006f18:	e76a      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
        __HAL_RCC_CSI_DISABLE();
 8006f1a:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f1c:	4e12      	ldr	r6, [pc, #72]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_CSI_DISABLE();
 8006f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006f24:	f7fd fb44 	bl	80045b0 <HAL_GetTick>
 8006f28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006f2a:	6833      	ldr	r3, [r6, #0]
 8006f2c:	05d8      	lsls	r0, r3, #23
 8006f2e:	f57f af07 	bpl.w	8006d40 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006f32:	f7fd fb3d 	bl	80045b0 <HAL_GetTick>
 8006f36:	1b40      	subs	r0, r0, r5
 8006f38:	2802      	cmp	r0, #2
 8006f3a:	d9f6      	bls.n	8006f2a <HAL_RCC_OscConfig+0x242>
 8006f3c:	e758      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f3e:	6963      	ldr	r3, [r4, #20]
 8006f40:	4d09      	ldr	r5, [pc, #36]	; (8006f68 <HAL_RCC_OscConfig+0x280>)
 8006f42:	b1ab      	cbz	r3, 8006f70 <HAL_RCC_OscConfig+0x288>
      __HAL_RCC_LSI_ENABLE();
 8006f44:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006f4c:	f7fd fb30 	bl	80045b0 <HAL_GetTick>
 8006f50:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f52:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f54:	079b      	lsls	r3, r3, #30
 8006f56:	f53f aef7 	bmi.w	8006d48 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f5a:	f7fd fb29 	bl	80045b0 <HAL_GetTick>
 8006f5e:	1b80      	subs	r0, r0, r6
 8006f60:	2802      	cmp	r0, #2
 8006f62:	d9f6      	bls.n	8006f52 <HAL_RCC_OscConfig+0x26a>
 8006f64:	e744      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8006f70:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f72:	f023 0301 	bic.w	r3, r3, #1
 8006f76:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006f78:	f7fd fb1a 	bl	80045b0 <HAL_GetTick>
 8006f7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f7e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006f80:	079f      	lsls	r7, r3, #30
 8006f82:	f57f aee1 	bpl.w	8006d48 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f86:	f7fd fb13 	bl	80045b0 <HAL_GetTick>
 8006f8a:	1b80      	subs	r0, r0, r6
 8006f8c:	2802      	cmp	r0, #2
 8006f8e:	d9f6      	bls.n	8006f7e <HAL_RCC_OscConfig+0x296>
 8006f90:	e72e      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f92:	69a3      	ldr	r3, [r4, #24]
 8006f94:	4d83      	ldr	r5, [pc, #524]	; (80071a4 <HAL_RCC_OscConfig+0x4bc>)
 8006f96:	b183      	cbz	r3, 8006fba <HAL_RCC_OscConfig+0x2d2>
      __HAL_RCC_HSI48_ENABLE();
 8006f98:	682b      	ldr	r3, [r5, #0]
 8006f9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f9e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006fa0:	f7fd fb06 	bl	80045b0 <HAL_GetTick>
 8006fa4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	0498      	lsls	r0, r3, #18
 8006faa:	f53f aed1 	bmi.w	8006d50 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fae:	f7fd faff 	bl	80045b0 <HAL_GetTick>
 8006fb2:	1b80      	subs	r0, r0, r6
 8006fb4:	2802      	cmp	r0, #2
 8006fb6:	d9f6      	bls.n	8006fa6 <HAL_RCC_OscConfig+0x2be>
 8006fb8:	e71a      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
      __HAL_RCC_HSI48_DISABLE();
 8006fba:	682b      	ldr	r3, [r5, #0]
 8006fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fc0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006fc2:	f7fd faf5 	bl	80045b0 <HAL_GetTick>
 8006fc6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	0499      	lsls	r1, r3, #18
 8006fcc:	f57f aec0 	bpl.w	8006d50 <HAL_RCC_OscConfig+0x68>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006fd0:	f7fd faee 	bl	80045b0 <HAL_GetTick>
 8006fd4:	1b80      	subs	r0, r0, r6
 8006fd6:	2802      	cmp	r0, #2
 8006fd8:	d9f6      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x2e0>
 8006fda:	e709      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fdc:	f7fd fae8 	bl	80045b0 <HAL_GetTick>
 8006fe0:	1b80      	subs	r0, r0, r6
 8006fe2:	2864      	cmp	r0, #100	; 0x64
 8006fe4:	f67f aebf 	bls.w	8006d66 <HAL_RCC_OscConfig+0x7e>
 8006fe8:	e702      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fea:	b9b3      	cbnz	r3, 800701a <HAL_RCC_OscConfig+0x332>
 8006fec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fee:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ff2:	f023 0301 	bic.w	r3, r3, #1
 8006ff6:	672b      	str	r3, [r5, #112]	; 0x70
 8006ff8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006ffa:	f023 0304 	bic.w	r3, r3, #4
 8006ffe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007000:	f7fd fad6 	bl	80045b0 <HAL_GetTick>
 8007004:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007006:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007008:	0798      	lsls	r0, r3, #30
 800700a:	f57f aec3 	bpl.w	8006d94 <HAL_RCC_OscConfig+0xac>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800700e:	f7fd facf 	bl	80045b0 <HAL_GetTick>
 8007012:	1b80      	subs	r0, r0, r6
 8007014:	42b8      	cmp	r0, r7
 8007016:	d9f6      	bls.n	8007006 <HAL_RCC_OscConfig+0x31e>
 8007018:	e6ea      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800701a:	2b05      	cmp	r3, #5
 800701c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800701e:	d103      	bne.n	8007028 <HAL_RCC_OscConfig+0x340>
 8007020:	f043 0304 	orr.w	r3, r3, #4
 8007024:	672b      	str	r3, [r5, #112]	; 0x70
 8007026:	e6a7      	b.n	8006d78 <HAL_RCC_OscConfig+0x90>
 8007028:	f023 0301 	bic.w	r3, r3, #1
 800702c:	672b      	str	r3, [r5, #112]	; 0x70
 800702e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007030:	f023 0304 	bic.w	r3, r3, #4
 8007034:	e6a3      	b.n	8006d7e <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007036:	f7fd fabb 	bl	80045b0 <HAL_GetTick>
 800703a:	1b40      	subs	r0, r0, r5
 800703c:	42b8      	cmp	r0, r7
 800703e:	f67f aea5 	bls.w	8006d8c <HAL_RCC_OscConfig+0xa4>
 8007042:	e6d5      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007044:	4d57      	ldr	r5, [pc, #348]	; (80071a4 <HAL_RCC_OscConfig+0x4bc>)
 8007046:	692b      	ldr	r3, [r5, #16]
 8007048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800704c:	2b18      	cmp	r3, #24
 800704e:	d07a      	beq.n	8007146 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_DISABLE();
 8007050:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007052:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007058:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800705a:	d167      	bne.n	800712c <HAL_RCC_OscConfig+0x444>
        tickstart = HAL_GetTick();
 800705c:	f7fd faa8 	bl	80045b0 <HAL_GetTick>
 8007060:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007062:	682b      	ldr	r3, [r5, #0]
 8007064:	0199      	lsls	r1, r3, #6
 8007066:	d45b      	bmi.n	8007120 <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007068:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800706a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800706c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8007070:	f023 0303 	bic.w	r3, r3, #3
 8007074:	4313      	orrs	r3, r2
 8007076:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007078:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800707c:	62ab      	str	r3, [r5, #40]	; 0x28
 800707e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007080:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007082:	3b01      	subs	r3, #1
 8007084:	3a01      	subs	r2, #1
 8007086:	025b      	lsls	r3, r3, #9
 8007088:	0412      	lsls	r2, r2, #16
 800708a:	b29b      	uxth	r3, r3
 800708c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007090:	4313      	orrs	r3, r2
 8007092:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007094:	3a01      	subs	r2, #1
 8007096:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800709a:	4313      	orrs	r3, r2
 800709c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800709e:	3a01      	subs	r2, #1
 80070a0:	0612      	lsls	r2, r2, #24
 80070a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80070a6:	4313      	orrs	r3, r2
 80070a8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80070aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070ac:	f023 0301 	bic.w	r3, r3, #1
 80070b0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80070b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80070b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80070b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80070be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80070c2:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80070c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80070c8:	f023 030c 	bic.w	r3, r3, #12
 80070cc:	4313      	orrs	r3, r2
 80070ce:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80070d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80070d4:	f023 0302 	bic.w	r3, r3, #2
 80070d8:	4313      	orrs	r3, r2
 80070da:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80070dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070e2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ea:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80070ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070f2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80070f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80070f6:	f043 0301 	orr.w	r3, r3, #1
 80070fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007102:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007104:	f7fd fa54 	bl	80045b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007108:	4d26      	ldr	r5, [pc, #152]	; (80071a4 <HAL_RCC_OscConfig+0x4bc>)
        tickstart = HAL_GetTick();
 800710a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	019a      	lsls	r2, r3, #6
 8007110:	f53f ae44 	bmi.w	8006d9c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007114:	f7fd fa4c 	bl	80045b0 <HAL_GetTick>
 8007118:	1b00      	subs	r0, r0, r4
 800711a:	2802      	cmp	r0, #2
 800711c:	d9f6      	bls.n	800710c <HAL_RCC_OscConfig+0x424>
 800711e:	e667      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007120:	f7fd fa46 	bl	80045b0 <HAL_GetTick>
 8007124:	1b80      	subs	r0, r0, r6
 8007126:	2802      	cmp	r0, #2
 8007128:	d99b      	bls.n	8007062 <HAL_RCC_OscConfig+0x37a>
 800712a:	e661      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
        tickstart = HAL_GetTick();
 800712c:	f7fd fa40 	bl	80045b0 <HAL_GetTick>
 8007130:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007132:	682b      	ldr	r3, [r5, #0]
 8007134:	019b      	lsls	r3, r3, #6
 8007136:	f57f ae31 	bpl.w	8006d9c <HAL_RCC_OscConfig+0xb4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800713a:	f7fd fa39 	bl	80045b0 <HAL_GetTick>
 800713e:	1b00      	subs	r0, r0, r4
 8007140:	2802      	cmp	r0, #2
 8007142:	d9f6      	bls.n	8007132 <HAL_RCC_OscConfig+0x44a>
 8007144:	e654      	b.n	8006df0 <HAL_RCC_OscConfig+0x108>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007146:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007148:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800714a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800714c:	f43f ae51 	beq.w	8006df2 <HAL_RCC_OscConfig+0x10a>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007150:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007154:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007156:	4281      	cmp	r1, r0
 8007158:	f47f adc9 	bne.w	8006cee <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800715c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007160:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007162:	428a      	cmp	r2, r1
 8007164:	f47f adc3 	bne.w	8006cee <HAL_RCC_OscConfig+0x6>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007168:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800716a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800716e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007170:	4291      	cmp	r1, r2
 8007172:	f47f adbc 	bne.w	8006cee <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007176:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007178:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800717c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800717e:	4291      	cmp	r1, r2
 8007180:	f47f adb5 	bne.w	8006cee <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007184:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8007186:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800718a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800718c:	4291      	cmp	r1, r2
 800718e:	f47f adae 	bne.w	8006cee <HAL_RCC_OscConfig+0x6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007192:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8007194:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007198:	3801      	subs	r0, #1
  return HAL_OK;
 800719a:	1a18      	subs	r0, r3, r0
 800719c:	bf18      	it	ne
 800719e:	2001      	movne	r0, #1
 80071a0:	e627      	b.n	8006df2 <HAL_RCC_OscConfig+0x10a>
 80071a2:	bf00      	nop
 80071a4:	58024400 	.word	0x58024400

080071a8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a8:	4b48      	ldr	r3, [pc, #288]	; (80072cc <HAL_RCC_GetSysClockFreq+0x124>)
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80071b0:	2a10      	cmp	r2, #16
{
 80071b2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071b4:	f000 8086 	beq.w	80072c4 <HAL_RCC_GetSysClockFreq+0x11c>
 80071b8:	2a18      	cmp	r2, #24
 80071ba:	d00c      	beq.n	80071d6 <HAL_RCC_GetSysClockFreq+0x2e>
 80071bc:	2a00      	cmp	r2, #0
 80071be:	f040 8083 	bne.w	80072c8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	4842      	ldr	r0, [pc, #264]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x128>)
 80071c6:	f012 0f20 	tst.w	r2, #32
 80071ca:	d003      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80071d2:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80071d4:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071d8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071da:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80071dc:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071e0:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    if (pllm != 0U)
 80071e6:	d0f5      	beq.n	80071d4 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071e8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071ec:	f004 0401 	and.w	r4, r4, #1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071f0:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071f4:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071f8:	4362      	muls	r2, r4
 80071fa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007202:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007204:	ee07 2a90 	vmov	s15, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007208:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 800720c:	d04c      	beq.n	80072a8 <HAL_RCC_GetSysClockFreq+0x100>
 800720e:	2902      	cmp	r1, #2
 8007210:	d03c      	beq.n	800728c <HAL_RCC_GetSysClockFreq+0xe4>
 8007212:	2900      	cmp	r1, #0
 8007214:	d148      	bne.n	80072a8 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	0692      	lsls	r2, r2, #26
 800721a:	d527      	bpl.n	800726c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800721c:	6819      	ldr	r1, [r3, #0]
 800721e:	4a2c      	ldr	r2, [pc, #176]	; (80072d0 <HAL_RCC_GetSysClockFreq+0x128>)
 8007220:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007226:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722c:	ee07 2a10 	vmov	s14, r2
 8007230:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8007234:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8007238:	ee06 3a90 	vmov	s13, r3
 800723c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8007240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007244:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007248:	4b20      	ldr	r3, [pc, #128]	; (80072cc <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800724a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007254:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007256:	ee07 3a10 	vmov	s14, r3
 800725a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800725e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007262:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8007266:	ee17 0a90 	vmov	r0, s15
 800726a:	e7b3      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007272:	ee07 3a10 	vmov	s14, r3
 8007276:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800727a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800727e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007282:	ed9f 6a14 	vldr	s12, [pc, #80]	; 80072d4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007286:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800728a:	e7dd      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007292:	ee07 3a10 	vmov	s14, r3
 8007296:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800729a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800729e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80072a2:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80072d8 <HAL_RCC_GetSysClockFreq+0x130>
 80072a6:	e7ee      	b.n	8007286 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ae:	ee07 3a10 	vmov	s14, r3
 80072b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ba:	ee77 7a86 	vadd.f32	s15, s15, s12
 80072be:	ed9f 6a07 	vldr	s12, [pc, #28]	; 80072dc <HAL_RCC_GetSysClockFreq+0x134>
 80072c2:	e7e0      	b.n	8007286 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072c4:	4806      	ldr	r0, [pc, #24]	; (80072e0 <HAL_RCC_GetSysClockFreq+0x138>)
 80072c6:	e785      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 80072c8:	4806      	ldr	r0, [pc, #24]	; (80072e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80072ca:	e783      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80072cc:	58024400 	.word	0x58024400
 80072d0:	03d09000 	.word	0x03d09000
 80072d4:	4c742400 	.word	0x4c742400
 80072d8:	4bbebc20 	.word	0x4bbebc20
 80072dc:	4a742400 	.word	0x4a742400
 80072e0:	017d7840 	.word	0x017d7840
 80072e4:	003d0900 	.word	0x003d0900

080072e8 <HAL_RCC_ClockConfig>:
{
 80072e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80072ee:	4604      	mov	r4, r0
 80072f0:	b910      	cbnz	r0, 80072f8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80072f2:	2001      	movs	r0, #1
}
 80072f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072f8:	4a88      	ldr	r2, [pc, #544]	; (800751c <HAL_RCC_ClockConfig+0x234>)
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	428b      	cmp	r3, r1
 8007302:	f0c0 8093 	bcc.w	800742c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	075f      	lsls	r7, r3, #29
 800730a:	f100 809b 	bmi.w	8007444 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800730e:	071e      	lsls	r6, r3, #28
 8007310:	d50b      	bpl.n	800732a <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007312:	4983      	ldr	r1, [pc, #524]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 8007314:	6966      	ldr	r6, [r4, #20]
 8007316:	69c8      	ldr	r0, [r1, #28]
 8007318:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800731c:	4286      	cmp	r6, r0
 800731e:	d904      	bls.n	800732a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007320:	69ca      	ldr	r2, [r1, #28]
 8007322:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007326:	4332      	orrs	r2, r6
 8007328:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800732a:	06d8      	lsls	r0, r3, #27
 800732c:	d50b      	bpl.n	8007346 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800732e:	497c      	ldr	r1, [pc, #496]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 8007330:	69a6      	ldr	r6, [r4, #24]
 8007332:	69c8      	ldr	r0, [r1, #28]
 8007334:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8007338:	4286      	cmp	r6, r0
 800733a:	d904      	bls.n	8007346 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800733c:	69ca      	ldr	r2, [r1, #28]
 800733e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007342:	4332      	orrs	r2, r6
 8007344:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007346:	0699      	lsls	r1, r3, #26
 8007348:	d50b      	bpl.n	8007362 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800734a:	4975      	ldr	r1, [pc, #468]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 800734c:	69e6      	ldr	r6, [r4, #28]
 800734e:	6a08      	ldr	r0, [r1, #32]
 8007350:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8007354:	4286      	cmp	r6, r0
 8007356:	d904      	bls.n	8007362 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007358:	6a0a      	ldr	r2, [r1, #32]
 800735a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800735e:	4332      	orrs	r2, r6
 8007360:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007362:	079a      	lsls	r2, r3, #30
 8007364:	d50b      	bpl.n	800737e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007366:	496e      	ldr	r1, [pc, #440]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 8007368:	68e6      	ldr	r6, [r4, #12]
 800736a:	6988      	ldr	r0, [r1, #24]
 800736c:	f000 000f 	and.w	r0, r0, #15
 8007370:	4286      	cmp	r6, r0
 8007372:	d904      	bls.n	800737e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007374:	698a      	ldr	r2, [r1, #24]
 8007376:	f022 020f 	bic.w	r2, r2, #15
 800737a:	4332      	orrs	r2, r6
 800737c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800737e:	07df      	lsls	r7, r3, #31
 8007380:	d46e      	bmi.n	8007460 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	079e      	lsls	r6, r3, #30
 8007386:	f100 80a1 	bmi.w	80074cc <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800738a:	4964      	ldr	r1, [pc, #400]	; (800751c <HAL_RCC_ClockConfig+0x234>)
 800738c:	680a      	ldr	r2, [r1, #0]
 800738e:	f002 020f 	and.w	r2, r2, #15
 8007392:	42aa      	cmp	r2, r5
 8007394:	f200 80a8 	bhi.w	80074e8 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007398:	0758      	lsls	r0, r3, #29
 800739a:	f100 80b1 	bmi.w	8007500 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739e:	0719      	lsls	r1, r3, #28
 80073a0:	d50b      	bpl.n	80073ba <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073a2:	495f      	ldr	r1, [pc, #380]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 80073a4:	6965      	ldr	r5, [r4, #20]
 80073a6:	69c8      	ldr	r0, [r1, #28]
 80073a8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80073ac:	4285      	cmp	r5, r0
 80073ae:	d204      	bcs.n	80073ba <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073b0:	69ca      	ldr	r2, [r1, #28]
 80073b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80073b6:	432a      	orrs	r2, r5
 80073b8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ba:	06da      	lsls	r2, r3, #27
 80073bc:	d50b      	bpl.n	80073d6 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073be:	4958      	ldr	r1, [pc, #352]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 80073c0:	69a5      	ldr	r5, [r4, #24]
 80073c2:	69c8      	ldr	r0, [r1, #28]
 80073c4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80073c8:	4285      	cmp	r5, r0
 80073ca:	d204      	bcs.n	80073d6 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073cc:	69ca      	ldr	r2, [r1, #28]
 80073ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073d2:	432a      	orrs	r2, r5
 80073d4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073d6:	069b      	lsls	r3, r3, #26
 80073d8:	d50b      	bpl.n	80073f2 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073da:	4a51      	ldr	r2, [pc, #324]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 80073dc:	69e0      	ldr	r0, [r4, #28]
 80073de:	6a11      	ldr	r1, [r2, #32]
 80073e0:	f001 0170 	and.w	r1, r1, #112	; 0x70
 80073e4:	4288      	cmp	r0, r1
 80073e6:	d204      	bcs.n	80073f2 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073e8:	6a13      	ldr	r3, [r2, #32]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	4303      	orrs	r3, r0
 80073f0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80073f2:	f7ff fed9 	bl	80071a8 <HAL_RCC_GetSysClockFreq>
 80073f6:	494a      	ldr	r1, [pc, #296]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 80073f8:	4a4a      	ldr	r2, [pc, #296]	; (8007524 <HAL_RCC_ClockConfig+0x23c>)
 80073fa:	698b      	ldr	r3, [r1, #24]
 80073fc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007400:	5cd3      	ldrb	r3, [r2, r3]
 8007402:	f003 031f 	and.w	r3, r3, #31
 8007406:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007408:	698b      	ldr	r3, [r1, #24]
 800740a:	f003 030f 	and.w	r3, r3, #15
 800740e:	5cd3      	ldrb	r3, [r2, r3]
 8007410:	4a45      	ldr	r2, [pc, #276]	; (8007528 <HAL_RCC_ClockConfig+0x240>)
 8007412:	f003 031f 	and.w	r3, r3, #31
 8007416:	fa20 f303 	lsr.w	r3, r0, r3
 800741a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800741c:	4b43      	ldr	r3, [pc, #268]	; (800752c <HAL_RCC_ClockConfig+0x244>)
 800741e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8007420:	4b43      	ldr	r3, [pc, #268]	; (8007530 <HAL_RCC_ClockConfig+0x248>)
}
 8007422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	f7f9 bfd8 	b.w	80013dc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	f023 030f 	bic.w	r3, r3, #15
 8007432:	430b      	orrs	r3, r1
 8007434:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	428b      	cmp	r3, r1
 800743e:	f47f af58 	bne.w	80072f2 <HAL_RCC_ClockConfig+0xa>
 8007442:	e760      	b.n	8007306 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007444:	4936      	ldr	r1, [pc, #216]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 8007446:	6926      	ldr	r6, [r4, #16]
 8007448:	6988      	ldr	r0, [r1, #24]
 800744a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800744e:	4286      	cmp	r6, r0
 8007450:	f67f af5d 	bls.w	800730e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007454:	698a      	ldr	r2, [r1, #24]
 8007456:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800745a:	4332      	orrs	r2, r6
 800745c:	618a      	str	r2, [r1, #24]
 800745e:	e756      	b.n	800730e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007460:	4b2f      	ldr	r3, [pc, #188]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 8007462:	68a1      	ldr	r1, [r4, #8]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800746a:	430a      	orrs	r2, r1
 800746c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800746e:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007470:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007472:	2a02      	cmp	r2, #2
 8007474:	d11d      	bne.n	80074b2 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007476:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800747a:	f43f af3a 	beq.w	80072f2 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800747e:	4e28      	ldr	r6, [pc, #160]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007480:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007484:	6933      	ldr	r3, [r6, #16]
 8007486:	f023 0307 	bic.w	r3, r3, #7
 800748a:	4313      	orrs	r3, r2
 800748c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 800748e:	f7fd f88f 	bl	80045b0 <HAL_GetTick>
 8007492:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007494:	6933      	ldr	r3, [r6, #16]
 8007496:	6862      	ldr	r2, [r4, #4]
 8007498:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800749c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 80074a0:	f43f af6f 	beq.w	8007382 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074a4:	f7fd f884 	bl	80045b0 <HAL_GetTick>
 80074a8:	1bc0      	subs	r0, r0, r7
 80074aa:	4540      	cmp	r0, r8
 80074ac:	d9f2      	bls.n	8007494 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 80074ae:	2003      	movs	r0, #3
 80074b0:	e720      	b.n	80072f4 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074b2:	2a03      	cmp	r2, #3
 80074b4:	d102      	bne.n	80074bc <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074b6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80074ba:	e7de      	b.n	800747a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80074bc:	2a01      	cmp	r2, #1
 80074be:	d102      	bne.n	80074c6 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80074c0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80074c4:	e7d9      	b.n	800747a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80074c6:	f013 0f04 	tst.w	r3, #4
 80074ca:	e7d6      	b.n	800747a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074cc:	4914      	ldr	r1, [pc, #80]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 80074ce:	68e6      	ldr	r6, [r4, #12]
 80074d0:	6988      	ldr	r0, [r1, #24]
 80074d2:	f000 000f 	and.w	r0, r0, #15
 80074d6:	4286      	cmp	r6, r0
 80074d8:	f4bf af57 	bcs.w	800738a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074dc:	698a      	ldr	r2, [r1, #24]
 80074de:	f022 020f 	bic.w	r2, r2, #15
 80074e2:	4332      	orrs	r2, r6
 80074e4:	618a      	str	r2, [r1, #24]
 80074e6:	e750      	b.n	800738a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074e8:	680a      	ldr	r2, [r1, #0]
 80074ea:	f022 020f 	bic.w	r2, r2, #15
 80074ee:	432a      	orrs	r2, r5
 80074f0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f2:	680a      	ldr	r2, [r1, #0]
 80074f4:	f002 020f 	and.w	r2, r2, #15
 80074f8:	42aa      	cmp	r2, r5
 80074fa:	f47f aefa 	bne.w	80072f2 <HAL_RCC_ClockConfig+0xa>
 80074fe:	e74b      	b.n	8007398 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007500:	4907      	ldr	r1, [pc, #28]	; (8007520 <HAL_RCC_ClockConfig+0x238>)
 8007502:	6925      	ldr	r5, [r4, #16]
 8007504:	6988      	ldr	r0, [r1, #24]
 8007506:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800750a:	4285      	cmp	r5, r0
 800750c:	f4bf af47 	bcs.w	800739e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007510:	698a      	ldr	r2, [r1, #24]
 8007512:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007516:	432a      	orrs	r2, r5
 8007518:	618a      	str	r2, [r1, #24]
 800751a:	e740      	b.n	800739e <HAL_RCC_ClockConfig+0xb6>
 800751c:	52002000 	.word	0x52002000
 8007520:	58024400 	.word	0x58024400
 8007524:	0801fb04 	.word	0x0801fb04
 8007528:	24000040 	.word	0x24000040
 800752c:	2400003c 	.word	0x2400003c
 8007530:	24000048 	.word	0x24000048

08007534 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007534:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007536:	4c0c      	ldr	r4, [pc, #48]	; (8007568 <HAL_RCC_GetHCLKFreq+0x34>)
 8007538:	f7ff fe36 	bl	80071a8 <HAL_RCC_GetSysClockFreq>
 800753c:	490b      	ldr	r1, [pc, #44]	; (800756c <HAL_RCC_GetHCLKFreq+0x38>)
 800753e:	69a3      	ldr	r3, [r4, #24]
 8007540:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007544:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007546:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007548:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800754c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007550:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007554:	5ccb      	ldrb	r3, [r1, r3]
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	fa22 f003 	lsr.w	r0, r2, r3
 800755e:	4b04      	ldr	r3, [pc, #16]	; (8007570 <HAL_RCC_GetHCLKFreq+0x3c>)
 8007560:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007562:	4b04      	ldr	r3, [pc, #16]	; (8007574 <HAL_RCC_GetHCLKFreq+0x40>)
 8007564:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007566:	bd10      	pop	{r4, pc}
 8007568:	58024400 	.word	0x58024400
 800756c:	0801fb04 	.word	0x0801fb04
 8007570:	24000040 	.word	0x24000040
 8007574:	2400003c 	.word	0x2400003c

08007578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007578:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800757a:	f7ff ffdb 	bl	8007534 <HAL_RCC_GetHCLKFreq>
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007580:	4a05      	ldr	r2, [pc, #20]	; (8007598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007582:	69db      	ldr	r3, [r3, #28]
 8007584:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007588:	5cd3      	ldrb	r3, [r2, r3]
 800758a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800758e:	40d8      	lsrs	r0, r3
 8007590:	bd08      	pop	{r3, pc}
 8007592:	bf00      	nop
 8007594:	58024400 	.word	0x58024400
 8007598:	0801fb04 	.word	0x0801fb04

0800759c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800759c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800759e:	f7ff ffc9 	bl	8007534 <HAL_RCC_GetHCLKFreq>
 80075a2:	4b05      	ldr	r3, [pc, #20]	; (80075b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80075a4:	4a05      	ldr	r2, [pc, #20]	; (80075bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80075a6:	69db      	ldr	r3, [r3, #28]
 80075a8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80075ac:	5cd3      	ldrb	r3, [r2, r3]
 80075ae:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80075b2:	40d8      	lsrs	r0, r3
 80075b4:	bd08      	pop	{r3, pc}
 80075b6:	bf00      	nop
 80075b8:	58024400 	.word	0x58024400
 80075bc:	0801fb04 	.word	0x0801fb04

080075c0 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80075c0:	233f      	movs	r3, #63	; 0x3f
 80075c2:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80075c4:	4b11      	ldr	r3, [pc, #68]	; (800760c <HAL_RCC_GetClockConfig+0x4c>)
 80075c6:	691a      	ldr	r2, [r3, #16]
 80075c8:	f002 0207 	and.w	r2, r2, #7
 80075cc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80075ce:	699a      	ldr	r2, [r3, #24]
 80075d0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 80075d4:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80075d6:	699a      	ldr	r2, [r3, #24]
 80075d8:	f002 020f 	and.w	r2, r2, #15
 80075dc:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075e4:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80075e6:	69da      	ldr	r2, [r3, #28]
 80075e8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80075ec:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80075f4:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075fc:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80075fe:	4b04      	ldr	r3, [pc, #16]	; (8007610 <HAL_RCC_GetClockConfig+0x50>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	600b      	str	r3, [r1, #0]
}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	58024400 	.word	0x58024400
 8007610:	52002000 	.word	0x52002000

08007614 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007616:	4c3a      	ldr	r4, [pc, #232]	; (8007700 <RCCEx_PLL2_Config+0xec>)
{
 8007618:	4606      	mov	r6, r0
 800761a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800761c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b03      	cmp	r3, #3
 8007624:	d069      	beq.n	80076fa <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800762c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762e:	f7fc ffbf 	bl	80045b0 <HAL_GetTick>
 8007632:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	011a      	lsls	r2, r3, #4
 8007638:	d44b      	bmi.n	80076d2 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800763a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800763c:	6832      	ldr	r2, [r6, #0]
 800763e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007642:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007646:	62a3      	str	r3, [r4, #40]	; 0x28
 8007648:	68b3      	ldr	r3, [r6, #8]
 800764a:	68f2      	ldr	r2, [r6, #12]
 800764c:	3b01      	subs	r3, #1
 800764e:	3a01      	subs	r2, #1
 8007650:	025b      	lsls	r3, r3, #9
 8007652:	0412      	lsls	r2, r2, #16
 8007654:	b29b      	uxth	r3, r3
 8007656:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800765a:	4313      	orrs	r3, r2
 800765c:	6872      	ldr	r2, [r6, #4]
 800765e:	3a01      	subs	r2, #1
 8007660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007664:	4313      	orrs	r3, r2
 8007666:	6932      	ldr	r2, [r6, #16]
 8007668:	3a01      	subs	r2, #1
 800766a:	0612      	lsls	r2, r2, #24
 800766c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007670:	4313      	orrs	r3, r2
 8007672:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007674:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007676:	6972      	ldr	r2, [r6, #20]
 8007678:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800767c:	4313      	orrs	r3, r2
 800767e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007680:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007682:	69b2      	ldr	r2, [r6, #24]
 8007684:	f023 0320 	bic.w	r3, r3, #32
 8007688:	4313      	orrs	r3, r2
 800768a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800768c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800768e:	f023 0310 	bic.w	r3, r3, #16
 8007692:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007694:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007696:	69f2      	ldr	r2, [r6, #28]
 8007698:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800769c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80076a0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80076a4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076a8:	f043 0310 	orr.w	r3, r3, #16
 80076ac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80076b0:	b9b5      	cbnz	r5, 80076e0 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80076b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80076b8:	4c11      	ldr	r4, [pc, #68]	; (8007700 <RCCEx_PLL2_Config+0xec>)
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076c0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c2:	f7fc ff75 	bl	80045b0 <HAL_GetTick>
 80076c6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	011b      	lsls	r3, r3, #4
 80076cc:	d50f      	bpl.n	80076ee <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 80076ce:	2000      	movs	r0, #0
 80076d0:	e005      	b.n	80076de <RCCEx_PLL2_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076d2:	f7fc ff6d 	bl	80045b0 <HAL_GetTick>
 80076d6:	1bc0      	subs	r0, r0, r7
 80076d8:	2802      	cmp	r0, #2
 80076da:	d9ab      	bls.n	8007634 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 80076dc:	2003      	movs	r0, #3
}
 80076de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80076e0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80076e2:	bf0c      	ite	eq
 80076e4:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80076e8:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80076ec:	e7e3      	b.n	80076b6 <RCCEx_PLL2_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076ee:	f7fc ff5f 	bl	80045b0 <HAL_GetTick>
 80076f2:	1b40      	subs	r0, r0, r5
 80076f4:	2802      	cmp	r0, #2
 80076f6:	d9e7      	bls.n	80076c8 <RCCEx_PLL2_Config+0xb4>
 80076f8:	e7f0      	b.n	80076dc <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 80076fa:	2001      	movs	r0, #1
 80076fc:	e7ef      	b.n	80076de <RCCEx_PLL2_Config+0xca>
 80076fe:	bf00      	nop
 8007700:	58024400 	.word	0x58024400

08007704 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007706:	4c3a      	ldr	r4, [pc, #232]	; (80077f0 <RCCEx_PLL3_Config+0xec>)
{
 8007708:	4606      	mov	r6, r0
 800770a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800770c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b03      	cmp	r3, #3
 8007714:	d069      	beq.n	80077ea <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800771c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800771e:	f7fc ff47 	bl	80045b0 <HAL_GetTick>
 8007722:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	009a      	lsls	r2, r3, #2
 8007728:	d44b      	bmi.n	80077c2 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800772a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800772c:	6832      	ldr	r2, [r6, #0]
 800772e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007732:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007736:	62a3      	str	r3, [r4, #40]	; 0x28
 8007738:	68b3      	ldr	r3, [r6, #8]
 800773a:	68f2      	ldr	r2, [r6, #12]
 800773c:	3b01      	subs	r3, #1
 800773e:	3a01      	subs	r2, #1
 8007740:	025b      	lsls	r3, r3, #9
 8007742:	0412      	lsls	r2, r2, #16
 8007744:	b29b      	uxth	r3, r3
 8007746:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800774a:	4313      	orrs	r3, r2
 800774c:	6872      	ldr	r2, [r6, #4]
 800774e:	3a01      	subs	r2, #1
 8007750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007754:	4313      	orrs	r3, r2
 8007756:	6932      	ldr	r2, [r6, #16]
 8007758:	3a01      	subs	r2, #1
 800775a:	0612      	lsls	r2, r2, #24
 800775c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007760:	4313      	orrs	r3, r2
 8007762:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007764:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007766:	6972      	ldr	r2, [r6, #20]
 8007768:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800776c:	4313      	orrs	r3, r2
 800776e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007770:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007772:	69b2      	ldr	r2, [r6, #24]
 8007774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007778:	4313      	orrs	r3, r2
 800777a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800777c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800777e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007782:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007784:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007786:	69f2      	ldr	r2, [r6, #28]
 8007788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800778c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007790:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007794:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007796:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800779c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800779e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80077a0:	b9b5      	cbnz	r5, 80077d0 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077a6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077a8:	4c11      	ldr	r4, [pc, #68]	; (80077f0 <RCCEx_PLL3_Config+0xec>)
 80077aa:	6823      	ldr	r3, [r4, #0]
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077b2:	f7fc fefd 	bl	80045b0 <HAL_GetTick>
 80077b6:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80077b8:	6823      	ldr	r3, [r4, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	d50f      	bpl.n	80077de <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 80077be:	2000      	movs	r0, #0
 80077c0:	e005      	b.n	80077ce <RCCEx_PLL3_Config+0xca>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077c2:	f7fc fef5 	bl	80045b0 <HAL_GetTick>
 80077c6:	1bc0      	subs	r0, r0, r7
 80077c8:	2802      	cmp	r0, #2
 80077ca:	d9ab      	bls.n	8007724 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 80077cc:	2003      	movs	r0, #3
}
 80077ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(Divider == DIVIDER_Q_UPDATE)
 80077d0:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077d2:	bf0c      	ite	eq
 80077d4:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077d8:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80077dc:	e7e3      	b.n	80077a6 <RCCEx_PLL3_Config+0xa2>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077de:	f7fc fee7 	bl	80045b0 <HAL_GetTick>
 80077e2:	1b40      	subs	r0, r0, r5
 80077e4:	2802      	cmp	r0, #2
 80077e6:	d9e7      	bls.n	80077b8 <RCCEx_PLL3_Config+0xb4>
 80077e8:	e7f0      	b.n	80077cc <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 80077ea:	2001      	movs	r0, #1
 80077ec:	e7ef      	b.n	80077ce <RCCEx_PLL3_Config+0xca>
 80077ee:	bf00      	nop
 80077f0:	58024400 	.word	0x58024400

080077f4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80077f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077f8:	6806      	ldr	r6, [r0, #0]
{
 80077fa:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80077fc:	f016 6600 	ands.w	r6, r6, #134217728	; 0x8000000
 8007800:	d009      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007802:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8007804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007808:	d02c      	beq.n	8007864 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800780a:	d811      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800780c:	b1e3      	cbz	r3, 8007848 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800780e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007812:	d01f      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8007814:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007816:	682b      	ldr	r3, [r5, #0]
 8007818:	05d8      	lsls	r0, r3, #23
 800781a:	f140 80d7 	bpl.w	80079cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    switch(PeriphClkInit->Sai1ClockSelection)
 800781e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8007820:	2b04      	cmp	r3, #4
 8007822:	f200 80d2 	bhi.w	80079ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 8007826:	e8df f003 	tbb	[pc, r3]
 800782a:	2922      	.short	0x2922
 800782c:	27ca      	.short	0x27ca
 800782e:	27          	.byte	0x27
 800782f:	00          	.byte	0x00
    switch(PeriphClkInit->SpdifrxClockSelection)
 8007830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007834:	d1ee      	bne.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x20>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007836:	4aac      	ldr	r2, [pc, #688]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007838:	2600      	movs	r6, #0
 800783a:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800783c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800783e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007842:	430b      	orrs	r3, r1
 8007844:	6513      	str	r3, [r2, #80]	; 0x50
 8007846:	e7e6      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x22>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007848:	4aa7      	ldr	r2, [pc, #668]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800784a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800784c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007850:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007852:	e7f0      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007854:	2102      	movs	r1, #2
 8007856:	3004      	adds	r0, #4
 8007858:	f7ff fedc 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800785c:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 800785e:	2800      	cmp	r0, #0
 8007860:	d1d9      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8007862:	e7e8      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x42>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007864:	2102      	movs	r1, #2
 8007866:	3024      	adds	r0, #36	; 0x24
 8007868:	f7ff ff4c 	bl	8007704 <RCCEx_PLL3_Config>
 800786c:	e7f6      	b.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800786e:	4a9e      	ldr	r2, [pc, #632]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007870:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007876:	62d3      	str	r3, [r2, #44]	; 0x2c
    switch(PeriphClkInit->Sai1ClockSelection)
 8007878:	4634      	mov	r4, r6
 800787a:	e004      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0x92>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800787c:	2100      	movs	r1, #0
 800787e:	1d28      	adds	r0, r5, #4
 8007880:	f7ff fec8 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007884:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007886:	2c00      	cmp	r4, #0
 8007888:	f040 80a2 	bne.w	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800788c:	4a96      	ldr	r2, [pc, #600]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800788e:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8007890:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007892:	f023 0307 	bic.w	r3, r3, #7
 8007896:	430b      	orrs	r3, r1
 8007898:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800789a:	682b      	ldr	r3, [r5, #0]
 800789c:	0559      	lsls	r1, r3, #21
 800789e:	d510      	bpl.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4AClockSelection)
 80078a0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
 80078a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078a8:	f000 80b3 	beq.w	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80078ac:	f200 8092 	bhi.w	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	f000 80a2 	beq.w	80079fa <HAL_RCCEx_PeriphCLKConfig+0x206>
 80078b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ba:	f000 80a4 	beq.w	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x212>
 80078be:	2601      	movs	r6, #1
 80078c0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80078c2:	682b      	ldr	r3, [r5, #0]
 80078c4:	051a      	lsls	r2, r3, #20
 80078c6:	d510      	bpl.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->Sai4BClockSelection)
 80078c8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
 80078cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078d0:	f000 80c6 	beq.w	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80078d4:	f200 80a5 	bhi.w	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x22e>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 80b5 	beq.w	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80078de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078e2:	f000 80b7 	beq.w	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x260>
 80078e6:	2601      	movs	r6, #1
 80078e8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	019b      	lsls	r3, r3, #6
 80078ee:	d50d      	bpl.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->OspiClockSelection)
 80078f0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	f000 80ce 	beq.w	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80078f8:	f200 80ba 	bhi.w	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 80ba 	beq.w	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007902:	2b10      	cmp	r3, #16
 8007904:	f000 80c0 	beq.w	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8007908:	2601      	movs	r6, #1
 800790a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800790c:	682b      	ldr	r3, [r5, #0]
 800790e:	04df      	lsls	r7, r3, #19
 8007910:	d50f      	bpl.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007912:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007918:	f000 80e0 	beq.w	8007adc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800791c:	f200 80c2 	bhi.w	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80cf 	beq.w	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800792a:	f000 80d1 	beq.w	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800792e:	2601      	movs	r6, #1
 8007930:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007932:	682b      	ldr	r3, [r5, #0]
 8007934:	0498      	lsls	r0, r3, #18
 8007936:	d50f      	bpl.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007938:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800793a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800793e:	f000 80ef 	beq.w	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8007942:	f200 80d5 	bhi.w	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 80db 	beq.w	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 800794c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007950:	f000 80e0 	beq.w	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x320>
 8007954:	2601      	movs	r6, #1
 8007956:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	0459      	lsls	r1, r3, #17
 800795c:	d510      	bpl.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch(PeriphClkInit->Spi6ClockSelection)
 800795e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
 8007962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007966:	f000 80fc 	beq.w	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800796a:	f200 80e1 	bhi.w	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 80e7 	beq.w	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007974:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007978:	f000 80ed 	beq.w	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800797c:	2601      	movs	r6, #1
 800797e:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007980:	682b      	ldr	r3, [r5, #0]
 8007982:	041a      	lsls	r2, r3, #16
 8007984:	d50d      	bpl.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->FdcanClockSelection)
 8007986:	6eab      	ldr	r3, [r5, #104]	; 0x68
 8007988:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800798c:	f000 80f1 	beq.w	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007994:	f000 80fb 	beq.w	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80ef 	beq.w	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x388>
 800799e:	2601      	movs	r6, #1
 80079a0:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	01db      	lsls	r3, r3, #7
 80079a6:	f140 8108 	bpl.w	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3c6>
    switch(PeriphClkInit->FmcClockSelection)
 80079aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	f200 8148 	bhi.w	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80079b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80079b6:	00f9      	.short	0x00f9
 80079b8:	014000f4 	.word	0x014000f4
 80079bc:	00f9      	.short	0x00f9
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079be:	2100      	movs	r1, #0
 80079c0:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80079c4:	f7ff fe9e 	bl	8007704 <RCCEx_PLL3_Config>
 80079c8:	e75c      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch(PeriphClkInit->Sai1ClockSelection)
 80079ca:	2601      	movs	r6, #1
 80079cc:	4634      	mov	r4, r6
 80079ce:	e764      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80079d0:	4626      	mov	r6, r4
 80079d2:	e762      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch(PeriphClkInit->Sai4AClockSelection)
 80079d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80079d8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80079dc:	d003      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80079de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079e2:	f47f af6c 	bne.w	80078be <HAL_RCCEx_PeriphCLKConfig+0xca>
    if(ret == HAL_OK)
 80079e6:	b9d4      	cbnz	r4, 8007a1e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80079e8:	4a3f      	ldr	r2, [pc, #252]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079ea:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 80079ee:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80079f0:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6593      	str	r3, [r2, #88]	; 0x58
 80079f8:	e763      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079fa:	4a3b      	ldr	r2, [pc, #236]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80079fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a02:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007a04:	e7ef      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a06:	2100      	movs	r1, #0
 8007a08:	1d28      	adds	r0, r5, #4
 8007a0a:	f7ff fe03 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a0e:	4604      	mov	r4, r0
      break;
 8007a10:	e7e9      	b.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a12:	2100      	movs	r1, #0
 8007a14:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007a18:	f7ff fe74 	bl	8007704 <RCCEx_PLL3_Config>
 8007a1c:	e7f7      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8007a1e:	4626      	mov	r6, r4
 8007a20:	e74f      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    switch(PeriphClkInit->Sai4BClockSelection)
 8007a22:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a26:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8007a2a:	d003      	beq.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007a2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a30:	f47f af59 	bne.w	80078e6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    if(ret == HAL_OK)
 8007a34:	b9d4      	cbnz	r4, 8007a6c <HAL_RCCEx_PeriphCLKConfig+0x278>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a36:	4a2c      	ldr	r2, [pc, #176]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a38:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8007a3c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007a3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007a42:	430b      	orrs	r3, r1
 8007a44:	6593      	str	r3, [r2, #88]	; 0x58
 8007a46:	e750      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a48:	4a27      	ldr	r2, [pc, #156]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a4a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a50:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007a52:	e7ef      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a54:	2100      	movs	r1, #0
 8007a56:	1d28      	adds	r0, r5, #4
 8007a58:	f7ff fddc 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a5c:	4604      	mov	r4, r0
      break;
 8007a5e:	e7e9      	b.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x240>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a60:	2100      	movs	r1, #0
 8007a62:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007a66:	f7ff fe4d 	bl	8007704 <RCCEx_PLL3_Config>
 8007a6a:	e7f7      	b.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x268>
 8007a6c:	4626      	mov	r6, r4
 8007a6e:	e73c      	b.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
    switch(PeriphClkInit->OspiClockSelection)
 8007a70:	2b30      	cmp	r3, #48	; 0x30
 8007a72:	f47f af49 	bne.w	8007908 <HAL_RCCEx_PeriphCLKConfig+0x114>
    if(ret == HAL_OK)
 8007a76:	b99c      	cbnz	r4, 8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007a78:	4a1b      	ldr	r2, [pc, #108]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a7a:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007a7c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007a7e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007a82:	430b      	orrs	r3, r1
 8007a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a86:	e741      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x118>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a88:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a8a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a90:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007a92:	e7f0      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x282>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a94:	2102      	movs	r1, #2
 8007a96:	1d28      	adds	r0, r5, #4
 8007a98:	f7ff fdbc 	bl	8007614 <RCCEx_PLL2_Config>
 8007a9c:	4604      	mov	r4, r0
      break;
 8007a9e:	e7ea      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x282>
 8007aa0:	4626      	mov	r6, r4
 8007aa2:	e733      	b.n	800790c <HAL_RCCEx_PeriphCLKConfig+0x118>
    switch(PeriphClkInit->Spi123ClockSelection)
 8007aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aa8:	d003      	beq.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 8007aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aae:	f47f af3e 	bne.w	800792e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if(ret == HAL_OK)
 8007ab2:	b9dc      	cbnz	r4, 8007aec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007ab4:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ab6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8007ab8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007abe:	430b      	orrs	r3, r1
 8007ac0:	6513      	str	r3, [r2, #80]	; 0x50
 8007ac2:	e736      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ac4:	4a08      	ldr	r2, [pc, #32]	; (8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ac6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007acc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8007ace:	e7f0      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	1d28      	adds	r0, r5, #4
 8007ad4:	f7ff fd9e 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ad8:	4604      	mov	r4, r0
      break;
 8007ada:	e7ea      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007adc:	2100      	movs	r1, #0
 8007ade:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007ae2:	f7ff fe0f 	bl	8007704 <RCCEx_PLL3_Config>
 8007ae6:	e7f7      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8007ae8:	58024400 	.word	0x58024400
 8007aec:	4626      	mov	r6, r4
 8007aee:	e720      	b.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    switch(PeriphClkInit->Spi45ClockSelection)
 8007af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007af4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 8007af8:	d003      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8007afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007afe:	f47f af29 	bne.w	8007954 <HAL_RCCEx_PeriphCLKConfig+0x160>
    if(ret == HAL_OK)
 8007b02:	b99c      	cbnz	r4, 8007b2c <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007b04:	4a8f      	ldr	r2, [pc, #572]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007b06:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8007b08:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007b0a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8007b0e:	430b      	orrs	r3, r1
 8007b10:	6513      	str	r3, [r2, #80]	; 0x50
 8007b12:	e721      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x164>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b14:	2101      	movs	r1, #1
 8007b16:	1d28      	adds	r0, r5, #4
 8007b18:	f7ff fd7c 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b1c:	4604      	mov	r4, r0
      break;
 8007b1e:	e7f0      	b.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b20:	2101      	movs	r1, #1
 8007b22:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007b26:	f7ff fded 	bl	8007704 <RCCEx_PLL3_Config>
 8007b2a:	e7f7      	b.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8007b2c:	4626      	mov	r6, r4
 8007b2e:	e713      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x164>
    switch(PeriphClkInit->Spi6ClockSelection)
 8007b30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b34:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007b38:	d003      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007b3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007b3e:	f47f af1d 	bne.w	800797c <HAL_RCCEx_PeriphCLKConfig+0x188>
    if(ret == HAL_OK)
 8007b42:	b9a4      	cbnz	r4, 8007b6e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b44:	4a7f      	ldr	r2, [pc, #508]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007b46:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8007b4a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b4c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007b50:	430b      	orrs	r3, r1
 8007b52:	6593      	str	r3, [r2, #88]	; 0x58
 8007b54:	e714      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b56:	2101      	movs	r1, #1
 8007b58:	1d28      	adds	r0, r5, #4
 8007b5a:	f7ff fd5b 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b5e:	4604      	mov	r4, r0
      break;
 8007b60:	e7ef      	b.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b62:	2101      	movs	r1, #1
 8007b64:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007b68:	f7ff fdcc 	bl	8007704 <RCCEx_PLL3_Config>
 8007b6c:	e7f7      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8007b6e:	4626      	mov	r6, r4
 8007b70:	e706      	b.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b72:	4a74      	ldr	r2, [pc, #464]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007b74:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007b7c:	b96c      	cbnz	r4, 8007b9a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b7e:	4a71      	ldr	r2, [pc, #452]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007b80:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8007b82:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007b84:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007b88:	430b      	orrs	r3, r1
 8007b8a:	6513      	str	r3, [r2, #80]	; 0x50
 8007b8c:	e709      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b8e:	2101      	movs	r1, #1
 8007b90:	1d28      	adds	r0, r5, #4
 8007b92:	f7ff fd3f 	bl	8007614 <RCCEx_PLL2_Config>
 8007b96:	4604      	mov	r4, r0
      break;
 8007b98:	e7f0      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x388>
 8007b9a:	4626      	mov	r6, r4
 8007b9c:	e701      	b.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b9e:	4a69      	ldr	r2, [pc, #420]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007ba0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007ba8:	2c00      	cmp	r4, #0
 8007baa:	d14d      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x454>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007bac:	4a65      	ldr	r2, [pc, #404]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007bae:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8007bb0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	430b      	orrs	r3, r1
 8007bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007bba:	682b      	ldr	r3, [r5, #0]
 8007bbc:	025f      	lsls	r7, r3, #9
 8007bbe:	d54d      	bpl.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x468>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007bc0:	4f61      	ldr	r7, [pc, #388]	; (8007d48 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc8:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8007bca:	f7fc fcf1 	bl	80045b0 <HAL_GetTick>
 8007bce:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	05d8      	lsls	r0, r3, #23
 8007bd4:	d53a      	bpl.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x458>
    if(ret == HAL_OK)
 8007bd6:	2c00      	cmp	r4, #0
 8007bd8:	d16c      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007bda:	4b5a      	ldr	r3, [pc, #360]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007bdc:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
 8007be0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007be2:	4042      	eors	r2, r0
 8007be4:	f412 7f40 	tst.w	r2, #768	; 0x300
 8007be8:	d00b      	beq.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bec:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007bee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007bf2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007bf6:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007bf8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007bfa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007bfe:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007c00:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007c02:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8007c06:	d040      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x496>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007c08:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8007c0c:	494d      	ldr	r1, [pc, #308]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007c0e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007c12:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007c16:	d149      	bne.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
 8007c18:	6908      	ldr	r0, [r1, #16]
 8007c1a:	4a4c      	ldr	r2, [pc, #304]	; (8007d4c <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8007c1c:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8007c20:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 8007c24:	4302      	orrs	r2, r0
 8007c26:	610a      	str	r2, [r1, #16]
 8007c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c2c:	4a45      	ldr	r2, [pc, #276]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007c2e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007c30:	430b      	orrs	r3, r1
 8007c32:	6713      	str	r3, [r2, #112]	; 0x70
 8007c34:	e012      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c36:	2102      	movs	r1, #2
 8007c38:	1d28      	adds	r0, r5, #4
 8007c3a:	f7ff fceb 	bl	8007614 <RCCEx_PLL2_Config>
 8007c3e:	4604      	mov	r4, r0
      break;
 8007c40:	e7b2      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    switch(PeriphClkInit->FmcClockSelection)
 8007c42:	2601      	movs	r6, #1
 8007c44:	4634      	mov	r4, r6
 8007c46:	e7b8      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8007c48:	4626      	mov	r6, r4
 8007c4a:	e7b6      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4c:	f7fc fcb0 	bl	80045b0 <HAL_GetTick>
 8007c50:	eba0 0008 	sub.w	r0, r0, r8
 8007c54:	2864      	cmp	r0, #100	; 0x64
 8007c56:	d9bb      	bls.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
        ret = HAL_TIMEOUT;
 8007c58:	2603      	movs	r6, #3
 8007c5a:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c5c:	682b      	ldr	r3, [r5, #0]
 8007c5e:	07da      	lsls	r2, r3, #31
 8007c60:	d508      	bpl.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c62:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d03c      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8007c68:	d826      	bhi.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
 8007c6a:	b35b      	cbz	r3, 8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d032      	beq.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8007c70:	2601      	movs	r6, #1
 8007c72:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	079b      	lsls	r3, r3, #30
 8007c78:	d548      	bpl.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007c7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d85b      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x544>
 8007c80:	e8df f003 	tbb	[pc, r3]
 8007c84:	3c54373c 	.word	0x3c54373c
 8007c88:	3c3c      	.short	0x3c3c
        tickstart = HAL_GetTick();
 8007c8a:	f7fc fc91 	bl	80045b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c8e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>
        tickstart = HAL_GetTick();
 8007c92:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c94:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c98:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007c9c:	0799      	lsls	r1, r3, #30
 8007c9e:	d4b3      	bmi.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x414>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ca0:	f7fc fc86 	bl	80045b0 <HAL_GetTick>
 8007ca4:	1bc0      	subs	r0, r0, r7
 8007ca6:	4548      	cmp	r0, r9
 8007ca8:	d9f6      	bls.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8007caa:	e7d5      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x464>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cac:	690a      	ldr	r2, [r1, #16]
 8007cae:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007cb2:	e7b8      	b.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8007cb4:	4626      	mov	r6, r4
 8007cb6:	e7d1      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x468>
    switch(PeriphClkInit->Usart16ClockSelection)
 8007cb8:	f023 0208 	bic.w	r2, r3, #8
 8007cbc:	2a20      	cmp	r2, #32
 8007cbe:	d001      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8007cc0:	2b18      	cmp	r3, #24
 8007cc2:	d1d5      	bne.n	8007c70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    if(ret == HAL_OK)
 8007cc4:	b99c      	cbnz	r4, 8007cee <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cc6:	4a1f      	ldr	r2, [pc, #124]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007cc8:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8007cca:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007ccc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	6553      	str	r3, [r2, #84]	; 0x54
 8007cd4:	e7ce      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	1d28      	adds	r0, r5, #4
 8007cda:	f7ff fc9b 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cde:	4604      	mov	r4, r0
      break;
 8007ce0:	e7f0      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ce2:	2101      	movs	r1, #1
 8007ce4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007ce8:	f7ff fd0c 	bl	8007704 <RCCEx_PLL3_Config>
 8007cec:	e7f7      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x4ea>
 8007cee:	4626      	mov	r6, r4
 8007cf0:	e7c0      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x480>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	1d28      	adds	r0, r5, #4
 8007cf6:	f7ff fc8d 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cfa:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007cfc:	b9fc      	cbnz	r4, 8007d3e <HAL_RCCEx_PeriphCLKConfig+0x54a>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007cfe:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8007d00:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8007d02:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007d04:	f023 0307 	bic.w	r3, r3, #7
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	075f      	lsls	r7, r3, #29
 8007d10:	d52e      	bpl.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d12:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	f200 8134 	bhi.w	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x790>
 8007d1c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007d20:	0018001d 	.word	0x0018001d
 8007d24:	001d012c 	.word	0x001d012c
 8007d28:	001d001d 	.word	0x001d001d
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007d32:	f7ff fce7 	bl	8007704 <RCCEx_PLL3_Config>
 8007d36:	e7e0      	b.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x506>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d38:	2601      	movs	r6, #1
 8007d3a:	4634      	mov	r4, r6
 8007d3c:	e7e6      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007d3e:	4626      	mov	r6, r4
 8007d40:	e7e4      	b.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007d42:	bf00      	nop
 8007d44:	58024400 	.word	0x58024400
 8007d48:	58024800 	.word	0x58024800
 8007d4c:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d50:	2101      	movs	r1, #1
 8007d52:	1d28      	adds	r0, r5, #4
 8007d54:	f7ff fc5e 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d58:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007d5a:	2c00      	cmp	r4, #0
 8007d5c:	f040 8115 	bne.w	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x796>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007d60:	4aac      	ldr	r2, [pc, #688]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007d62:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8007d66:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007d68:	f023 0307 	bic.w	r3, r3, #7
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	0698      	lsls	r0, r3, #26
 8007d74:	d510      	bpl.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007d76:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 8007d7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d7e:	f000 811f 	beq.w	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8007d82:	f200 8104 	bhi.w	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 810a 	beq.w	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8007d8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d90:	f000 8110 	beq.w	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007d94:	2601      	movs	r6, #1
 8007d96:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	0659      	lsls	r1, r3, #25
 8007d9c:	d510      	bpl.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d9e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8007da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da6:	f000 812c 	beq.w	8008002 <HAL_RCCEx_PeriphCLKConfig+0x80e>
 8007daa:	f200 8111 	bhi.w	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8117 	beq.w	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8007db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db8:	f000 811d 	beq.w	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x802>
 8007dbc:	2601      	movs	r6, #1
 8007dbe:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007dc0:	682b      	ldr	r3, [r5, #0]
 8007dc2:	061a      	lsls	r2, r3, #24
 8007dc4:	d510      	bpl.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007dc6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8007dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dce:	f000 813c 	beq.w	800804a <HAL_RCCEx_PeriphCLKConfig+0x856>
 8007dd2:	f200 8121 	bhi.w	8008018 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8127 	beq.w	800802a <HAL_RCCEx_PeriphCLKConfig+0x836>
 8007ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007de0:	f000 812d 	beq.w	800803e <HAL_RCCEx_PeriphCLKConfig+0x84a>
 8007de4:	2601      	movs	r6, #1
 8007de6:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007de8:	682b      	ldr	r3, [r5, #0]
 8007dea:	071b      	lsls	r3, r3, #28
 8007dec:	d512      	bpl.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x620>
    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007dee:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007df4:	d107      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x612>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007df6:	2102      	movs	r1, #2
 8007df8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007dfc:	f7ff fc82 	bl	8007704 <RCCEx_PLL3_Config>
          status = HAL_ERROR;
 8007e00:	2800      	cmp	r0, #0
 8007e02:	bf18      	it	ne
 8007e04:	2601      	movne	r6, #1
      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007e06:	4a83      	ldr	r2, [pc, #524]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007e08:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8007e0a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007e0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007e10:	430b      	orrs	r3, r1
 8007e12:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	06df      	lsls	r7, r3, #27
 8007e18:	d514      	bpl.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x650>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e1a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8007e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e22:	d107      	bne.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x640>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e24:	2102      	movs	r1, #2
 8007e26:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007e2a:	f7ff fc6b 	bl	8007704 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	bf18      	it	ne
 8007e32:	2601      	movne	r6, #1
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e34:	4a77      	ldr	r2, [pc, #476]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007e36:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8007e3a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e40:	430b      	orrs	r3, r1
 8007e42:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	0318      	lsls	r0, r3, #12
 8007e48:	d51a      	bpl.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    switch(PeriphClkInit->AdcClockSelection)
 8007e4a:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8007e4e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007e52:	f000 8102 	beq.w	800805a <HAL_RCCEx_PeriphCLKConfig+0x866>
 8007e56:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007e5a:	d006      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007e5c:	2900      	cmp	r1, #0
 8007e5e:	f040 8102 	bne.w	8008066 <HAL_RCCEx_PeriphCLKConfig+0x872>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e62:	1d28      	adds	r0, r5, #4
 8007e64:	f7ff fbd6 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e68:	4604      	mov	r4, r0
    if(ret == HAL_OK)
 8007e6a:	2c00      	cmp	r4, #0
 8007e6c:	f040 80fe 	bne.w	800806c <HAL_RCCEx_PeriphCLKConfig+0x878>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e70:	4a68      	ldr	r2, [pc, #416]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007e72:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8007e76:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007e78:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007e80:	682b      	ldr	r3, [r5, #0]
 8007e82:	0359      	lsls	r1, r3, #13
 8007e84:	d51c      	bpl.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    switch(PeriphClkInit->UsbClockSelection)
 8007e86:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 8007e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e8e:	f000 80ef 	beq.w	8008070 <HAL_RCCEx_PeriphCLKConfig+0x87c>
 8007e92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e96:	d008      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8007e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9c:	f040 80ef 	bne.w	800807e <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea0:	4a5c      	ldr	r2, [pc, #368]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007ea2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	f040 80ea 	bne.w	8008084 <HAL_RCCEx_PeriphCLKConfig+0x890>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007eb0:	4a58      	ldr	r2, [pc, #352]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007eb2:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
 8007eb6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007eb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	03da      	lsls	r2, r3, #15
 8007ec4:	d509      	bpl.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->SdmmcClockSelection)
 8007ec6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80dd 	beq.w	8008088 <HAL_RCCEx_PeriphCLKConfig+0x894>
 8007ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ed2:	f000 80e7 	beq.w	80080a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8007ed6:	2601      	movs	r6, #1
 8007ed8:	4634      	mov	r4, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007eda:	682b      	ldr	r3, [r5, #0]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	d507      	bpl.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x6fc>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007ee6:	f7ff fc0d 	bl	8007704 <RCCEx_PLL3_Config>
      status=HAL_ERROR;
 8007eea:	2800      	cmp	r0, #0
 8007eec:	bf18      	it	ne
 8007eee:	2601      	movne	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	039f      	lsls	r7, r3, #14
 8007ef4:	d50a      	bpl.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x718>
    switch(PeriphClkInit->RngClockSelection)
 8007ef6:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8007ef8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007efc:	f000 80e8 	beq.w	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007f00:	f200 80d8 	bhi.w	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007f04:	2900      	cmp	r1, #0
 8007f06:	f000 80db 	beq.w	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 8007f0a:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007f0c:	02d8      	lsls	r0, r3, #11
 8007f0e:	d506      	bpl.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x72a>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007f10:	4940      	ldr	r1, [pc, #256]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007f12:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8007f14:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007f16:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007f1a:	4302      	orrs	r2, r0
 8007f1c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007f1e:	0299      	lsls	r1, r3, #10
 8007f20:	d506      	bpl.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007f22:	493c      	ldr	r1, [pc, #240]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007f24:	6e68      	ldr	r0, [r5, #100]	; 0x64
 8007f26:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8007f28:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007f2c:	4302      	orrs	r2, r0
 8007f2e:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007f30:	005a      	lsls	r2, r3, #1
 8007f32:	d509      	bpl.n	8007f48 <HAL_RCCEx_PeriphCLKConfig+0x754>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007f34:	4a37      	ldr	r2, [pc, #220]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007f36:	6911      	ldr	r1, [r2, #16]
 8007f38:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8007f3c:	6111      	str	r1, [r2, #16]
 8007f3e:	6911      	ldr	r1, [r2, #16]
 8007f40:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
 8007f44:	4301      	orrs	r1, r0
 8007f46:	6111      	str	r1, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da06      	bge.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x766>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007f4c:	4931      	ldr	r1, [pc, #196]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007f4e:	6d28      	ldr	r0, [r5, #80]	; 0x50
 8007f50:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007f52:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007f56:	4302      	orrs	r2, r0
 8007f58:	64ca      	str	r2, [r1, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f5a:	021b      	lsls	r3, r3, #8
 8007f5c:	d507      	bpl.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x77a>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f5e:	4a2d      	ldr	r2, [pc, #180]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007f60:	f8d5 1084 	ldr.w	r1, [r5, #132]	; 0x84
 8007f64:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007f66:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007f6a:	430b      	orrs	r3, r1
 8007f6c:	6553      	str	r3, [r2, #84]	; 0x54
}
 8007f6e:	1e30      	subs	r0, r6, #0
 8007f70:	bf18      	it	ne
 8007f72:	2001      	movne	r0, #1
 8007f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f78:	2101      	movs	r1, #1
 8007f7a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007f7e:	f7ff fbc1 	bl	8007704 <RCCEx_PLL3_Config>
 8007f82:	e6e9      	b.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x564>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007f84:	2601      	movs	r6, #1
 8007f86:	4634      	mov	r4, r6
 8007f88:	e6f2      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007f8a:	4626      	mov	r6, r4
 8007f8c:	e6f0      	b.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007f8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007f92:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8007f96:	d003      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8007f98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f9c:	f47f aefa 	bne.w	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    if(ret == HAL_OK)
 8007fa0:	b9a4      	cbnz	r4, 8007fcc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007fa4:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8007fa8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007faa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007fae:	430b      	orrs	r3, r1
 8007fb0:	6553      	str	r3, [r2, #84]	; 0x54
 8007fb2:	e6f1      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	1d28      	adds	r0, r5, #4
 8007fb8:	f7ff fb2c 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fbc:	4604      	mov	r4, r0
      break;
 8007fbe:	e7ef      	b.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fc0:	2102      	movs	r1, #2
 8007fc2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8007fc6:	f7ff fb9d 	bl	8007704 <RCCEx_PLL3_Config>
 8007fca:	e7f7      	b.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8007fcc:	4626      	mov	r6, r4
 8007fce:	e6e3      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007fd0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fd4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8007fd8:	d003      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
 8007fda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fde:	f47f aeed 	bne.w	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    if(ret == HAL_OK)
 8007fe2:	b9a4      	cbnz	r4, 800800e <HAL_RCCEx_PeriphCLKConfig+0x81a>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007fe4:	4a0b      	ldr	r2, [pc, #44]	; (8008014 <HAL_RCCEx_PeriphCLKConfig+0x820>)
 8007fe6:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8007fea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007fec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8007ff4:	e6e4      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	1d28      	adds	r0, r5, #4
 8007ffa:	f7ff fb0b 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ffe:	4604      	mov	r4, r0
      break;
 8008000:	e7ef      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008002:	2102      	movs	r1, #2
 8008004:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008008:	f7ff fb7c 	bl	8007704 <RCCEx_PLL3_Config>
 800800c:	e7f7      	b.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800800e:	4626      	mov	r6, r4
 8008010:	e6d6      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008012:	bf00      	nop
 8008014:	58024400 	.word	0x58024400
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800801c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8008020:	d003      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x836>
 8008022:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008026:	f47f aedd 	bne.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    if(ret == HAL_OK)
 800802a:	b9a4      	cbnz	r4, 8008056 <HAL_RCCEx_PeriphCLKConfig+0x862>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800802c:	4a2c      	ldr	r2, [pc, #176]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800802e:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
 8008032:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008034:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008038:	430b      	orrs	r3, r1
 800803a:	6593      	str	r3, [r2, #88]	; 0x58
 800803c:	e6d4      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800803e:	2100      	movs	r1, #0
 8008040:	1d28      	adds	r0, r5, #4
 8008042:	f7ff fae7 	bl	8007614 <RCCEx_PLL2_Config>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008046:	4604      	mov	r4, r0
      break;
 8008048:	e7ef      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x836>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800804a:	2102      	movs	r1, #2
 800804c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008050:	f7ff fb58 	bl	8007704 <RCCEx_PLL3_Config>
 8008054:	e7f7      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008056:	4626      	mov	r6, r4
 8008058:	e6c6      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800805a:	2102      	movs	r1, #2
 800805c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008060:	f7ff fb50 	bl	8007704 <RCCEx_PLL3_Config>
 8008064:	e700      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch(PeriphClkInit->AdcClockSelection)
 8008066:	2601      	movs	r6, #1
 8008068:	4634      	mov	r4, r6
 800806a:	e709      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800806c:	4626      	mov	r6, r4
 800806e:	e707      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008070:	2101      	movs	r1, #1
 8008072:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8008076:	f7ff fb45 	bl	8007704 <RCCEx_PLL3_Config>
 800807a:	4604      	mov	r4, r0
      break;
 800807c:	e715      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x6b6>
    switch(PeriphClkInit->UsbClockSelection)
 800807e:	2601      	movs	r6, #1
 8008080:	4634      	mov	r4, r6
 8008082:	e71d      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8008084:	4626      	mov	r6, r4
 8008086:	e71b      	b.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008088:	4a15      	ldr	r2, [pc, #84]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800808a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800808c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008090:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8008092:	b96c      	cbnz	r4, 80080b0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008094:	4a12      	ldr	r2, [pc, #72]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008096:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8008098:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800809a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800809e:	430b      	orrs	r3, r1
 80080a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080a2:	e71a      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x6e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80080a4:	2102      	movs	r1, #2
 80080a6:	1d28      	adds	r0, r5, #4
 80080a8:	f7ff fab4 	bl	8007614 <RCCEx_PLL2_Config>
 80080ac:	4604      	mov	r4, r0
      break;
 80080ae:	e7f0      	b.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80080b0:	4626      	mov	r6, r4
 80080b2:	e712      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    switch(PeriphClkInit->RngClockSelection)
 80080b4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80080b8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80080bc:	f47f af25 	bne.w	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x716>
    if(ret == HAL_OK)
 80080c0:	b964      	cbnz	r4, 80080dc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080c2:	4807      	ldr	r0, [pc, #28]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080c4:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80080c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80080ca:	430a      	orrs	r2, r1
 80080cc:	6542      	str	r2, [r0, #84]	; 0x54
 80080ce:	e71d      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x718>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080d0:	4803      	ldr	r0, [pc, #12]	; (80080e0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80080d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80080d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80080d8:	62c2      	str	r2, [r0, #44]	; 0x2c
      break;
 80080da:	e7f1      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
 80080dc:	4626      	mov	r6, r4
 80080de:	e715      	b.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x718>
 80080e0:	58024400 	.word	0x58024400

080080e4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 80080e4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080e6:	f7ff fa25 	bl	8007534 <HAL_RCC_GetHCLKFreq>
 80080ea:	4b05      	ldr	r3, [pc, #20]	; (8008100 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80080ec:	4a05      	ldr	r2, [pc, #20]	; (8008104 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80080f4:	5cd3      	ldrb	r3, [r2, r3]
 80080f6:	f003 031f 	and.w	r3, r3, #31
}
 80080fa:	40d8      	lsrs	r0, r3
 80080fc:	bd08      	pop	{r3, pc}
 80080fe:	bf00      	nop
 8008100:	58024400 	.word	0x58024400
 8008104:	0801fb04 	.word	0x0801fb04

08008108 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008108:	4a4e      	ldr	r2, [pc, #312]	; (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
{
 800810a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800810c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800810e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008110:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8008112:	f416 3f7c 	tst.w	r6, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008116:	f3c6 3105 	ubfx	r1, r6, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800811a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 800811c:	f000 808d 	beq.w	800823a <HAL_RCCEx_GetPLL2ClockFreq+0x132>
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008120:	ee07 1a90 	vmov	s15, r1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008124:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008128:	f3c5 1100 	ubfx	r1, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800812c:	f004 0403 	and.w	r4, r4, #3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008130:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008134:	434b      	muls	r3, r1
    switch (pllsource)
 8008136:	2c01      	cmp	r4, #1
 8008138:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800813c:	ee07 3a90 	vmov	s15, r3
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008140:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8008144:	d06b      	beq.n	800821e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
 8008146:	2c02      	cmp	r4, #2
 8008148:	d05b      	beq.n	8008202 <HAL_RCCEx_GetPLL2ClockFreq+0xfa>
 800814a:	2c00      	cmp	r4, #0
 800814c:	d167      	bne.n	800821e <HAL_RCCEx_GetPLL2ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	069b      	lsls	r3, r3, #26
 8008152:	d546      	bpl.n	80081e2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008154:	6811      	ldr	r1, [r2, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008156:	6b93      	ldr	r3, [r2, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008158:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 800815c:	4a3a      	ldr	r2, [pc, #232]	; (8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800815e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008162:	40ca      	lsrs	r2, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008164:	ee07 2a10 	vmov	s14, r2
 8008168:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 800816c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008170:	ee06 3a90 	vmov	s13, r3
 8008174:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800817c:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008180:	4a30      	ldr	r2, [pc, #192]	; (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x13c>)
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008182:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008186:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008188:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800818c:	ee07 3a10 	vmov	s14, r3
 8008190:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008194:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008198:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800819c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80081a0:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80081a4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80081a6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80081aa:	ee07 3a10 	vmov	s14, r3
 80081ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80081b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80081ba:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80081be:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80081c2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80081c4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80081c8:	ee07 3a10 	vmov	s14, r3
 80081cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081d0:	ee37 6a06 	vadd.f32	s12, s14, s12
 80081d4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80081d8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80081dc:	ed80 7a02 	vstr	s14, [r0, #8]
}
 80081e0:	bd70      	pop	{r4, r5, r6, pc}
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081e2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80081e4:	eddf 5a19 	vldr	s11, [pc, #100]	; 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 80081e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ec:	ee07 3a10 	vmov	s14, r3
 80081f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80081f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081f8:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80081fc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008200:	e7be      	b.n	8008180 <HAL_RCCEx_GetPLL2ClockFreq+0x78>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008202:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008204:	eddf 5a12 	vldr	s11, [pc, #72]	; 8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8008208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800820c:	ee07 3a10 	vmov	s14, r3
 8008210:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008218:	ee77 7a86 	vadd.f32	s15, s15, s12
 800821c:	e7ee      	b.n	80081fc <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800821e:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008220:	eddf 5a0c 	vldr	s11, [pc, #48]	; 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	ee07 3a10 	vmov	s14, r3
 800822c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008234:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008238:	e7e0      	b.n	80081fc <HAL_RCCEx_GetPLL2ClockFreq+0xf4>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800823a:	e9c0 1100 	strd	r1, r1, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800823e:	6081      	str	r1, [r0, #8]
}
 8008240:	e7ce      	b.n	80081e0 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400
 8008248:	03d09000 	.word	0x03d09000
 800824c:	4c742400 	.word	0x4c742400
 8008250:	4bbebc20 	.word	0x4bbebc20
 8008254:	4a742400 	.word	0x4a742400

08008258 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008258:	4a4e      	ldr	r2, [pc, #312]	; (8008394 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
{
 800825a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800825c:	6a94      	ldr	r4, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800825e:	6a96      	ldr	r6, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008260:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8008262:	f016 7f7c 	tst.w	r6, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008266:	f3c6 5105 	ubfx	r1, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800826a:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (pll3m != 0U)
 800826c:	f000 808d 	beq.w	800838a <HAL_RCCEx_GetPLL3ClockFreq+0x132>
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008270:	ee07 1a90 	vmov	s15, r1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008274:	f3c3 03cc 	ubfx	r3, r3, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008278:	f3c5 2100 	ubfx	r1, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800827c:	f004 0403 	and.w	r4, r4, #3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008280:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008284:	434b      	muls	r3, r1
    switch (pllsource)
 8008286:	2c01      	cmp	r4, #1
 8008288:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800828c:	ee07 3a90 	vmov	s15, r3
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008290:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
    switch (pllsource)
 8008294:	d06b      	beq.n	800836e <HAL_RCCEx_GetPLL3ClockFreq+0x116>
 8008296:	2c02      	cmp	r4, #2
 8008298:	d05b      	beq.n	8008352 <HAL_RCCEx_GetPLL3ClockFreq+0xfa>
 800829a:	2c00      	cmp	r4, #0
 800829c:	d167      	bne.n	800836e <HAL_RCCEx_GetPLL3ClockFreq+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800829e:	6813      	ldr	r3, [r2, #0]
 80082a0:	069b      	lsls	r3, r3, #26
 80082a2:	d546      	bpl.n	8008332 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082a4:	6811      	ldr	r1, [r2, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082a8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80082ac:	4a3a      	ldr	r2, [pc, #232]	; (8008398 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082b2:	40ca      	lsrs	r2, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082b4:	ee07 2a10 	vmov	s14, r2
 80082b8:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 80082bc:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 80082c0:	ee06 3a90 	vmov	s13, r3
 80082c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80082c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082cc:	ee77 7a86 	vadd.f32	s15, s15, s12
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80082d0:	4a30      	ldr	r2, [pc, #192]	; (8008394 <HAL_RCCEx_GetPLL3ClockFreq+0x13c>)
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80082d2:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80082d6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80082d8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80082dc:	ee07 3a10 	vmov	s14, r3
 80082e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80082e4:	ee37 7a06 	vadd.f32	s14, s14, s12
 80082e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80082ec:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80082f0:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80082f4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80082f6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80082fa:	ee07 3a10 	vmov	s14, r3
 80082fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008302:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008306:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800830a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800830e:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008312:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008314:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008318:	ee07 3a10 	vmov	s14, r3
 800831c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008320:	ee37 6a06 	vadd.f32	s12, s14, s12
 8008324:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8008328:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800832c:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8008330:	bd70      	pop	{r4, r5, r6, pc}
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008332:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008334:	eddf 5a19 	vldr	s11, [pc, #100]	; 800839c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833c:	ee07 3a10 	vmov	s14, r3
 8008340:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008348:	ee77 7a86 	vadd.f32	s15, s15, s12
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800834c:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8008350:	e7be      	b.n	80082d0 <HAL_RCCEx_GetPLL3ClockFreq+0x78>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008352:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008354:	eddf 5a12 	vldr	s11, [pc, #72]	; 80083a0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8008358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800835c:	ee07 3a10 	vmov	s14, r3
 8008360:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008368:	ee77 7a86 	vadd.f32	s15, s15, s12
 800836c:	e7ee      	b.n	800834c <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800836e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008370:	eddf 5a0c 	vldr	s11, [pc, #48]	; 80083a4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8008374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008378:	ee07 3a10 	vmov	s14, r3
 800837c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008384:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008388:	e7e0      	b.n	800834c <HAL_RCCEx_GetPLL3ClockFreq+0xf4>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800838a:	e9c0 1100 	strd	r1, r1, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800838e:	6081      	str	r1, [r0, #8]
}
 8008390:	e7ce      	b.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8008392:	bf00      	nop
 8008394:	58024400 	.word	0x58024400
 8008398:	03d09000 	.word	0x03d09000
 800839c:	4c742400 	.word	0x4c742400
 80083a0:	4bbebc20 	.word	0x4bbebc20
 80083a4:	4a742400 	.word	0x4a742400

080083a8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80083a8:	4770      	bx	lr
	...

080083ac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083ac:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d13b      	bne.n	800842c <HAL_TIM_Base_Start_IT+0x80>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083b4:	2302      	movs	r3, #2
 80083b6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083ba:	6803      	ldr	r3, [r0, #0]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	f042 0201 	orr.w	r2, r2, #1
 80083c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c4:	4a1a      	ldr	r2, [pc, #104]	; (8008430 <HAL_TIM_Base_Start_IT+0x84>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d022      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 80083ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083ce:	d01f      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 80083d0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d01b      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 80083d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083dc:	4293      	cmp	r3, r2
 80083de:	d017      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 80083e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 80083e8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00f      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 80083f0:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d00b      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 80083f8:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d007      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 8008400:	f5a2 42c0 	sub.w	r2, r2, #24576	; 0x6000
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x64>
 8008408:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800840c:	4293      	cmp	r3, r2
 800840e:	d107      	bne.n	8008420 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008410:	6899      	ldr	r1, [r3, #8]
 8008412:	4a08      	ldr	r2, [pc, #32]	; (8008434 <HAL_TIM_Base_Start_IT+0x88>)
 8008414:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008416:	2a06      	cmp	r2, #6
 8008418:	d006      	beq.n	8008428 <HAL_TIM_Base_Start_IT+0x7c>
 800841a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800841e:	d003      	beq.n	8008428 <HAL_TIM_Base_Start_IT+0x7c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008428:	2000      	movs	r0, #0
}
 800842a:	4770      	bx	lr
    return HAL_ERROR;
 800842c:	2001      	movs	r0, #1
 800842e:	4770      	bx	lr
 8008430:	40010000 	.word	0x40010000
 8008434:	00010007 	.word	0x00010007

08008438 <HAL_TIM_OC_DelayElapsedCallback>:
 8008438:	4770      	bx	lr

0800843a <HAL_TIM_IC_CaptureCallback>:
 800843a:	4770      	bx	lr

0800843c <HAL_TIM_PWM_PulseFinishedCallback>:
 800843c:	4770      	bx	lr

0800843e <HAL_TIM_TriggerCallback>:
 800843e:	4770      	bx	lr

08008440 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008440:	6803      	ldr	r3, [r0, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	0791      	lsls	r1, r2, #30
{
 8008446:	b510      	push	{r4, lr}
 8008448:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800844a:	d50f      	bpl.n	800846c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	0792      	lsls	r2, r2, #30
 8008450:	d50c      	bpl.n	800846c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008452:	f06f 0202 	mvn.w	r2, #2
 8008456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008458:	2201      	movs	r2, #1
 800845a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	0799      	lsls	r1, r3, #30
 8008460:	f000 8085 	beq.w	800856e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008464:	f7ff ffe9 	bl	800843a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008468:	2300      	movs	r3, #0
 800846a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800846c:	6823      	ldr	r3, [r4, #0]
 800846e:	691a      	ldr	r2, [r3, #16]
 8008470:	0752      	lsls	r2, r2, #29
 8008472:	d510      	bpl.n	8008496 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	0750      	lsls	r0, r2, #29
 8008478:	d50d      	bpl.n	8008496 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800847a:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800847e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008482:	2202      	movs	r2, #2
 8008484:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008486:	699b      	ldr	r3, [r3, #24]
 8008488:	f413 7f40 	tst.w	r3, #768	; 0x300
 800848c:	d075      	beq.n	800857a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800848e:	f7ff ffd4 	bl	800843a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008492:	2300      	movs	r3, #0
 8008494:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	691a      	ldr	r2, [r3, #16]
 800849a:	0711      	lsls	r1, r2, #28
 800849c:	d50f      	bpl.n	80084be <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	0712      	lsls	r2, r2, #28
 80084a2:	d50c      	bpl.n	80084be <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084a4:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80084aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084ac:	2204      	movs	r2, #4
 80084ae:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	079b      	lsls	r3, r3, #30
 80084b4:	d067      	beq.n	8008586 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80084b6:	f7ff ffc0 	bl	800843a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ba:	2300      	movs	r3, #0
 80084bc:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	691a      	ldr	r2, [r3, #16]
 80084c2:	06d0      	lsls	r0, r2, #27
 80084c4:	d510      	bpl.n	80084e8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084c6:	68da      	ldr	r2, [r3, #12]
 80084c8:	06d1      	lsls	r1, r2, #27
 80084ca:	d50d      	bpl.n	80084e8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084cc:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084d4:	2208      	movs	r2, #8
 80084d6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084d8:	69db      	ldr	r3, [r3, #28]
 80084da:	f413 7f40 	tst.w	r3, #768	; 0x300
 80084de:	d058      	beq.n	8008592 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80084e0:	f7ff ffab 	bl	800843a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e4:	2300      	movs	r3, #0
 80084e6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084e8:	6823      	ldr	r3, [r4, #0]
 80084ea:	691a      	ldr	r2, [r3, #16]
 80084ec:	07d2      	lsls	r2, r2, #31
 80084ee:	d508      	bpl.n	8008502 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084f0:	68da      	ldr	r2, [r3, #12]
 80084f2:	07d0      	lsls	r0, r2, #31
 80084f4:	d505      	bpl.n	8008502 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084f6:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084fa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084fc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80084fe:	f7f8 fc29 	bl	8000d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	691a      	ldr	r2, [r3, #16]
 8008506:	0611      	lsls	r1, r2, #24
 8008508:	d508      	bpl.n	800851c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	0612      	lsls	r2, r2, #24
 800850e:	d505      	bpl.n	800851c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008510:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008514:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008516:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8008518:	f000 f8e1 	bl	80086de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800851c:	6823      	ldr	r3, [r4, #0]
 800851e:	691a      	ldr	r2, [r3, #16]
 8008520:	05d0      	lsls	r0, r2, #23
 8008522:	d508      	bpl.n	8008536 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	0611      	lsls	r1, r2, #24
 8008528:	d505      	bpl.n	8008536 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800852a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800852e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008530:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8008532:	f000 f8d5 	bl	80086e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	691a      	ldr	r2, [r3, #16]
 800853a:	0652      	lsls	r2, r2, #25
 800853c:	d508      	bpl.n	8008550 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800853e:	68da      	ldr	r2, [r3, #12]
 8008540:	0650      	lsls	r0, r2, #25
 8008542:	d505      	bpl.n	8008550 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008544:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008548:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800854a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800854c:	f7ff ff77 	bl	800843e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	691a      	ldr	r2, [r3, #16]
 8008554:	0691      	lsls	r1, r2, #26
 8008556:	d522      	bpl.n	800859e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008558:	68da      	ldr	r2, [r3, #12]
 800855a:	0692      	lsls	r2, r2, #26
 800855c:	d51f      	bpl.n	800859e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800855e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008562:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008564:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800856a:	f000 b8b7 	b.w	80086dc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800856e:	f7ff ff63 	bl	8008438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008572:	4620      	mov	r0, r4
 8008574:	f7ff ff62 	bl	800843c <HAL_TIM_PWM_PulseFinishedCallback>
 8008578:	e776      	b.n	8008468 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800857a:	f7ff ff5d 	bl	8008438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800857e:	4620      	mov	r0, r4
 8008580:	f7ff ff5c 	bl	800843c <HAL_TIM_PWM_PulseFinishedCallback>
 8008584:	e785      	b.n	8008492 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008586:	f7ff ff57 	bl	8008438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800858a:	4620      	mov	r0, r4
 800858c:	f7ff ff56 	bl	800843c <HAL_TIM_PWM_PulseFinishedCallback>
 8008590:	e793      	b.n	80084ba <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008592:	f7ff ff51 	bl	8008438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008596:	4620      	mov	r0, r4
 8008598:	f7ff ff50 	bl	800843c <HAL_TIM_PWM_PulseFinishedCallback>
 800859c:	e7a2      	b.n	80084e4 <HAL_TIM_IRQHandler+0xa4>
}
 800859e:	bd10      	pop	{r4, pc}

080085a0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085a0:	4a34      	ldr	r2, [pc, #208]	; (8008674 <TIM_Base_SetConfig+0xd4>)
  tmpcr1 = TIMx->CR1;
 80085a2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085a4:	4290      	cmp	r0, r2
 80085a6:	d012      	beq.n	80085ce <TIM_Base_SetConfig+0x2e>
 80085a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80085ac:	d00f      	beq.n	80085ce <TIM_Base_SetConfig+0x2e>
 80085ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80085b2:	4290      	cmp	r0, r2
 80085b4:	d00b      	beq.n	80085ce <TIM_Base_SetConfig+0x2e>
 80085b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ba:	4290      	cmp	r0, r2
 80085bc:	d007      	beq.n	80085ce <TIM_Base_SetConfig+0x2e>
 80085be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085c2:	4290      	cmp	r0, r2
 80085c4:	d003      	beq.n	80085ce <TIM_Base_SetConfig+0x2e>
 80085c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80085ca:	4290      	cmp	r0, r2
 80085cc:	d119      	bne.n	8008602 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80085ce:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80085d4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085d6:	4a27      	ldr	r2, [pc, #156]	; (8008674 <TIM_Base_SetConfig+0xd4>)
 80085d8:	4290      	cmp	r0, r2
 80085da:	d025      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 80085dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80085e0:	d022      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 80085e2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80085e6:	4290      	cmp	r0, r2
 80085e8:	d01e      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 80085ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085ee:	4290      	cmp	r0, r2
 80085f0:	d01a      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 80085f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80085f6:	4290      	cmp	r0, r2
 80085f8:	d016      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 80085fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80085fe:	4290      	cmp	r0, r2
 8008600:	d012      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 8008602:	4a1d      	ldr	r2, [pc, #116]	; (8008678 <TIM_Base_SetConfig+0xd8>)
 8008604:	4290      	cmp	r0, r2
 8008606:	d00f      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 8008608:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800860c:	4290      	cmp	r0, r2
 800860e:	d00b      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 8008610:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008614:	4290      	cmp	r0, r2
 8008616:	d007      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 8008618:	f5a2 42d0 	sub.w	r2, r2, #26624	; 0x6800
 800861c:	4290      	cmp	r0, r2
 800861e:	d003      	beq.n	8008628 <TIM_Base_SetConfig+0x88>
 8008620:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008624:	4290      	cmp	r0, r2
 8008626:	d103      	bne.n	8008630 <TIM_Base_SetConfig+0x90>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800862c:	68ca      	ldr	r2, [r1, #12]
 800862e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008630:	694a      	ldr	r2, [r1, #20]
 8008632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008636:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008638:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800863a:	688b      	ldr	r3, [r1, #8]
 800863c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800863e:	680b      	ldr	r3, [r1, #0]
 8008640:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008642:	4b0c      	ldr	r3, [pc, #48]	; (8008674 <TIM_Base_SetConfig+0xd4>)
 8008644:	4298      	cmp	r0, r3
 8008646:	d00f      	beq.n	8008668 <TIM_Base_SetConfig+0xc8>
 8008648:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800864c:	4298      	cmp	r0, r3
 800864e:	d00b      	beq.n	8008668 <TIM_Base_SetConfig+0xc8>
 8008650:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8008654:	4298      	cmp	r0, r3
 8008656:	d007      	beq.n	8008668 <TIM_Base_SetConfig+0xc8>
 8008658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800865c:	4298      	cmp	r0, r3
 800865e:	d003      	beq.n	8008668 <TIM_Base_SetConfig+0xc8>
 8008660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008664:	4298      	cmp	r0, r3
 8008666:	d101      	bne.n	800866c <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008668:	690b      	ldr	r3, [r1, #16]
 800866a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800866c:	2301      	movs	r3, #1
 800866e:	6143      	str	r3, [r0, #20]
}
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	40010000 	.word	0x40010000
 8008678:	40014000 	.word	0x40014000

0800867c <HAL_TIM_Base_Init>:
{
 800867c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800867e:	4604      	mov	r4, r0
 8008680:	b350      	cbz	r0, 80086d8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8008682:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008686:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800868a:	b91b      	cbnz	r3, 8008694 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800868c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8008690:	f7ff fe8a 	bl	80083a8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8008694:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008696:	6820      	ldr	r0, [r4, #0]
 8008698:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800869a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800869e:	f7ff ff7f 	bl	80085a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a2:	2301      	movs	r3, #1
  return HAL_OK;
 80086a4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086a6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80086ae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80086b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80086b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80086ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80086c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086ca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80086ce:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80086d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80086d6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80086d8:	2001      	movs	r0, #1
 80086da:	e7fc      	b.n	80086d6 <HAL_TIM_Base_Init+0x5a>

080086dc <HAL_TIMEx_CommutCallback>:
 80086dc:	4770      	bx	lr

080086de <HAL_TIMEx_BreakCallback>:
 80086de:	4770      	bx	lr

080086e0 <HAL_TIMEx_Break2Callback>:
 80086e0:	4770      	bx	lr
	...

080086e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086e4:	b530      	push	{r4, r5, lr}
 80086e6:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80086e8:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ea:	69c0      	ldr	r0, [r0, #28]
{
 80086ec:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086ee:	6921      	ldr	r1, [r4, #16]
 80086f0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086f2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086f4:	430a      	orrs	r2, r1
 80086f6:	6961      	ldr	r1, [r4, #20]
 80086f8:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086fa:	4999      	ldr	r1, [pc, #612]	; (8008960 <UART_SetConfig+0x27c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80086fc:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086fe:	4029      	ands	r1, r5
 8008700:	430a      	orrs	r2, r1

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008702:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008704:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800870c:	430a      	orrs	r2, r1
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800870e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008710:	605a      	str	r2, [r3, #4]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008712:	4a94      	ldr	r2, [pc, #592]	; (8008964 <UART_SetConfig+0x280>)
 8008714:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008716:	bf1c      	itt	ne
 8008718:	6a22      	ldrne	r2, [r4, #32]
 800871a:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8008722:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8008726:	430a      	orrs	r2, r1

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008728:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800872a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800872c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800872e:	f022 020f 	bic.w	r2, r2, #15
 8008732:	430a      	orrs	r2, r1
 8008734:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008736:	4a8c      	ldr	r2, [pc, #560]	; (8008968 <UART_SetConfig+0x284>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d11c      	bne.n	8008776 <UART_SetConfig+0x92>
 800873c:	4b8b      	ldr	r3, [pc, #556]	; (800896c <UART_SetConfig+0x288>)
 800873e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008744:	2b28      	cmp	r3, #40	; 0x28
 8008746:	f200 8083 	bhi.w	8008850 <UART_SetConfig+0x16c>
 800874a:	4a89      	ldr	r2, [pc, #548]	; (8008970 <UART_SetConfig+0x28c>)
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800874c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008750:	5cd3      	ldrb	r3, [r2, r3]
 8008752:	f040 8152 	bne.w	80089fa <UART_SetConfig+0x316>
  {
    switch (clocksource)
 8008756:	2b08      	cmp	r3, #8
 8008758:	f200 80d6 	bhi.w	8008908 <UART_SetConfig+0x224>
 800875c:	2b08      	cmp	r3, #8
 800875e:	d877      	bhi.n	8008850 <UART_SetConfig+0x16c>
 8008760:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008764:	013c0136 	.word	0x013c0136
 8008768:	00760076 	.word	0x00760076
 800876c:	0076013f 	.word	0x0076013f
 8008770:	00760076 	.word	0x00760076
 8008774:	0144      	.short	0x0144
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008776:	4a7f      	ldr	r2, [pc, #508]	; (8008974 <UART_SetConfig+0x290>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d107      	bne.n	800878c <UART_SetConfig+0xa8>
 800877c:	4b7b      	ldr	r3, [pc, #492]	; (800896c <UART_SetConfig+0x288>)
 800877e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008780:	f003 0307 	and.w	r3, r3, #7
 8008784:	2b05      	cmp	r3, #5
 8008786:	d863      	bhi.n	8008850 <UART_SetConfig+0x16c>
 8008788:	4a7b      	ldr	r2, [pc, #492]	; (8008978 <UART_SetConfig+0x294>)
 800878a:	e7df      	b.n	800874c <UART_SetConfig+0x68>
 800878c:	4a7b      	ldr	r2, [pc, #492]	; (800897c <UART_SetConfig+0x298>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d107      	bne.n	80087a2 <UART_SetConfig+0xbe>
 8008792:	4b76      	ldr	r3, [pc, #472]	; (800896c <UART_SetConfig+0x288>)
 8008794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008796:	f003 0307 	and.w	r3, r3, #7
 800879a:	2b05      	cmp	r3, #5
 800879c:	d858      	bhi.n	8008850 <UART_SetConfig+0x16c>
 800879e:	4a78      	ldr	r2, [pc, #480]	; (8008980 <UART_SetConfig+0x29c>)
 80087a0:	e7d4      	b.n	800874c <UART_SetConfig+0x68>
 80087a2:	4a78      	ldr	r2, [pc, #480]	; (8008984 <UART_SetConfig+0x2a0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d107      	bne.n	80087b8 <UART_SetConfig+0xd4>
 80087a8:	4b70      	ldr	r3, [pc, #448]	; (800896c <UART_SetConfig+0x288>)
 80087aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	2b05      	cmp	r3, #5
 80087b2:	d84d      	bhi.n	8008850 <UART_SetConfig+0x16c>
 80087b4:	4a74      	ldr	r2, [pc, #464]	; (8008988 <UART_SetConfig+0x2a4>)
 80087b6:	e7c9      	b.n	800874c <UART_SetConfig+0x68>
 80087b8:	4a74      	ldr	r2, [pc, #464]	; (800898c <UART_SetConfig+0x2a8>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d107      	bne.n	80087ce <UART_SetConfig+0xea>
 80087be:	4b6b      	ldr	r3, [pc, #428]	; (800896c <UART_SetConfig+0x288>)
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f003 0307 	and.w	r3, r3, #7
 80087c6:	2b05      	cmp	r3, #5
 80087c8:	d842      	bhi.n	8008850 <UART_SetConfig+0x16c>
 80087ca:	4a71      	ldr	r2, [pc, #452]	; (8008990 <UART_SetConfig+0x2ac>)
 80087cc:	e7be      	b.n	800874c <UART_SetConfig+0x68>
 80087ce:	4a71      	ldr	r2, [pc, #452]	; (8008994 <UART_SetConfig+0x2b0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d107      	bne.n	80087e4 <UART_SetConfig+0x100>
 80087d4:	4b65      	ldr	r3, [pc, #404]	; (800896c <UART_SetConfig+0x288>)
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80087dc:	2b28      	cmp	r3, #40	; 0x28
 80087de:	d837      	bhi.n	8008850 <UART_SetConfig+0x16c>
 80087e0:	4a6d      	ldr	r2, [pc, #436]	; (8008998 <UART_SetConfig+0x2b4>)
 80087e2:	e7b3      	b.n	800874c <UART_SetConfig+0x68>
 80087e4:	4a6d      	ldr	r2, [pc, #436]	; (800899c <UART_SetConfig+0x2b8>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d107      	bne.n	80087fa <UART_SetConfig+0x116>
 80087ea:	4b60      	ldr	r3, [pc, #384]	; (800896c <UART_SetConfig+0x288>)
 80087ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ee:	f003 0307 	and.w	r3, r3, #7
 80087f2:	2b05      	cmp	r3, #5
 80087f4:	d82c      	bhi.n	8008850 <UART_SetConfig+0x16c>
 80087f6:	4a6a      	ldr	r2, [pc, #424]	; (80089a0 <UART_SetConfig+0x2bc>)
 80087f8:	e7a8      	b.n	800874c <UART_SetConfig+0x68>
 80087fa:	4a6a      	ldr	r2, [pc, #424]	; (80089a4 <UART_SetConfig+0x2c0>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d107      	bne.n	8008810 <UART_SetConfig+0x12c>
 8008800:	4b5a      	ldr	r3, [pc, #360]	; (800896c <UART_SetConfig+0x288>)
 8008802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008804:	f003 0307 	and.w	r3, r3, #7
 8008808:	2b05      	cmp	r3, #5
 800880a:	d821      	bhi.n	8008850 <UART_SetConfig+0x16c>
 800880c:	4a66      	ldr	r2, [pc, #408]	; (80089a8 <UART_SetConfig+0x2c4>)
 800880e:	e79d      	b.n	800874c <UART_SetConfig+0x68>
 8008810:	4a66      	ldr	r2, [pc, #408]	; (80089ac <UART_SetConfig+0x2c8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d107      	bne.n	8008826 <UART_SetConfig+0x142>
 8008816:	4b55      	ldr	r3, [pc, #340]	; (800896c <UART_SetConfig+0x288>)
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800881e:	2b28      	cmp	r3, #40	; 0x28
 8008820:	d816      	bhi.n	8008850 <UART_SetConfig+0x16c>
 8008822:	4a63      	ldr	r2, [pc, #396]	; (80089b0 <UART_SetConfig+0x2cc>)
 8008824:	e792      	b.n	800874c <UART_SetConfig+0x68>
 8008826:	4a63      	ldr	r2, [pc, #396]	; (80089b4 <UART_SetConfig+0x2d0>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d107      	bne.n	800883c <UART_SetConfig+0x158>
 800882c:	4b4f      	ldr	r3, [pc, #316]	; (800896c <UART_SetConfig+0x288>)
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008834:	2b28      	cmp	r3, #40	; 0x28
 8008836:	d80b      	bhi.n	8008850 <UART_SetConfig+0x16c>
 8008838:	4a5f      	ldr	r2, [pc, #380]	; (80089b8 <UART_SetConfig+0x2d4>)
 800883a:	e787      	b.n	800874c <UART_SetConfig+0x68>
 800883c:	4a49      	ldr	r2, [pc, #292]	; (8008964 <UART_SetConfig+0x280>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d106      	bne.n	8008850 <UART_SetConfig+0x16c>
 8008842:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8008846:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008848:	f003 0307 	and.w	r3, r3, #7
 800884c:	2b05      	cmp	r3, #5
 800884e:	d901      	bls.n	8008854 <UART_SetConfig+0x170>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008850:	2001      	movs	r0, #1
 8008852:	e00e      	b.n	8008872 <UART_SetConfig+0x18e>
 8008854:	4959      	ldr	r1, [pc, #356]	; (80089bc <UART_SetConfig+0x2d8>)
 8008856:	5ccb      	ldrb	r3, [r1, r3]
    switch (clocksource)
 8008858:	2b10      	cmp	r3, #16
 800885a:	d023      	beq.n	80088a4 <UART_SetConfig+0x1c0>
 800885c:	d811      	bhi.n	8008882 <UART_SetConfig+0x19e>
 800885e:	2b04      	cmp	r3, #4
 8008860:	d016      	beq.n	8008890 <UART_SetConfig+0x1ac>
 8008862:	2b08      	cmp	r3, #8
 8008864:	d019      	beq.n	800889a <UART_SetConfig+0x1b6>
 8008866:	2b02      	cmp	r3, #2
 8008868:	d1f2      	bne.n	8008850 <UART_SetConfig+0x16c>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800886a:	f7ff fc3b 	bl	80080e4 <HAL_RCCEx_GetD3PCLK1Freq>
    if (pclk != 0U)
 800886e:	bb10      	cbnz	r0, 80088b6 <UART_SetConfig+0x1d2>
 8008870:	2000      	movs	r0, #0
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
 8008872:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008876:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008878:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800887a:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70

  return ret;
}
 800887e:	b007      	add	sp, #28
 8008880:	bd30      	pop	{r4, r5, pc}
    switch (clocksource)
 8008882:	2b20      	cmp	r3, #32
 8008884:	d03e      	beq.n	8008904 <UART_SetConfig+0x220>
 8008886:	2b40      	cmp	r3, #64	; 0x40
 8008888:	d1e2      	bne.n	8008850 <UART_SetConfig+0x16c>
 800888a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800888e:	e012      	b.n	80088b6 <UART_SetConfig+0x1d2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008890:	4668      	mov	r0, sp
 8008892:	f7ff fc39 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008896:	9801      	ldr	r0, [sp, #4]
        break;
 8008898:	e7e9      	b.n	800886e <UART_SetConfig+0x18a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889a:	a803      	add	r0, sp, #12
 800889c:	f7ff fcdc 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088a0:	9804      	ldr	r0, [sp, #16]
        break;
 80088a2:	e7e4      	b.n	800886e <UART_SetConfig+0x18a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088a4:	6813      	ldr	r3, [r2, #0]
 80088a6:	4846      	ldr	r0, [pc, #280]	; (80089c0 <UART_SetConfig+0x2dc>)
 80088a8:	f013 0f20 	tst.w	r3, #32
 80088ac:	d003      	beq.n	80088b6 <UART_SetConfig+0x1d2>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088b4:	40d8      	lsrs	r0, r3
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088b6:	4b43      	ldr	r3, [pc, #268]	; (80089c4 <UART_SetConfig+0x2e0>)
 80088b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088ba:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088c0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088c4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088c8:	4299      	cmp	r1, r3
 80088ca:	d8c1      	bhi.n	8008850 <UART_SetConfig+0x16c>
 80088cc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80088d0:	d8be      	bhi.n	8008850 <UART_SetConfig+0x16c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d2:	2300      	movs	r3, #0
 80088d4:	4619      	mov	r1, r3
 80088d6:	f7f7 fd6b 	bl	80003b0 <__aeabi_uldivmod>
 80088da:	462a      	mov	r2, r5
 80088dc:	0209      	lsls	r1, r1, #8
 80088de:	086b      	lsrs	r3, r5, #1
 80088e0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80088e4:	0200      	lsls	r0, r0, #8
 80088e6:	18c0      	adds	r0, r0, r3
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	f141 0100 	adc.w	r1, r1, #0
 80088f0:	f7f7 fd5e 	bl	80003b0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80088f4:	4b34      	ldr	r3, [pc, #208]	; (80089c8 <UART_SetConfig+0x2e4>)
 80088f6:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d8a8      	bhi.n	8008850 <UART_SetConfig+0x16c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	60d8      	str	r0, [r3, #12]
 8008902:	e7b5      	b.n	8008870 <UART_SetConfig+0x18c>
        pclk = (uint32_t) CSI_VALUE;
 8008904:	4831      	ldr	r0, [pc, #196]	; (80089cc <UART_SetConfig+0x2e8>)
 8008906:	e7d6      	b.n	80088b6 <UART_SetConfig+0x1d2>
    switch (clocksource)
 8008908:	2b20      	cmp	r3, #32
 800890a:	d074      	beq.n	80089f6 <UART_SetConfig+0x312>
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d00b      	beq.n	8008928 <UART_SetConfig+0x244>
 8008910:	2b10      	cmp	r3, #16
 8008912:	d19d      	bne.n	8008850 <UART_SetConfig+0x16c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008914:	4b15      	ldr	r3, [pc, #84]	; (800896c <UART_SetConfig+0x288>)
 8008916:	482a      	ldr	r0, [pc, #168]	; (80089c0 <UART_SetConfig+0x2dc>)
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	f012 0f20 	tst.w	r2, #32
 800891e:	d003      	beq.n	8008928 <UART_SetConfig+0x244>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008926:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008928:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800892a:	4b26      	ldr	r3, [pc, #152]	; (80089c4 <UART_SetConfig+0x2e0>)
 800892c:	6862      	ldr	r2, [r4, #4]
 800892e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8008932:	fbb0 f3f3 	udiv	r3, r0, r3
 8008936:	0850      	lsrs	r0, r2, #1
 8008938:	eb00 0043 	add.w	r0, r0, r3, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800893c:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008940:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008944:	f1a0 0210 	sub.w	r2, r0, #16
 8008948:	429a      	cmp	r2, r3
 800894a:	d881      	bhi.n	8008850 <UART_SetConfig+0x16c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800894c:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008950:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8008954:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008956:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8008958:	4318      	orrs	r0, r3
 800895a:	60d0      	str	r0, [r2, #12]
 800895c:	e788      	b.n	8008870 <UART_SetConfig+0x18c>
 800895e:	bf00      	nop
 8008960:	cfff69f3 	.word	0xcfff69f3
 8008964:	58000c00 	.word	0x58000c00
 8008968:	40011000 	.word	0x40011000
 800896c:	58024400 	.word	0x58024400
 8008970:	0801fb14 	.word	0x0801fb14
 8008974:	40004400 	.word	0x40004400
 8008978:	0801fb3d 	.word	0x0801fb3d
 800897c:	40004800 	.word	0x40004800
 8008980:	0801fb3d 	.word	0x0801fb3d
 8008984:	40004c00 	.word	0x40004c00
 8008988:	0801fb3d 	.word	0x0801fb3d
 800898c:	40005000 	.word	0x40005000
 8008990:	0801fb3d 	.word	0x0801fb3d
 8008994:	40011400 	.word	0x40011400
 8008998:	0801fb14 	.word	0x0801fb14
 800899c:	40007800 	.word	0x40007800
 80089a0:	0801fb3d 	.word	0x0801fb3d
 80089a4:	40007c00 	.word	0x40007c00
 80089a8:	0801fb3d 	.word	0x0801fb3d
 80089ac:	40011800 	.word	0x40011800
 80089b0:	0801fb14 	.word	0x0801fb14
 80089b4:	40011c00 	.word	0x40011c00
 80089b8:	0801fb14 	.word	0x0801fb14
 80089bc:	0801fb43 	.word	0x0801fb43
 80089c0:	03d09000 	.word	0x03d09000
 80089c4:	0801fb4a 	.word	0x0801fb4a
 80089c8:	000ffcff 	.word	0x000ffcff
 80089cc:	003d0900 	.word	0x003d0900
        pclk = HAL_RCC_GetPCLK1Freq();
 80089d0:	f7fe fdd2 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80089d4:	2800      	cmp	r0, #0
 80089d6:	f43f af4b 	beq.w	8008870 <UART_SetConfig+0x18c>
 80089da:	e7a5      	b.n	8008928 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetPCLK2Freq();
 80089dc:	f7fe fdde 	bl	800759c <HAL_RCC_GetPCLK2Freq>
        break;
 80089e0:	e7f8      	b.n	80089d4 <UART_SetConfig+0x2f0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089e2:	4668      	mov	r0, sp
 80089e4:	f7ff fb90 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089e8:	9801      	ldr	r0, [sp, #4]
        break;
 80089ea:	e7f3      	b.n	80089d4 <UART_SetConfig+0x2f0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089ec:	a803      	add	r0, sp, #12
 80089ee:	f7ff fc33 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089f2:	9804      	ldr	r0, [sp, #16]
        break;
 80089f4:	e7ee      	b.n	80089d4 <UART_SetConfig+0x2f0>
        pclk = (uint32_t) CSI_VALUE;
 80089f6:	482b      	ldr	r0, [pc, #172]	; (8008aa4 <UART_SetConfig+0x3c0>)
 80089f8:	e796      	b.n	8008928 <UART_SetConfig+0x244>
    switch (clocksource)
 80089fa:	2b08      	cmp	r3, #8
 80089fc:	d818      	bhi.n	8008a30 <UART_SetConfig+0x34c>
 80089fe:	2b08      	cmp	r3, #8
 8008a00:	f63f af26 	bhi.w	8008850 <UART_SetConfig+0x16c>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <UART_SetConfig+0x328>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a73 	.word	0x08008a73
 8008a10:	08008a7f 	.word	0x08008a7f
 8008a14:	08008851 	.word	0x08008851
 8008a18:	08008851 	.word	0x08008851
 8008a1c:	08008a85 	.word	0x08008a85
 8008a20:	08008851 	.word	0x08008851
 8008a24:	08008851 	.word	0x08008851
 8008a28:	08008851 	.word	0x08008851
 8008a2c:	08008a8f 	.word	0x08008a8f
 8008a30:	2b20      	cmp	r3, #32
 8008a32:	d031      	beq.n	8008a98 <UART_SetConfig+0x3b4>
 8008a34:	2b40      	cmp	r3, #64	; 0x40
 8008a36:	d031      	beq.n	8008a9c <UART_SetConfig+0x3b8>
 8008a38:	2b10      	cmp	r3, #16
 8008a3a:	f47f af09 	bne.w	8008850 <UART_SetConfig+0x16c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a3e:	4b1a      	ldr	r3, [pc, #104]	; (8008aa8 <UART_SetConfig+0x3c4>)
 8008a40:	481a      	ldr	r0, [pc, #104]	; (8008aac <UART_SetConfig+0x3c8>)
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	f012 0f20 	tst.w	r2, #32
 8008a48:	d003      	beq.n	8008a52 <UART_SetConfig+0x36e>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a50:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a52:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008a54:	4a16      	ldr	r2, [pc, #88]	; (8008ab0 <UART_SetConfig+0x3cc>)
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8008a5c:	fbb0 f0f2 	udiv	r0, r0, r2
 8008a60:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008a64:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a68:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8008a6c:	f1a0 0210 	sub.w	r2, r0, #16
 8008a70:	e743      	b.n	80088fa <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a72:	f7fe fd81 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f aefa 	beq.w	8008870 <UART_SetConfig+0x18c>
 8008a7c:	e7e9      	b.n	8008a52 <UART_SetConfig+0x36e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a7e:	f7fe fd8d 	bl	800759c <HAL_RCC_GetPCLK2Freq>
        break;
 8008a82:	e7f8      	b.n	8008a76 <UART_SetConfig+0x392>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a84:	4668      	mov	r0, sp
 8008a86:	f7ff fb3f 	bl	8008108 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a8a:	9801      	ldr	r0, [sp, #4]
        break;
 8008a8c:	e7f3      	b.n	8008a76 <UART_SetConfig+0x392>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a8e:	a803      	add	r0, sp, #12
 8008a90:	f7ff fbe2 	bl	8008258 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a94:	9804      	ldr	r0, [sp, #16]
        break;
 8008a96:	e7ee      	b.n	8008a76 <UART_SetConfig+0x392>
        pclk = (uint32_t) CSI_VALUE;
 8008a98:	4802      	ldr	r0, [pc, #8]	; (8008aa4 <UART_SetConfig+0x3c0>)
 8008a9a:	e7da      	b.n	8008a52 <UART_SetConfig+0x36e>
    switch (clocksource)
 8008a9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008aa0:	e7d7      	b.n	8008a52 <UART_SetConfig+0x36e>
 8008aa2:	bf00      	nop
 8008aa4:	003d0900 	.word	0x003d0900
 8008aa8:	58024400 	.word	0x58024400
 8008aac:	03d09000 	.word	0x03d09000
 8008ab0:	0801fb4a 	.word	0x0801fb4a

08008ab4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ab4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008ab6:	07da      	lsls	r2, r3, #31
{
 8008ab8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aba:	d506      	bpl.n	8008aca <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008abc:	6801      	ldr	r1, [r0, #0]
 8008abe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8008ac0:	684a      	ldr	r2, [r1, #4]
 8008ac2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008ac6:	4322      	orrs	r2, r4
 8008ac8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008aca:	079c      	lsls	r4, r3, #30
 8008acc:	d506      	bpl.n	8008adc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ace:	6801      	ldr	r1, [r0, #0]
 8008ad0:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8008ad2:	684a      	ldr	r2, [r1, #4]
 8008ad4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008ad8:	4322      	orrs	r2, r4
 8008ada:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008adc:	0759      	lsls	r1, r3, #29
 8008ade:	d506      	bpl.n	8008aee <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ae0:	6801      	ldr	r1, [r0, #0]
 8008ae2:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008ae4:	684a      	ldr	r2, [r1, #4]
 8008ae6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aea:	4322      	orrs	r2, r4
 8008aec:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aee:	071a      	lsls	r2, r3, #28
 8008af0:	d506      	bpl.n	8008b00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008af2:	6801      	ldr	r1, [r0, #0]
 8008af4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8008af6:	684a      	ldr	r2, [r1, #4]
 8008af8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008afc:	4322      	orrs	r2, r4
 8008afe:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b00:	06dc      	lsls	r4, r3, #27
 8008b02:	d506      	bpl.n	8008b12 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b04:	6801      	ldr	r1, [r0, #0]
 8008b06:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8008b08:	688a      	ldr	r2, [r1, #8]
 8008b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b0e:	4322      	orrs	r2, r4
 8008b10:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b12:	0699      	lsls	r1, r3, #26
 8008b14:	d506      	bpl.n	8008b24 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b16:	6801      	ldr	r1, [r0, #0]
 8008b18:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8008b1a:	688a      	ldr	r2, [r1, #8]
 8008b1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b20:	4322      	orrs	r2, r4
 8008b22:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b24:	065a      	lsls	r2, r3, #25
 8008b26:	d510      	bpl.n	8008b4a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b28:	6801      	ldr	r1, [r0, #0]
 8008b2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008b2c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b2e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b32:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008b36:	ea42 0204 	orr.w	r2, r2, r4
 8008b3a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b3c:	d105      	bne.n	8008b4a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b3e:	684a      	ldr	r2, [r1, #4]
 8008b40:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8008b42:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8008b46:	4322      	orrs	r2, r4
 8008b48:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b4a:	061b      	lsls	r3, r3, #24
 8008b4c:	d506      	bpl.n	8008b5c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b4e:	6802      	ldr	r2, [r0, #0]
 8008b50:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008b52:	6853      	ldr	r3, [r2, #4]
 8008b54:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	6053      	str	r3, [r2, #4]
  }
}
 8008b5c:	bd10      	pop	{r4, pc}

08008b5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b62:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008b66:	4604      	mov	r4, r0
 8008b68:	460e      	mov	r6, r1
 8008b6a:	4615      	mov	r5, r2
 8008b6c:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b6e:	6822      	ldr	r2, [r4, #0]
 8008b70:	69d3      	ldr	r3, [r2, #28]
 8008b72:	ea36 0303 	bics.w	r3, r6, r3
 8008b76:	bf0c      	ite	eq
 8008b78:	2301      	moveq	r3, #1
 8008b7a:	2300      	movne	r3, #0
 8008b7c:	42ab      	cmp	r3, r5
 8008b7e:	d001      	beq.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8008b80:	2000      	movs	r0, #0
 8008b82:	e027      	b.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 8008b84:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008b88:	d0f2      	beq.n	8008b70 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8a:	f7fb fd11 	bl	80045b0 <HAL_GetTick>
 8008b8e:	1bc0      	subs	r0, r0, r7
 8008b90:	4540      	cmp	r0, r8
 8008b92:	6820      	ldr	r0, [r4, #0]
 8008b94:	d802      	bhi.n	8008b9c <UART_WaitOnFlagUntilTimeout+0x3e>
 8008b96:	f1b8 0f00 	cmp.w	r8, #0
 8008b9a:	d11d      	bne.n	8008bd8 <UART_WaitOnFlagUntilTimeout+0x7a>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ba0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba4:	e840 3200 	strex	r2, r3, [r0]
 8008ba8:	2a00      	cmp	r2, #0
 8008baa:	d1f7      	bne.n	8008b9c <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bac:	f100 0308 	add.w	r3, r0, #8
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	f100 0108 	add.w	r1, r0, #8
 8008bbc:	e841 3200 	strex	r2, r3, [r1]
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	d1f3      	bne.n	8008bac <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008bca:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          return HAL_TIMEOUT;
 8008bce:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8008bd0:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
}
 8008bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bd8:	6803      	ldr	r3, [r0, #0]
 8008bda:	075a      	lsls	r2, r3, #29
 8008bdc:	d5c7      	bpl.n	8008b6e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bde:	69c3      	ldr	r3, [r0, #28]
 8008be0:	051b      	lsls	r3, r3, #20
 8008be2:	d5c4      	bpl.n	8008b6e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008be8:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bea:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008bee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf2:	e840 3200 	strex	r2, r3, [r0]
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d1f7      	bne.n	8008bea <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfa:	f100 0308 	add.w	r3, r0, #8
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c02:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c06:	f100 0108 	add.w	r1, r0, #8
 8008c0a:	e841 3200 	strex	r2, r3, [r1]
 8008c0e:	2a00      	cmp	r2, #0
 8008c10:	d1f3      	bne.n	8008bfa <UART_WaitOnFlagUntilTimeout+0x9c>
          huart->gState = HAL_UART_STATE_READY;
 8008c12:	2320      	movs	r3, #32
 8008c14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008c18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c1c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8008c20:	e7d5      	b.n	8008bce <UART_WaitOnFlagUntilTimeout+0x70>

08008c22 <HAL_UART_Transmit>:
{
 8008c22:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008c26:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008c28:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8008c30:	2b20      	cmp	r3, #32
{
 8008c32:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008c34:	d150      	bne.n	8008cd8 <HAL_UART_Transmit+0xb6>
    if ((pData == NULL) || (Size == 0U))
 8008c36:	2900      	cmp	r1, #0
 8008c38:	d04c      	beq.n	8008cd4 <HAL_UART_Transmit+0xb2>
 8008c3a:	2a00      	cmp	r2, #0
 8008c3c:	d04a      	beq.n	8008cd4 <HAL_UART_Transmit+0xb2>
    __HAL_LOCK(huart);
 8008c3e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d048      	beq.n	8008cd8 <HAL_UART_Transmit+0xb6>
 8008c46:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c48:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8008c4a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c4e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c50:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c54:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 8008c58:	f7fb fcaa 	bl	80045b0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c5c:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8008c5e:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8008c60:	f8a4 7054 	strh.w	r7, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c64:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 8008c68:	f8a4 7056 	strh.w	r7, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c6c:	d103      	bne.n	8008c76 <HAL_UART_Transmit+0x54>
 8008c6e:	6922      	ldr	r2, [r4, #16]
 8008c70:	b90a      	cbnz	r2, 8008c76 <HAL_UART_Transmit+0x54>
 8008c72:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8008c74:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8008c76:	2200      	movs	r2, #0
 8008c78:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 8008c7c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c80:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8008c84:	b292      	uxth	r2, r2
 8008c86:	b942      	cbnz	r2, 8008c9a <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c88:	2140      	movs	r1, #64	; 0x40
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f7ff ff67 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 8008c90:	b958      	cbnz	r0, 8008caa <HAL_UART_Transmit+0x88>
    huart->gState = HAL_UART_STATE_READY;
 8008c92:	2320      	movs	r3, #32
 8008c94:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8008c98:	e008      	b.n	8008cac <HAL_UART_Transmit+0x8a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	2180      	movs	r1, #128	; 0x80
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	9303      	str	r3, [sp, #12]
 8008ca2:	f7ff ff5c 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	b118      	cbz	r0, 8008cb2 <HAL_UART_Transmit+0x90>
        return HAL_TIMEOUT;
 8008caa:	2003      	movs	r0, #3
}
 8008cac:	b004      	add	sp, #16
 8008cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cb2:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8008cb4:	b95e      	cbnz	r6, 8008cce <HAL_UART_Transmit+0xac>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008cb6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8008cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cbe:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8008cc0:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 8008cc4:	3a01      	subs	r2, #1
 8008cc6:	b292      	uxth	r2, r2
 8008cc8:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
 8008ccc:	e7d6      	b.n	8008c7c <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008cce:	f816 2b01 	ldrb.w	r2, [r6], #1
 8008cd2:	e7f4      	b.n	8008cbe <HAL_UART_Transmit+0x9c>
      return  HAL_ERROR;
 8008cd4:	2001      	movs	r0, #1
 8008cd6:	e7e9      	b.n	8008cac <HAL_UART_Transmit+0x8a>
    return HAL_BUSY;
 8008cd8:	2002      	movs	r0, #2
 8008cda:	e7e7      	b.n	8008cac <HAL_UART_Transmit+0x8a>

08008cdc <UART_CheckIdleState>:
{
 8008cdc:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cde:	2500      	movs	r5, #0
{
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ce4:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 8008ce8:	f7fb fc62 	bl	80045b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cec:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8008cee:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cf0:	6812      	ldr	r2, [r2, #0]
 8008cf2:	0711      	lsls	r1, r2, #28
 8008cf4:	d417      	bmi.n	8008d26 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	6812      	ldr	r2, [r2, #0]
 8008cfa:	0752      	lsls	r2, r2, #29
 8008cfc:	d509      	bpl.n	8008d12 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cfe:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d06:	4620      	mov	r0, r4
 8008d08:	9200      	str	r2, [sp, #0]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f7ff ff27 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 8008d10:	b9b0      	cbnz	r0, 8008d40 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 8008d12:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d14:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8008d16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008d1a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008d1e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d22:	66e0      	str	r0, [r4, #108]	; 0x6c
  return HAL_OK;
 8008d24:	e00d      	b.n	8008d42 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d26:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8008d2a:	9003      	str	r0, [sp, #12]
 8008d2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d30:	4620      	mov	r0, r4
 8008d32:	9200      	str	r2, [sp, #0]
 8008d34:	462a      	mov	r2, r5
 8008d36:	f7ff ff12 	bl	8008b5e <UART_WaitOnFlagUntilTimeout>
 8008d3a:	9b03      	ldr	r3, [sp, #12]
 8008d3c:	2800      	cmp	r0, #0
 8008d3e:	d0da      	beq.n	8008cf6 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8008d40:	2003      	movs	r0, #3
}
 8008d42:	b005      	add	sp, #20
 8008d44:	bd30      	pop	{r4, r5, pc}

08008d46 <HAL_UART_Init>:
{
 8008d46:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	b350      	cbz	r0, 8008da2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008d4c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8008d50:	b91b      	cbnz	r3, 8008d5a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 8008d52:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8008d56:	f7f8 faf9 	bl	800134c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8008d5a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008d5c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d5e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8008d60:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 8008d64:	6813      	ldr	r3, [r2, #0]
 8008d66:	f023 0301 	bic.w	r3, r3, #1
 8008d6a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d6c:	f7ff fcba 	bl	80086e4 <UART_SetConfig>
 8008d70:	2801      	cmp	r0, #1
 8008d72:	d016      	beq.n	8008da2 <HAL_UART_Init+0x5c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d76:	b113      	cbz	r3, 8008d7e <HAL_UART_Init+0x38>
    UART_AdvFeatureConfig(huart);
 8008d78:	4620      	mov	r0, r4
 8008d7a:	f7ff fe9b 	bl	8008ab4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d7e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8008d80:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d8a:	689a      	ldr	r2, [r3, #8]
 8008d8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d90:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	f042 0201 	orr.w	r2, r2, #1
}
 8008d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8008d9c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8008d9e:	f7ff bf9d 	b.w	8008cdc <UART_CheckIdleState>
}
 8008da2:	2001      	movs	r0, #1
 8008da4:	bd10      	pop	{r4, pc}
	...

08008da8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008da8:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8008daa:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008dac:	b91b      	cbnz	r3, 8008db6 <UARTEx_SetNbDataToProcess+0xe>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8008dae:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8008db2:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008db4:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008db6:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008db8:	4d0a      	ldr	r5, [pc, #40]	; (8008de4 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dba:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dbc:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008dbe:	4c0a      	ldr	r4, [pc, #40]	; (8008de8 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dc0:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008dc4:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dc6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008dc8:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dd0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dd4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008dd6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dde:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8008de2:	e7e7      	b.n	8008db4 <UARTEx_SetNbDataToProcess+0xc>
 8008de4:	0801fb6a 	.word	0x0801fb6a
 8008de8:	0801fb62 	.word	0x0801fb62

08008dec <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8008dec:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d014      	beq.n	8008e1e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df4:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008df6:	2324      	movs	r3, #36	; 0x24
 8008df8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008dfc:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008dfe:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e00:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8008e04:	f023 0301 	bic.w	r3, r3, #1
 8008e08:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e0e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008e10:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8008e12:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8008e16:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  return HAL_OK;
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008e1e:	2002      	movs	r0, #2
}
 8008e20:	4770      	bx	lr

08008e22 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8008e22:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008e24:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8008e28:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d01b      	beq.n	8008e66 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008e34:	2324      	movs	r3, #36	; 0x24
 8008e36:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e3a:	6803      	ldr	r3, [r0, #0]
 8008e3c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	f022 0201 	bic.w	r2, r2, #1
 8008e44:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e46:	689a      	ldr	r2, [r3, #8]
 8008e48:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8008e4c:	4311      	orrs	r1, r2
 8008e4e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008e50:	f7ff ffaa 	bl	8008da8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e54:	6803      	ldr	r3, [r0, #0]
 8008e56:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008e58:	2320      	movs	r3, #32
 8008e5a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008e5e:	2000      	movs	r0, #0
 8008e60:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008e64:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008e66:	2002      	movs	r0, #2
 8008e68:	e7fc      	b.n	8008e64 <HAL_UARTEx_SetTxFifoThreshold+0x42>

08008e6a <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008e6a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008e6c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
{
 8008e70:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d01b      	beq.n	8008eae <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8008e76:	2301      	movs	r3, #1
 8008e78:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8008e7c:	2324      	movs	r3, #36	; 0x24
 8008e7e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e82:	6803      	ldr	r3, [r0, #0]
 8008e84:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	f022 0201 	bic.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e8e:	689a      	ldr	r2, [r3, #8]
 8008e90:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8008e94:	4311      	orrs	r1, r2
 8008e96:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008e98:	f7ff ff86 	bl	8008da8 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e9c:	6803      	ldr	r3, [r0, #0]
 8008e9e:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008eae:	2002      	movs	r0, #2
 8008eb0:	e7fc      	b.n	8008eac <HAL_UARTEx_SetRxFifoThreshold+0x42>
	...

08008eb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8008eb6:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8008eb8:	4a10      	ldr	r2, [pc, #64]	; (8008efc <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8008eba:	9301      	str	r3, [sp, #4]
    count++;
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8008ec2:	9b01      	ldr	r3, [sp, #4]
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d816      	bhi.n	8008ef6 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ec8:	6903      	ldr	r3, [r0, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	daf6      	bge.n	8008ebc <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8008ece:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	; (8008efc <USB_CoreReset+0x48>)
  count = 0U;
 8008ed2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008ed4:	6903      	ldr	r3, [r0, #16]
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	6103      	str	r3, [r0, #16]
    count++;
 8008edc:	9b01      	ldr	r3, [sp, #4]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d806      	bhi.n	8008ef6 <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ee8:	6903      	ldr	r3, [r0, #16]
 8008eea:	f013 0301 	ands.w	r3, r3, #1
 8008eee:	d1f5      	bne.n	8008edc <USB_CoreReset+0x28>

  return HAL_OK;
 8008ef0:	4618      	mov	r0, r3
}
 8008ef2:	b002      	add	sp, #8
 8008ef4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8008ef6:	2003      	movs	r0, #3
 8008ef8:	e7fb      	b.n	8008ef2 <USB_CoreReset+0x3e>
 8008efa:	bf00      	nop
 8008efc:	00030d40 	.word	0x00030d40

08008f00 <USB_CoreInit>:
{
 8008f00:	b084      	sub	sp, #16
 8008f02:	b538      	push	{r3, r4, r5, lr}
 8008f04:	ad05      	add	r5, sp, #20
 8008f06:	4604      	mov	r4, r0
 8008f08:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d12f      	bne.n	8008f72 <USB_CoreInit+0x72>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f18:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f1a:	68c3      	ldr	r3, [r0, #12]
 8008f1c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f24:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f26:	68c3      	ldr	r3, [r0, #12]
 8008f28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008f2c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8008f2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d103      	bne.n	8008f3c <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f34:	68c3      	ldr	r3, [r0, #12]
 8008f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f3a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f7ff ffb9 	bl	8008eb4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8008f42:	9b08      	ldr	r3, [sp, #32]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d110      	bne.n	8008f6a <USB_CoreInit+0x6a>
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008f48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008f4e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008f50:	f043 737b 	orr.w	r3, r3, #65798144	; 0x3ec0000
 8008f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f58:	65e3      	str	r3, [r4, #92]	; 0x5c
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f5a:	68a3      	ldr	r3, [r4, #8]
 8008f5c:	f043 0306 	orr.w	r3, r3, #6
 8008f60:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f62:	68a3      	ldr	r3, [r4, #8]
 8008f64:	f043 0320 	orr.w	r3, r3, #32
 8008f68:	60a3      	str	r3, [r4, #8]
}
 8008f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f6e:	b004      	add	sp, #16
 8008f70:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f72:	68c3      	ldr	r3, [r0, #12]
 8008f74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f78:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8008f7a:	f7ff ff9b 	bl	8008eb4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8008f7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f80:	b923      	cbnz	r3, 8008f8c <USB_CoreInit+0x8c>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f88:	63a3      	str	r3, [r4, #56]	; 0x38
 8008f8a:	e7da      	b.n	8008f42 <USB_CoreInit+0x42>
 8008f8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f92:	e7f9      	b.n	8008f88 <USB_CoreInit+0x88>

08008f94 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008f94:	6883      	ldr	r3, [r0, #8]
 8008f96:	f043 0301 	orr.w	r3, r3, #1
 8008f9a:	6083      	str	r3, [r0, #8]
}
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	4770      	bx	lr

08008fa0 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008fa0:	6883      	ldr	r3, [r0, #8]
 8008fa2:	f023 0301 	bic.w	r3, r3, #1
 8008fa6:	6083      	str	r3, [r0, #8]
}
 8008fa8:	2000      	movs	r0, #0
 8008faa:	4770      	bx	lr

08008fac <USB_SetCurrentMode>:
{
 8008fac:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fae:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008fb0:	2901      	cmp	r1, #1
{
 8008fb2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008fb4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008fb8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8008fba:	d10f      	bne.n	8008fdc <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fbc:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8008fbe:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fc4:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8008fc6:	2001      	movs	r0, #1
      ms++;
 8008fc8:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8008fca:	f7fb faf7 	bl	80045bc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8008fce:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008fd0:	07d9      	lsls	r1, r3, #31
 8008fd2:	d414      	bmi.n	8008ffe <USB_SetCurrentMode+0x52>
 8008fd4:	2c32      	cmp	r4, #50	; 0x32
 8008fd6:	d1f6      	bne.n	8008fc6 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8008fd8:	2001      	movs	r0, #1
}
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	d1fb      	bne.n	8008fd8 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fe0:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8008fe2:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008fe4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fe8:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8008fea:	2001      	movs	r0, #1
      ms++;
 8008fec:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8008fee:	f7fb fae5 	bl	80045bc <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8008ff2:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008ff4:	07da      	lsls	r2, r3, #31
 8008ff6:	d502      	bpl.n	8008ffe <USB_SetCurrentMode+0x52>
 8008ff8:	2c32      	cmp	r4, #50	; 0x32
 8008ffa:	d1f6      	bne.n	8008fea <USB_SetCurrentMode+0x3e>
 8008ffc:	e7ec      	b.n	8008fd8 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 8008ffe:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8009002:	4258      	negs	r0, r3
 8009004:	4158      	adcs	r0, r3
 8009006:	e7e8      	b.n	8008fda <USB_SetCurrentMode+0x2e>

08009008 <USB_FlushTxFifo>:
{
 8009008:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 800900a:	2300      	movs	r3, #0
    if (count > 200000U)
 800900c:	4a10      	ldr	r2, [pc, #64]	; (8009050 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 800900e:	9301      	str	r3, [sp, #4]
    count++;
 8009010:	9b01      	ldr	r3, [sp, #4]
 8009012:	3301      	adds	r3, #1
 8009014:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	4293      	cmp	r3, r2
 800901a:	d816      	bhi.n	800904a <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800901c:	6903      	ldr	r3, [r0, #16]
 800901e:	2b00      	cmp	r3, #0
 8009020:	daf6      	bge.n	8009010 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009022:	0189      	lsls	r1, r1, #6
  count = 0U;
 8009024:	2300      	movs	r3, #0
    if (count > 200000U)
 8009026:	4a0a      	ldr	r2, [pc, #40]	; (8009050 <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009028:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 800902c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800902e:	6101      	str	r1, [r0, #16]
    count++;
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	3301      	adds	r3, #1
 8009034:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	4293      	cmp	r3, r2
 800903a:	d806      	bhi.n	800904a <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800903c:	6903      	ldr	r3, [r0, #16]
 800903e:	f013 0320 	ands.w	r3, r3, #32
 8009042:	d1f5      	bne.n	8009030 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8009044:	4618      	mov	r0, r3
}
 8009046:	b002      	add	sp, #8
 8009048:	4770      	bx	lr
      return HAL_TIMEOUT;
 800904a:	2003      	movs	r0, #3
 800904c:	e7fb      	b.n	8009046 <USB_FlushTxFifo+0x3e>
 800904e:	bf00      	nop
 8009050:	00030d40 	.word	0x00030d40

08009054 <USB_FlushRxFifo>:
{
 8009054:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8009056:	2300      	movs	r3, #0
    if (count > 200000U)
 8009058:	4a0f      	ldr	r2, [pc, #60]	; (8009098 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 800905a:	9301      	str	r3, [sp, #4]
    count++;
 800905c:	9b01      	ldr	r3, [sp, #4]
 800905e:	3301      	adds	r3, #1
 8009060:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8009062:	9b01      	ldr	r3, [sp, #4]
 8009064:	4293      	cmp	r3, r2
 8009066:	d814      	bhi.n	8009092 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009068:	6903      	ldr	r3, [r0, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	daf6      	bge.n	800905c <USB_FlushRxFifo+0x8>
  count = 0U;
 800906e:	2300      	movs	r3, #0
    if (count > 200000U)
 8009070:	4a09      	ldr	r2, [pc, #36]	; (8009098 <USB_FlushRxFifo+0x44>)
  count = 0U;
 8009072:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009074:	2310      	movs	r3, #16
 8009076:	6103      	str	r3, [r0, #16]
    count++;
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	3301      	adds	r3, #1
 800907c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	4293      	cmp	r3, r2
 8009082:	d806      	bhi.n	8009092 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009084:	6903      	ldr	r3, [r0, #16]
 8009086:	f013 0310 	ands.w	r3, r3, #16
 800908a:	d1f5      	bne.n	8009078 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 800908c:	4618      	mov	r0, r3
}
 800908e:	b002      	add	sp, #8
 8009090:	4770      	bx	lr
      return HAL_TIMEOUT;
 8009092:	2003      	movs	r0, #3
 8009094:	e7fb      	b.n	800908e <USB_FlushRxFifo+0x3a>
 8009096:	bf00      	nop
 8009098:	00030d40 	.word	0x00030d40

0800909c <USB_WritePacket>:
{
 800909c:	b510      	push	{r4, lr}
 800909e:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80090a2:	b944      	cbnz	r4, 80090b6 <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80090a4:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090a6:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 80090a8:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090aa:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 80090ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 80090b2:	428b      	cmp	r3, r1
 80090b4:	d101      	bne.n	80090ba <USB_WritePacket+0x1e>
}
 80090b6:	2000      	movs	r0, #0
 80090b8:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80090ba:	f851 2b04 	ldr.w	r2, [r1], #4
 80090be:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80090c0:	e7f7      	b.n	80090b2 <USB_WritePacket+0x16>

080090c2 <USB_ReadPacket>:
{
 80090c2:	4603      	mov	r3, r0
  uint32_t count32b = (uint32_t)len >> 2U;
 80090c4:	0890      	lsrs	r0, r2, #2
  uint16_t remaining_bytes = len % 4U;
 80090c6:	f002 0203 	and.w	r2, r2, #3
{
 80090ca:	b570      	push	{r4, r5, r6, lr}
  for (i = 0U; i < count32b; i++)
 80090cc:	2400      	movs	r4, #0
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090ce:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 80090d2:	4284      	cmp	r4, r0
 80090d4:	d310      	bcc.n	80090f8 <USB_ReadPacket+0x36>
 80090d6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  if (remaining_bytes != 0U)
 80090da:	b162      	cbz	r2, 80090f6 <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090e0:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 80090e2:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090e4:	00d9      	lsls	r1, r3, #3
 80090e6:	fa24 f101 	lsr.w	r1, r4, r1
 80090ea:	54c1      	strb	r1, [r0, r3]
      i++;
 80090ec:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 80090ee:	b299      	uxth	r1, r3
 80090f0:	428a      	cmp	r2, r1
 80090f2:	d1f7      	bne.n	80090e4 <USB_ReadPacket+0x22>
      pDest++;
 80090f4:	4410      	add	r0, r2
}
 80090f6:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80090f8:	682e      	ldr	r6, [r5, #0]
 80090fa:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 0U; i < count32b; i++)
 80090fe:	3401      	adds	r4, #1
 8009100:	e7e7      	b.n	80090d2 <USB_ReadPacket+0x10>

08009102 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8009102:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8009104:	6980      	ldr	r0, [r0, #24]
}
 8009106:	4010      	ands	r0, r2
 8009108:	4770      	bx	lr

0800910a <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800910a:	6940      	ldr	r0, [r0, #20]
}
 800910c:	f000 0001 	and.w	r0, r0, #1
 8009110:	4770      	bx	lr
	...

08009114 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009114:	b084      	sub	sp, #16
 8009116:	b570      	push	{r4, r5, r6, lr}
 8009118:	4604      	mov	r4, r0
 800911a:	a805      	add	r0, sp, #20
 800911c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009126:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009128:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800912c:	63a3      	str	r3, [r4, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800912e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009134:	63a3      	str	r3, [r4, #56]	; 0x38


  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009136:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009138:	05da      	lsls	r2, r3, #23
 800913a:	d53a      	bpl.n	80091b2 <USB_HostInit+0x9e>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800913c:	9b07      	ldr	r3, [sp, #28]
 800913e:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009140:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8009144:	d137      	bne.n	80091b6 <USB_HostInit+0xa2>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009146:	f043 0304 	orr.w	r3, r3, #4
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800914a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800914e:	2110      	movs	r1, #16
 8009150:	4620      	mov	r0, r4
 8009152:	f7ff ff59 	bl	8009008 <USB_FlushTxFifo>
 8009156:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009158:	4620      	mov	r0, r4
 800915a:	f7ff ff7b 	bl	8009054 <USB_FlushRxFifo>
 800915e:	4308      	orrs	r0, r1
  {
    ret = HAL_ERROR;
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009160:	2300      	movs	r3, #0
 8009162:	9e06      	ldr	r6, [sp, #24]
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009164:	b2c0      	uxtb	r0, r0
 8009166:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 800916a:	461d      	mov	r5, r3
 800916c:	f04f 31ff 	mov.w	r1, #4294967295
    ret = HAL_ERROR;
 8009170:	3800      	subs	r0, #0
 8009172:	bf18      	it	ne
 8009174:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 8009176:	429e      	cmp	r6, r3
 8009178:	d120      	bne.n	80091bc <USB_HostInit+0xa8>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800917a:	61a5      	str	r5, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800917c:	6161      	str	r1, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800917e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009180:	05db      	lsls	r3, r3, #23
 8009182:	d520      	bpl.n	80091c6 <USB_HostInit+0xb2>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009184:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009188:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800918a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800918e:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009190:	4b10      	ldr	r3, [pc, #64]	; (80091d4 <USB_HostInit+0xc0>)
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009192:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009196:	9b08      	ldr	r3, [sp, #32]
 8009198:	b91b      	cbnz	r3, 80091a2 <USB_HostInit+0x8e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800919a:	69a3      	ldr	r3, [r4, #24]
 800919c:	f043 0310 	orr.w	r3, r3, #16
 80091a0:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80091a2:	69a2      	ldr	r2, [r4, #24]
 80091a4:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <USB_HostInit+0xc4>)
 80091a6:	4313      	orrs	r3, r2
 80091a8:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 80091aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80091ae:	b004      	add	sp, #16
 80091b0:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80091b2:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80091b6:	f023 0304 	bic.w	r3, r3, #4
 80091ba:	e7c6      	b.n	800914a <USB_HostInit+0x36>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80091bc:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 80091be:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 80091c0:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80091c2:	3220      	adds	r2, #32
 80091c4:	e7d7      	b.n	8009176 <USB_HostInit+0x62>
    USBx->GRXFSIZ  = 0x80U;
 80091c6:	2380      	movs	r3, #128	; 0x80
 80091c8:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80091ca:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 80091ce:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <USB_HostInit+0xc8>)
 80091d2:	e7de      	b.n	8009192 <USB_HostInit+0x7e>
 80091d4:	00e00300 	.word	0x00e00300
 80091d8:	a3200008 	.word	0xa3200008
 80091dc:	004000e0 	.word	0x004000e0

080091e0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80091e0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 80091e4:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80091e6:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80091ea:	f023 0303 	bic.w	r3, r3, #3
{
 80091ee:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80091f0:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80091f4:	f001 0303 	and.w	r3, r1, #3
 80091f8:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80091fc:	ea43 0304 	orr.w	r3, r3, r4
 8009200:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8009204:	d104      	bne.n	8009210 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 8009206:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 800920a:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 800920c:	2000      	movs	r0, #0
 800920e:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8009210:	2902      	cmp	r1, #2
 8009212:	d1fb      	bne.n	800920c <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 8009214:	f241 7370 	movw	r3, #6000	; 0x1770
 8009218:	e7f7      	b.n	800920a <USB_InitFSLSPClkSel+0x2a>

0800921a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800921a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 800921c:	2500      	movs	r5, #0
{
 800921e:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 8009220:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8009222:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8009226:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800922e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009236:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800923a:	2064      	movs	r0, #100	; 0x64
 800923c:	f7fb f9be 	bl	80045bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009240:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 8009242:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009248:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800924c:	f7fb f9b6 	bl	80045bc <HAL_Delay>

  return HAL_OK;
}
 8009250:	4628      	mov	r0, r5
 8009252:	b003      	add	sp, #12
 8009254:	bd30      	pop	{r4, r5, pc}

08009256 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009256:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800925c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8009260:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009262:	9b01      	ldr	r3, [sp, #4]
 8009264:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009268:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800926a:	9b01      	ldr	r3, [sp, #4]
 800926c:	04da      	lsls	r2, r3, #19
 800926e:	d406      	bmi.n	800927e <USB_DriveVbus+0x28>
 8009270:	2901      	cmp	r1, #1
 8009272:	d104      	bne.n	800927e <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009274:	9b01      	ldr	r3, [sp, #4]
 8009276:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800927a:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800927e:	9b01      	ldr	r3, [sp, #4]
 8009280:	04db      	lsls	r3, r3, #19
 8009282:	d505      	bpl.n	8009290 <USB_DriveVbus+0x3a>
 8009284:	b921      	cbnz	r1, 8009290 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009286:	9b01      	ldr	r3, [sp, #4]
 8009288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800928c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8009290:	2000      	movs	r0, #0
 8009292:	b002      	add	sp, #8
 8009294:	4770      	bx	lr

08009296 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009296:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8009298:	2300      	movs	r3, #0
 800929a:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800929c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80092a0:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80092a2:	9801      	ldr	r0, [sp, #4]
}
 80092a4:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80092a8:	b002      	add	sp, #8
 80092aa:	4770      	bx	lr

080092ac <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80092ac:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80092b0:	6880      	ldr	r0, [r0, #8]
}
 80092b2:	b280      	uxth	r0, r0
 80092b4:	4770      	bx	lr

080092b6 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80092b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80092ba:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 80092be:	461c      	mov	r4, r3
 80092c0:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80092c4:	f04f 33ff 	mov.w	r3, #4294967295
 80092c8:	f507 6ca0 	add.w	ip, r7, #1280	; 0x500
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80092cc:	fa4f fe82 	sxtb.w	lr, r2
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80092d0:	f8cc 3008 	str.w	r3, [ip, #8]
  switch (ep_type)
 80092d4:	2e03      	cmp	r6, #3
 80092d6:	d87a      	bhi.n	80093ce <USB_HC_Init+0x118>
 80092d8:	e8df f006 	tbb	[pc, r6]
 80092dc:	65026d02 	.word	0x65026d02
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092e0:	f240 439d 	movw	r3, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 80092e4:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092e8:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80092ec:	da04      	bge.n	80092f8 <USB_HC_Init+0x42>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80092ee:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80092f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092f6:	e053      	b.n	80093a0 <USB_HC_Init+0xea>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80092f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80092fa:	05db      	lsls	r3, r3, #23
 80092fc:	d44c      	bmi.n	8009398 <USB_HC_Init+0xe2>
  HAL_StatusTypeDef ret = HAL_OK;
 80092fe:	2500      	movs	r5, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009300:	f8dc 300c 	ldr.w	r3, [ip, #12]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8009304:	f1be 0f00 	cmp.w	lr, #0
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009308:	f043 0302 	orr.w	r3, r3, #2
 800930c:	f8cc 300c 	str.w	r3, [ip, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009310:	f001 030f 	and.w	r3, r1, #15
 8009314:	f04f 0101 	mov.w	r1, #1
 8009318:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
 800931c:	fa01 f103 	lsl.w	r1, r1, r3
 8009320:	ea41 0108 	orr.w	r1, r1, r8
 8009324:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418
    HCcharEpDir = 0U;
 8009328:	bfb8      	it	lt
 800932a:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800932e:	6983      	ldr	r3, [r0, #24]
    HCcharEpDir = 0U;
 8009330:	bfa8      	it	ge
 8009332:	2100      	movge	r1, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009334:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009338:	6183      	str	r3, [r0, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800933a:	f7ff ffac 	bl	8009296 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800933e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d145      	bne.n	80093d2 <USB_HC_Init+0x11c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009346:	2802      	cmp	r0, #2
 8009348:	bf0c      	ite	eq
 800934a:	2000      	moveq	r0, #0
 800934c:	f44f 3000 	movne.w	r0, #131072	; 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009350:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009352:	f8bd 4020 	ldrh.w	r4, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009356:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009358:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800935c:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009360:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009364:	4323      	orrs	r3, r4
 8009366:	4313      	orrs	r3, r2
 8009368:	04b2      	lsls	r2, r6, #18

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800936a:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800936e:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009372:	2e01      	cmp	r6, #1
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009374:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009378:	ea43 0301 	orr.w	r3, r3, r1
 800937c:	ea43 0300 	orr.w	r3, r3, r0
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009380:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009384:	d105      	bne.n	8009392 <USB_HC_Init+0xdc>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009386:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 800938a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800938e:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8009392:	4628      	mov	r0, r5
 8009394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009398:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800939c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80093a0:	f8cc 300c 	str.w	r3, [ip, #12]
 80093a4:	e7ab      	b.n	80092fe <USB_HC_Init+0x48>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093a6:	f240 639d 	movw	r3, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 80093aa:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093ae:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80093b2:	daa4      	bge.n	80092fe <USB_HC_Init+0x48>
 80093b4:	e79b      	b.n	80092ee <USB_HC_Init+0x38>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093b6:	f240 2325 	movw	r3, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 80093ba:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80093be:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80093c2:	da9c      	bge.n	80092fe <USB_HC_Init+0x48>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80093c4:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80093c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80093cc:	e7e8      	b.n	80093a0 <USB_HC_Init+0xea>
  switch (ep_type)
 80093ce:	2501      	movs	r5, #1
 80093d0:	e796      	b.n	8009300 <USB_HC_Init+0x4a>
    HCcharLowSpeed = 0U;
 80093d2:	2000      	movs	r0, #0
 80093d4:	e7bc      	b.n	8009350 <USB_HC_Init+0x9a>

080093d6 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80093d6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80093da:	6940      	ldr	r0, [r0, #20]
}
 80093dc:	b280      	uxth	r0, r0
 80093de:	4770      	bx	lr

080093e0 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80093e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 80093e2:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80093e4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 80093e8:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80093ea:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 80093ee:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80093f2:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80093f6:	6885      	ldr	r5, [r0, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80093f8:	0c9b      	lsrs	r3, r3, #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80093fa:	06ad      	lsls	r5, r5, #26
 80093fc:	d501      	bpl.n	8009402 <USB_HC_Halt+0x22>
 80093fe:	2c00      	cmp	r4, #0
 8009400:	da25      	bge.n	800944e <USB_HC_Halt+0x6e>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009402:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009406:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800940a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800940e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009412:	d11f      	bne.n	8009454 <USB_HC_Halt+0x74>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009414:	6883      	ldr	r3, [r0, #8]
 8009416:	069b      	lsls	r3, r3, #26
 8009418:	d419      	bmi.n	800944e <USB_HC_Halt+0x6e>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800941a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800941c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009420:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009424:	d132      	bne.n	800948c <USB_HC_Halt+0xac>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800942a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800942e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8009432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009436:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 800943a:	9b01      	ldr	r3, [sp, #4]
 800943c:	3301      	adds	r3, #1
 800943e:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8009440:	9b01      	ldr	r3, [sp, #4]
 8009442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009446:	d802      	bhi.n	800944e <USB_HC_Halt+0x6e>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009448:	6813      	ldr	r3, [r2, #0]
 800944a:	2b00      	cmp	r3, #0
 800944c:	dbf5      	blt.n	800943a <USB_HC_Halt+0x5a>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 800944e:	2000      	movs	r0, #0
 8009450:	b003      	add	sp, #12
 8009452:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009454:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8009458:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800945c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009460:	d114      	bne.n	800948c <USB_HC_Halt+0xac>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009466:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800946a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800946e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009472:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	3301      	adds	r3, #1
 800947a:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009482:	d8e4      	bhi.n	800944e <USB_HC_Halt+0x6e>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009484:	6813      	ldr	r3, [r2, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	dbf5      	blt.n	8009476 <USB_HC_Halt+0x96>
 800948a:	e7e0      	b.n	800944e <USB_HC_Halt+0x6e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800948c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009490:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8009494:	e7db      	b.n	800944e <USB_HC_Halt+0x6e>
	...

08009498 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009498:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 800949c:	4a06      	ldr	r2, [pc, #24]	; (80094b8 <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 800949e:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094a0:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80094a4:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80094ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80094b0:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 80094b4:	4770      	bx	lr
 80094b6:	bf00      	nop
 80094b8:	80080000 	.word	0x80080000

080094bc <USB_HC_StartXfer>:
{
 80094bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80094c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 80094c2:	4615      	mov	r5, r2
 80094c4:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80094c6:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80094c8:	05db      	lsls	r3, r3, #23
 80094ca:	d50f      	bpl.n	80094ec <USB_HC_StartXfer+0x30>
 80094cc:	790b      	ldrb	r3, [r1, #4]
 80094ce:	b96b      	cbnz	r3, 80094ec <USB_HC_StartXfer+0x30>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80094d0:	2d01      	cmp	r5, #1
 80094d2:	d168      	bne.n	80095a6 <USB_HC_StartXfer+0xea>
 80094d4:	79cb      	ldrb	r3, [r1, #7]
 80094d6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80094da:	d107      	bne.n	80094ec <USB_HC_StartXfer+0x30>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80094dc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 80094e0:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 80094e4:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80094e8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
  if (hc->xfer_len > 0U)
 80094ec:	694b      	ldr	r3, [r1, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d065      	beq.n	80095be <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80094f2:	890e      	ldrh	r6, [r1, #8]
 80094f4:	1e58      	subs	r0, r3, #1
 80094f6:	4430      	add	r0, r6
 80094f8:	fbb0 f0f6 	udiv	r0, r0, r6
 80094fc:	b280      	uxth	r0, r0
 80094fe:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8009502:	bf28      	it	cs
 8009504:	f44f 7080 	movcs.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 8009508:	78cf      	ldrb	r7, [r1, #3]
 800950a:	2f00      	cmp	r7, #0
 800950c:	d059      	beq.n	80095c2 <USB_HC_StartXfer+0x106>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800950e:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 8009512:	fb00 f808 	mul.w	r8, r0, r8
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009516:	f891 c00a 	ldrb.w	ip, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800951a:	eb04 1642 	add.w	r6, r4, r2, lsl #5
 800951e:	f8c1 8010 	str.w	r8, [r1, #16]
 8009522:	f3c8 0812 	ubfx	r8, r8, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009526:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800952a:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800952e:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
 8009532:	ea40 0008 	orr.w	r0, r0, r8
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009536:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
  if (dma != 0U)
 800953a:	b115      	cbz	r5, 8009542 <USB_HC_StartXfer+0x86>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800953c:	68c8      	ldr	r0, [r1, #12]
 800953e:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009542:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 8009546:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800954a:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800954e:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009550:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8009554:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8009556:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800955a:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800955e:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8009562:	ea40 000e 	orr.w	r0, r0, lr
 8009566:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800956a:	f8d6 0500 	ldr.w	r0, [r6, #1280]	; 0x500
 800956e:	9003      	str	r0, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009570:	9803      	ldr	r0, [sp, #12]
 8009572:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
 8009576:	9003      	str	r0, [sp, #12]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009578:	9803      	ldr	r0, [sp, #12]
  if (hc->ep_is_in != 0U)
 800957a:	b327      	cbz	r7, 80095c6 <USB_HC_StartXfer+0x10a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800957c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009580:	9003      	str	r0, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009582:	9803      	ldr	r0, [sp, #12]
 8009584:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009588:	9003      	str	r0, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800958a:	9803      	ldr	r0, [sp, #12]
 800958c:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009590:	ea57 0005 	orrs.w	r0, r7, r5
 8009594:	d10f      	bne.n	80095b6 <USB_HC_StartXfer+0xfa>
 8009596:	b173      	cbz	r3, 80095b6 <USB_HC_StartXfer+0xfa>
    switch (hc->ep_type)
 8009598:	79c8      	ldrb	r0, [r1, #7]
 800959a:	2803      	cmp	r0, #3
 800959c:	d821      	bhi.n	80095e2 <USB_HC_StartXfer+0x126>
 800959e:	e8df f000 	tbb	[pc, r0]
 80095a2:	2815      	.short	0x2815
 80095a4:	2815      	.short	0x2815
    if ((dma == 0U) && (hc->do_ping == 1U))
 80095a6:	2d00      	cmp	r5, #0
 80095a8:	d1a0      	bne.n	80094ec <USB_HC_StartXfer+0x30>
 80095aa:	794b      	ldrb	r3, [r1, #5]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d19d      	bne.n	80094ec <USB_HC_StartXfer+0x30>
      (void)USB_DoPing(USBx, hc->ch_num);
 80095b0:	4611      	mov	r1, r2
 80095b2:	f7ff ff71 	bl	8009498 <USB_DoPing>
}
 80095b6:	2000      	movs	r0, #0
 80095b8:	b004      	add	sp, #16
 80095ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = 1U;
 80095be:	2001      	movs	r0, #1
 80095c0:	e7a2      	b.n	8009508 <USB_HC_StartXfer+0x4c>
  if (hc->xfer_len > 0U)
 80095c2:	4698      	mov	r8, r3
 80095c4:	e7a7      	b.n	8009516 <USB_HC_StartXfer+0x5a>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095c6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80095ca:	e7d9      	b.n	8009580 <USB_HC_StartXfer+0xc4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80095cc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095ce:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80095d0:	b2ad      	uxth	r5, r5
 80095d2:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80095d6:	4285      	cmp	r5, r0
 80095d8:	d203      	bcs.n	80095e2 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80095da:	69a0      	ldr	r0, [r4, #24]
 80095dc:	f040 0020 	orr.w	r0, r0, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80095e0:	61a0      	str	r0, [r4, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80095e2:	2000      	movs	r0, #0
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	9000      	str	r0, [sp, #0]
 80095e8:	4620      	mov	r0, r4
 80095ea:	68c9      	ldr	r1, [r1, #12]
 80095ec:	f7ff fd56 	bl	800909c <USB_WritePacket>
 80095f0:	e7e1      	b.n	80095b6 <USB_HC_StartXfer+0xfa>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80095f2:	f8dc 5010 	ldr.w	r5, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80095f6:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80095f8:	b2ad      	uxth	r5, r5
 80095fa:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80095fe:	4285      	cmp	r5, r0
 8009600:	d2ef      	bcs.n	80095e2 <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009602:	69a0      	ldr	r0, [r4, #24]
 8009604:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8009608:	e7ea      	b.n	80095e0 <USB_HC_StartXfer+0x124>

0800960a <USB_StopHost>:
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 800960a:	2300      	movs	r3, #0
{
 800960c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0U;
 800960e:	9301      	str	r3, [sp, #4]
{
 8009610:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009612:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009614:	2110      	movs	r1, #16
 8009616:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800961a:	f023 0301 	bic.w	r3, r3, #1
 800961e:	6083      	str	r3, [r0, #8]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009620:	f7ff fcf2 	bl	8009008 <USB_FlushTxFifo>
 8009624:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff fd14 	bl	8009054 <USB_FlushRxFifo>
 800962c:	4308      	orrs	r0, r1
 800962e:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8009632:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 8009634:	4619      	mov	r1, r3
 8009636:	3800      	subs	r0, #0
 8009638:	bf18      	it	ne
 800963a:	2001      	movne	r0, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800963c:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800963e:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 8009642:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8009646:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 800964a:	42a9      	cmp	r1, r5
 800964c:	d1f6      	bne.n	800963c <USB_StopHost+0x32>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800964e:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009654:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8009658:	601a      	str	r2, [r3, #0]

    do
    {
      count++;
 800965a:	9a01      	ldr	r2, [sp, #4]
 800965c:	3201      	adds	r2, #1
 800965e:	9201      	str	r2, [sp, #4]

      if (count > 1000U)
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8009666:	d802      	bhi.n	800966e <USB_StopHost+0x64>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	2a00      	cmp	r2, #0
 800966c:	dbf5      	blt.n	800965a <USB_StopHost+0x50>
  for (i = 0U; i <= 15U; i++)
 800966e:	3320      	adds	r3, #32
 8009670:	42ab      	cmp	r3, r5
 8009672:	d1ec      	bne.n	800964e <USB_StopHost+0x44>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009674:	f04f 33ff 	mov.w	r3, #4294967295
 8009678:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800967c:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800967e:	68a3      	ldr	r3, [r4, #8]
 8009680:	f043 0301 	orr.w	r3, r3, #1
 8009684:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 8009686:	b003      	add	sp, #12
 8009688:	bd30      	pop	{r4, r5, pc}

0800968a <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800968a:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800968c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009690:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009692:	f001 fe55 	bl	800b340 <xTaskGetSchedulerState>
 8009696:	2801      	cmp	r0, #1
 8009698:	d003      	beq.n	80096a2 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800969a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800969e:	f000 bbd9 	b.w	8009e54 <xPortSysTickHandler>
}
 80096a2:	bd08      	pop	{r3, pc}

080096a4 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096a4:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80096a8:	b92b      	cbnz	r3, 80096b6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80096aa:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <osKernelInitialize+0x20>)
 80096ac:	6818      	ldr	r0, [r3, #0]
 80096ae:	b928      	cbnz	r0, 80096bc <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80096b0:	2201      	movs	r2, #1
 80096b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80096b4:	4770      	bx	lr
    stat = osErrorISR;
 80096b6:	f06f 0005 	mvn.w	r0, #5
 80096ba:	4770      	bx	lr
    } else {
      stat = osError;
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80096c0:	4770      	bx	lr
 80096c2:	bf00      	nop
 80096c4:	24002d00 	.word	0x24002d00

080096c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80096c8:	b510      	push	{r4, lr}
 80096ca:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80096ce:	b95c      	cbnz	r4, 80096e8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80096d0:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <osKernelStart+0x2c>)
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	2a01      	cmp	r2, #1
 80096d6:	d10a      	bne.n	80096ee <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096d8:	4a07      	ldr	r2, [pc, #28]	; (80096f8 <osKernelStart+0x30>)
 80096da:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80096dc:	2202      	movs	r2, #2
 80096de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80096e0:	f001 fcc8 	bl	800b074 <vTaskStartScheduler>
      stat = osOK;
 80096e4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80096e6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80096e8:	f06f 0005 	mvn.w	r0, #5
 80096ec:	e7fb      	b.n	80096e6 <osKernelStart+0x1e>
      stat = osError;
 80096ee:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80096f2:	e7f8      	b.n	80096e6 <osKernelStart+0x1e>
 80096f4:	24002d00 	.word	0x24002d00
 80096f8:	e000ed00 	.word	0xe000ed00

080096fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80096fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fe:	4614      	mov	r4, r2
 8009700:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009702:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009704:	460b      	mov	r3, r1
  hTask = NULL;
 8009706:	9205      	str	r2, [sp, #20]
 8009708:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800970c:	b9d2      	cbnz	r2, 8009744 <osThreadNew+0x48>
 800970e:	b1c8      	cbz	r0, 8009744 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8009710:	2c00      	cmp	r4, #0
 8009712:	d02f      	beq.n	8009774 <osThreadNew+0x78>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009714:	69a5      	ldr	r5, [r4, #24]
 8009716:	2d00      	cmp	r5, #0
 8009718:	bf08      	it	eq
 800971a:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800971c:	1e69      	subs	r1, r5, #1
 800971e:	46ac      	mov	ip, r5
 8009720:	2937      	cmp	r1, #55	; 0x37
 8009722:	d82b      	bhi.n	800977c <osThreadNew+0x80>
 8009724:	6861      	ldr	r1, [r4, #4]
 8009726:	07c9      	lsls	r1, r1, #31
 8009728:	d428      	bmi.n	800977c <osThreadNew+0x80>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800972a:	6966      	ldr	r6, [r4, #20]
 800972c:	b16e      	cbz	r6, 800974a <osThreadNew+0x4e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800972e:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 8009730:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009732:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 8009736:	b157      	cbz	r7, 800974e <osThreadNew+0x52>
 8009738:	f1be 0fbf 	cmp.w	lr, #191	; 0xbf
 800973c:	d902      	bls.n	8009744 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800973e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009740:	b104      	cbz	r4, 8009744 <osThreadNew+0x48>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009742:	b9ee      	cbnz	r6, 8009780 <osThreadNew+0x84>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009744:	9805      	ldr	r0, [sp, #20]
}
 8009746:	b007      	add	sp, #28
 8009748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800974a:	2280      	movs	r2, #128	; 0x80
 800974c:	e7f0      	b.n	8009730 <osThreadNew+0x34>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800974e:	f1be 0f00 	cmp.w	lr, #0
 8009752:	d1f7      	bne.n	8009744 <osThreadNew+0x48>
      if (mem == 0) {
 8009754:	6924      	ldr	r4, [r4, #16]
 8009756:	2c00      	cmp	r4, #0
 8009758:	d1f4      	bne.n	8009744 <osThreadNew+0x48>
 800975a:	460c      	mov	r4, r1
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800975c:	a905      	add	r1, sp, #20
 800975e:	b292      	uxth	r2, r2
 8009760:	e9cd c100 	strd	ip, r1, [sp]
 8009764:	4621      	mov	r1, r4
 8009766:	f001 faff 	bl	800ad68 <xTaskCreate>
 800976a:	2801      	cmp	r0, #1
            hTask = NULL;
 800976c:	bf1c      	itt	ne
 800976e:	2300      	movne	r3, #0
 8009770:	9305      	strne	r3, [sp, #20]
 8009772:	e7e7      	b.n	8009744 <osThreadNew+0x48>
    prio  = (UBaseType_t)osPriorityNormal;
 8009774:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 8009778:	2280      	movs	r2, #128	; 0x80
 800977a:	e7ef      	b.n	800975c <osThreadNew+0x60>
        return (NULL);
 800977c:	4610      	mov	r0, r2
 800977e:	e7e2      	b.n	8009746 <osThreadNew+0x4a>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009780:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8009784:	9500      	str	r5, [sp, #0]
 8009786:	f001 fab7 	bl	800acf8 <xTaskCreateStatic>
 800978a:	9005      	str	r0, [sp, #20]
 800978c:	e7da      	b.n	8009744 <osThreadNew+0x48>

0800978e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800978e:	b510      	push	{r4, lr}
 8009790:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009794:	b924      	cbnz	r4, 80097a0 <osDelay+0x12>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009796:	b110      	cbz	r0, 800979e <osDelay+0x10>
      vTaskDelay(ticks);
 8009798:	f001 fc2c 	bl	800aff4 <vTaskDelay>
    stat = osOK;
 800979c:	4620      	mov	r0, r4
    }
  }

  return (stat);
}
 800979e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80097a0:	f06f 0005 	mvn.w	r0, #5
 80097a4:	e7fb      	b.n	800979e <osDelay+0x10>

080097a6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80097a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097a8:	4604      	mov	r4, r0
 80097aa:	460e      	mov	r6, r1
 80097ac:	4615      	mov	r5, r2
 80097ae:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80097b2:	b11a      	cbz	r2, 80097bc <osSemaphoreNew+0x16>
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
            vSemaphoreDelete (hSemaphore);
            hSemaphore = NULL;
 80097b4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 80097b6:	4620      	mov	r0, r4
 80097b8:	b003      	add	sp, #12
 80097ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80097bc:	2800      	cmp	r0, #0
 80097be:	d0f9      	beq.n	80097b4 <osSemaphoreNew+0xe>
 80097c0:	4288      	cmp	r0, r1
 80097c2:	d3f7      	bcc.n	80097b4 <osSemaphoreNew+0xe>
    if (attr != NULL) {
 80097c4:	b1e5      	cbz	r5, 8009800 <osSemaphoreNew+0x5a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80097c6:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 80097ca:	b1bb      	cbz	r3, 80097fc <osSemaphoreNew+0x56>
 80097cc:	2f4f      	cmp	r7, #79	; 0x4f
 80097ce:	d9f1      	bls.n	80097b4 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 80097d0:	2801      	cmp	r0, #1
 80097d2:	d12a      	bne.n	800982a <osSemaphoreNew+0x84>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80097d4:	2103      	movs	r1, #3
 80097d6:	9100      	str	r1, [sp, #0]
 80097d8:	4611      	mov	r1, r2
 80097da:	f000 fce3 	bl	800a1a4 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 80097de:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0e7      	beq.n	80097b4 <osSemaphoreNew+0xe>
 80097e4:	b1de      	cbz	r6, 800981e <osSemaphoreNew+0x78>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80097e6:	2300      	movs	r3, #0
 80097e8:	461a      	mov	r2, r3
 80097ea:	4619      	mov	r1, r3
 80097ec:	f000 fd8f 	bl	800a30e <xQueueGenericSend>
 80097f0:	2801      	cmp	r0, #1
 80097f2:	d014      	beq.n	800981e <osSemaphoreNew+0x78>
            vSemaphoreDelete (hSemaphore);
 80097f4:	4620      	mov	r0, r4
 80097f6:	f001 f8cb 	bl	800a990 <vQueueDelete>
 80097fa:	e7db      	b.n	80097b4 <osSemaphoreNew+0xe>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80097fc:	2f00      	cmp	r7, #0
 80097fe:	d1d9      	bne.n	80097b4 <osSemaphoreNew+0xe>
      if (max_count == 1U) {
 8009800:	2c01      	cmp	r4, #1
 8009802:	d105      	bne.n	8009810 <osSemaphoreNew+0x6a>
            hSemaphore = xSemaphoreCreateBinary();
 8009804:	2203      	movs	r2, #3
 8009806:	2100      	movs	r1, #0
 8009808:	4620      	mov	r0, r4
 800980a:	f000 fd19 	bl	800a240 <xQueueGenericCreate>
 800980e:	e7e6      	b.n	80097de <osSemaphoreNew+0x38>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009810:	4620      	mov	r0, r4
 8009812:	4631      	mov	r1, r6
 8009814:	f000 fd5d 	bl	800a2d2 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8009818:	4604      	mov	r4, r0
 800981a:	2800      	cmp	r0, #0
 800981c:	d0ca      	beq.n	80097b4 <osSemaphoreNew+0xe>
        if (attr != NULL) {
 800981e:	b955      	cbnz	r5, 8009836 <osSemaphoreNew+0x90>
        vQueueAddToRegistry (hSemaphore, name);
 8009820:	4629      	mov	r1, r5
 8009822:	4620      	mov	r0, r4
 8009824:	f001 f88e 	bl	800a944 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 8009828:	e7c5      	b.n	80097b6 <osSemaphoreNew+0x10>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800982a:	461a      	mov	r2, r3
 800982c:	f000 fd2f 	bl	800a28e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8009830:	4604      	mov	r4, r0
 8009832:	2800      	cmp	r0, #0
 8009834:	d0be      	beq.n	80097b4 <osSemaphoreNew+0xe>
          name = attr->name;
 8009836:	682d      	ldr	r5, [r5, #0]
 8009838:	e7f2      	b.n	8009820 <osSemaphoreNew+0x7a>

0800983a <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800983a:	b513      	push	{r0, r1, r4, lr}
 800983c:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800983e:	b308      	cbz	r0, 8009884 <osSemaphoreAcquire+0x4a>
 8009840:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009844:	b1b3      	cbz	r3, 8009874 <osSemaphoreAcquire+0x3a>
    if (timeout != 0U) {
 8009846:	b9e9      	cbnz	r1, 8009884 <osSemaphoreAcquire+0x4a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009848:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800984a:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800984c:	f001 f82a 	bl	800a8a4 <xQueueReceiveFromISR>
 8009850:	2801      	cmp	r0, #1
 8009852:	d114      	bne.n	800987e <osSemaphoreAcquire+0x44>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009854:	9b01      	ldr	r3, [sp, #4]
 8009856:	b913      	cbnz	r3, 800985e <osSemaphoreAcquire+0x24>
  stat = osOK;
 8009858:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800985a:	b002      	add	sp, #8
 800985c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800985e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009866:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	e7f1      	b.n	8009858 <osSemaphoreAcquire+0x1e>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009874:	f000 ff53 	bl	800a71e <xQueueSemaphoreTake>
 8009878:	2801      	cmp	r0, #1
 800987a:	d0ed      	beq.n	8009858 <osSemaphoreAcquire+0x1e>
      if (timeout != 0U) {
 800987c:	b92c      	cbnz	r4, 800988a <osSemaphoreAcquire+0x50>
        stat = osErrorResource;
 800987e:	f06f 0002 	mvn.w	r0, #2
 8009882:	e7ea      	b.n	800985a <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009884:	f06f 0003 	mvn.w	r0, #3
 8009888:	e7e7      	b.n	800985a <osSemaphoreAcquire+0x20>
        stat = osErrorTimeout;
 800988a:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 800988e:	e7e4      	b.n	800985a <osSemaphoreAcquire+0x20>

08009890 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009890:	b513      	push	{r0, r1, r4, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009892:	b310      	cbz	r0, 80098da <osSemaphoreRelease+0x4a>
 8009894:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009898:	b1b3      	cbz	r3, 80098c8 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 800989a:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800989c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800989e:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80098a0:	f000 fe4a 	bl	800a538 <xQueueGiveFromISR>
 80098a4:	2801      	cmp	r0, #1
 80098a6:	d115      	bne.n	80098d4 <osSemaphoreRelease+0x44>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80098a8:	9b01      	ldr	r3, [sp, #4]
 80098aa:	b913      	cbnz	r3, 80098b2 <osSemaphoreRelease+0x22>
  stat = osOK;
 80098ac:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80098ae:	b002      	add	sp, #8
 80098b0:	bd10      	pop	{r4, pc}
      portYIELD_FROM_ISR (yield);
 80098b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80098b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80098be:	f3bf 8f4f 	dsb	sy
 80098c2:	f3bf 8f6f 	isb	sy
 80098c6:	e7f1      	b.n	80098ac <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80098c8:	461a      	mov	r2, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	f000 fd1f 	bl	800a30e <xQueueGenericSend>
 80098d0:	2801      	cmp	r0, #1
 80098d2:	d0eb      	beq.n	80098ac <osSemaphoreRelease+0x1c>
      stat = osErrorResource;
 80098d4:	f06f 0002 	mvn.w	r0, #2
 80098d8:	e7e9      	b.n	80098ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80098da:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 80098de:	e7e6      	b.n	80098ae <osSemaphoreRelease+0x1e>

080098e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80098e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098e2:	4605      	mov	r5, r0
 80098e4:	460e      	mov	r6, r1
 80098e6:	4614      	mov	r4, r2
 80098e8:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80098ec:	b11f      	cbz	r7, 80098f6 <osMessageQueueNew+0x16>
  hQueue = NULL;
 80098ee:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 80098f0:	4628      	mov	r0, r5
 80098f2:	b003      	add	sp, #12
 80098f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d0f9      	beq.n	80098ee <osMessageQueueNew+0xe>
 80098fa:	2900      	cmp	r1, #0
 80098fc:	d0f7      	beq.n	80098ee <osMessageQueueNew+0xe>
    if (attr != NULL) {
 80098fe:	b1da      	cbz	r2, 8009938 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009900:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 8009904:	b183      	cbz	r3, 8009928 <osMessageQueueNew+0x48>
 8009906:	2a4f      	cmp	r2, #79	; 0x4f
 8009908:	d9f1      	bls.n	80098ee <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800990a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800990c:	2a00      	cmp	r2, #0
 800990e:	d0ee      	beq.n	80098ee <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009910:	434d      	muls	r5, r1
 8009912:	6966      	ldr	r6, [r4, #20]
 8009914:	42ae      	cmp	r6, r5
 8009916:	d3ea      	bcc.n	80098ee <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009918:	9700      	str	r7, [sp, #0]
 800991a:	f000 fc43 	bl	800a1a4 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800991e:	4605      	mov	r5, r0
 8009920:	2800      	cmp	r0, #0
 8009922:	d0e4      	beq.n	80098ee <osMessageQueueNew+0xe>
        name = attr->name;
 8009924:	6824      	ldr	r4, [r4, #0]
 8009926:	e011      	b.n	800994c <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009928:	2a00      	cmp	r2, #0
 800992a:	d1e0      	bne.n	80098ee <osMessageQueueNew+0xe>
 800992c:	6923      	ldr	r3, [r4, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d1dd      	bne.n	80098ee <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009932:	6963      	ldr	r3, [r4, #20]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1da      	bne.n	80098ee <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 8009938:	4628      	mov	r0, r5
 800993a:	2200      	movs	r2, #0
 800993c:	4631      	mov	r1, r6
 800993e:	f000 fc7f 	bl	800a240 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8009942:	4605      	mov	r5, r0
 8009944:	2800      	cmp	r0, #0
 8009946:	d0d2      	beq.n	80098ee <osMessageQueueNew+0xe>
      if (attr != NULL) {
 8009948:	2c00      	cmp	r4, #0
 800994a:	d1eb      	bne.n	8009924 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800994c:	4621      	mov	r1, r4
 800994e:	4628      	mov	r0, r5
 8009950:	f000 fff8 	bl	800a944 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 8009954:	e7cc      	b.n	80098f0 <osMessageQueueNew+0x10>

08009956 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009956:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009958:	461c      	mov	r4, r3
 800995a:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800995e:	b1c6      	cbz	r6, 8009992 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009960:	b318      	cbz	r0, 80099aa <osMessageQueuePut+0x54>
 8009962:	b311      	cbz	r1, 80099aa <osMessageQueuePut+0x54>
 8009964:	bb0b      	cbnz	r3, 80099aa <osMessageQueuePut+0x54>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009966:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 8009968:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800996a:	f000 fd83 	bl	800a474 <xQueueGenericSendFromISR>
 800996e:	2801      	cmp	r0, #1
 8009970:	d118      	bne.n	80099a4 <osMessageQueuePut+0x4e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	b913      	cbnz	r3, 800997c <osMessageQueuePut+0x26>
  stat = osOK;
 8009976:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009978:	b002      	add	sp, #8
 800997a:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800997c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009984:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	e7f1      	b.n	8009976 <osMessageQueuePut+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009992:	b150      	cbz	r0, 80099aa <osMessageQueuePut+0x54>
 8009994:	b149      	cbz	r1, 80099aa <osMessageQueuePut+0x54>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009996:	4633      	mov	r3, r6
 8009998:	4622      	mov	r2, r4
 800999a:	f000 fcb8 	bl	800a30e <xQueueGenericSend>
 800999e:	2801      	cmp	r0, #1
 80099a0:	d0e9      	beq.n	8009976 <osMessageQueuePut+0x20>
        if (timeout != 0U) {
 80099a2:	b92c      	cbnz	r4, 80099b0 <osMessageQueuePut+0x5a>
          stat = osErrorResource;
 80099a4:	f06f 0002 	mvn.w	r0, #2
 80099a8:	e7e6      	b.n	8009978 <osMessageQueuePut+0x22>
      stat = osErrorParameter;
 80099aa:	f06f 0003 	mvn.w	r0, #3
 80099ae:	e7e3      	b.n	8009978 <osMessageQueuePut+0x22>
          stat = osErrorTimeout;
 80099b0:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 80099b4:	e7e0      	b.n	8009978 <osMessageQueuePut+0x22>

080099b6 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80099b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099b8:	461c      	mov	r4, r3
 80099ba:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80099be:	b1c3      	cbz	r3, 80099f2 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80099c0:	b310      	cbz	r0, 8009a08 <osMessageQueueGet+0x52>
 80099c2:	b309      	cbz	r1, 8009a08 <osMessageQueueGet+0x52>
 80099c4:	bb04      	cbnz	r4, 8009a08 <osMessageQueueGet+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099c6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 80099c8:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80099ca:	f000 ff6b 	bl	800a8a4 <xQueueReceiveFromISR>
 80099ce:	2801      	cmp	r0, #1
 80099d0:	d117      	bne.n	8009a02 <osMessageQueueGet+0x4c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	b913      	cbnz	r3, 80099dc <osMessageQueueGet+0x26>
  stat = osOK;
 80099d6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80099d8:	b003      	add	sp, #12
 80099da:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 80099dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80099e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	e7f1      	b.n	80099d6 <osMessageQueueGet+0x20>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80099f2:	b148      	cbz	r0, 8009a08 <osMessageQueueGet+0x52>
 80099f4:	b141      	cbz	r1, 8009a08 <osMessageQueueGet+0x52>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80099f6:	4622      	mov	r2, r4
 80099f8:	f000 fdf2 	bl	800a5e0 <xQueueReceive>
 80099fc:	2801      	cmp	r0, #1
 80099fe:	d0ea      	beq.n	80099d6 <osMessageQueueGet+0x20>
        if (timeout != 0U) {
 8009a00:	b92c      	cbnz	r4, 8009a0e <osMessageQueueGet+0x58>
          stat = osErrorResource;
 8009a02:	f06f 0002 	mvn.w	r0, #2
 8009a06:	e7e7      	b.n	80099d8 <osMessageQueueGet+0x22>
      stat = osErrorParameter;
 8009a08:	f06f 0003 	mvn.w	r0, #3
 8009a0c:	e7e4      	b.n	80099d8 <osMessageQueueGet+0x22>
          stat = osErrorTimeout;
 8009a0e:	f06f 0001 	mvn.w	r0, #1
  return (stat);
 8009a12:	e7e1      	b.n	80099d8 <osMessageQueueGet+0x22>

08009a14 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a14:	4b03      	ldr	r3, [pc, #12]	; (8009a24 <vApplicationGetIdleTaskMemory+0x10>)
 8009a16:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a18:	4b03      	ldr	r3, [pc, #12]	; (8009a28 <vApplicationGetIdleTaskMemory+0x14>)
 8009a1a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a1c:	2380      	movs	r3, #128	; 0x80
 8009a1e:	6013      	str	r3, [r2, #0]
}
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	24002c40 	.word	0x24002c40
 8009a28:	24002a40 	.word	0x24002a40

08009a2c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a2c:	4b03      	ldr	r3, [pc, #12]	; (8009a3c <vApplicationGetTimerTaskMemory+0x10>)
 8009a2e:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a30:	4b03      	ldr	r3, [pc, #12]	; (8009a40 <vApplicationGetTimerTaskMemory+0x14>)
 8009a32:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a38:	6013      	str	r3, [r2, #0]
}
 8009a3a:	4770      	bx	lr
 8009a3c:	24003104 	.word	0x24003104
 8009a40:	24002d04 	.word	0x24002d04

08009a44 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a44:	4b0f      	ldr	r3, [pc, #60]	; (8009a84 <prvInsertBlockIntoFreeList+0x40>)
{
 8009a46:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a48:	461a      	mov	r2, r3
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4283      	cmp	r3, r0
 8009a4e:	d3fb      	bcc.n	8009a48 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a50:	6854      	ldr	r4, [r2, #4]
 8009a52:	1911      	adds	r1, r2, r4
 8009a54:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a56:	bf01      	itttt	eq
 8009a58:	6841      	ldreq	r1, [r0, #4]
 8009a5a:	4610      	moveq	r0, r2
 8009a5c:	1909      	addeq	r1, r1, r4
 8009a5e:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a60:	6844      	ldr	r4, [r0, #4]
 8009a62:	1901      	adds	r1, r0, r4
 8009a64:	428b      	cmp	r3, r1
 8009a66:	d107      	bne.n	8009a78 <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a68:	4907      	ldr	r1, [pc, #28]	; (8009a88 <prvInsertBlockIntoFreeList+0x44>)
 8009a6a:	6809      	ldr	r1, [r1, #0]
 8009a6c:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a6e:	bf1f      	itttt	ne
 8009a70:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a72:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a74:	1909      	addne	r1, r1, r4
 8009a76:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a78:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a7a:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a7c:	bf18      	it	ne
 8009a7e:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a80:	bd10      	pop	{r4, pc}
 8009a82:	bf00      	nop
 8009a84:	24006ddc 	.word	0x24006ddc
 8009a88:	240031c4 	.word	0x240031c4

08009a8c <pvPortMalloc>:
{
 8009a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a90:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009a92:	f001 f997 	bl	800adc4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009a96:	4842      	ldr	r0, [pc, #264]	; (8009ba0 <pvPortMalloc+0x114>)
 8009a98:	4d42      	ldr	r5, [pc, #264]	; (8009ba4 <pvPortMalloc+0x118>)
 8009a9a:	6803      	ldr	r3, [r0, #0]
 8009a9c:	bb0b      	cbnz	r3, 8009ae2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8009a9e:	4942      	ldr	r1, [pc, #264]	; (8009ba8 <pvPortMalloc+0x11c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009aa0:	074e      	lsls	r6, r1, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009aa2:	4e42      	ldr	r6, [pc, #264]	; (8009bac <pvPortMalloc+0x120>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009aa4:	bf1b      	ittet	ne
 8009aa6:	1dcb      	addne	r3, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009aa8:	f501 5270 	addne.w	r2, r1, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aac:	f44f 5270 	moveq.w	r2, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ab0:	f023 0307 	bicne.w	r3, r3, #7
 8009ab4:	bf1c      	itt	ne
 8009ab6:	4619      	movne	r1, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009ab8:	1ad2      	subne	r2, r2, r3
	xStart.xBlockSize = ( size_t ) 0;
 8009aba:	2300      	movs	r3, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009abc:	440a      	add	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009abe:	6031      	str	r1, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ac0:	6073      	str	r3, [r6, #4]
	uxAddress -= xHeapStructSize;
 8009ac2:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ac4:	f022 0207 	bic.w	r2, r2, #7
	pxEnd->pxNextFreeBlock = NULL;
 8009ac8:	e9c2 3300 	strd	r3, r3, [r2]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009acc:	1a53      	subs	r3, r2, r1
	pxEnd = ( void * ) uxAddress;
 8009ace:	6002      	str	r2, [r0, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ad0:	e9c1 2300 	strd	r2, r3, [r1]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ad4:	4a36      	ldr	r2, [pc, #216]	; (8009bb0 <pvPortMalloc+0x124>)
 8009ad6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ad8:	4a36      	ldr	r2, [pc, #216]	; (8009bb4 <pvPortMalloc+0x128>)
 8009ada:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ae0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ae2:	682f      	ldr	r7, [r5, #0]
 8009ae4:	4227      	tst	r7, r4
 8009ae6:	d155      	bne.n	8009b94 <pvPortMalloc+0x108>
			if( xWantedSize > 0 )
 8009ae8:	2c00      	cmp	r4, #0
 8009aea:	d046      	beq.n	8009b7a <pvPortMalloc+0xee>
				xWantedSize += xHeapStructSize;
 8009aec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009af0:	0761      	lsls	r1, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009af2:	bf1c      	itt	ne
 8009af4:	f023 0307 	bicne.w	r3, r3, #7
 8009af8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d04a      	beq.n	8009b94 <pvPortMalloc+0x108>
 8009afe:	4c2d      	ldr	r4, [pc, #180]	; (8009bb4 <pvPortMalloc+0x128>)
 8009b00:	6826      	ldr	r6, [r4, #0]
 8009b02:	429e      	cmp	r6, r3
 8009b04:	d346      	bcc.n	8009b94 <pvPortMalloc+0x108>
				pxBlock = xStart.pxNextFreeBlock;
 8009b06:	4a29      	ldr	r2, [pc, #164]	; (8009bac <pvPortMalloc+0x120>)
 8009b08:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b0a:	6869      	ldr	r1, [r5, #4]
 8009b0c:	4299      	cmp	r1, r3
 8009b0e:	d204      	bcs.n	8009b1a <pvPortMalloc+0x8e>
 8009b10:	f8d5 c000 	ldr.w	ip, [r5]
 8009b14:	f1bc 0f00 	cmp.w	ip, #0
 8009b18:	d115      	bne.n	8009b46 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	42a8      	cmp	r0, r5
 8009b1e:	d039      	beq.n	8009b94 <pvPortMalloc+0x108>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b20:	1ac9      	subs	r1, r1, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b22:	6828      	ldr	r0, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b24:	f8d2 8000 	ldr.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b28:	2910      	cmp	r1, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b2a:	6010      	str	r0, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b2c:	d912      	bls.n	8009b54 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b2e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b30:	0742      	lsls	r2, r0, #29
 8009b32:	d00b      	beq.n	8009b4c <pvPortMalloc+0xc0>
 8009b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b38:	f383 8811 	msr	BASEPRI, r3
 8009b3c:	f3bf 8f6f 	isb	sy
 8009b40:	f3bf 8f4f 	dsb	sy
 8009b44:	e7fe      	b.n	8009b44 <pvPortMalloc+0xb8>
 8009b46:	462a      	mov	r2, r5
 8009b48:	4665      	mov	r5, ip
 8009b4a:	e7de      	b.n	8009b0a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b4c:	6041      	str	r1, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b4e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b50:	f7ff ff78 	bl	8009a44 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b54:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b56:	4916      	ldr	r1, [pc, #88]	; (8009bb0 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b58:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b5a:	431f      	orrs	r7, r3
					xNumberOfSuccessfulAllocations++;
 8009b5c:	4a16      	ldr	r2, [pc, #88]	; (8009bb8 <pvPortMalloc+0x12c>)
					pxBlock->pxNextFreeBlock = NULL;
 8009b5e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b60:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8009b62:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 8009b64:	6813      	ldr	r3, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b66:	4286      	cmp	r6, r0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b68:	6026      	str	r6, [r4, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b6a:	f108 0408 	add.w	r4, r8, #8
					xNumberOfSuccessfulAllocations++;
 8009b6e:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b72:	bf38      	it	cc
 8009b74:	600e      	strcc	r6, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b76:	606f      	str	r7, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 8009b78:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8009b7a:	f001 f9c7 	bl	800af0c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b7e:	0763      	lsls	r3, r4, #29
 8009b80:	d00a      	beq.n	8009b98 <pvPortMalloc+0x10c>
 8009b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	e7fe      	b.n	8009b92 <pvPortMalloc+0x106>
void *pvReturn = NULL;
 8009b94:	2400      	movs	r4, #0
 8009b96:	e7f0      	b.n	8009b7a <pvPortMalloc+0xee>
}
 8009b98:	4620      	mov	r0, r4
 8009b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b9e:	bf00      	nop
 8009ba0:	240031c4 	.word	0x240031c4
 8009ba4:	24006dc8 	.word	0x24006dc8
 8009ba8:	240031c8 	.word	0x240031c8
 8009bac:	24006ddc 	.word	0x24006ddc
 8009bb0:	24006dd0 	.word	0x24006dd0
 8009bb4:	24006dcc 	.word	0x24006dcc
 8009bb8:	24006dd4 	.word	0x24006dd4

08009bbc <vPortFree>:
{
 8009bbc:	b510      	push	{r4, lr}
	if( pv != NULL )
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	b390      	cbz	r0, 8009c28 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009bc2:	4a1a      	ldr	r2, [pc, #104]	; (8009c2c <vPortFree+0x70>)
 8009bc4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8009bc8:	6812      	ldr	r2, [r2, #0]
 8009bca:	4213      	tst	r3, r2
 8009bcc:	d108      	bne.n	8009be0 <vPortFree+0x24>
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	e7fe      	b.n	8009bde <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009be0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8009be4:	b141      	cbz	r1, 8009bf8 <vPortFree+0x3c>
 8009be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	e7fe      	b.n	8009bf6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bf8:	ea23 0302 	bic.w	r3, r3, r2
 8009bfc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8009c00:	f001 f8e0 	bl	800adc4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c04:	4a0a      	ldr	r2, [pc, #40]	; (8009c30 <vPortFree+0x74>)
 8009c06:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c0a:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c0e:	6811      	ldr	r1, [r2, #0]
 8009c10:	440b      	add	r3, r1
 8009c12:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c14:	f7ff ff16 	bl	8009a44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c18:	4a06      	ldr	r2, [pc, #24]	; (8009c34 <vPortFree+0x78>)
 8009c1a:	6813      	ldr	r3, [r2, #0]
 8009c1c:	3301      	adds	r3, #1
}
 8009c1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 8009c22:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8009c24:	f001 b972 	b.w	800af0c <xTaskResumeAll>
}
 8009c28:	bd10      	pop	{r4, pc}
 8009c2a:	bf00      	nop
 8009c2c:	24006dc8 	.word	0x24006dc8
 8009c30:	24006dcc 	.word	0x24006dcc
 8009c34:	24006dd8 	.word	0x24006dd8

08009c38 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c38:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c3c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c40:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c42:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c44:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c4c:	4770      	bx	lr

08009c4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c52:	4770      	bx	lr

08009c54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c54:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c56:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8009c58:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c5a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c60:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009c62:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009c64:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009c66:	3301      	adds	r3, #1
 8009c68:	6003      	str	r3, [r0, #0]
}
 8009c6a:	4770      	bx	lr

08009c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c6c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c6e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c70:	1c63      	adds	r3, r4, #1
 8009c72:	d10a      	bne.n	8009c8a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c74:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c7a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c7c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c7e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8009c80:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8009c82:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8009c84:	3301      	adds	r3, #1
 8009c86:	6003      	str	r3, [r0, #0]
}
 8009c88:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c8a:	f100 0208 	add.w	r2, r0, #8
 8009c8e:	4613      	mov	r3, r2
 8009c90:	6852      	ldr	r2, [r2, #4]
 8009c92:	6815      	ldr	r5, [r2, #0]
 8009c94:	42a5      	cmp	r5, r4
 8009c96:	d9fa      	bls.n	8009c8e <vListInsert+0x22>
 8009c98:	e7ed      	b.n	8009c76 <vListInsert+0xa>

08009c9a <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c9a:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c9c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8009ca0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ca2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ca4:	6859      	ldr	r1, [r3, #4]
 8009ca6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ca8:	bf08      	it	eq
 8009caa:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009cac:	2200      	movs	r2, #0
 8009cae:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	3a01      	subs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009cb6:	6818      	ldr	r0, [r3, #0]
}
 8009cb8:	4770      	bx	lr
	...

08009cbc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cbc:	4808      	ldr	r0, [pc, #32]	; (8009ce0 <prvPortStartFirstTask+0x24>)
 8009cbe:	6800      	ldr	r0, [r0, #0]
 8009cc0:	6800      	ldr	r0, [r0, #0]
 8009cc2:	f380 8808 	msr	MSP, r0
 8009cc6:	f04f 0000 	mov.w	r0, #0
 8009cca:	f380 8814 	msr	CONTROL, r0
 8009cce:	b662      	cpsie	i
 8009cd0:	b661      	cpsie	f
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	f3bf 8f6f 	isb	sy
 8009cda:	df00      	svc	0
 8009cdc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cde:	0000      	.short	0x0000
 8009ce0:	e000ed08 	.word	0xe000ed08

08009ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cf4 <vPortEnableVFP+0x10>
 8009ce8:	6801      	ldr	r1, [r0, #0]
 8009cea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cee:	6001      	str	r1, [r0, #0]
 8009cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cf2:	0000      	.short	0x0000
 8009cf4:	e000ed88 	.word	0xe000ed88

08009cf8 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8009cf8:	2300      	movs	r3, #0
{
 8009cfa:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009cfc:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8009cfe:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <prvTaskExitError+0x3c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	3301      	adds	r3, #1
 8009d04:	d008      	beq.n	8009d18 <prvTaskExitError+0x20>
 8009d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	e7fe      	b.n	8009d16 <prvTaskExitError+0x1e>
 8009d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1c:	f383 8811 	msr	BASEPRI, r3
 8009d20:	f3bf 8f6f 	isb	sy
 8009d24:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8009d28:	9b01      	ldr	r3, [sp, #4]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d0fc      	beq.n	8009d28 <prvTaskExitError+0x30>
}
 8009d2e:	b002      	add	sp, #8
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	2400004c 	.word	0x2400004c

08009d38 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d3c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009d40:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009d44:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d46:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d48:	4b03      	ldr	r3, [pc, #12]	; (8009d58 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d4a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d4c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009d4e:	f06f 0302 	mvn.w	r3, #2
 8009d52:	6203      	str	r3, [r0, #32]
}
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	08009cf9 	.word	0x08009cf9
 8009d5c:	00000000 	.word	0x00000000

08009d60 <SVC_Handler>:
	__asm volatile (
 8009d60:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <pxCurrentTCBConst2>)
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	6808      	ldr	r0, [r1, #0]
 8009d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6a:	f380 8809 	msr	PSP, r0
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8811 	msr	BASEPRI, r0
 8009d7a:	4770      	bx	lr
 8009d7c:	f3af 8000 	nop.w

08009d80 <pxCurrentTCBConst2>:
 8009d80:	24006e2c 	.word	0x24006e2c

08009d84 <vPortEnterCritical>:
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009d94:	4a0a      	ldr	r2, [pc, #40]	; (8009dc0 <vPortEnterCritical+0x3c>)
 8009d96:	6813      	ldr	r3, [r2, #0]
 8009d98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8009d9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009d9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009d9e:	d10e      	bne.n	8009dbe <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009da0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009da4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	b143      	cbz	r3, 8009dbe <vPortEnterCritical+0x3a>
 8009dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db0:	f383 8811 	msr	BASEPRI, r3
 8009db4:	f3bf 8f6f 	isb	sy
 8009db8:	f3bf 8f4f 	dsb	sy
 8009dbc:	e7fe      	b.n	8009dbc <vPortEnterCritical+0x38>
}
 8009dbe:	4770      	bx	lr
 8009dc0:	2400004c 	.word	0x2400004c

08009dc4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009dc4:	4a08      	ldr	r2, [pc, #32]	; (8009de8 <vPortExitCritical+0x24>)
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	b943      	cbnz	r3, 8009ddc <vPortExitCritical+0x18>
 8009dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dce:	f383 8811 	msr	BASEPRI, r3
 8009dd2:	f3bf 8f6f 	isb	sy
 8009dd6:	f3bf 8f4f 	dsb	sy
 8009dda:	e7fe      	b.n	8009dda <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009de0:	b90b      	cbnz	r3, 8009de6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009de2:	f383 8811 	msr	BASEPRI, r3
}
 8009de6:	4770      	bx	lr
 8009de8:	2400004c 	.word	0x2400004c
 8009dec:	00000000 	.word	0x00000000

08009df0 <PendSV_Handler>:
	__asm volatile
 8009df0:	f3ef 8009 	mrs	r0, PSP
 8009df4:	f3bf 8f6f 	isb	sy
 8009df8:	4b15      	ldr	r3, [pc, #84]	; (8009e50 <pxCurrentTCBConst>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	f01e 0f10 	tst.w	lr, #16
 8009e00:	bf08      	it	eq
 8009e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e0a:	6010      	str	r0, [r2, #0]
 8009e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e14:	f380 8811 	msr	BASEPRI, r0
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f001 f97c 	bl	800b11c <vTaskSwitchContext>
 8009e24:	f04f 0000 	mov.w	r0, #0
 8009e28:	f380 8811 	msr	BASEPRI, r0
 8009e2c:	bc09      	pop	{r0, r3}
 8009e2e:	6819      	ldr	r1, [r3, #0]
 8009e30:	6808      	ldr	r0, [r1, #0]
 8009e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e36:	f01e 0f10 	tst.w	lr, #16
 8009e3a:	bf08      	it	eq
 8009e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e40:	f380 8809 	msr	PSP, r0
 8009e44:	f3bf 8f6f 	isb	sy
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	f3af 8000 	nop.w

08009e50 <pxCurrentTCBConst>:
 8009e50:	24006e2c 	.word	0x24006e2c

08009e54 <xPortSysTickHandler>:
{
 8009e54:	b508      	push	{r3, lr}
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5a:	f383 8811 	msr	BASEPRI, r3
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009e66:	f000 ffbb 	bl	800ade0 <xTaskIncrementTick>
 8009e6a:	b128      	cbz	r0, 8009e78 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f383 8811 	msr	BASEPRI, r3
}
 8009e7e:	bd08      	pop	{r3, pc}

08009e80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8009e84:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e86:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e8a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e8c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e8e:	4b04      	ldr	r3, [pc, #16]	; (8009ea0 <vPortSetupTimerInterrupt+0x20>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e96:	3b01      	subs	r3, #1
 8009e98:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e9a:	2307      	movs	r3, #7
 8009e9c:	6113      	str	r3, [r2, #16]
}
 8009e9e:	4770      	bx	lr
 8009ea0:	2400003c 	.word	0x2400003c

08009ea4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ea4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8009ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009eaa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8009eae:	4a3a      	ldr	r2, [pc, #232]	; (8009f98 <xPortStartScheduler+0xf4>)
 8009eb0:	4291      	cmp	r1, r2
 8009eb2:	d108      	bne.n	8009ec6 <xPortStartScheduler+0x22>
	__asm volatile
 8009eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb8:	f383 8811 	msr	BASEPRI, r3
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	e7fe      	b.n	8009ec4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ec6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8009eca:	4b34      	ldr	r3, [pc, #208]	; (8009f9c <xPortStartScheduler+0xf8>)
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d108      	bne.n	8009ee2 <xPortStartScheduler+0x3e>
 8009ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed4:	f383 8811 	msr	BASEPRI, r3
 8009ed8:	f3bf 8f6f 	isb	sy
 8009edc:	f3bf 8f4f 	dsb	sy
 8009ee0:	e7fe      	b.n	8009ee0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ee2:	4b2f      	ldr	r3, [pc, #188]	; (8009fa0 <xPortStartScheduler+0xfc>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ee4:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009ee6:	781a      	ldrb	r2, [r3, #0]
 8009ee8:	b2d2      	uxtb	r2, r2
 8009eea:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009eec:	22ff      	movs	r2, #255	; 0xff
 8009eee:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ef0:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ef2:	4a2c      	ldr	r2, [pc, #176]	; (8009fa4 <xPortStartScheduler+0x100>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009efa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009efe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f02:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f04:	2307      	movs	r3, #7
 8009f06:	4a28      	ldr	r2, [pc, #160]	; (8009fa8 <xPortStartScheduler+0x104>)
 8009f08:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f0a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009f0e:	1e5c      	subs	r4, r3, #1
 8009f10:	0600      	lsls	r0, r0, #24
 8009f12:	d40c      	bmi.n	8009f2e <xPortStartScheduler+0x8a>
 8009f14:	b111      	cbz	r1, 8009f1c <xPortStartScheduler+0x78>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	6013      	str	r3, [r2, #0]
 8009f1a:	d011      	beq.n	8009f40 <xPortStartScheduler+0x9c>
 8009f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f20:	f383 8811 	msr	BASEPRI, r3
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	e7fe      	b.n	8009f2c <xPortStartScheduler+0x88>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009f32:	2101      	movs	r1, #1
 8009f34:	005b      	lsls	r3, r3, #1
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	f88d 3003 	strb.w	r3, [sp, #3]
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	e7e4      	b.n	8009f0a <xPortStartScheduler+0x66>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f40:	f44f 7340 	mov.w	r3, #768	; 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f44:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	uxCriticalNesting = 0;
 8009f48:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f4a:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f4c:	9b01      	ldr	r3, [sp, #4]
 8009f4e:	4a14      	ldr	r2, [pc, #80]	; (8009fa0 <xPortStartScheduler+0xfc>)
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f54:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009f58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f5c:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8009f64:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f68:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8009f6c:	f7ff ff88 	bl	8009e80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009f70:	4b0e      	ldr	r3, [pc, #56]	; (8009fac <xPortStartScheduler+0x108>)
 8009f72:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8009f74:	f7ff feb6 	bl	8009ce4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f78:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8009f7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f80:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8009f84:	f7ff fe9a 	bl	8009cbc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009f88:	f001 f8c8 	bl	800b11c <vTaskSwitchContext>
}
 8009f8c:	4628      	mov	r0, r5
	prvTaskExitError();
 8009f8e:	f7ff feb3 	bl	8009cf8 <prvTaskExitError>
}
 8009f92:	b003      	add	sp, #12
 8009f94:	bd30      	pop	{r4, r5, pc}
 8009f96:	bf00      	nop
 8009f98:	410fc271 	.word	0x410fc271
 8009f9c:	410fc270 	.word	0x410fc270
 8009fa0:	e000e400 	.word	0xe000e400
 8009fa4:	24006de4 	.word	0x24006de4
 8009fa8:	24006de8 	.word	0x24006de8
 8009fac:	2400004c 	.word	0x2400004c

08009fb0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fb0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fb4:	2b0f      	cmp	r3, #15
 8009fb6:	d90e      	bls.n	8009fd6 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fb8:	4a11      	ldr	r2, [pc, #68]	; (800a000 <vPortValidateInterruptPriority+0x50>)
 8009fba:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fbc:	4a11      	ldr	r2, [pc, #68]	; (800a004 <vPortValidateInterruptPriority+0x54>)
 8009fbe:	7812      	ldrb	r2, [r2, #0]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d908      	bls.n	8009fd6 <vPortValidateInterruptPriority+0x26>
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	e7fe      	b.n	8009fd4 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009fd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8009fda:	4a0b      	ldr	r2, [pc, #44]	; (800a008 <vPortValidateInterruptPriority+0x58>)
 8009fdc:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8009fe0:	6812      	ldr	r2, [r2, #0]
 8009fe2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d908      	bls.n	8009ffc <vPortValidateInterruptPriority+0x4c>
 8009fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fee:	f383 8811 	msr	BASEPRI, r3
 8009ff2:	f3bf 8f6f 	isb	sy
 8009ff6:	f3bf 8f4f 	dsb	sy
 8009ffa:	e7fe      	b.n	8009ffa <vPortValidateInterruptPriority+0x4a>
	}
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	e000e3f0 	.word	0xe000e3f0
 800a004:	24006de4 	.word	0x24006de4
 800a008:	24006de8 	.word	0x24006de8

0800a00c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a00c:	b510      	push	{r4, lr}
 800a00e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a010:	f7ff feb8 	bl	8009d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a014:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a016:	f7ff fed5 	bl	8009dc4 <vPortExitCritical>

	return xReturn;
}
 800a01a:	fab4 f084 	clz	r0, r4
 800a01e:	0940      	lsrs	r0, r0, #5
 800a020:	bd10      	pop	{r4, pc}

0800a022 <prvCopyDataToQueue>:
{
 800a022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a024:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a026:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800a028:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a02a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a02c:	b952      	cbnz	r2, 800a044 <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a02e:	6807      	ldr	r7, [r0, #0]
 800a030:	bb47      	cbnz	r7, 800a084 <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a032:	6880      	ldr	r0, [r0, #8]
 800a034:	f001 f9d4 	bl	800b3e0 <xTaskPriorityDisinherit>
 800a038:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a03a:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a03c:	3601      	adds	r6, #1
}
 800a03e:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a040:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800a042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800a044:	b965      	cbnz	r5, 800a060 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a046:	6840      	ldr	r0, [r0, #4]
 800a048:	f013 fe56 	bl	801dcf8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a04c:	6863      	ldr	r3, [r4, #4]
 800a04e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a050:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a052:	68a2      	ldr	r2, [r4, #8]
 800a054:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a056:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a058:	d3f0      	bcc.n	800a03c <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	6063      	str	r3, [r4, #4]
 800a05e:	e7ed      	b.n	800a03c <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a060:	68c0      	ldr	r0, [r0, #12]
 800a062:	f013 fe49 	bl	801dcf8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a066:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a068:	68e3      	ldr	r3, [r4, #12]
 800a06a:	4251      	negs	r1, r2
 800a06c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a06e:	6822      	ldr	r2, [r4, #0]
 800a070:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a072:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a074:	bf3e      	ittt	cc
 800a076:	68a3      	ldrcc	r3, [r4, #8]
 800a078:	185b      	addcc	r3, r3, r1
 800a07a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a07c:	2d02      	cmp	r5, #2
 800a07e:	d101      	bne.n	800a084 <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a080:	b116      	cbz	r6, 800a088 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 800a082:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 800a084:	2500      	movs	r5, #0
 800a086:	e7d9      	b.n	800a03c <prvCopyDataToQueue+0x1a>
 800a088:	4635      	mov	r5, r6
 800a08a:	e7d7      	b.n	800a03c <prvCopyDataToQueue+0x1a>

0800a08c <prvCopyDataFromQueue>:
{
 800a08c:	4603      	mov	r3, r0
 800a08e:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800a092:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a094:	b162      	cbz	r2, 800a0b0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a096:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a098:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a09a:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a09c:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a09e:	60dc      	str	r4, [r3, #12]
}
 800a0a0:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a0a4:	bf24      	itt	cs
 800a0a6:	6819      	ldrcs	r1, [r3, #0]
 800a0a8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0aa:	68d9      	ldr	r1, [r3, #12]
 800a0ac:	f013 be24 	b.w	801dcf8 <memcpy>
}
 800a0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0b4:	4770      	bx	lr

0800a0b6 <prvUnlockQueue>:
{
 800a0b6:	b570      	push	{r4, r5, r6, lr}
 800a0b8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a0ba:	f7ff fe63 	bl	8009d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a0be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0c2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800a0c6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a0c8:	2d00      	cmp	r5, #0
 800a0ca:	dc14      	bgt.n	800a0f6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800a0cc:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0ce:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800a0d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a0d6:	f7ff fe75 	bl	8009dc4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a0da:	f7ff fe53 	bl	8009d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a0de:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800a0e2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0e4:	2d00      	cmp	r5, #0
 800a0e6:	dc12      	bgt.n	800a10e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800a0e8:	23ff      	movs	r3, #255	; 0xff
 800a0ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a0ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800a0f2:	f7ff be67 	b.w	8009dc4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d0e7      	beq.n	800a0cc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f001 f88d 	bl	800b21c <xTaskRemoveFromEventList>
 800a102:	b108      	cbz	r0, 800a108 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800a104:	f001 f916 	bl	800b334 <vTaskMissedYield>
			--cTxLock;
 800a108:	3d01      	subs	r5, #1
 800a10a:	b26d      	sxtb	r5, r5
 800a10c:	e7dc      	b.n	800a0c8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0e9      	beq.n	800a0e8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a114:	4630      	mov	r0, r6
 800a116:	f001 f881 	bl	800b21c <xTaskRemoveFromEventList>
 800a11a:	b108      	cbz	r0, 800a120 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800a11c:	f001 f90a 	bl	800b334 <vTaskMissedYield>
				--cRxLock;
 800a120:	3d01      	subs	r5, #1
 800a122:	b26d      	sxtb	r5, r5
 800a124:	e7de      	b.n	800a0e4 <prvUnlockQueue+0x2e>

0800a126 <xQueueGenericReset>:
{
 800a126:	b538      	push	{r3, r4, r5, lr}
 800a128:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800a12a:	4604      	mov	r4, r0
 800a12c:	b940      	cbnz	r0, 800a140 <xQueueGenericReset+0x1a>
 800a12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a132:	f383 8811 	msr	BASEPRI, r3
 800a136:	f3bf 8f6f 	isb	sy
 800a13a:	f3bf 8f4f 	dsb	sy
 800a13e:	e7fe      	b.n	800a13e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800a140:	f7ff fe20 	bl	8009d84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a14a:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a14c:	434b      	muls	r3, r1
 800a14e:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a150:	1a5b      	subs	r3, r3, r1
 800a152:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a154:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a156:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a158:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a15a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a15c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800a15e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a162:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800a166:	b9a5      	cbnz	r5, 800a192 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a168:	6923      	ldr	r3, [r4, #16]
 800a16a:	b173      	cbz	r3, 800a18a <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a16c:	f104 0010 	add.w	r0, r4, #16
 800a170:	f001 f854 	bl	800b21c <xTaskRemoveFromEventList>
 800a174:	b148      	cbz	r0, 800a18a <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800a176:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a17a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a182:	f3bf 8f4f 	dsb	sy
 800a186:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800a18a:	f7ff fe1b 	bl	8009dc4 <vPortExitCritical>
}
 800a18e:	2001      	movs	r0, #1
 800a190:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a192:	f104 0010 	add.w	r0, r4, #16
 800a196:	f7ff fd4f 	bl	8009c38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a19a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a19e:	f7ff fd4b 	bl	8009c38 <vListInitialise>
 800a1a2:	e7f2      	b.n	800a18a <xQueueGenericReset+0x64>

0800a1a4 <xQueueGenericCreateStatic>:
	{
 800a1a4:	b513      	push	{r0, r1, r4, lr}
 800a1a6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1a8:	b940      	cbnz	r0, 800a1bc <xQueueGenericCreateStatic+0x18>
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	e7fe      	b.n	800a1ba <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 800a1bc:	b943      	cbnz	r3, 800a1d0 <xQueueGenericCreateStatic+0x2c>
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	e7fe      	b.n	800a1ce <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1d0:	b14a      	cbz	r2, 800a1e6 <xQueueGenericCreateStatic+0x42>
 800a1d2:	b991      	cbnz	r1, 800a1fa <xQueueGenericCreateStatic+0x56>
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	e7fe      	b.n	800a1e4 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a1e6:	b141      	cbz	r1, 800a1fa <xQueueGenericCreateStatic+0x56>
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	e7fe      	b.n	800a1f8 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a1fa:	2350      	movs	r3, #80	; 0x50
 800a1fc:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	2b50      	cmp	r3, #80	; 0x50
 800a202:	d008      	beq.n	800a216 <xQueueGenericCreateStatic+0x72>
 800a204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	e7fe      	b.n	800a214 <xQueueGenericCreateStatic+0x70>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a216:	2900      	cmp	r1, #0
 800a218:	bf08      	it	eq
 800a21a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a21c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a21e:	2301      	movs	r3, #1
 800a220:	6022      	str	r2, [r4, #0]
 800a222:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800a226:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a22a:	4619      	mov	r1, r3
 800a22c:	4620      	mov	r0, r4
 800a22e:	f7ff ff7a 	bl	800a126 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a232:	f89d 3010 	ldrb.w	r3, [sp, #16]
	}
 800a236:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800a238:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800a23c:	b002      	add	sp, #8
 800a23e:	bd10      	pop	{r4, pc}

0800a240 <xQueueGenericCreate>:
	{
 800a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a242:	460d      	mov	r5, r1
 800a244:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a246:	4606      	mov	r6, r0
 800a248:	b940      	cbnz	r0, 800a25c <xQueueGenericCreate+0x1c>
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	e7fe      	b.n	800a25a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a25c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a25e:	3050      	adds	r0, #80	; 0x50
 800a260:	f7ff fc14 	bl	8009a8c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a264:	4604      	mov	r4, r0
 800a266:	b170      	cbz	r0, 800a286 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a268:	2300      	movs	r3, #0
 800a26a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a26e:	b165      	cbz	r5, 800a28a <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a270:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a274:	2101      	movs	r1, #1
 800a276:	4620      	mov	r0, r4
 800a278:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800a27a:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a27e:	f7ff ff52 	bl	800a126 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a282:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 800a286:	4620      	mov	r0, r4
 800a288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a28a:	4603      	mov	r3, r0
 800a28c:	e7f2      	b.n	800a274 <xQueueGenericCreate+0x34>

0800a28e <xQueueCreateCountingSemaphoreStatic>:
	{
 800a28e:	b513      	push	{r0, r1, r4, lr}
 800a290:	4613      	mov	r3, r2
 800a292:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800a294:	b940      	cbnz	r0, 800a2a8 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	e7fe      	b.n	800a2a6 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2a8:	4288      	cmp	r0, r1
 800a2aa:	d208      	bcs.n	800a2be <xQueueCreateCountingSemaphoreStatic+0x30>
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	e7fe      	b.n	800a2bc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2be:	2202      	movs	r2, #2
 800a2c0:	9200      	str	r2, [sp, #0]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	f7ff ff6d 	bl	800a1a4 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800a2ca:	b100      	cbz	r0, 800a2ce <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2cc:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a2ce:	b002      	add	sp, #8
 800a2d0:	bd10      	pop	{r4, pc}

0800a2d2 <xQueueCreateCountingSemaphore>:
	{
 800a2d2:	b510      	push	{r4, lr}
 800a2d4:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800a2d6:	b940      	cbnz	r0, 800a2ea <xQueueCreateCountingSemaphore+0x18>
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	e7fe      	b.n	800a2e8 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a2ea:	4288      	cmp	r0, r1
 800a2ec:	d208      	bcs.n	800a300 <xQueueCreateCountingSemaphore+0x2e>
 800a2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f2:	f383 8811 	msr	BASEPRI, r3
 800a2f6:	f3bf 8f6f 	isb	sy
 800a2fa:	f3bf 8f4f 	dsb	sy
 800a2fe:	e7fe      	b.n	800a2fe <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a300:	2202      	movs	r2, #2
 800a302:	2100      	movs	r1, #0
 800a304:	f7ff ff9c 	bl	800a240 <xQueueGenericCreate>
		if( xHandle != NULL )
 800a308:	b100      	cbz	r0, 800a30c <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a30a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a30c:	bd10      	pop	{r4, pc}

0800a30e <xQueueGenericSend>:
{
 800a30e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a312:	b085      	sub	sp, #20
 800a314:	4688      	mov	r8, r1
 800a316:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800a318:	4604      	mov	r4, r0
{
 800a31a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a31c:	b940      	cbnz	r0, 800a330 <xQueueGenericSend+0x22>
 800a31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a322:	f383 8811 	msr	BASEPRI, r3
 800a326:	f3bf 8f6f 	isb	sy
 800a32a:	f3bf 8f4f 	dsb	sy
 800a32e:	e7fe      	b.n	800a32e <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a330:	b951      	cbnz	r1, 800a348 <xQueueGenericSend+0x3a>
 800a332:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a334:	b143      	cbz	r3, 800a348 <xQueueGenericSend+0x3a>
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	f383 8811 	msr	BASEPRI, r3
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	e7fe      	b.n	800a346 <xQueueGenericSend+0x38>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a348:	2f02      	cmp	r7, #2
 800a34a:	d10b      	bne.n	800a364 <xQueueGenericSend+0x56>
 800a34c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d008      	beq.n	800a364 <xQueueGenericSend+0x56>
 800a352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	e7fe      	b.n	800a362 <xQueueGenericSend+0x54>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a364:	f000 ffec 	bl	800b340 <xTaskGetSchedulerState>
 800a368:	4606      	mov	r6, r0
 800a36a:	b950      	cbnz	r0, 800a382 <xQueueGenericSend+0x74>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	b14b      	cbz	r3, 800a384 <xQueueGenericSend+0x76>
 800a370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a374:	f383 8811 	msr	BASEPRI, r3
 800a378:	f3bf 8f6f 	isb	sy
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	e7fe      	b.n	800a380 <xQueueGenericSend+0x72>
 800a382:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a384:	f04f 0900 	mov.w	r9, #0
 800a388:	e037      	b.n	800a3fa <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a38a:	9d01      	ldr	r5, [sp, #4]
 800a38c:	b91d      	cbnz	r5, 800a396 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 800a38e:	f7ff fd19 	bl	8009dc4 <vPortExitCritical>
			return errQUEUE_FULL;
 800a392:	2000      	movs	r0, #0
 800a394:	e052      	b.n	800a43c <xQueueGenericSend+0x12e>
				else if( xEntryTimeSet == pdFALSE )
 800a396:	b916      	cbnz	r6, 800a39e <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a398:	a802      	add	r0, sp, #8
 800a39a:	f000 ff83 	bl	800b2a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a39e:	f7ff fd11 	bl	8009dc4 <vPortExitCritical>
		vTaskSuspendAll();
 800a3a2:	f000 fd0f 	bl	800adc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3a6:	f7ff fced 	bl	8009d84 <vPortEnterCritical>
 800a3aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a3ae:	2bff      	cmp	r3, #255	; 0xff
 800a3b0:	d101      	bne.n	800a3b6 <xQueueGenericSend+0xa8>
 800a3b2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800a3b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a3ba:	2bff      	cmp	r3, #255	; 0xff
 800a3bc:	d101      	bne.n	800a3c2 <xQueueGenericSend+0xb4>
 800a3be:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800a3c2:	f7ff fcff 	bl	8009dc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3c6:	a901      	add	r1, sp, #4
 800a3c8:	a802      	add	r0, sp, #8
 800a3ca:	f000 ff77 	bl	800b2bc <xTaskCheckForTimeOut>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d14a      	bne.n	800a468 <xQueueGenericSend+0x15a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3d2:	f7ff fcd7 	bl	8009d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a3d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d131      	bne.n	800a442 <xQueueGenericSend+0x134>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800a3de:	f7ff fcf1 	bl	8009dc4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a3e2:	9901      	ldr	r1, [sp, #4]
 800a3e4:	f104 0010 	add.w	r0, r4, #16
 800a3e8:	f000 fee0 	bl	800b1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f7ff fe62 	bl	800a0b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3f2:	f000 fd8b 	bl	800af0c <xTaskResumeAll>
 800a3f6:	b360      	cbz	r0, 800a452 <xQueueGenericSend+0x144>
 800a3f8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a3fa:	f7ff fcc3 	bl	8009d84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a400:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a402:	429a      	cmp	r2, r3
 800a404:	d301      	bcc.n	800a40a <xQueueGenericSend+0xfc>
 800a406:	2f02      	cmp	r7, #2
 800a408:	d1bf      	bne.n	800a38a <xQueueGenericSend+0x7c>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a40a:	463a      	mov	r2, r7
 800a40c:	4641      	mov	r1, r8
 800a40e:	4620      	mov	r0, r4
 800a410:	f7ff fe07 	bl	800a022 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a416:	b11b      	cbz	r3, 800a420 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a418:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a41c:	f000 fefe 	bl	800b21c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800a420:	b148      	cbz	r0, 800a436 <xQueueGenericSend+0x128>
						queueYIELD_IF_USING_PREEMPTION();
 800a422:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a42a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a42e:	f3bf 8f4f 	dsb	sy
 800a432:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a436:	f7ff fcc5 	bl	8009dc4 <vPortExitCritical>
				return pdPASS;
 800a43a:	2001      	movs	r0, #1
}
 800a43c:	b005      	add	sp, #20
 800a43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 800a442:	f7ff fcbf 	bl	8009dc4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff fe35 	bl	800a0b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a44c:	f000 fd5e 	bl	800af0c <xTaskResumeAll>
 800a450:	e7d2      	b.n	800a3f8 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800a452:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a45a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a45e:	f3bf 8f4f 	dsb	sy
 800a462:	f3bf 8f6f 	isb	sy
 800a466:	e7c7      	b.n	800a3f8 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800a468:	4620      	mov	r0, r4
 800a46a:	f7ff fe24 	bl	800a0b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a46e:	f000 fd4d 	bl	800af0c <xTaskResumeAll>
 800a472:	e78e      	b.n	800a392 <xQueueGenericSend+0x84>

0800a474 <xQueueGenericSendFromISR>:
{
 800a474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a478:	4689      	mov	r9, r1
 800a47a:	4690      	mov	r8, r2
 800a47c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800a47e:	4604      	mov	r4, r0
 800a480:	b940      	cbnz	r0, 800a494 <xQueueGenericSendFromISR+0x20>
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	e7fe      	b.n	800a492 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a494:	b951      	cbnz	r1, 800a4ac <xQueueGenericSendFromISR+0x38>
 800a496:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a498:	b143      	cbz	r3, 800a4ac <xQueueGenericSendFromISR+0x38>
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	e7fe      	b.n	800a4aa <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4ac:	2f02      	cmp	r7, #2
 800a4ae:	d10b      	bne.n	800a4c8 <xQueueGenericSendFromISR+0x54>
 800a4b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d008      	beq.n	800a4c8 <xQueueGenericSendFromISR+0x54>
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	e7fe      	b.n	800a4c6 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4c8:	f7ff fd72 	bl	8009fb0 <vPortValidateInterruptPriority>
	__asm volatile
 800a4cc:	f3ef 8611 	mrs	r6, BASEPRI
 800a4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d4:	f383 8811 	msr	BASEPRI, r3
 800a4d8:	f3bf 8f6f 	isb	sy
 800a4dc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a4e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d301      	bcc.n	800a4ec <xQueueGenericSendFromISR+0x78>
 800a4e8:	2f02      	cmp	r7, #2
 800a4ea:	d123      	bne.n	800a534 <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4ec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4f0:	463a      	mov	r2, r7
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800a4f6:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4fa:	f7ff fd92 	bl	800a022 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a4fe:	1c6b      	adds	r3, r5, #1
 800a500:	d113      	bne.n	800a52a <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a504:	b90b      	cbnz	r3, 800a50a <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 800a506:	2001      	movs	r0, #1
 800a508:	e00b      	b.n	800a522 <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a50a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a50e:	f000 fe85 	bl	800b21c <xTaskRemoveFromEventList>
 800a512:	2800      	cmp	r0, #0
 800a514:	d0f7      	beq.n	800a506 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 800a516:	f1b8 0f00 	cmp.w	r8, #0
 800a51a:	d0f4      	beq.n	800a506 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a51c:	2001      	movs	r0, #1
 800a51e:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a522:	f386 8811 	msr	BASEPRI, r6
}
 800a526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a52a:	3501      	adds	r5, #1
 800a52c:	b26d      	sxtb	r5, r5
 800a52e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a532:	e7e8      	b.n	800a506 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 800a534:	2000      	movs	r0, #0
 800a536:	e7f4      	b.n	800a522 <xQueueGenericSendFromISR+0xae>

0800a538 <xQueueGiveFromISR>:
{
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800a53c:	4604      	mov	r4, r0
 800a53e:	b940      	cbnz	r0, 800a552 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	e7fe      	b.n	800a550 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a552:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a554:	b143      	cbz	r3, 800a568 <xQueueGiveFromISR+0x30>
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	e7fe      	b.n	800a566 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a568:	6803      	ldr	r3, [r0, #0]
 800a56a:	b953      	cbnz	r3, 800a582 <xQueueGiveFromISR+0x4a>
 800a56c:	6883      	ldr	r3, [r0, #8]
 800a56e:	b143      	cbz	r3, 800a582 <xQueueGiveFromISR+0x4a>
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	e7fe      	b.n	800a580 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a582:	f7ff fd15 	bl	8009fb0 <vPortValidateInterruptPriority>
	__asm volatile
 800a586:	f3ef 8611 	mrs	r6, BASEPRI
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a59a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a59c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d91c      	bls.n	800a5dc <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5a6:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800a5a8:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5aa:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a5ac:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a5ae:	d110      	bne.n	800a5d2 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5b2:	b90b      	cbnz	r3, 800a5b8 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	e009      	b.n	800a5cc <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a5bc:	f000 fe2e 	bl	800b21c <xTaskRemoveFromEventList>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d0f7      	beq.n	800a5b4 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800a5c4:	2d00      	cmp	r5, #0
 800a5c6:	d0f5      	beq.n	800a5b4 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	6028      	str	r0, [r5, #0]
	__asm volatile
 800a5cc:	f386 8811 	msr	BASEPRI, r6
}
 800a5d0:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	b25b      	sxtb	r3, r3
 800a5d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5da:	e7eb      	b.n	800a5b4 <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800a5dc:	2000      	movs	r0, #0
 800a5de:	e7f5      	b.n	800a5cc <xQueueGiveFromISR+0x94>

0800a5e0 <xQueueReceive>:
{
 800a5e0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800a5e4:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 800a5e6:	4604      	mov	r4, r0
{
 800a5e8:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a5ea:	b940      	cbnz	r0, 800a5fe <xQueueReceive+0x1e>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	e7fe      	b.n	800a5fc <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5fe:	b951      	cbnz	r1, 800a616 <xQueueReceive+0x36>
 800a600:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a602:	b143      	cbz	r3, 800a616 <xQueueReceive+0x36>
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	e7fe      	b.n	800a614 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a616:	f000 fe93 	bl	800b340 <xTaskGetSchedulerState>
 800a61a:	4606      	mov	r6, r0
 800a61c:	b950      	cbnz	r0, 800a634 <xQueueReceive+0x54>
 800a61e:	9b01      	ldr	r3, [sp, #4]
 800a620:	b14b      	cbz	r3, 800a636 <xQueueReceive+0x56>
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	e7fe      	b.n	800a632 <xQueueReceive+0x52>
 800a634:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800a636:	f04f 0800 	mov.w	r8, #0
 800a63a:	e03d      	b.n	800a6b8 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a63c:	9d01      	ldr	r5, [sp, #4]
 800a63e:	b91d      	cbnz	r5, 800a648 <xQueueReceive+0x68>
					taskEXIT_CRITICAL();
 800a640:	f7ff fbc0 	bl	8009dc4 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800a644:	2000      	movs	r0, #0
 800a646:	e056      	b.n	800a6f6 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 800a648:	b916      	cbnz	r6, 800a650 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a64a:	a802      	add	r0, sp, #8
 800a64c:	f000 fe2a 	bl	800b2a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a650:	f7ff fbb8 	bl	8009dc4 <vPortExitCritical>
		vTaskSuspendAll();
 800a654:	f000 fbb6 	bl	800adc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a658:	f7ff fb94 	bl	8009d84 <vPortEnterCritical>
 800a65c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a660:	2bff      	cmp	r3, #255	; 0xff
 800a662:	d101      	bne.n	800a668 <xQueueReceive+0x88>
 800a664:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800a668:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a66c:	2bff      	cmp	r3, #255	; 0xff
 800a66e:	d101      	bne.n	800a674 <xQueueReceive+0x94>
 800a670:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 800a674:	f7ff fba6 	bl	8009dc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a678:	a901      	add	r1, sp, #4
 800a67a:	a802      	add	r0, sp, #8
 800a67c:	f000 fe1e 	bl	800b2bc <xTaskCheckForTimeOut>
 800a680:	2800      	cmp	r0, #0
 800a682:	d141      	bne.n	800a708 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a684:	4620      	mov	r0, r4
 800a686:	f7ff fcc1 	bl	800a00c <prvIsQueueEmpty>
 800a68a:	b3b8      	cbz	r0, 800a6fc <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a68c:	9901      	ldr	r1, [sp, #4]
 800a68e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a692:	f000 fd8b 	bl	800b1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a696:	4620      	mov	r0, r4
 800a698:	f7ff fd0d 	bl	800a0b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a69c:	f000 fc36 	bl	800af0c <xTaskResumeAll>
 800a6a0:	b948      	cbnz	r0, 800a6b6 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 800a6a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a6b8:	f7ff fb64 	bl	8009d84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6be:	2d00      	cmp	r5, #0
 800a6c0:	d0bc      	beq.n	800a63c <xQueueReceive+0x5c>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6c2:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f7ff fce0 	bl	800a08c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6cc:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ce:	6923      	ldr	r3, [r4, #16]
 800a6d0:	b173      	cbz	r3, 800a6f0 <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6d2:	f104 0010 	add.w	r0, r4, #16
 800a6d6:	f000 fda1 	bl	800b21c <xTaskRemoveFromEventList>
 800a6da:	b148      	cbz	r0, 800a6f0 <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 800a6dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a6e8:	f3bf 8f4f 	dsb	sy
 800a6ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a6f0:	f7ff fb68 	bl	8009dc4 <vPortExitCritical>
				return pdPASS;
 800a6f4:	2001      	movs	r0, #1
}
 800a6f6:	b004      	add	sp, #16
 800a6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	f7ff fcda 	bl	800a0b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a702:	f000 fc03 	bl	800af0c <xTaskResumeAll>
 800a706:	e7d6      	b.n	800a6b6 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800a708:	4620      	mov	r0, r4
 800a70a:	f7ff fcd4 	bl	800a0b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a70e:	f000 fbfd 	bl	800af0c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a712:	4620      	mov	r0, r4
 800a714:	f7ff fc7a 	bl	800a00c <prvIsQueueEmpty>
 800a718:	2800      	cmp	r0, #0
 800a71a:	d0cc      	beq.n	800a6b6 <xQueueReceive+0xd6>
 800a71c:	e792      	b.n	800a644 <xQueueReceive+0x64>

0800a71e <xQueueSemaphoreTake>:
{
 800a71e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a720:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800a722:	4604      	mov	r4, r0
{
 800a724:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a726:	b940      	cbnz	r0, 800a73a <xQueueSemaphoreTake+0x1c>
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	e7fe      	b.n	800a738 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800a73a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800a73c:	b145      	cbz	r5, 800a750 <xQueueSemaphoreTake+0x32>
 800a73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	e7fe      	b.n	800a74e <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a750:	f000 fdf6 	bl	800b340 <xTaskGetSchedulerState>
 800a754:	4606      	mov	r6, r0
 800a756:	b950      	cbnz	r0, 800a76e <xQueueSemaphoreTake+0x50>
 800a758:	9b01      	ldr	r3, [sp, #4]
 800a75a:	b15b      	cbz	r3, 800a774 <xQueueSemaphoreTake+0x56>
 800a75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a760:	f383 8811 	msr	BASEPRI, r3
 800a764:	f3bf 8f6f 	isb	sy
 800a768:	f3bf 8f4f 	dsb	sy
 800a76c:	e7fe      	b.n	800a76c <xQueueSemaphoreTake+0x4e>
 800a76e:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800a770:	2700      	movs	r7, #0
 800a772:	e053      	b.n	800a81c <xQueueSemaphoreTake+0xfe>
 800a774:	4605      	mov	r5, r0
 800a776:	e7fb      	b.n	800a770 <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a778:	9b01      	ldr	r3, [sp, #4]
 800a77a:	b963      	cbnz	r3, 800a796 <xQueueSemaphoreTake+0x78>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a77c:	b145      	cbz	r5, 800a790 <xQueueSemaphoreTake+0x72>
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	e7fe      	b.n	800a78e <xQueueSemaphoreTake+0x70>
					taskEXIT_CRITICAL();
 800a790:	f7ff fb18 	bl	8009dc4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a794:	e062      	b.n	800a85c <xQueueSemaphoreTake+0x13e>
				else if( xEntryTimeSet == pdFALSE )
 800a796:	b916      	cbnz	r6, 800a79e <xQueueSemaphoreTake+0x80>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a798:	a802      	add	r0, sp, #8
 800a79a:	f000 fd83 	bl	800b2a4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800a79e:	f7ff fb11 	bl	8009dc4 <vPortExitCritical>
		vTaskSuspendAll();
 800a7a2:	f000 fb0f 	bl	800adc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7a6:	f7ff faed 	bl	8009d84 <vPortEnterCritical>
 800a7aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a7ae:	2bff      	cmp	r3, #255	; 0xff
 800a7b0:	d101      	bne.n	800a7b6 <xQueueSemaphoreTake+0x98>
 800a7b2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 800a7b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a7ba:	2bff      	cmp	r3, #255	; 0xff
 800a7bc:	d101      	bne.n	800a7c2 <xQueueSemaphoreTake+0xa4>
 800a7be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a7c2:	f7ff faff 	bl	8009dc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7c6:	a901      	add	r1, sp, #4
 800a7c8:	a802      	add	r0, sp, #8
 800a7ca:	f000 fd77 	bl	800b2bc <xTaskCheckForTimeOut>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d14d      	bne.n	800a86e <xQueueSemaphoreTake+0x150>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7d2:	4620      	mov	r0, r4
 800a7d4:	f7ff fc1a 	bl	800a00c <prvIsQueueEmpty>
 800a7d8:	2800      	cmp	r0, #0
 800a7da:	d042      	beq.n	800a862 <xQueueSemaphoreTake+0x144>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7dc:	6823      	ldr	r3, [r4, #0]
 800a7de:	b93b      	cbnz	r3, 800a7f0 <xQueueSemaphoreTake+0xd2>
						taskENTER_CRITICAL();
 800a7e0:	f7ff fad0 	bl	8009d84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a7e4:	68a0      	ldr	r0, [r4, #8]
 800a7e6:	f000 fdbb 	bl	800b360 <xTaskPriorityInherit>
 800a7ea:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800a7ec:	f7ff faea 	bl	8009dc4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7f0:	9901      	ldr	r1, [sp, #4]
 800a7f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a7f6:	f000 fcd9 	bl	800b1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	f7ff fc5b 	bl	800a0b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a800:	f000 fb84 	bl	800af0c <xTaskResumeAll>
 800a804:	b948      	cbnz	r0, 800a81a <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 800a806:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a80e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800a81c:	f7ff fab2 	bl	8009d84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a820:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a822:	2b00      	cmp	r3, #0
 800a824:	d0a8      	beq.n	800a778 <xQueueSemaphoreTake+0x5a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a826:	3b01      	subs	r3, #1
 800a828:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	b913      	cbnz	r3, 800a834 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a82e:	f000 fe6d 	bl	800b50c <pvTaskIncrementMutexHeldCount>
 800a832:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a834:	6923      	ldr	r3, [r4, #16]
 800a836:	b173      	cbz	r3, 800a856 <xQueueSemaphoreTake+0x138>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a838:	f104 0010 	add.w	r0, r4, #16
 800a83c:	f000 fcee 	bl	800b21c <xTaskRemoveFromEventList>
 800a840:	b148      	cbz	r0, 800a856 <xQueueSemaphoreTake+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800a842:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800a846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800a84e:	f3bf 8f4f 	dsb	sy
 800a852:	f3bf 8f6f 	isb	sy
				return pdPASS;
 800a856:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 800a858:	f7ff fab4 	bl	8009dc4 <vPortExitCritical>
}
 800a85c:	4628      	mov	r0, r5
 800a85e:	b005      	add	sp, #20
 800a860:	bdf0      	pop	{r4, r5, r6, r7, pc}
				prvUnlockQueue( pxQueue );
 800a862:	4620      	mov	r0, r4
 800a864:	f7ff fc27 	bl	800a0b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a868:	f000 fb50 	bl	800af0c <xTaskResumeAll>
 800a86c:	e7d5      	b.n	800a81a <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800a86e:	4620      	mov	r0, r4
 800a870:	f7ff fc21 	bl	800a0b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a874:	f000 fb4a 	bl	800af0c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a878:	4620      	mov	r0, r4
 800a87a:	f7ff fbc7 	bl	800a00c <prvIsQueueEmpty>
 800a87e:	2800      	cmp	r0, #0
 800a880:	d0cb      	beq.n	800a81a <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800a882:	2d00      	cmp	r5, #0
 800a884:	d0ea      	beq.n	800a85c <xQueueSemaphoreTake+0x13e>
						taskENTER_CRITICAL();
 800a886:	f7ff fa7d 	bl	8009d84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a88a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a88c:	b119      	cbz	r1, 800a896 <xQueueSemaphoreTake+0x178>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a88e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a890:	6819      	ldr	r1, [r3, #0]
 800a892:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a896:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 800a898:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a89a:	f000 fde5 	bl	800b468 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800a89e:	f7ff fa91 	bl	8009dc4 <vPortExitCritical>
 800a8a2:	e7db      	b.n	800a85c <xQueueSemaphoreTake+0x13e>

0800a8a4 <xQueueReceiveFromISR>:
{
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	4689      	mov	r9, r1
 800a8aa:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	b940      	cbnz	r0, 800a8c2 <xQueueReceiveFromISR+0x1e>
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	e7fe      	b.n	800a8c0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8c2:	b951      	cbnz	r1, 800a8da <xQueueReceiveFromISR+0x36>
 800a8c4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a8c6:	b143      	cbz	r3, 800a8da <xQueueReceiveFromISR+0x36>
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	e7fe      	b.n	800a8d8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8da:	f7ff fb69 	bl	8009fb0 <vPortValidateInterruptPriority>
	__asm volatile
 800a8de:	f3ef 8711 	mrs	r7, BASEPRI
 800a8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e6:	f383 8811 	msr	BASEPRI, r3
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8f2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8f4:	b31c      	cbz	r4, 800a93e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 800a8f6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8fe:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800a900:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a902:	f7ff fbc3 	bl	800a08c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a906:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800a908:	1c73      	adds	r3, r6, #1
 800a90a:	d113      	bne.n	800a934 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a90c:	692b      	ldr	r3, [r5, #16]
 800a90e:	b90b      	cbnz	r3, 800a914 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 800a910:	2001      	movs	r0, #1
 800a912:	e00b      	b.n	800a92c <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a914:	f105 0010 	add.w	r0, r5, #16
 800a918:	f000 fc80 	bl	800b21c <xTaskRemoveFromEventList>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d0f7      	beq.n	800a910 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 800a920:	f1b8 0f00 	cmp.w	r8, #0
 800a924:	d0f4      	beq.n	800a910 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a926:	2001      	movs	r0, #1
 800a928:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 800a92c:	f387 8811 	msr	BASEPRI, r7
}
 800a930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a934:	3601      	adds	r6, #1
 800a936:	b276      	sxtb	r6, r6
 800a938:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 800a93c:	e7e8      	b.n	800a910 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 800a93e:	4620      	mov	r0, r4
 800a940:	e7f4      	b.n	800a92c <xQueueReceiveFromISR+0x88>
	...

0800a944 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a944:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a946:	4a07      	ldr	r2, [pc, #28]	; (800a964 <vQueueAddToRegistry+0x20>)
	{
 800a948:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a94a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 800a94e:	b92c      	cbnz	r4, 800a95c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a950:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a954:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a958:	6058      	str	r0, [r3, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a95a:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a95c:	3301      	adds	r3, #1
 800a95e:	2b08      	cmp	r3, #8
 800a960:	d1f3      	bne.n	800a94a <vQueueAddToRegistry+0x6>
 800a962:	e7fa      	b.n	800a95a <vQueueAddToRegistry+0x16>
 800a964:	24006dec 	.word	0x24006dec

0800a968 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a968:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a96a:	4a08      	ldr	r2, [pc, #32]	; (800a98c <vQueueUnregisterQueue+0x24>)
	{
 800a96c:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a96e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a972:	684c      	ldr	r4, [r1, #4]
 800a974:	4284      	cmp	r4, r0
 800a976:	d104      	bne.n	800a982 <vQueueUnregisterQueue+0x1a>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a978:	2000      	movs	r0, #0
 800a97a:	f842 0033 	str.w	r0, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a97e:	6048      	str	r0, [r1, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a980:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a982:	3301      	adds	r3, #1
 800a984:	2b08      	cmp	r3, #8
 800a986:	d1f2      	bne.n	800a96e <vQueueUnregisterQueue+0x6>
 800a988:	e7fa      	b.n	800a980 <vQueueUnregisterQueue+0x18>
 800a98a:	bf00      	nop
 800a98c:	24006dec 	.word	0x24006dec

0800a990 <vQueueDelete>:
{
 800a990:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800a992:	4604      	mov	r4, r0
 800a994:	b940      	cbnz	r0, 800a9a8 <vQueueDelete+0x18>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	e7fe      	b.n	800a9a6 <vQueueDelete+0x16>
		vQueueUnregisterQueue( pxQueue );
 800a9a8:	f7ff ffde 	bl	800a968 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a9ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a9b0:	b923      	cbnz	r3, 800a9bc <vQueueDelete+0x2c>
			vPortFree( pxQueue );
 800a9b2:	4620      	mov	r0, r4
}
 800a9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800a9b8:	f7ff b900 	b.w	8009bbc <vPortFree>
}
 800a9bc:	bd10      	pop	{r4, pc}

0800a9be <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9be:	b570      	push	{r4, r5, r6, lr}
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a9c6:	f7ff f9dd 	bl	8009d84 <vPortEnterCritical>
 800a9ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a9ce:	2bff      	cmp	r3, #255	; 0xff
 800a9d0:	d102      	bne.n	800a9d8 <vQueueWaitForMessageRestricted+0x1a>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a9d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a9dc:	2bff      	cmp	r3, #255	; 0xff
 800a9de:	d102      	bne.n	800a9e6 <vQueueWaitForMessageRestricted+0x28>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9e6:	f7ff f9ed 	bl	8009dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a9ec:	b92b      	cbnz	r3, 800a9fa <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9ee:	4632      	mov	r2, r6
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a9f6:	f000 fbf3 	bl	800b1e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9fa:	4620      	mov	r0, r4
	}
 800a9fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800aa00:	f7ff bb59 	b.w	800a0b6 <prvUnlockQueue>

0800aa04 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa08:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800aa0a:	f7ff f9bb 	bl	8009d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800aa0e:	4b2f      	ldr	r3, [pc, #188]	; (800aacc <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800aa10:	4e2f      	ldr	r6, [pc, #188]	; (800aad0 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	4f2f      	ldr	r7, [pc, #188]	; (800aad4 <prvAddNewTaskToReadyList+0xd0>)
 800aa16:	3201      	adds	r2, #1
 800aa18:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800aa1a:	6835      	ldr	r5, [r6, #0]
 800aa1c:	2d00      	cmp	r5, #0
 800aa1e:	d14a      	bne.n	800aab6 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800aa20:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d11f      	bne.n	800aa68 <prvAddNewTaskToReadyList+0x64>
 800aa28:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa2a:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa2c:	4640      	mov	r0, r8
 800aa2e:	f7ff f903 	bl	8009c38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa32:	f108 0814 	add.w	r8, r8, #20
 800aa36:	2d38      	cmp	r5, #56	; 0x38
 800aa38:	d1f7      	bne.n	800aa2a <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa3a:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800aafc <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800aa3e:	4d26      	ldr	r5, [pc, #152]	; (800aad8 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800aa40:	4640      	mov	r0, r8
 800aa42:	f7ff f8f9 	bl	8009c38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7ff f8f6 	bl	8009c38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa4c:	4823      	ldr	r0, [pc, #140]	; (800aadc <prvAddNewTaskToReadyList+0xd8>)
 800aa4e:	f7ff f8f3 	bl	8009c38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa52:	4823      	ldr	r0, [pc, #140]	; (800aae0 <prvAddNewTaskToReadyList+0xdc>)
 800aa54:	f7ff f8f0 	bl	8009c38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa58:	4822      	ldr	r0, [pc, #136]	; (800aae4 <prvAddNewTaskToReadyList+0xe0>)
 800aa5a:	f7ff f8ed 	bl	8009c38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa5e:	4b22      	ldr	r3, [pc, #136]	; (800aae8 <prvAddNewTaskToReadyList+0xe4>)
 800aa60:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa64:	4b21      	ldr	r3, [pc, #132]	; (800aaec <prvAddNewTaskToReadyList+0xe8>)
 800aa66:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800aa68:	4a21      	ldr	r2, [pc, #132]	; (800aaf0 <prvAddNewTaskToReadyList+0xec>)
 800aa6a:	6813      	ldr	r3, [r2, #0]
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800aa70:	4a20      	ldr	r2, [pc, #128]	; (800aaf4 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aa72:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800aa74:	6811      	ldr	r1, [r2, #0]
 800aa76:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa78:	428b      	cmp	r3, r1
 800aa7a:	d900      	bls.n	800aa7e <prvAddNewTaskToReadyList+0x7a>
 800aa7c:	6013      	str	r3, [r2, #0]
 800aa7e:	2014      	movs	r0, #20
 800aa80:	1d21      	adds	r1, r4, #4
 800aa82:	fb00 7003 	mla	r0, r0, r3, r7
 800aa86:	f7ff f8e5 	bl	8009c54 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800aa8a:	f7ff f99b 	bl	8009dc4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800aa8e:	4b1a      	ldr	r3, [pc, #104]	; (800aaf8 <prvAddNewTaskToReadyList+0xf4>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	b173      	cbz	r3, 800aab2 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aa94:	6833      	ldr	r3, [r6, #0]
 800aa96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aa9a:	429a      	cmp	r2, r3
 800aa9c:	d209      	bcs.n	800aab2 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800aa9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800aaa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800aaaa:	f3bf 8f4f 	dsb	sy
 800aaae:	f3bf 8f6f 	isb	sy
}
 800aab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800aab6:	4b10      	ldr	r3, [pc, #64]	; (800aaf8 <prvAddNewTaskToReadyList+0xf4>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1d4      	bne.n	800aa68 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aabe:	6833      	ldr	r3, [r6, #0]
 800aac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aac2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aac4:	429a      	cmp	r2, r3
 800aac6:	d8cf      	bhi.n	800aa68 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800aac8:	6034      	str	r4, [r6, #0]
 800aaca:	e7cd      	b.n	800aa68 <prvAddNewTaskToReadyList+0x64>
 800aacc:	24007298 	.word	0x24007298
 800aad0:	24006e2c 	.word	0x24006e2c
 800aad4:	24006e38 	.word	0x24006e38
 800aad8:	240072c0 	.word	0x240072c0
 800aadc:	240072e0 	.word	0x240072e0
 800aae0:	2400730c 	.word	0x2400730c
 800aae4:	240072f8 	.word	0x240072f8
 800aae8:	24006e30 	.word	0x24006e30
 800aaec:	24006e34 	.word	0x24006e34
 800aaf0:	240072a4 	.word	0x240072a4
 800aaf4:	240072a8 	.word	0x240072a8
 800aaf8:	240072f4 	.word	0x240072f4
 800aafc:	240072ac 	.word	0x240072ac

0800ab00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab02:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800ab04:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab06:	4e15      	ldr	r6, [pc, #84]	; (800ab5c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800ab08:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800ab0a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab0c:	6830      	ldr	r0, [r6, #0]
 800ab0e:	3004      	adds	r0, #4
 800ab10:	f7ff f8c3 	bl	8009c9a <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab14:	1c63      	adds	r3, r4, #1
 800ab16:	d107      	bne.n	800ab28 <prvAddCurrentTaskToDelayedList+0x28>
 800ab18:	b137      	cbz	r7, 800ab28 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab1a:	6831      	ldr	r1, [r6, #0]
 800ab1c:	4810      	ldr	r0, [pc, #64]	; (800ab60 <prvAddCurrentTaskToDelayedList+0x60>)
 800ab1e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab24:	f7ff b896 	b.w	8009c54 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab28:	192c      	adds	r4, r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab2a:	6833      	ldr	r3, [r6, #0]
 800ab2c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab2e:	d307      	bcc.n	800ab40 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab30:	4b0c      	ldr	r3, [pc, #48]	; (800ab64 <prvAddCurrentTaskToDelayedList+0x64>)
 800ab32:	6818      	ldr	r0, [r3, #0]
 800ab34:	6831      	ldr	r1, [r6, #0]
}
 800ab36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab3a:	3104      	adds	r1, #4
 800ab3c:	f7ff b896 	b.w	8009c6c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab40:	4b09      	ldr	r3, [pc, #36]	; (800ab68 <prvAddCurrentTaskToDelayedList+0x68>)
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	6831      	ldr	r1, [r6, #0]
 800ab46:	3104      	adds	r1, #4
 800ab48:	f7ff f890 	bl	8009c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab4c:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <prvAddCurrentTaskToDelayedList+0x6c>)
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	42a2      	cmp	r2, r4
 800ab52:	d900      	bls.n	800ab56 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800ab54:	601c      	str	r4, [r3, #0]
}
 800ab56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab58:	24007320 	.word	0x24007320
 800ab5c:	24006e2c 	.word	0x24006e2c
 800ab60:	240072f8 	.word	0x240072f8
 800ab64:	24006e34 	.word	0x24006e34
 800ab68:	24006e30 	.word	0x24006e30
 800ab6c:	240072d4 	.word	0x240072d4

0800ab70 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab70:	4a06      	ldr	r2, [pc, #24]	; (800ab8c <prvResetNextTaskUnblockTime+0x1c>)
 800ab72:	6813      	ldr	r3, [r2, #0]
 800ab74:	6819      	ldr	r1, [r3, #0]
 800ab76:	4b06      	ldr	r3, [pc, #24]	; (800ab90 <prvResetNextTaskUnblockTime+0x20>)
 800ab78:	b919      	cbnz	r1, 800ab82 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab7a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab7e:	601a      	str	r2, [r3, #0]
}
 800ab80:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab82:	6812      	ldr	r2, [r2, #0]
 800ab84:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab86:	68d2      	ldr	r2, [r2, #12]
 800ab88:	6852      	ldr	r2, [r2, #4]
 800ab8a:	e7f8      	b.n	800ab7e <prvResetNextTaskUnblockTime+0xe>
 800ab8c:	24006e30 	.word	0x24006e30
 800ab90:	240072d4 	.word	0x240072d4

0800ab94 <prvDeleteTCB>:
	{
 800ab94:	b510      	push	{r4, lr}
 800ab96:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab98:	3058      	adds	r0, #88	; 0x58
 800ab9a:	f013 fd2d 	bl	801e5f8 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab9e:	f894 30bd 	ldrb.w	r3, [r4, #189]	; 0xbd
 800aba2:	b93b      	cbnz	r3, 800abb4 <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800aba4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800aba6:	f7ff f809 	bl	8009bbc <vPortFree>
				vPortFree( pxTCB );
 800abaa:	4620      	mov	r0, r4
	}
 800abac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800abb0:	f7ff b804 	b.w	8009bbc <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d0f8      	beq.n	800abaa <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abb8:	2b02      	cmp	r3, #2
 800abba:	d008      	beq.n	800abce <prvDeleteTCB+0x3a>
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	e7fe      	b.n	800abcc <prvDeleteTCB+0x38>
	}
 800abce:	bd10      	pop	{r4, pc}

0800abd0 <prvIdleTask>:
{
 800abd0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abd2:	4c14      	ldr	r4, [pc, #80]	; (800ac24 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abd4:	4f14      	ldr	r7, [pc, #80]	; (800ac28 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800abd6:	4d15      	ldr	r5, [pc, #84]	; (800ac2c <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abd8:	6823      	ldr	r3, [r4, #0]
 800abda:	b983      	cbnz	r3, 800abfe <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800abdc:	4b14      	ldr	r3, [pc, #80]	; (800ac30 <prvIdleTask+0x60>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d909      	bls.n	800abf8 <prvIdleTask+0x28>
				taskYIELD();
 800abe4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800abe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800abf8:	f7f5 fd5c 	bl	80006b4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800abfc:	e7eb      	b.n	800abd6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800abfe:	f7ff f8c1 	bl	8009d84 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac06:	1d30      	adds	r0, r6, #4
 800ac08:	f7ff f847 	bl	8009c9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ac0c:	682b      	ldr	r3, [r5, #0]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ac12:	6823      	ldr	r3, [r4, #0]
 800ac14:	3b01      	subs	r3, #1
 800ac16:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800ac18:	f7ff f8d4 	bl	8009dc4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff ffb9 	bl	800ab94 <prvDeleteTCB>
 800ac22:	e7d9      	b.n	800abd8 <prvIdleTask+0x8>
 800ac24:	2400729c 	.word	0x2400729c
 800ac28:	2400730c 	.word	0x2400730c
 800ac2c:	24007298 	.word	0x24007298
 800ac30:	24006e38 	.word	0x24006e38

0800ac34 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ac34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac38:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ac3c:	4606      	mov	r6, r0
 800ac3e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac40:	21a5      	movs	r1, #165	; 0xa5
 800ac42:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ac44:	461f      	mov	r7, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac46:	f1a9 0904 	sub.w	r9, r9, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ac4a:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac4e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ac50:	f013 f860 	bl	801dd14 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ac56:	4491      	add	r9, r2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac58:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 800ac5c:	2d00      	cmp	r5, #0
 800ac5e:	d042      	beq.n	800ace6 <prvInitialiseNewTask.constprop.0+0xb2>
 800ac60:	1e6b      	subs	r3, r5, #1
 800ac62:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800ac66:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac68:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800ac6c:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 800ac70:	b108      	cbz	r0, 800ac76 <prvInitialiseNewTask.constprop.0+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac72:	42ab      	cmp	r3, r5
 800ac74:	d1f8      	bne.n	800ac68 <prvInitialiseNewTask.constprop.0+0x34>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ac76:	2300      	movs	r3, #0
 800ac78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ac7c:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800ac7e:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac82:	1d20      	adds	r0, r4, #4
 800ac84:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800ac86:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
 800ac8a:	bf28      	it	cs
 800ac8c:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800ac8e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ac90:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac92:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ac96:	f7fe ffda 	bl	8009c4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ac9a:	f104 0018 	add.w	r0, r4, #24
 800ac9e:	f7fe ffd6 	bl	8009c4e <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aca2:	2260      	movs	r2, #96	; 0x60
 800aca4:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800aca6:	f8c4 a0b8 	str.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800acae:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acb0:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800acb2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800acb4:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800acb8:	f884 a0bc 	strb.w	sl, [r4, #188]	; 0xbc
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acbc:	f013 f82a 	bl	801dd14 <memset>
 800acc0:	4b0a      	ldr	r3, [pc, #40]	; (800acec <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acc2:	463a      	mov	r2, r7
 800acc4:	4631      	mov	r1, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acc6:	65e3      	str	r3, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acc8:	4648      	mov	r0, r9
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800acca:	4b09      	ldr	r3, [pc, #36]	; (800acf0 <prvInitialiseNewTask.constprop.0+0xbc>)
 800accc:	6623      	str	r3, [r4, #96]	; 0x60
 800acce:	4b09      	ldr	r3, [pc, #36]	; (800acf4 <prvInitialiseNewTask.constprop.0+0xc0>)
 800acd0:	6663      	str	r3, [r4, #100]	; 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800acd2:	f7ff f831 	bl	8009d38 <pxPortInitialiseStack>
 800acd6:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800acd8:	f1b8 0f00 	cmp.w	r8, #0
 800acdc:	d001      	beq.n	800ace2 <prvInitialiseNewTask.constprop.0+0xae>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800acde:	f8c8 4000 	str.w	r4, [r8]
}
 800ace2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ace6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800acea:	e7c7      	b.n	800ac7c <prvInitialiseNewTask.constprop.0+0x48>
 800acec:	08020e70 	.word	0x08020e70
 800acf0:	08020e90 	.word	0x08020e90
 800acf4:	08020e50 	.word	0x08020e50

0800acf8 <xTaskCreateStatic>:
	{
 800acf8:	b570      	push	{r4, r5, r6, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 800ad00:	b945      	cbnz	r5, 800ad14 <xTaskCreateStatic+0x1c>
 800ad02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad06:	f383 8811 	msr	BASEPRI, r3
 800ad0a:	f3bf 8f6f 	isb	sy
 800ad0e:	f3bf 8f4f 	dsb	sy
 800ad12:	e7fe      	b.n	800ad12 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800ad14:	b944      	cbnz	r4, 800ad28 <xTaskCreateStatic+0x30>
 800ad16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1a:	f383 8811 	msr	BASEPRI, r3
 800ad1e:	f3bf 8f6f 	isb	sy
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	e7fe      	b.n	800ad26 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad28:	26c0      	movs	r6, #192	; 0xc0
 800ad2a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad2c:	9e05      	ldr	r6, [sp, #20]
 800ad2e:	2ec0      	cmp	r6, #192	; 0xc0
 800ad30:	d008      	beq.n	800ad44 <xTaskCreateStatic+0x4c>
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	e7fe      	b.n	800ad42 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ad44:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad46:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ad48:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ad4a:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ad4e:	ad04      	add	r5, sp, #16
 800ad50:	9402      	str	r4, [sp, #8]
 800ad52:	9501      	str	r5, [sp, #4]
 800ad54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800ad56:	9500      	str	r5, [sp, #0]
 800ad58:	f7ff ff6c 	bl	800ac34 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f7ff fe51 	bl	800aa04 <prvAddNewTaskToReadyList>
	}
 800ad62:	9804      	ldr	r0, [sp, #16]
 800ad64:	b006      	add	sp, #24
 800ad66:	bd70      	pop	{r4, r5, r6, pc}

0800ad68 <xTaskCreate>:
	{
 800ad68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad70:	0090      	lsls	r0, r2, #2
	{
 800ad72:	4688      	mov	r8, r1
 800ad74:	4616      	mov	r6, r2
 800ad76:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad78:	f7fe fe88 	bl	8009a8c <pvPortMalloc>
			if( pxStack != NULL )
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	b1e8      	cbz	r0, 800adbc <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad80:	20c0      	movs	r0, #192	; 0xc0
 800ad82:	f7fe fe83 	bl	8009a8c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800ad86:	4604      	mov	r4, r0
 800ad88:	b1a8      	cbz	r0, 800adb6 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad8a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800ad8c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad8e:	4632      	mov	r2, r6
 800ad90:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad92:	f880 30bd 	strb.w	r3, [r0, #189]	; 0xbd
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad98:	9002      	str	r0, [sp, #8]
 800ad9a:	4638      	mov	r0, r7
 800ad9c:	9301      	str	r3, [sp, #4]
 800ad9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	464b      	mov	r3, r9
 800ada4:	f7ff ff46 	bl	800ac34 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ada8:	4620      	mov	r0, r4
 800adaa:	f7ff fe2b 	bl	800aa04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800adae:	2001      	movs	r0, #1
	}
 800adb0:	b005      	add	sp, #20
 800adb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800adb6:	4628      	mov	r0, r5
 800adb8:	f7fe ff00 	bl	8009bbc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800adc0:	e7f6      	b.n	800adb0 <xTaskCreate+0x48>
	...

0800adc4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800adc4:	4a02      	ldr	r2, [pc, #8]	; (800add0 <vTaskSuspendAll+0xc>)
 800adc6:	6813      	ldr	r3, [r2, #0]
 800adc8:	3301      	adds	r3, #1
 800adca:	6013      	str	r3, [r2, #0]
}
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	240072a0 	.word	0x240072a0

0800add4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800add4:	4b01      	ldr	r3, [pc, #4]	; (800addc <xTaskGetTickCount+0x8>)
 800add6:	6818      	ldr	r0, [r3, #0]
}
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	24007320 	.word	0x24007320

0800ade0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade0:	4b3f      	ldr	r3, [pc, #252]	; (800aee0 <xTaskIncrementTick+0x100>)
 800ade2:	681b      	ldr	r3, [r3, #0]
{
 800ade4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d172      	bne.n	800aed2 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800adec:	4b3d      	ldr	r3, [pc, #244]	; (800aee4 <xTaskIncrementTick+0x104>)
 800adee:	681d      	ldr	r5, [r3, #0]
 800adf0:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800adf2:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800adf4:	b9bd      	cbnz	r5, 800ae26 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800adf6:	4b3c      	ldr	r3, [pc, #240]	; (800aee8 <xTaskIncrementTick+0x108>)
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	6812      	ldr	r2, [r2, #0]
 800adfc:	b142      	cbz	r2, 800ae10 <xTaskIncrementTick+0x30>
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	e7fe      	b.n	800ae0e <xTaskIncrementTick+0x2e>
 800ae10:	4a36      	ldr	r2, [pc, #216]	; (800aeec <xTaskIncrementTick+0x10c>)
 800ae12:	6819      	ldr	r1, [r3, #0]
 800ae14:	6810      	ldr	r0, [r2, #0]
 800ae16:	6018      	str	r0, [r3, #0]
 800ae18:	6011      	str	r1, [r2, #0]
 800ae1a:	4a35      	ldr	r2, [pc, #212]	; (800aef0 <xTaskIncrementTick+0x110>)
 800ae1c:	6813      	ldr	r3, [r2, #0]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	6013      	str	r3, [r2, #0]
 800ae22:	f7ff fea5 	bl	800ab70 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae26:	4e33      	ldr	r6, [pc, #204]	; (800aef4 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800ae28:	2400      	movs	r4, #0
 800ae2a:	4f33      	ldr	r7, [pc, #204]	; (800aef8 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ae2c:	6833      	ldr	r3, [r6, #0]
 800ae2e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800af04 <xTaskIncrementTick+0x124>
 800ae32:	429d      	cmp	r5, r3
 800ae34:	d211      	bcs.n	800ae5a <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae36:	f8d8 3000 	ldr.w	r3, [r8]
 800ae3a:	2214      	movs	r2, #20
 800ae3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3e:	4353      	muls	r3, r2
 800ae40:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 800ae42:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 800ae44:	4b2d      	ldr	r3, [pc, #180]	; (800aefc <xTaskIncrementTick+0x11c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 800ae48:	bf28      	it	cs
 800ae4a:	2401      	movcs	r4, #1
				xSwitchRequired = pdTRUE;
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	bf18      	it	ne
 800ae50:	2401      	movne	r4, #1
}
 800ae52:	4620      	mov	r0, r4
 800ae54:	b003      	add	sp, #12
 800ae56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae5a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800aee8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800ae5e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 800af08 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae62:	f8d9 3000 	ldr.w	r3, [r9]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	b91b      	cbnz	r3, 800ae72 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6e:	6033      	str	r3, [r6, #0]
					break;
 800ae70:	e7e1      	b.n	800ae36 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae72:	f8d9 3000 	ldr.w	r3, [r9]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae7c:	f8db 2004 	ldr.w	r2, [fp, #4]
					if( xConstTickCount < xItemValue )
 800ae80:	4295      	cmp	r5, r2
 800ae82:	d201      	bcs.n	800ae88 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 800ae84:	6032      	str	r2, [r6, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae86:	e7d6      	b.n	800ae36 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae88:	f10b 0104 	add.w	r1, fp, #4
 800ae8c:	4608      	mov	r0, r1
 800ae8e:	9101      	str	r1, [sp, #4]
 800ae90:	f7fe ff03 	bl	8009c9a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae94:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
 800ae98:	9901      	ldr	r1, [sp, #4]
 800ae9a:	b122      	cbz	r2, 800aea6 <xTaskIncrementTick+0xc6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae9c:	f10b 0018 	add.w	r0, fp, #24
 800aea0:	f7fe fefb 	bl	8009c9a <uxListRemove>
 800aea4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 800aea6:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 800aeaa:	f8da 2000 	ldr.w	r2, [sl]
 800aeae:	4290      	cmp	r0, r2
 800aeb0:	d901      	bls.n	800aeb6 <xTaskIncrementTick+0xd6>
 800aeb2:	f8ca 0000 	str.w	r0, [sl]
 800aeb6:	2314      	movs	r3, #20
 800aeb8:	fb03 7000 	mla	r0, r3, r0, r7
 800aebc:	f7fe feca 	bl	8009c54 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aec0:	f8d8 1000 	ldr.w	r1, [r8]
 800aec4:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800aec8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800aeca:	429a      	cmp	r2, r3
 800aecc:	bf28      	it	cs
 800aece:	2401      	movcs	r4, #1
 800aed0:	e7c7      	b.n	800ae62 <xTaskIncrementTick+0x82>
		++xPendedTicks;
 800aed2:	4a0b      	ldr	r2, [pc, #44]	; (800af00 <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800aed4:	2400      	movs	r4, #0
		++xPendedTicks;
 800aed6:	6813      	ldr	r3, [r2, #0]
 800aed8:	3301      	adds	r3, #1
 800aeda:	6013      	str	r3, [r2, #0]
	return xSwitchRequired;
 800aedc:	e7b9      	b.n	800ae52 <xTaskIncrementTick+0x72>
 800aede:	bf00      	nop
 800aee0:	240072a0 	.word	0x240072a0
 800aee4:	24007320 	.word	0x24007320
 800aee8:	24006e30 	.word	0x24006e30
 800aeec:	24006e34 	.word	0x24006e34
 800aef0:	240072d8 	.word	0x240072d8
 800aef4:	240072d4 	.word	0x240072d4
 800aef8:	24006e38 	.word	0x24006e38
 800aefc:	24007324 	.word	0x24007324
 800af00:	240072dc 	.word	0x240072dc
 800af04:	24006e2c 	.word	0x24006e2c
 800af08:	240072a8 	.word	0x240072a8

0800af0c <xTaskResumeAll>:
{
 800af0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800af0e:	4c31      	ldr	r4, [pc, #196]	; (800afd4 <xTaskResumeAll+0xc8>)
 800af10:	6823      	ldr	r3, [r4, #0]
 800af12:	b943      	cbnz	r3, 800af26 <xTaskResumeAll+0x1a>
 800af14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af18:	f383 8811 	msr	BASEPRI, r3
 800af1c:	f3bf 8f6f 	isb	sy
 800af20:	f3bf 8f4f 	dsb	sy
 800af24:	e7fe      	b.n	800af24 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800af26:	f7fe ff2d 	bl	8009d84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800af2a:	6823      	ldr	r3, [r4, #0]
 800af2c:	3b01      	subs	r3, #1
 800af2e:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af30:	6824      	ldr	r4, [r4, #0]
 800af32:	b12c      	cbz	r4, 800af40 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800af34:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800af36:	f7fe ff45 	bl	8009dc4 <vPortExitCritical>
}
 800af3a:	4620      	mov	r0, r4
 800af3c:	b003      	add	sp, #12
 800af3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800af40:	4b25      	ldr	r3, [pc, #148]	; (800afd8 <xTaskResumeAll+0xcc>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0f5      	beq.n	800af34 <xTaskResumeAll+0x28>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af48:	4d24      	ldr	r5, [pc, #144]	; (800afdc <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800af4a:	4e25      	ldr	r6, [pc, #148]	; (800afe0 <xTaskResumeAll+0xd4>)
 800af4c:	4f25      	ldr	r7, [pc, #148]	; (800afe4 <xTaskResumeAll+0xd8>)
 800af4e:	e01e      	b.n	800af8e <xTaskResumeAll+0x82>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af50:	68eb      	ldr	r3, [r5, #12]
 800af52:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af54:	f104 0018 	add.w	r0, r4, #24
 800af58:	f7fe fe9f 	bl	8009c9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af5c:	1d21      	adds	r1, r4, #4
 800af5e:	4608      	mov	r0, r1
 800af60:	9101      	str	r1, [sp, #4]
 800af62:	f7fe fe9a 	bl	8009c9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800af68:	6832      	ldr	r2, [r6, #0]
 800af6a:	9901      	ldr	r1, [sp, #4]
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d900      	bls.n	800af72 <xTaskResumeAll+0x66>
 800af70:	6033      	str	r3, [r6, #0]
 800af72:	2014      	movs	r0, #20
 800af74:	fb00 7003 	mla	r0, r0, r3, r7
 800af78:	f7fe fe6c 	bl	8009c54 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af7c:	4b1a      	ldr	r3, [pc, #104]	; (800afe8 <xTaskResumeAll+0xdc>)
 800af7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af84:	429a      	cmp	r2, r3
 800af86:	d302      	bcc.n	800af8e <xTaskResumeAll+0x82>
						xYieldPending = pdTRUE;
 800af88:	4b18      	ldr	r3, [pc, #96]	; (800afec <xTaskResumeAll+0xe0>)
 800af8a:	2201      	movs	r2, #1
 800af8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1dd      	bne.n	800af50 <xTaskResumeAll+0x44>
				if( pxTCB != NULL )
 800af94:	b10c      	cbz	r4, 800af9a <xTaskResumeAll+0x8e>
					prvResetNextTaskUnblockTime();
 800af96:	f7ff fdeb 	bl	800ab70 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af9a:	4d15      	ldr	r5, [pc, #84]	; (800aff0 <xTaskResumeAll+0xe4>)
 800af9c:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800af9e:	b144      	cbz	r4, 800afb2 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 800afa0:	4e12      	ldr	r6, [pc, #72]	; (800afec <xTaskResumeAll+0xe0>)
 800afa2:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800afa4:	f7ff ff1c 	bl	800ade0 <xTaskIncrementTick>
 800afa8:	b100      	cbz	r0, 800afac <xTaskResumeAll+0xa0>
								xYieldPending = pdTRUE;
 800afaa:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800afac:	3c01      	subs	r4, #1
 800afae:	d1f9      	bne.n	800afa4 <xTaskResumeAll+0x98>
						xPendedTicks = 0;
 800afb0:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800afb2:	4b0e      	ldr	r3, [pc, #56]	; (800afec <xTaskResumeAll+0xe0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d0bc      	beq.n	800af34 <xTaskResumeAll+0x28>
					taskYIELD_IF_USING_PREEMPTION();
 800afba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800afbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800afce:	2401      	movs	r4, #1
 800afd0:	e7b1      	b.n	800af36 <xTaskResumeAll+0x2a>
 800afd2:	bf00      	nop
 800afd4:	240072a0 	.word	0x240072a0
 800afd8:	24007298 	.word	0x24007298
 800afdc:	240072e0 	.word	0x240072e0
 800afe0:	240072a8 	.word	0x240072a8
 800afe4:	24006e38 	.word	0x24006e38
 800afe8:	24006e2c 	.word	0x24006e2c
 800afec:	24007324 	.word	0x24007324
 800aff0:	240072dc 	.word	0x240072dc

0800aff4 <vTaskDelay>:
	{
 800aff4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aff6:	b950      	cbnz	r0, 800b00e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 800aff8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800affc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b000:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b004:	f3bf 8f4f 	dsb	sy
 800b008:	f3bf 8f6f 	isb	sy
	}
 800b00c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800b00e:	4b0a      	ldr	r3, [pc, #40]	; (800b038 <vTaskDelay+0x44>)
 800b010:	6819      	ldr	r1, [r3, #0]
 800b012:	b141      	cbz	r1, 800b026 <vTaskDelay+0x32>
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	f383 8811 	msr	BASEPRI, r3
 800b01c:	f3bf 8f6f 	isb	sy
 800b020:	f3bf 8f4f 	dsb	sy
 800b024:	e7fe      	b.n	800b024 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800b026:	f7ff fecd 	bl	800adc4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b02a:	f7ff fd69 	bl	800ab00 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800b02e:	f7ff ff6d 	bl	800af0c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b032:	2800      	cmp	r0, #0
 800b034:	d0e0      	beq.n	800aff8 <vTaskDelay+0x4>
 800b036:	e7e9      	b.n	800b00c <vTaskDelay+0x18>
 800b038:	240072a0 	.word	0x240072a0

0800b03c <vTaskSetApplicationTaskTag>:
	{
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	460d      	mov	r5, r1
		if( xTask == NULL )
 800b040:	4604      	mov	r4, r0
 800b042:	b908      	cbnz	r0, 800b048 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800b044:	4b04      	ldr	r3, [pc, #16]	; (800b058 <vTaskSetApplicationTaskTag+0x1c>)
 800b046:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800b048:	f7fe fe9c 	bl	8009d84 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800b04c:	6565      	str	r5, [r4, #84]	; 0x54
	}
 800b04e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800b052:	f7fe beb7 	b.w	8009dc4 <vPortExitCritical>
 800b056:	bf00      	nop
 800b058:	24006e2c 	.word	0x24006e2c

0800b05c <xTaskCallApplicationTaskHook>:
	{
 800b05c:	4603      	mov	r3, r0
 800b05e:	4608      	mov	r0, r1
		if( xTask == NULL )
 800b060:	b90b      	cbnz	r3, 800b066 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800b062:	4b03      	ldr	r3, [pc, #12]	; (800b070 <xTaskCallApplicationTaskHook+0x14>)
 800b064:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800b066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b068:	b103      	cbz	r3, 800b06c <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800b06a:	4718      	bx	r3
	}
 800b06c:	4618      	mov	r0, r3
 800b06e:	4770      	bx	lr
 800b070:	24006e2c 	.word	0x24006e2c

0800b074 <vTaskStartScheduler>:
{
 800b074:	b510      	push	{r4, lr}
 800b076:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b078:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b07a:	aa07      	add	r2, sp, #28
 800b07c:	a906      	add	r1, sp, #24
 800b07e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b080:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b084:	f7fe fcc6 	bl	8009a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b088:	9b05      	ldr	r3, [sp, #20]
 800b08a:	9a07      	ldr	r2, [sp, #28]
 800b08c:	9302      	str	r3, [sp, #8]
 800b08e:	9b06      	ldr	r3, [sp, #24]
 800b090:	491b      	ldr	r1, [pc, #108]	; (800b100 <vTaskStartScheduler+0x8c>)
 800b092:	481c      	ldr	r0, [pc, #112]	; (800b104 <vTaskStartScheduler+0x90>)
 800b094:	e9cd 4300 	strd	r4, r3, [sp]
 800b098:	4623      	mov	r3, r4
 800b09a:	f7ff fe2d 	bl	800acf8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b09e:	b360      	cbz	r0, 800b0fa <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800b0a0:	f000 fa92 	bl	800b5c8 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b0a4:	2801      	cmp	r0, #1
 800b0a6:	d11d      	bne.n	800b0e4 <vTaskStartScheduler+0x70>
 800b0a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ac:	f383 8811 	msr	BASEPRI, r3
 800b0b0:	f3bf 8f6f 	isb	sy
 800b0b4:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0b8:	4a13      	ldr	r2, [pc, #76]	; (800b108 <vTaskStartScheduler+0x94>)
 800b0ba:	4914      	ldr	r1, [pc, #80]	; (800b10c <vTaskStartScheduler+0x98>)
 800b0bc:	6813      	ldr	r3, [r2, #0]
 800b0be:	3358      	adds	r3, #88	; 0x58
 800b0c0:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0c2:	f04f 31ff 	mov.w	r1, #4294967295
 800b0c6:	4b12      	ldr	r3, [pc, #72]	; (800b110 <vTaskStartScheduler+0x9c>)
 800b0c8:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800b0ca:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800b0cc:	4b11      	ldr	r3, [pc, #68]	; (800b114 <vTaskStartScheduler+0xa0>)
 800b0ce:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0d0:	4b11      	ldr	r3, [pc, #68]	; (800b118 <vTaskStartScheduler+0xa4>)
 800b0d2:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800b0d4:	6810      	ldr	r0, [r2, #0]
 800b0d6:	f7ff ffc1 	bl	800b05c <xTaskCallApplicationTaskHook>
}
 800b0da:	b008      	add	sp, #32
 800b0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800b0e0:	f7fe bee0 	b.w	8009ea4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0e4:	3001      	adds	r0, #1
 800b0e6:	d108      	bne.n	800b0fa <vTaskStartScheduler+0x86>
 800b0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ec:	f383 8811 	msr	BASEPRI, r3
 800b0f0:	f3bf 8f6f 	isb	sy
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	e7fe      	b.n	800b0f8 <vTaskStartScheduler+0x84>
}
 800b0fa:	b008      	add	sp, #32
 800b0fc:	bd10      	pop	{r4, pc}
 800b0fe:	bf00      	nop
 800b100:	0801fb72 	.word	0x0801fb72
 800b104:	0800abd1 	.word	0x0800abd1
 800b108:	24006e2c 	.word	0x24006e2c
 800b10c:	24000148 	.word	0x24000148
 800b110:	240072d4 	.word	0x240072d4
 800b114:	240072f4 	.word	0x240072f4
 800b118:	24007320 	.word	0x24007320

0800b11c <vTaskSwitchContext>:
{
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b11e:	4b1d      	ldr	r3, [pc, #116]	; (800b194 <vTaskSwitchContext+0x78>)
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	4b1d      	ldr	r3, [pc, #116]	; (800b198 <vTaskSwitchContext+0x7c>)
 800b124:	b112      	cbz	r2, 800b12c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800b126:	2201      	movs	r2, #1
 800b128:	601a      	str	r2, [r3, #0]
}
 800b12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800b12c:	4c1b      	ldr	r4, [pc, #108]	; (800b19c <vTaskSwitchContext+0x80>)
 800b12e:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b130:	4e1b      	ldr	r6, [pc, #108]	; (800b1a0 <vTaskSwitchContext+0x84>)
 800b132:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800b134:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800b136:	6820      	ldr	r0, [r4, #0]
 800b138:	f7ff ff90 	bl	800b05c <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b13c:	6832      	ldr	r2, [r6, #0]
 800b13e:	4919      	ldr	r1, [pc, #100]	; (800b1a4 <vTaskSwitchContext+0x88>)
 800b140:	fb07 f302 	mul.w	r3, r7, r2
 800b144:	58cd      	ldr	r5, [r1, r3]
 800b146:	18c8      	adds	r0, r1, r3
 800b148:	b1c5      	cbz	r5, 800b17c <vTaskSwitchContext+0x60>
 800b14a:	6845      	ldr	r5, [r0, #4]
 800b14c:	3308      	adds	r3, #8
 800b14e:	686d      	ldr	r5, [r5, #4]
 800b150:	440b      	add	r3, r1
 800b152:	429d      	cmp	r5, r3
 800b154:	6045      	str	r5, [r0, #4]
 800b156:	bf04      	itt	eq
 800b158:	686b      	ldreq	r3, [r5, #4]
 800b15a:	6043      	streq	r3, [r0, #4]
 800b15c:	2314      	movs	r3, #20
 800b15e:	fb03 1102 	mla	r1, r3, r2, r1
 800b162:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800b164:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	6023      	str	r3, [r4, #0]
 800b16a:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800b16c:	6820      	ldr	r0, [r4, #0]
 800b16e:	f7ff ff75 	bl	800b05c <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b172:	6823      	ldr	r3, [r4, #0]
 800b174:	4a0c      	ldr	r2, [pc, #48]	; (800b1a8 <vTaskSwitchContext+0x8c>)
 800b176:	3358      	adds	r3, #88	; 0x58
 800b178:	6013      	str	r3, [r2, #0]
}
 800b17a:	e7d6      	b.n	800b12a <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b17c:	b942      	cbnz	r2, 800b190 <vTaskSwitchContext+0x74>
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	e7fe      	b.n	800b18e <vTaskSwitchContext+0x72>
 800b190:	3a01      	subs	r2, #1
 800b192:	e7d5      	b.n	800b140 <vTaskSwitchContext+0x24>
 800b194:	240072a0 	.word	0x240072a0
 800b198:	24007324 	.word	0x24007324
 800b19c:	24006e2c 	.word	0x24006e2c
 800b1a0:	240072a8 	.word	0x240072a8
 800b1a4:	24006e38 	.word	0x24006e38
 800b1a8:	24000148 	.word	0x24000148

0800b1ac <vTaskPlaceOnEventList>:
{
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800b1b0:	b940      	cbnz	r0, 800b1c4 <vTaskPlaceOnEventList+0x18>
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	e7fe      	b.n	800b1c2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1c4:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <vTaskPlaceOnEventList+0x30>)
 800b1c6:	6819      	ldr	r1, [r3, #0]
 800b1c8:	3118      	adds	r1, #24
 800b1ca:	f7fe fd4f 	bl	8009c6c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	2101      	movs	r1, #1
}
 800b1d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1d6:	f7ff bc93 	b.w	800ab00 <prvAddCurrentTaskToDelayedList>
 800b1da:	bf00      	nop
 800b1dc:	24006e2c 	.word	0x24006e2c

0800b1e0 <vTaskPlaceOnEventListRestricted>:
	{
 800b1e0:	b538      	push	{r3, r4, r5, lr}
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800b1e6:	b940      	cbnz	r0, 800b1fa <vTaskPlaceOnEventListRestricted+0x1a>
 800b1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	e7fe      	b.n	800b1f8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1fa:	4b07      	ldr	r3, [pc, #28]	; (800b218 <vTaskPlaceOnEventListRestricted+0x38>)
 800b1fc:	6819      	ldr	r1, [r3, #0]
 800b1fe:	3118      	adds	r1, #24
 800b200:	f7fe fd28 	bl	8009c54 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800b204:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b206:	4621      	mov	r1, r4
 800b208:	bf0c      	ite	eq
 800b20a:	4628      	moveq	r0, r5
 800b20c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800b210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b214:	f7ff bc74 	b.w	800ab00 <prvAddCurrentTaskToDelayedList>
 800b218:	24006e2c 	.word	0x24006e2c

0800b21c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b21c:	68c3      	ldr	r3, [r0, #12]
{
 800b21e:	b513      	push	{r0, r1, r4, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b220:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b222:	b944      	cbnz	r4, 800b236 <xTaskRemoveFromEventList+0x1a>
 800b224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b228:	f383 8811 	msr	BASEPRI, r3
 800b22c:	f3bf 8f6f 	isb	sy
 800b230:	f3bf 8f4f 	dsb	sy
 800b234:	e7fe      	b.n	800b234 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b236:	f104 0118 	add.w	r1, r4, #24
 800b23a:	4608      	mov	r0, r1
 800b23c:	9101      	str	r1, [sp, #4]
 800b23e:	f7fe fd2c 	bl	8009c9a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b242:	4b12      	ldr	r3, [pc, #72]	; (800b28c <xTaskRemoveFromEventList+0x70>)
 800b244:	9901      	ldr	r1, [sp, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	b9e3      	cbnz	r3, 800b284 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b24a:	1d21      	adds	r1, r4, #4
 800b24c:	4608      	mov	r0, r1
 800b24e:	9101      	str	r1, [sp, #4]
 800b250:	f7fe fd23 	bl	8009c9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b254:	4a0e      	ldr	r2, [pc, #56]	; (800b290 <xTaskRemoveFromEventList+0x74>)
 800b256:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b258:	6810      	ldr	r0, [r2, #0]
 800b25a:	9901      	ldr	r1, [sp, #4]
 800b25c:	4283      	cmp	r3, r0
 800b25e:	d900      	bls.n	800b262 <xTaskRemoveFromEventList+0x46>
 800b260:	6013      	str	r3, [r2, #0]
 800b262:	4a0c      	ldr	r2, [pc, #48]	; (800b294 <xTaskRemoveFromEventList+0x78>)
 800b264:	2014      	movs	r0, #20
 800b266:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b26a:	f7fe fcf3 	bl	8009c54 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b26e:	4b0a      	ldr	r3, [pc, #40]	; (800b298 <xTaskRemoveFromEventList+0x7c>)
 800b270:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b276:	429a      	cmp	r2, r3
 800b278:	d906      	bls.n	800b288 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 800b27a:	2001      	movs	r0, #1
 800b27c:	4b07      	ldr	r3, [pc, #28]	; (800b29c <xTaskRemoveFromEventList+0x80>)
 800b27e:	6018      	str	r0, [r3, #0]
}
 800b280:	b002      	add	sp, #8
 800b282:	bd10      	pop	{r4, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b284:	4806      	ldr	r0, [pc, #24]	; (800b2a0 <xTaskRemoveFromEventList+0x84>)
 800b286:	e7f0      	b.n	800b26a <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 800b288:	2000      	movs	r0, #0
	return xReturn;
 800b28a:	e7f9      	b.n	800b280 <xTaskRemoveFromEventList+0x64>
 800b28c:	240072a0 	.word	0x240072a0
 800b290:	240072a8 	.word	0x240072a8
 800b294:	24006e38 	.word	0x24006e38
 800b298:	24006e2c 	.word	0x24006e2c
 800b29c:	24007324 	.word	0x24007324
 800b2a0:	240072e0 	.word	0x240072e0

0800b2a4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2a4:	4b03      	ldr	r3, [pc, #12]	; (800b2b4 <vTaskInternalSetTimeOutState+0x10>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2aa:	4b03      	ldr	r3, [pc, #12]	; (800b2b8 <vTaskInternalSetTimeOutState+0x14>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6043      	str	r3, [r0, #4]
}
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	240072d8 	.word	0x240072d8
 800b2b8:	24007320 	.word	0x24007320

0800b2bc <xTaskCheckForTimeOut>:
{
 800b2bc:	b570      	push	{r4, r5, r6, lr}
 800b2be:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	b940      	cbnz	r0, 800b2d6 <xTaskCheckForTimeOut+0x1a>
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	f383 8811 	msr	BASEPRI, r3
 800b2cc:	f3bf 8f6f 	isb	sy
 800b2d0:	f3bf 8f4f 	dsb	sy
 800b2d4:	e7fe      	b.n	800b2d4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800b2d6:	b941      	cbnz	r1, 800b2ea <xTaskCheckForTimeOut+0x2e>
 800b2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2dc:	f383 8811 	msr	BASEPRI, r3
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	f3bf 8f4f 	dsb	sy
 800b2e8:	e7fe      	b.n	800b2e8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800b2ea:	f7fe fd4b 	bl	8009d84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <xTaskCheckForTimeOut+0x70>)
 800b2f0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800b2f2:	6823      	ldr	r3, [r4, #0]
 800b2f4:	1c5a      	adds	r2, r3, #1
 800b2f6:	d010      	beq.n	800b31a <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2f8:	480d      	ldr	r0, [pc, #52]	; (800b330 <xTaskCheckForTimeOut+0x74>)
 800b2fa:	682e      	ldr	r6, [r5, #0]
 800b2fc:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2fe:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b300:	4286      	cmp	r6, r0
 800b302:	d001      	beq.n	800b308 <xTaskCheckForTimeOut+0x4c>
 800b304:	428a      	cmp	r2, r1
 800b306:	d90f      	bls.n	800b328 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b308:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b30a:	4283      	cmp	r3, r0
 800b30c:	d90a      	bls.n	800b324 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800b30e:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b310:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800b312:	4413      	add	r3, r2
 800b314:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b316:	f7ff ffc5 	bl	800b2a4 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800b31a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b31c:	f7fe fd52 	bl	8009dc4 <vPortExitCritical>
}
 800b320:	4620      	mov	r0, r4
 800b322:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800b324:	2300      	movs	r3, #0
 800b326:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800b328:	2401      	movs	r4, #1
 800b32a:	e7f7      	b.n	800b31c <xTaskCheckForTimeOut+0x60>
 800b32c:	24007320 	.word	0x24007320
 800b330:	240072d8 	.word	0x240072d8

0800b334 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b334:	4b01      	ldr	r3, [pc, #4]	; (800b33c <vTaskMissedYield+0x8>)
 800b336:	2201      	movs	r2, #1
 800b338:	601a      	str	r2, [r3, #0]
}
 800b33a:	4770      	bx	lr
 800b33c:	24007324 	.word	0x24007324

0800b340 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b340:	4b05      	ldr	r3, [pc, #20]	; (800b358 <xTaskGetSchedulerState+0x18>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	b133      	cbz	r3, 800b354 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b346:	4b05      	ldr	r3, [pc, #20]	; (800b35c <xTaskGetSchedulerState+0x1c>)
 800b348:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	bf0c      	ite	eq
 800b34e:	2002      	moveq	r0, #2
 800b350:	2000      	movne	r0, #0
 800b352:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b354:	2001      	movs	r0, #1
	}
 800b356:	4770      	bx	lr
 800b358:	240072f4 	.word	0x240072f4
 800b35c:	240072a0 	.word	0x240072a0

0800b360 <xTaskPriorityInherit>:
	{
 800b360:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800b362:	4604      	mov	r4, r0
 800b364:	b340      	cbz	r0, 800b3b8 <xTaskPriorityInherit+0x58>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b366:	4d1b      	ldr	r5, [pc, #108]	; (800b3d4 <xTaskPriorityInherit+0x74>)
 800b368:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b36a:	682a      	ldr	r2, [r5, #0]
 800b36c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b36e:	4293      	cmp	r3, r2
 800b370:	d228      	bcs.n	800b3c4 <xTaskPriorityInherit+0x64>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b372:	6982      	ldr	r2, [r0, #24]
 800b374:	2a00      	cmp	r2, #0
 800b376:	db04      	blt.n	800b382 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b378:	682a      	ldr	r2, [r5, #0]
 800b37a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b37c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800b380:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b382:	2214      	movs	r2, #20
 800b384:	4e14      	ldr	r6, [pc, #80]	; (800b3d8 <xTaskPriorityInherit+0x78>)
 800b386:	fb02 6303 	mla	r3, r2, r3, r6
 800b38a:	6962      	ldr	r2, [r4, #20]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d115      	bne.n	800b3bc <xTaskPriorityInherit+0x5c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b390:	1d21      	adds	r1, r4, #4
 800b392:	4608      	mov	r0, r1
 800b394:	9101      	str	r1, [sp, #4]
 800b396:	f7fe fc80 	bl	8009c9a <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b39a:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b39c:	4a0f      	ldr	r2, [pc, #60]	; (800b3dc <xTaskPriorityInherit+0x7c>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b3a0:	6810      	ldr	r0, [r2, #0]
 800b3a2:	9901      	ldr	r1, [sp, #4]
 800b3a4:	4283      	cmp	r3, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3a6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b3a8:	d900      	bls.n	800b3ac <xTaskPriorityInherit+0x4c>
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	2014      	movs	r0, #20
 800b3ae:	fb00 6003 	mla	r0, r0, r3, r6
 800b3b2:	f7fe fc4f 	bl	8009c54 <vListInsertEnd>
				xReturn = pdTRUE;
 800b3b6:	2001      	movs	r0, #1
	}
 800b3b8:	b002      	add	sp, #8
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b3bc:	682b      	ldr	r3, [r5, #0]
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b3c2:	e7f8      	b.n	800b3b6 <xTaskPriorityInherit+0x56>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b3c4:	682b      	ldr	r3, [r5, #0]
 800b3c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800b3c8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800b3ca:	42a0      	cmp	r0, r4
 800b3cc:	bf2c      	ite	cs
 800b3ce:	2000      	movcs	r0, #0
 800b3d0:	2001      	movcc	r0, #1
 800b3d2:	e7f1      	b.n	800b3b8 <xTaskPriorityInherit+0x58>
 800b3d4:	24006e2c 	.word	0x24006e2c
 800b3d8:	24006e38 	.word	0x24006e38
 800b3dc:	240072a8 	.word	0x240072a8

0800b3e0 <xTaskPriorityDisinherit>:
	{
 800b3e0:	b513      	push	{r0, r1, r4, lr}
		if( pxMutexHolder != NULL )
 800b3e2:	b910      	cbnz	r0, 800b3ea <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800b3e4:	2000      	movs	r0, #0
	}
 800b3e6:	b002      	add	sp, #8
 800b3e8:	bd10      	pop	{r4, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800b3ea:	4b1c      	ldr	r3, [pc, #112]	; (800b45c <xTaskPriorityDisinherit+0x7c>)
 800b3ec:	681c      	ldr	r4, [r3, #0]
 800b3ee:	4284      	cmp	r4, r0
 800b3f0:	d008      	beq.n	800b404 <xTaskPriorityDisinherit+0x24>
 800b3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	e7fe      	b.n	800b402 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b404:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b406:	b943      	cbnz	r3, 800b41a <xTaskPriorityDisinherit+0x3a>
 800b408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40c:	f383 8811 	msr	BASEPRI, r3
 800b410:	f3bf 8f6f 	isb	sy
 800b414:	f3bf 8f4f 	dsb	sy
 800b418:	e7fe      	b.n	800b418 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b41a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 800b41c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b41e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800b420:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b422:	4291      	cmp	r1, r2
 800b424:	d0de      	beq.n	800b3e4 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1dc      	bne.n	800b3e4 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b42a:	1d21      	adds	r1, r4, #4
 800b42c:	4608      	mov	r0, r1
 800b42e:	9101      	str	r1, [sp, #4]
 800b430:	f7fe fc33 	bl	8009c9a <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b434:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800b436:	9901      	ldr	r1, [sp, #4]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b43c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b43e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b440:	4a07      	ldr	r2, [pc, #28]	; (800b460 <xTaskPriorityDisinherit+0x80>)
 800b442:	6810      	ldr	r0, [r2, #0]
 800b444:	4283      	cmp	r3, r0
 800b446:	d900      	bls.n	800b44a <xTaskPriorityDisinherit+0x6a>
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	4a06      	ldr	r2, [pc, #24]	; (800b464 <xTaskPriorityDisinherit+0x84>)
 800b44c:	2014      	movs	r0, #20
 800b44e:	fb00 2003 	mla	r0, r0, r3, r2
 800b452:	f7fe fbff 	bl	8009c54 <vListInsertEnd>
					xReturn = pdTRUE;
 800b456:	2001      	movs	r0, #1
		return xReturn;
 800b458:	e7c5      	b.n	800b3e6 <xTaskPriorityDisinherit+0x6>
 800b45a:	bf00      	nop
 800b45c:	24006e2c 	.word	0x24006e2c
 800b460:	240072a8 	.word	0x240072a8
 800b464:	24006e38 	.word	0x24006e38

0800b468 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800b468:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800b46a:	4604      	mov	r4, r0
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d044      	beq.n	800b4fa <vTaskPriorityDisinheritAfterTimeout+0x92>
			configASSERT( pxTCB->uxMutexesHeld );
 800b470:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b472:	b942      	cbnz	r2, 800b486 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800b474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b478:	f383 8811 	msr	BASEPRI, r3
 800b47c:	f3bf 8f6f 	isb	sy
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	e7fe      	b.n	800b484 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b486:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800b488:	4299      	cmp	r1, r3
 800b48a:	bf38      	it	cc
 800b48c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b48e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800b490:	428b      	cmp	r3, r1
 800b492:	d032      	beq.n	800b4fa <vTaskPriorityDisinheritAfterTimeout+0x92>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b494:	2a01      	cmp	r2, #1
 800b496:	d130      	bne.n	800b4fa <vTaskPriorityDisinheritAfterTimeout+0x92>
					configASSERT( pxTCB != pxCurrentTCB );
 800b498:	4a19      	ldr	r2, [pc, #100]	; (800b500 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800b49a:	6812      	ldr	r2, [r2, #0]
 800b49c:	4282      	cmp	r2, r0
 800b49e:	d108      	bne.n	800b4b2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a4:	f383 8811 	msr	BASEPRI, r3
 800b4a8:	f3bf 8f6f 	isb	sy
 800b4ac:	f3bf 8f4f 	dsb	sy
 800b4b0:	e7fe      	b.n	800b4b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b4b2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4b4:	4d13      	ldr	r5, [pc, #76]	; (800b504 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b4b6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4b8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800b4bc:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4be:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4c2:	bfa8      	it	ge
 800b4c4:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4c8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ca:	bfa8      	it	ge
 800b4cc:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b4ce:	429a      	cmp	r2, r3
 800b4d0:	d113      	bne.n	800b4fa <vTaskPriorityDisinheritAfterTimeout+0x92>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4d2:	1d01      	adds	r1, r0, #4
 800b4d4:	4608      	mov	r0, r1
 800b4d6:	9101      	str	r1, [sp, #4]
 800b4d8:	f7fe fbdf 	bl	8009c9a <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800b4dc:	4a0a      	ldr	r2, [pc, #40]	; (800b508 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
 800b4de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b4e0:	6810      	ldr	r0, [r2, #0]
 800b4e2:	9901      	ldr	r1, [sp, #4]
 800b4e4:	4283      	cmp	r3, r0
 800b4e6:	d900      	bls.n	800b4ea <vTaskPriorityDisinheritAfterTimeout+0x82>
 800b4e8:	6013      	str	r3, [r2, #0]
 800b4ea:	2014      	movs	r0, #20
 800b4ec:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800b4f0:	b003      	add	sp, #12
 800b4f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800b4f6:	f7fe bbad 	b.w	8009c54 <vListInsertEnd>
	}
 800b4fa:	b003      	add	sp, #12
 800b4fc:	bd30      	pop	{r4, r5, pc}
 800b4fe:	bf00      	nop
 800b500:	24006e2c 	.word	0x24006e2c
 800b504:	24006e38 	.word	0x24006e38
 800b508:	240072a8 	.word	0x240072a8

0800b50c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b50c:	4b04      	ldr	r3, [pc, #16]	; (800b520 <pvTaskIncrementMutexHeldCount+0x14>)
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	b11a      	cbz	r2, 800b51a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b512:	6819      	ldr	r1, [r3, #0]
 800b514:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800b516:	3201      	adds	r2, #1
 800b518:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 800b51a:	6818      	ldr	r0, [r3, #0]
	}
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	24006e2c 	.word	0x24006e2c

0800b524 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800b526:	4c11      	ldr	r4, [pc, #68]	; (800b56c <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800b528:	f7fe fc2c 	bl	8009d84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800b52c:	6825      	ldr	r5, [r4, #0]
 800b52e:	b9bd      	cbnz	r5, 800b560 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800b530:	4f0f      	ldr	r7, [pc, #60]	; (800b570 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800b532:	4e10      	ldr	r6, [pc, #64]	; (800b574 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800b534:	4638      	mov	r0, r7
 800b536:	f7fe fb7f 	bl	8009c38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b53a:	4630      	mov	r0, r6
 800b53c:	f7fe fb7c 	bl	8009c38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b540:	4b0d      	ldr	r3, [pc, #52]	; (800b578 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b542:	4a0e      	ldr	r2, [pc, #56]	; (800b57c <prvCheckForValidListAndQueue+0x58>)
 800b544:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800b546:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b548:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800b54a:	4b0d      	ldr	r3, [pc, #52]	; (800b580 <prvCheckForValidListAndQueue+0x5c>)
 800b54c:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b54e:	4b0d      	ldr	r3, [pc, #52]	; (800b584 <prvCheckForValidListAndQueue+0x60>)
 800b550:	9500      	str	r5, [sp, #0]
 800b552:	f7fe fe27 	bl	800a1a4 <xQueueGenericCreateStatic>
 800b556:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b558:	b110      	cbz	r0, 800b560 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b55a:	490b      	ldr	r1, [pc, #44]	; (800b588 <prvCheckForValidListAndQueue+0x64>)
 800b55c:	f7ff f9f2 	bl	800a944 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800b560:	b003      	add	sp, #12
 800b562:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800b566:	f7fe bc2d 	b.w	8009dc4 <vPortExitCritical>
 800b56a:	bf00      	nop
 800b56c:	2400744c 	.word	0x2400744c
 800b570:	240073d0 	.word	0x240073d0
 800b574:	240073e4 	.word	0x240073e4
 800b578:	24007328 	.word	0x24007328
 800b57c:	24007330 	.word	0x24007330
 800b580:	2400732c 	.word	0x2400732c
 800b584:	240073fc 	.word	0x240073fc
 800b588:	0801fb77 	.word	0x0801fb77

0800b58c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 800b58c:	4291      	cmp	r1, r2
{
 800b58e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b590:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b592:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800b594:	d80a      	bhi.n	800b5ac <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b596:	1ad2      	subs	r2, r2, r3
 800b598:	6983      	ldr	r3, [r0, #24]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d20d      	bcs.n	800b5ba <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b59e:	1d01      	adds	r1, r0, #4
 800b5a0:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <prvInsertTimerInActiveList+0x34>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5a2:	6818      	ldr	r0, [r3, #0]
 800b5a4:	f7fe fb62 	bl	8009c6c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b5a8:	2000      	movs	r0, #0
}
 800b5aa:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d201      	bcs.n	800b5b4 <prvInsertTimerInActiveList+0x28>
 800b5b0:	4299      	cmp	r1, r3
 800b5b2:	d202      	bcs.n	800b5ba <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b5b4:	1d01      	adds	r1, r0, #4
 800b5b6:	4b03      	ldr	r3, [pc, #12]	; (800b5c4 <prvInsertTimerInActiveList+0x38>)
 800b5b8:	e7f3      	b.n	800b5a2 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800b5ba:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b5bc:	e7f5      	b.n	800b5aa <prvInsertTimerInActiveList+0x1e>
 800b5be:	bf00      	nop
 800b5c0:	2400732c 	.word	0x2400732c
 800b5c4:	24007328 	.word	0x24007328

0800b5c8 <xTimerCreateTimerTask>:
{
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b5cc:	f7ff ffaa 	bl	800b524 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b5d0:	4b12      	ldr	r3, [pc, #72]	; (800b61c <xTimerCreateTimerTask+0x54>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	b1b3      	cbz	r3, 800b604 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5d6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5d8:	aa07      	add	r2, sp, #28
 800b5da:	a906      	add	r1, sp, #24
 800b5dc:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5de:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5e2:	f7fe fa23 	bl	8009a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5e6:	9b05      	ldr	r3, [sp, #20]
 800b5e8:	9a07      	ldr	r2, [sp, #28]
 800b5ea:	9302      	str	r3, [sp, #8]
 800b5ec:	9b06      	ldr	r3, [sp, #24]
 800b5ee:	490c      	ldr	r1, [pc, #48]	; (800b620 <xTimerCreateTimerTask+0x58>)
 800b5f0:	9301      	str	r3, [sp, #4]
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	480b      	ldr	r0, [pc, #44]	; (800b624 <xTimerCreateTimerTask+0x5c>)
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	4623      	mov	r3, r4
 800b5fa:	f7ff fb7d 	bl	800acf8 <xTaskCreateStatic>
 800b5fe:	4b0a      	ldr	r3, [pc, #40]	; (800b628 <xTimerCreateTimerTask+0x60>)
 800b600:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b602:	b940      	cbnz	r0, 800b616 <xTimerCreateTimerTask+0x4e>
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800b614:	e7fe      	b.n	800b614 <xTimerCreateTimerTask+0x4c>
}
 800b616:	2001      	movs	r0, #1
 800b618:	b008      	add	sp, #32
 800b61a:	bd10      	pop	{r4, pc}
 800b61c:	2400744c 	.word	0x2400744c
 800b620:	0801fb7c 	.word	0x0801fb7c
 800b624:	0800b72d 	.word	0x0800b72d
 800b628:	24007450 	.word	0x24007450

0800b62c <xTimerGenericCommand>:
{
 800b62c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b62e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800b630:	4604      	mov	r4, r0
{
 800b632:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800b634:	b940      	cbnz	r0, 800b648 <xTimerGenericCommand+0x1c>
 800b636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63a:	f383 8811 	msr	BASEPRI, r3
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	e7fe      	b.n	800b646 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800b648:	4d0c      	ldr	r5, [pc, #48]	; (800b67c <xTimerGenericCommand+0x50>)
 800b64a:	6828      	ldr	r0, [r5, #0]
 800b64c:	b178      	cbz	r0, 800b66e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b64e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b650:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b652:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b656:	dc0c      	bgt.n	800b672 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b658:	f7ff fe72 	bl	800b340 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b65c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b65e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b660:	4669      	mov	r1, sp
 800b662:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b664:	bf0c      	ite	eq
 800b666:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b668:	461a      	movne	r2, r3
 800b66a:	f7fe fe50 	bl	800a30e <xQueueGenericSend>
}
 800b66e:	b004      	add	sp, #16
 800b670:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b672:	2300      	movs	r3, #0
 800b674:	4669      	mov	r1, sp
 800b676:	f7fe fefd 	bl	800a474 <xQueueGenericSendFromISR>
 800b67a:	e7f8      	b.n	800b66e <xTimerGenericCommand+0x42>
 800b67c:	2400744c 	.word	0x2400744c

0800b680 <prvSampleTimeNow>:
{
 800b680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800b684:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800b728 <prvSampleTimeNow+0xa8>
{
 800b688:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800b68a:	f7ff fba3 	bl	800add4 <xTaskGetTickCount>
 800b68e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800b690:	f8d8 3000 	ldr.w	r3, [r8]
 800b694:	4283      	cmp	r3, r0
 800b696:	d940      	bls.n	800b71a <prvSampleTimeNow+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b698:	4f21      	ldr	r7, [pc, #132]	; (800b720 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b69a:	f04f 0900 	mov.w	r9, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	b95a      	cbnz	r2, 800b6bc <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800b6a4:	4a1f      	ldr	r2, [pc, #124]	; (800b724 <prvSampleTimeNow+0xa4>)
 800b6a6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b6a8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800b6aa:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800b6ac:	6039      	str	r1, [r7, #0]
}
 800b6ae:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdFALSE;
 800b6b0:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800b6b2:	f8c8 5000 	str.w	r5, [r8]
}
 800b6b6:	b004      	add	sp, #16
 800b6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6bc:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6be:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6c0:	f8d3 a000 	ldr.w	sl, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6c4:	1d21      	adds	r1, r4, #4
 800b6c6:	4608      	mov	r0, r1
 800b6c8:	9103      	str	r1, [sp, #12]
 800b6ca:	f7fe fae6 	bl	8009c9a <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6ce:	6a23      	ldr	r3, [r4, #32]
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6d4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b6d8:	9903      	ldr	r1, [sp, #12]
 800b6da:	f013 0f04 	tst.w	r3, #4
 800b6de:	d0de      	beq.n	800b69e <prvSampleTimeNow+0x1e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6e0:	69a3      	ldr	r3, [r4, #24]
 800b6e2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 800b6e4:	459a      	cmp	sl, r3
 800b6e6:	d205      	bcs.n	800b6f4 <prvSampleTimeNow+0x74>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6e8:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6ea:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6ec:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6ee:	f7fe fabd 	bl	8009c6c <vListInsert>
 800b6f2:	e7d4      	b.n	800b69e <prvSampleTimeNow+0x1e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4652      	mov	r2, sl
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f8cd 9000 	str.w	r9, [sp]
 800b6fe:	4619      	mov	r1, r3
 800b700:	f7ff ff94 	bl	800b62c <xTimerGenericCommand>
				configASSERT( xResult );
 800b704:	2800      	cmp	r0, #0
 800b706:	d1ca      	bne.n	800b69e <prvSampleTimeNow+0x1e>
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	e7fe      	b.n	800b718 <prvSampleTimeNow+0x98>
		*pxTimerListsWereSwitched = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	e7c7      	b.n	800b6ae <prvSampleTimeNow+0x2e>
 800b71e:	bf00      	nop
 800b720:	24007328 	.word	0x24007328
 800b724:	2400732c 	.word	0x2400732c
 800b728:	240073f8 	.word	0x240073f8

0800b72c <prvTimerTask>:
{
 800b72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b730:	4d6e      	ldr	r5, [pc, #440]	; (800b8ec <prvTimerTask+0x1c0>)
{
 800b732:	b089      	sub	sp, #36	; 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b734:	4e6e      	ldr	r6, [pc, #440]	; (800b8f0 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b736:	682b      	ldr	r3, [r5, #0]
 800b738:	f8d3 8000 	ldr.w	r8, [r3]
 800b73c:	f1b8 0f00 	cmp.w	r8, #0
 800b740:	d035      	beq.n	800b7ae <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b742:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b744:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b746:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800b74a:	f7ff fb3b 	bl	800adc4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b74e:	a804      	add	r0, sp, #16
 800b750:	f7ff ff96 	bl	800b680 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800b754:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b756:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d169      	bne.n	800b830 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b75c:	2c00      	cmp	r4, #0
 800b75e:	d14c      	bne.n	800b7fa <prvTimerTask+0xce>
 800b760:	4540      	cmp	r0, r8
 800b762:	d350      	bcc.n	800b806 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800b764:	f7ff fbd2 	bl	800af0c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b76e:	1d38      	adds	r0, r7, #4
 800b770:	f7fe fa93 	bl	8009c9a <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b774:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b778:	0758      	lsls	r0, r3, #29
 800b77a:	d51a      	bpl.n	800b7b2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b77c:	69b9      	ldr	r1, [r7, #24]
 800b77e:	4643      	mov	r3, r8
 800b780:	464a      	mov	r2, r9
 800b782:	4638      	mov	r0, r7
 800b784:	4441      	add	r1, r8
 800b786:	f7ff ff01 	bl	800b58c <prvInsertTimerInActiveList>
 800b78a:	b1b0      	cbz	r0, 800b7ba <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b78c:	4623      	mov	r3, r4
 800b78e:	4642      	mov	r2, r8
 800b790:	4621      	mov	r1, r4
 800b792:	4638      	mov	r0, r7
 800b794:	9400      	str	r4, [sp, #0]
 800b796:	f7ff ff49 	bl	800b62c <xTimerGenericCommand>
			configASSERT( xResult );
 800b79a:	b970      	cbnz	r0, 800b7ba <prvTimerTask+0x8e>
 800b79c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	e7fe      	b.n	800b7ac <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7ae:	2401      	movs	r4, #1
 800b7b0:	e7cb      	b.n	800b74a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7b2:	f023 0301 	bic.w	r3, r3, #1
 800b7b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	4638      	mov	r0, r7
 800b7be:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	a904      	add	r1, sp, #16
 800b7c4:	6830      	ldr	r0, [r6, #0]
 800b7c6:	f7fe ff0b 	bl	800a5e0 <xQueueReceive>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d0b3      	beq.n	800b736 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7ce:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7d0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	db2f      	blt.n	800b836 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7d6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7d8:	6963      	ldr	r3, [r4, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d132      	bne.n	800b844 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7de:	a803      	add	r0, sp, #12
 800b7e0:	f7ff ff4e 	bl	800b680 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800b7e4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7e6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800b7e8:	2b09      	cmp	r3, #9
 800b7ea:	d8e9      	bhi.n	800b7c0 <prvTimerTask+0x94>
 800b7ec:	e8df f003 	tbb	[pc, r3]
 800b7f0:	572e2e2e 	.word	0x572e2e2e
 800b7f4:	2e2e765e 	.word	0x2e2e765e
 800b7f8:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7fa:	4b3e      	ldr	r3, [pc, #248]	; (800b8f4 <prvTimerTask+0x1c8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681c      	ldr	r4, [r3, #0]
 800b800:	fab4 f484 	clz	r4, r4
 800b804:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b806:	4622      	mov	r2, r4
 800b808:	eba8 0109 	sub.w	r1, r8, r9
 800b80c:	6830      	ldr	r0, [r6, #0]
 800b80e:	f7ff f8d6 	bl	800a9be <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b812:	f7ff fb7b 	bl	800af0c <xTaskResumeAll>
 800b816:	2800      	cmp	r0, #0
 800b818:	d1d2      	bne.n	800b7c0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800b81a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800b81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b822:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	e7c7      	b.n	800b7c0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800b830:	f7ff fb6c 	bl	800af0c <xTaskResumeAll>
}
 800b834:	e7c4      	b.n	800b7c0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b836:	9b05      	ldr	r3, [sp, #20]
 800b838:	9907      	ldr	r1, [sp, #28]
 800b83a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	dbbe      	blt.n	800b7c0 <prvTimerTask+0x94>
 800b842:	e7c8      	b.n	800b7d6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b844:	1d20      	adds	r0, r4, #4
 800b846:	f7fe fa28 	bl	8009c9a <uxListRemove>
 800b84a:	e7c8      	b.n	800b7de <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b84c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b850:	4620      	mov	r0, r4
 800b852:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b854:	f043 0301 	orr.w	r3, r3, #1
 800b858:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b85c:	9b05      	ldr	r3, [sp, #20]
 800b85e:	4419      	add	r1, r3
 800b860:	f7ff fe94 	bl	800b58c <prvInsertTimerInActiveList>
 800b864:	2800      	cmp	r0, #0
 800b866:	d0ab      	beq.n	800b7c0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b868:	6a23      	ldr	r3, [r4, #32]
 800b86a:	4620      	mov	r0, r4
 800b86c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b86e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b872:	0759      	lsls	r1, r3, #29
 800b874:	d5a4      	bpl.n	800b7c0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b876:	69a2      	ldr	r2, [r4, #24]
 800b878:	2300      	movs	r3, #0
 800b87a:	9905      	ldr	r1, [sp, #20]
 800b87c:	4620      	mov	r0, r4
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	440a      	add	r2, r1
 800b882:	4619      	mov	r1, r3
 800b884:	f7ff fed2 	bl	800b62c <xTimerGenericCommand>
							configASSERT( xResult );
 800b888:	2800      	cmp	r0, #0
 800b88a:	d199      	bne.n	800b7c0 <prvTimerTask+0x94>
 800b88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	e7fe      	b.n	800b89c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b89e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8a2:	f023 0301 	bic.w	r3, r3, #1
 800b8a6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800b8aa:	e789      	b.n	800b7c0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b8b0:	f043 0301 	orr.w	r3, r3, #1
 800b8b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8b8:	9905      	ldr	r1, [sp, #20]
 800b8ba:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8bc:	b941      	cbnz	r1, 800b8d0 <prvTimerTask+0x1a4>
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	e7fe      	b.n	800b8ce <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	4401      	add	r1, r0
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f7ff fe59 	bl	800b58c <prvInsertTimerInActiveList>
					break;
 800b8da:	e771      	b.n	800b7c0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b8dc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b8e0:	079a      	lsls	r2, r3, #30
 800b8e2:	d4de      	bmi.n	800b8a2 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800b8e4:	4620      	mov	r0, r4
 800b8e6:	f7fe f969 	bl	8009bbc <vPortFree>
 800b8ea:	e769      	b.n	800b7c0 <prvTimerTask+0x94>
 800b8ec:	24007328 	.word	0x24007328
 800b8f0:	2400744c 	.word	0x2400744c
 800b8f4:	2400732c 	.word	0x2400732c

0800b8f8 <USBH_AUDIO_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	4770      	bx	lr

0800b8fc <USBH_AUDIO_FindLinkedUnit>:
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800b8fc:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800b900:	2200      	movs	r2, #0
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800b902:	69db      	ldr	r3, [r3, #28]
{
 800b904:	b570      	push	{r4, r5, r6, lr}
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800b906:	f8b3 50ee 	ldrh.w	r5, [r3, #238]	; 0xee
 800b90a:	b2d0      	uxtb	r0, r2
 800b90c:	42a8      	cmp	r0, r5
 800b90e:	d313      	bcc.n	800b938 <USBH_AUDIO_FindLinkedUnit+0x3c>
      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800b910:	f8b3 50f2 	ldrh.w	r5, [r3, #242]	; 0xf2
 800b914:	2200      	movs	r2, #0
 800b916:	b2d0      	uxtb	r0, r2
 800b918:	42a8      	cmp	r0, r5
 800b91a:	d31b      	bcc.n	800b954 <USBH_AUDIO_FindLinkedUnit+0x58>
      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800b91c:	f8b3 50f0 	ldrh.w	r5, [r3, #240]	; 0xf0
 800b920:	2200      	movs	r2, #0
 800b922:	b2d0      	uxtb	r0, r2
 800b924:	42a8      	cmp	r0, r5
 800b926:	d327      	bcc.n	800b978 <USBH_AUDIO_FindLinkedUnit+0x7c>
      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800b928:	f8b3 50ec 	ldrh.w	r5, [r3, #236]	; 0xec
 800b92c:	2200      	movs	r2, #0
 800b92e:	b2d0      	uxtb	r0, r2
 800b930:	42a8      	cmp	r0, r5
 800b932:	d32f      	bcc.n	800b994 <USBH_AUDIO_FindLinkedUnit+0x98>
      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 800b934:	2000      	movs	r0, #0
 800b936:	e00c      	b.n	800b952 <USBH_AUDIO_FindLinkedUnit+0x56>
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 800b938:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800b93c:	3201      	adds	r2, #1
 800b93e:	f8d4 4090 	ldr.w	r4, [r4, #144]	; 0x90
 800b942:	7926      	ldrb	r6, [r4, #4]
 800b944:	428e      	cmp	r6, r1
 800b946:	d1e0      	bne.n	800b90a <USBH_AUDIO_FindLinkedUnit+0xe>
      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 800b948:	78e3      	ldrb	r3, [r4, #3]
 800b94a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800b94e:	f440 60c0 	orr.w	r0, r0, #1536	; 0x600
}
 800b952:	bd70      	pop	{r4, r5, r6, pc}
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800b954:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800b958:	f8d4 40a0 	ldr.w	r4, [r4, #160]	; 0xa0
 800b95c:	7966      	ldrb	r6, [r4, #5]
 800b95e:	428e      	cmp	r6, r1
 800b960:	d105      	bne.n	800b96e <USBH_AUDIO_FindLinkedUnit+0x72>
      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 800b962:	78e3      	ldrb	r3, [r4, #3]
 800b964:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800b968:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
 800b96c:	e7f1      	b.n	800b952 <USBH_AUDIO_FindLinkedUnit+0x56>
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800b96e:	79a6      	ldrb	r6, [r4, #6]
 800b970:	3201      	adds	r2, #1
 800b972:	428e      	cmp	r6, r1
 800b974:	d1cf      	bne.n	800b916 <USBH_AUDIO_FindLinkedUnit+0x1a>
 800b976:	e7f4      	b.n	800b962 <USBH_AUDIO_FindLinkedUnit+0x66>
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 800b978:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800b97c:	3201      	adds	r2, #1
 800b97e:	f8d4 40b0 	ldr.w	r4, [r4, #176]	; 0xb0
 800b982:	7966      	ldrb	r6, [r4, #5]
 800b984:	428e      	cmp	r6, r1
 800b986:	d1cc      	bne.n	800b922 <USBH_AUDIO_FindLinkedUnit+0x26>
      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 800b988:	78e3      	ldrb	r3, [r4, #3]
 800b98a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800b98e:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
 800b992:	e7de      	b.n	800b952 <USBH_AUDIO_FindLinkedUnit+0x56>
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 800b994:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800b998:	3201      	adds	r2, #1
 800b99a:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 800b99e:	79e6      	ldrb	r6, [r4, #7]
 800b9a0:	428e      	cmp	r6, r1
 800b9a2:	d1c4      	bne.n	800b92e <USBH_AUDIO_FindLinkedUnit+0x32>
      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 800b9a4:	78e3      	ldrb	r3, [r4, #3]
 800b9a6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800b9aa:	f440 7040 	orr.w	r0, r0, #768	; 0x300
 800b9ae:	e7d0      	b.n	800b952 <USBH_AUDIO_FindLinkedUnit+0x56>

0800b9b0 <USBH_AUDIO_InterfaceDeInit>:
{
 800b9b0:	b538      	push	{r3, r4, r5, lr}
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800b9b2:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800b9b6:	4604      	mov	r4, r0
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800b9b8:	69dd      	ldr	r5, [r3, #28]
  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 800b9ba:	f895 1143 	ldrb.w	r1, [r5, #323]	; 0x143
 800b9be:	b149      	cbz	r1, 800b9d4 <USBH_AUDIO_InterfaceDeInit+0x24>
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 800b9c0:	f003 ffa3 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 800b9c4:	f895 1143 	ldrb.w	r1, [r5, #323]	; 0x143
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f003 ffbb 	bl	800f944 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f885 3143 	strb.w	r3, [r5, #323]	; 0x143
  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 800b9d4:	f895 10fb 	ldrb.w	r1, [r5, #251]	; 0xfb
 800b9d8:	b151      	cbz	r1, 800b9f0 <USBH_AUDIO_InterfaceDeInit+0x40>
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800b9da:	4620      	mov	r0, r4
 800b9dc:	f003 ff95 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 800b9e0:	f895 10fb 	ldrb.w	r1, [r5, #251]	; 0xfb
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f003 ffad 	bl	800f944 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	f885 30fb 	strb.w	r3, [r5, #251]	; 0xfb
  if (AUDIO_Handle->control.Pipe != 0x00U)
 800b9f0:	f895 118a 	ldrb.w	r1, [r5, #394]	; 0x18a
 800b9f4:	b151      	cbz	r1, 800ba0c <USBH_AUDIO_InterfaceDeInit+0x5c>
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f003 ff87 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 800b9fc:	f895 118a 	ldrb.w	r1, [r5, #394]	; 0x18a
 800ba00:	4620      	mov	r0, r4
 800ba02:	f003 ff9f 	bl	800f944 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 800ba06:	2300      	movs	r3, #0
 800ba08:	f885 318a 	strb.w	r3, [r5, #394]	; 0x18a
  if ((phost->pActiveClass->pData) != 0U)
 800ba0c:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800ba10:	69d8      	ldr	r0, [r3, #28]
 800ba12:	b128      	cbz	r0, 800ba20 <USBH_AUDIO_InterfaceDeInit+0x70>
    USBH_free(phost->pActiveClass->pData);
 800ba14:	f012 f968 	bl	801dce8 <free>
    phost->pActiveClass->pData = 0U;
 800ba18:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	61da      	str	r2, [r3, #28]
}
 800ba20:	2000      	movs	r0, #0
 800ba22:	bd38      	pop	{r3, r4, r5, pc}

0800ba24 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 800ba24:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_BUSY;
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800ba26:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c

  switch (attrib)
 800ba2a:	2901      	cmp	r1, #1
{
 800ba2c:	460d      	mov	r5, r1
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800ba2e:	69dc      	ldr	r4, [r3, #28]
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800ba30:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
  switch (attrib)
 800ba34:	d043      	beq.n	800babe <USBH_AUDIO_SetControlAttribute+0x9a>
 800ba36:	2902      	cmp	r1, #2
 800ba38:	d047      	beq.n	800baca <USBH_AUDIO_SetControlAttribute+0xa6>
 800ba3a:	2502      	movs	r5, #2
    default :
      status = USBH_FAIL;
      break;
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 800ba3c:	e9d4 324c 	ldrd	r3, r2, [r4, #304]	; 0x130
 800ba40:	429a      	cmp	r2, r3
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 800ba42:	bf88      	it	hi
 800ba44:	f8c4 3134 	strhi.w	r3, [r4, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 800ba48:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
 800ba4c:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 800ba50:	429a      	cmp	r2, r3
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
  }

  if (AUDIO_SetVolume(phost,
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800ba52:	f894 21a1 	ldrb.w	r2, [r4, #417]	; 0x1a1
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 800ba56:	bf38      	it	cc
 800ba58:	f8c4 3134 	strcc.w	r3, [r4, #308]	; 0x134
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800ba5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  if (AUDIO_SetVolume(phost,
 800ba60:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
 800ba64:	f8d4 1134 	ldr.w	r1, [r4, #308]	; 0x134
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800ba68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
  if (AUDIO_SetVolume(phost,
 800ba6c:	f8a4 1190 	strh.w	r1, [r4, #400]	; 0x190
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ba70:	f240 1121 	movw	r1, #289	; 0x121
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800ba74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800ba78:	78db      	ldrb	r3, [r3, #3]
  phost->Control.setup.b.wValue.w = wValue;
 800ba7a:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wLength.w = wLength;
 800ba7c:	2202      	movs	r2, #2
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800ba7e:	021b      	lsls	r3, r3, #8
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800ba80:	8201      	strh	r1, [r0, #16]
  phost->Control.setup.b.wLength.w = wLength;
 800ba82:	82c2      	strh	r2, [r0, #22]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800ba84:	f504 71c8 	add.w	r1, r4, #400	; 0x190
  phost->Control.setup.b.wIndex.w = wIndex;
 800ba88:	8283      	strh	r3, [r0, #20]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800ba8a:	f001 fc11 	bl	800d2b0 <USBH_CtlReq>
  if (AUDIO_SetVolume(phost,
 800ba8e:	2801      	cmp	r0, #1
 800ba90:	d013      	beq.n	800baba <USBH_AUDIO_SetControlAttribute+0x96>
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
  {

    if (AUDIO_Handle->temp_channels == 1U)
 800ba92:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
 800ba96:	2b01      	cmp	r3, #1
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800ba98:	bf09      	itett	eq
 800ba9a:	f894 3107 	ldrbeq.w	r3, [r4, #263]	; 0x107
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
      status = USBH_OK;
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800ba9e:	f103 33ff 	addne.w	r3, r3, #4294967295
      status = USBH_OK;
 800baa2:	2500      	moveq	r5, #0
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800baa4:	f884 31a0 	strbeq.w	r3, [r4, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800baa8:	bf0a      	itet	eq
 800baaa:	f894 3109 	ldrbeq.w	r3, [r4, #265]	; 0x109
      AUDIO_Handle->temp_channels--;
 800baae:	f884 31a1 	strbne.w	r3, [r4, #417]	; 0x1a1
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800bab2:	f884 31a1 	strbeq.w	r3, [r4, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800bab6:	2306      	movs	r3, #6
 800bab8:	7063      	strb	r3, [r4, #1]
  }


  return status;
}
 800baba:	4628      	mov	r0, r5
 800babc:	bd38      	pop	{r3, r4, r5, pc}
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800babe:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
 800bac2:	4413      	add	r3, r2
 800bac4:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
      break;
 800bac8:	e7b8      	b.n	800ba3c <USBH_AUDIO_SetControlAttribute+0x18>
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 800baca:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
  USBH_StatusTypeDef status = USBH_BUSY;
 800bace:	2501      	movs	r5, #1
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 800bad0:	1a9b      	subs	r3, r3, r2
 800bad2:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
      break;
 800bad6:	e7b1      	b.n	800ba3c <USBH_AUDIO_SetControlAttribute+0x18>

0800bad8 <USBH_AUDIO_ClassRequest>:
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bad8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800badc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bade:	69dc      	ldr	r4, [r3, #28]
  switch (AUDIO_Handle->req_state)
 800bae0:	7823      	ldrb	r3, [r4, #0]
 800bae2:	3b01      	subs	r3, #1
 800bae4:	2b06      	cmp	r3, #6
 800bae6:	d817      	bhi.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
 800bae8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800baec:	01310007 	.word	0x01310007
 800baf0:	00280007 	.word	0x00280007
 800baf4:	011f010e 	.word	0x011f010e
 800baf8:	004e      	.short	0x004e
      if (AUDIO_Handle->microphone.supported == 1U)
 800bafa:	f894 5142 	ldrb.w	r5, [r4, #322]	; 0x142
 800bafe:	2d01      	cmp	r5, #1
 800bb00:	d119      	bne.n	800bb36 <USBH_AUDIO_ClassRequest+0x5e>
        req_status = USBH_SetInterface(phost,
 800bb02:	2200      	movs	r2, #0
 800bb04:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 800bb08:	f001 fec2 	bl	800d890 <USBH_SetInterface>
        if (req_status == USBH_OK)
 800bb0c:	b910      	cbnz	r0, 800bb14 <USBH_AUDIO_ClassRequest+0x3c>
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800bb0e:	2304      	movs	r3, #4
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800bb10:	7023      	strb	r3, [r4, #0]
 800bb12:	e00d      	b.n	800bb30 <USBH_AUDIO_ClassRequest+0x58>
        else if (req_status == USBH_NOT_SUPPORTED)
 800bb14:	2803      	cmp	r0, #3
 800bb16:	d001      	beq.n	800bb1c <USBH_AUDIO_ClassRequest+0x44>
  switch (AUDIO_Handle->cs_req_state)
 800bb18:	2501      	movs	r5, #1
 800bb1a:	e009      	b.n	800bb30 <USBH_AUDIO_ClassRequest+0x58>
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 800bb1c:	4896      	ldr	r0, [pc, #600]	; (800bd78 <USBH_AUDIO_ClassRequest+0x2a0>)
          status = USBH_FAIL;
 800bb1e:	2502      	movs	r5, #2
          USBH_ErrLog("Control error: AUDIO: Device Set interface request failed");
 800bb20:	f012 fcce 	bl	801e4c0 <iprintf>
 800bb24:	4895      	ldr	r0, [pc, #596]	; (800bd7c <USBH_AUDIO_ClassRequest+0x2a4>)
 800bb26:	f012 fccb 	bl	801e4c0 <iprintf>
 800bb2a:	4895      	ldr	r0, [pc, #596]	; (800bd80 <USBH_AUDIO_ClassRequest+0x2a8>)
 800bb2c:	f012 fd4e 	bl	801e5cc <puts>
}
 800bb30:	4628      	mov	r0, r5
 800bb32:	b003      	add	sp, #12
 800bb34:	bd30      	pop	{r4, r5, pc}
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800bb36:	2304      	movs	r3, #4
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800bb38:	7023      	strb	r3, [r4, #0]
 800bb3a:	e019      	b.n	800bb70 <USBH_AUDIO_ClassRequest+0x98>
      if (AUDIO_Handle->headphone.supported == 1U)
 800bb3c:	f894 50fa 	ldrb.w	r5, [r4, #250]	; 0xfa
 800bb40:	2d01      	cmp	r5, #1
 800bb42:	d112      	bne.n	800bb6a <USBH_AUDIO_ClassRequest+0x92>
        req_status = USBH_SetInterface(phost,
 800bb44:	2200      	movs	r2, #0
 800bb46:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
 800bb4a:	f001 fea1 	bl	800d890 <USBH_SetInterface>
        if (req_status == USBH_OK)
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1e0      	bne.n	800bb14 <USBH_AUDIO_ClassRequest+0x3c>
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800bb52:	f240 6307 	movw	r3, #1543	; 0x607
 800bb56:	8023      	strh	r3, [r4, #0]
          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800bb58:	f894 3107 	ldrb.w	r3, [r4, #263]	; 0x107
 800bb5c:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800bb60:	f894 3109 	ldrb.w	r3, [r4, #265]	; 0x109
 800bb64:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
 800bb68:	e7e2      	b.n	800bb30 <USBH_AUDIO_ClassRequest+0x58>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 800bb6a:	f240 6307 	movw	r3, #1543	; 0x607
 800bb6e:	8023      	strh	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800bb70:	2302      	movs	r3, #2
 800bb72:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bb76:	2300      	movs	r3, #0
 800bb78:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
 800bb7c:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800bb80:	461a      	mov	r2, r3
 800bb82:	f7fd fee8 	bl	8009956 <osMessageQueuePut>
 800bb86:	e7c7      	b.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
  switch (AUDIO_Handle->cs_req_state)
 800bb88:	7861      	ldrb	r1, [r4, #1]
  cs_status = USBH_AUDIO_CSRequest(phost,
 800bb8a:	f894 21a0 	ldrb.w	r2, [r4, #416]	; 0x1a0
  switch (AUDIO_Handle->cs_req_state)
 800bb8e:	3904      	subs	r1, #4
  cs_status = USBH_AUDIO_CSRequest(phost,
 800bb90:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
  switch (AUDIO_Handle->cs_req_state)
 800bb94:	2904      	cmp	r1, #4
 800bb96:	d8bf      	bhi.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
 800bb98:	e8df f001 	tbb	[pc, r1]
 800bb9c:	70034524 	.word	0x70034524
 800bba0:	92          	.byte	0x92
 800bba1:	00          	.byte	0x00
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bba2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800bba6:	f248 11a1 	movw	r1, #33185	; 0x81a1
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800bbaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bbae:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800bbb2:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800bbb4:	8201      	strh	r1, [r0, #16]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bbb6:	f504 71c8 	add.w	r1, r4, #400	; 0x190
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800bbba:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.wValue.w = wValue;
 800bbbc:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800bbbe:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	82c2      	strh	r2, [r0, #22]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bbc4:	f001 fb74 	bl	800d2b0 <USBH_CtlReq>
      if (req_status != USBH_BUSY)
 800bbc8:	2801      	cmp	r0, #1
 800bbca:	d0a5      	beq.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 800bbcc:	2304      	movs	r3, #4
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800bbce:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 800bbd2:	7063      	strb	r3, [r4, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800bbd4:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
 800bbd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 800bbdc:	b29b      	uxth	r3, r3
 800bbde:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
  if (cs_status != USBH_BUSY)
 800bbe2:	e799      	b.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bbe4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800bbe8:	f248 21a1 	movw	r1, #33441	; 0x82a1
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800bbec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bbf0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800bbf4:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800bbf6:	8201      	strh	r1, [r0, #16]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bbf8:	f504 71c8 	add.w	r1, r4, #400	; 0x190
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800bbfc:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.wValue.w = wValue;
 800bbfe:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800bc00:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800bc02:	2202      	movs	r2, #2
 800bc04:	82c2      	strh	r2, [r0, #22]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bc06:	f001 fb53 	bl	800d2b0 <USBH_CtlReq>
      if (req_status != USBH_BUSY)
 800bc0a:	2801      	cmp	r0, #1
 800bc0c:	d084      	beq.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 800bc0e:	2305      	movs	r3, #5
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800bc10:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 800bc14:	7063      	strb	r3, [r4, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800bc16:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
 800bc1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
  if (cs_status != USBH_BUSY)
 800bc24:	e778      	b.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bc26:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800bc2a:	f248 31a1 	movw	r1, #33697	; 0x83a1
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800bc2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bc32:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800bc36:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800bc38:	8201      	strh	r1, [r0, #16]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bc3a:	f504 71c8 	add.w	r1, r4, #400	; 0x190
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800bc3e:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.wValue.w = wValue;
 800bc40:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800bc42:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800bc44:	2202      	movs	r2, #2
 800bc46:	82c2      	strh	r2, [r0, #22]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bc48:	f001 fb32 	bl	800d2b0 <USBH_CtlReq>
      if (req_status != USBH_BUSY)
 800bc4c:	2801      	cmp	r0, #1
 800bc4e:	f43f af63 	beq.w	800bb18 <USBH_AUDIO_ClassRequest+0x40>
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 800bc52:	2307      	movs	r3, #7
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800bc54:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 800bc58:	7063      	strb	r3, [r4, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 800bc5a:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
 800bc5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 800bc62:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 800bc66:	b29b      	uxth	r3, r3
        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 800bc68:	4293      	cmp	r3, r2
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 800bc6a:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 800bc6e:	f4bf af53 	bcs.w	800bb18 <USBH_AUDIO_ClassRequest+0x40>
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 800bc72:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800bc76:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
  if (cs_status != USBH_BUSY)
 800bc7a:	e74d      	b.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bc7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800bc80:	f248 41a1 	movw	r1, #33953	; 0x84a1
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800bc84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800bc88:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800bc8c:	78d2      	ldrb	r2, [r2, #3]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 800bc8e:	8201      	strh	r1, [r0, #16]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bc90:	f504 71c8 	add.w	r1, r4, #400	; 0x190
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 800bc94:	0212      	lsls	r2, r2, #8
  phost->Control.setup.b.wValue.w = wValue;
 800bc96:	8243      	strh	r3, [r0, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800bc98:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800bc9a:	2202      	movs	r2, #2
 800bc9c:	82c2      	strh	r2, [r0, #22]
  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800bc9e:	f001 fb07 	bl	800d2b0 <USBH_CtlReq>
      if (req_status != USBH_BUSY)
 800bca2:	2801      	cmp	r0, #1
 800bca4:	f43f af38 	beq.w	800bb18 <USBH_AUDIO_ClassRequest+0x40>
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 800bca8:	2308      	movs	r3, #8
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 800bcaa:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 800bcae:	7063      	strb	r3, [r4, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 800bcb0:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
 800bcb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 800bcb8:	b29b      	uxth	r3, r3
 800bcba:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
  if (cs_status != USBH_BUSY)
 800bcbe:	e72b      	b.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
    if (AUDIO_Handle->temp_channels == 1U)
 800bcc0:	2b01      	cmp	r3, #1
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bcc2:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800bcc6:	bf0b      	itete	eq
 800bcc8:	f894 3107 	ldrbeq.w	r3, [r4, #263]	; 0x107
      AUDIO_Handle->temp_channels--;
 800bccc:	f103 33ff 	addne.w	r3, r3, #4294967295
      AUDIO_Handle->temp_channels = 0U;
 800bcd0:	2500      	moveq	r5, #0
  USBH_StatusTypeDef status = USBH_BUSY;
 800bcd2:	2501      	movne	r5, #1
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800bcd4:	bf0c      	ite	eq
 800bcd6:	f884 31a0 	strbeq.w	r3, [r4, #416]	; 0x1a0
      AUDIO_Handle->temp_channels--;
 800bcda:	f884 31a1 	strbne.w	r3, [r4, #417]	; 0x1a1
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800bcde:	f04f 0306 	mov.w	r3, #6
      AUDIO_Handle->temp_channels = 0U;
 800bce2:	bf08      	it	eq
 800bce4:	f884 51a1 	strbeq.w	r5, [r4, #417]	; 0x1a1
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800bce8:	7063      	strb	r3, [r4, #1]
    phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800bcea:	2302      	movs	r3, #2
 800bcec:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f7fd fe2d 	bl	8009956 <osMessageQueuePut>
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 800bcfc:	2d00      	cmp	r5, #0
 800bcfe:	f47f af0b 	bne.w	800bb18 <USBH_AUDIO_ClassRequest+0x40>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 800bd02:	2305      	movs	r3, #5
 800bd04:	7023      	strb	r3, [r4, #0]
 800bd06:	e707      	b.n	800bb18 <USBH_AUDIO_ClassRequest+0x40>
      if (AUDIO_Handle->microphone.supported == 1U)
 800bd08:	f894 5142 	ldrb.w	r5, [r4, #322]	; 0x142
 800bd0c:	2d01      	cmp	r5, #1
 800bd0e:	d10a      	bne.n	800bd26 <USBH_AUDIO_ClassRequest+0x24e>
        req_status = USBH_SetInterface(phost,
 800bd10:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
 800bd14:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 800bd18:	f001 fdba 	bl	800d890 <USBH_SetInterface>
        if (req_status == USBH_OK)
 800bd1c:	2800      	cmp	r0, #0
 800bd1e:	f47f aef9 	bne.w	800bb14 <USBH_AUDIO_ClassRequest+0x3c>
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800bd22:	2306      	movs	r3, #6
 800bd24:	e6f4      	b.n	800bb10 <USBH_AUDIO_ClassRequest+0x38>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 800bd26:	2306      	movs	r3, #6
 800bd28:	e706      	b.n	800bb38 <USBH_AUDIO_ClassRequest+0x60>
      if (AUDIO_Handle->headphone.supported == 1U)
 800bd2a:	f894 50fa 	ldrb.w	r5, [r4, #250]	; 0xfa
 800bd2e:	2d01      	cmp	r5, #1
 800bd30:	d10a      	bne.n	800bd48 <USBH_AUDIO_ClassRequest+0x270>
        req_status = USBH_SetInterface(phost,
 800bd32:	f894 20f9 	ldrb.w	r2, [r4, #249]	; 0xf9
 800bd36:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
 800bd3a:	f001 fda9 	bl	800d890 <USBH_SetInterface>
        if (req_status == USBH_OK)
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f47f aee8 	bne.w	800bb14 <USBH_AUDIO_ClassRequest+0x3c>
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800bd44:	2302      	movs	r3, #2
 800bd46:	e6e3      	b.n	800bb10 <USBH_AUDIO_ClassRequest+0x38>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800bd48:	2302      	movs	r3, #2
 800bd4a:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800bd4c:	e711      	b.n	800bb72 <USBH_AUDIO_ClassRequest+0x9a>
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 800bd4e:	2301      	movs	r3, #1
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bd50:	2102      	movs	r1, #2
 800bd52:	9001      	str	r0, [sp, #4]
      status  = USBH_OK;
 800bd54:	2500      	movs	r5, #0
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 800bd56:	70a3      	strb	r3, [r4, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800bd58:	f8d0 35a4 	ldr.w	r3, [r0, #1444]	; 0x5a4
 800bd5c:	4798      	blx	r3
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bd5e:	9801      	ldr	r0, [sp, #4]
 800bd60:	2304      	movs	r3, #4
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd62:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bd66:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800bd70:	461a      	mov	r2, r3
 800bd72:	f7fd fdf0 	bl	8009956 <osMessageQueuePut>
      break;
 800bd76:	e6db      	b.n	800bb30 <USBH_AUDIO_ClassRequest+0x58>
 800bd78:	0801fb84 	.word	0x0801fb84
 800bd7c:	0801fb8c 	.word	0x0801fb8c
 800bd80:	0801fbc6 	.word	0x0801fbc6

0800bd84 <USBH_AUDIO_InterfaceInit>:
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 800bd84:	2201      	movs	r2, #1
 800bd86:	2300      	movs	r3, #0
{
 800bd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 800bd8c:	4611      	mov	r1, r2
{
 800bd8e:	b087      	sub	sp, #28
 800bd90:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 800bd92:	f000 fe99 	bl	800cac8 <USBH_FindInterface>
  if (interface == 0xFFU) /* Not Valid Interface */
 800bd96:	28ff      	cmp	r0, #255	; 0xff
 800bd98:	d111      	bne.n	800bdbe <USBH_AUDIO_InterfaceInit+0x3a>
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800bd9a:	48be      	ldr	r0, [pc, #760]	; (800c094 <USBH_AUDIO_InterfaceInit+0x310>)
 800bd9c:	f012 fb90 	bl	801e4c0 <iprintf>
 800bda0:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800bda4:	48bc      	ldr	r0, [pc, #752]	; (800c098 <USBH_AUDIO_InterfaceInit+0x314>)
 800bda6:	6819      	ldr	r1, [r3, #0]
 800bda8:	f012 fb8a 	bl	801e4c0 <iprintf>
    return USBH_FAIL;
 800bdac:	f04f 0802 	mov.w	r8, #2
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
 800bdb0:	48ba      	ldr	r0, [pc, #744]	; (800c09c <USBH_AUDIO_InterfaceInit+0x318>)
 800bdb2:	f012 fc0b 	bl	801e5cc <puts>
}
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	b007      	add	sp, #28
 800bdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 800bdbe:	f8d5 654c 	ldr.w	r6, [r5, #1356]	; 0x54c
 800bdc2:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 800bdc6:	f011 ff87 	bl	801dcd8 <malloc>
 800bdca:	4604      	mov	r4, r0
 800bdcc:	61f0      	str	r0, [r6, #28]
  if (AUDIO_Handle == NULL)
 800bdce:	b930      	cbnz	r0, 800bdde <USBH_AUDIO_InterfaceInit+0x5a>
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
 800bdd0:	48b0      	ldr	r0, [pc, #704]	; (800c094 <USBH_AUDIO_InterfaceInit+0x310>)
 800bdd2:	f012 fb75 	bl	801e4c0 <iprintf>
 800bdd6:	48b2      	ldr	r0, [pc, #712]	; (800c0a0 <USBH_AUDIO_InterfaceInit+0x31c>)
 800bdd8:	f012 fb72 	bl	801e4c0 <iprintf>
 800bddc:	e7e6      	b.n	800bdac <USBH_AUDIO_InterfaceInit+0x28>
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 800bdde:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800bde2:	2100      	movs	r1, #0
 800bde4:	f011 ff96 	bl	801dd14 <memset>
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bde8:	462f      	mov	r7, r5
 800bdea:	69f6      	ldr	r6, [r6, #28]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800bdec:	f505 7cfa 	add.w	ip, r5, #500	; 0x1f4
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bdf0:	462b      	mov	r3, r5
  alt_settings = 0U;
 800bdf2:	2200      	movs	r2, #0
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800bdf4:	f04f 080a 	mov.w	r8, #10
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800bdf8:	f893 e347 	ldrb.w	lr, [r3, #839]	; 0x347
 800bdfc:	f1be 0f01 	cmp.w	lr, #1
 800be00:	d123      	bne.n	800be4a <USBH_AUDIO_InterfaceInit+0xc6>
 800be02:	f893 1348 	ldrb.w	r1, [r3, #840]	; 0x348
 800be06:	2902      	cmp	r1, #2
 800be08:	d11f      	bne.n	800be4a <USBH_AUDIO_InterfaceInit+0xc6>
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 800be0a:	f993 134e 	ldrsb.w	r1, [r3, #846]	; 0x34e
 800be0e:	f893 934e 	ldrb.w	r9, [r3, #846]	; 0x34e
 800be12:	2900      	cmp	r1, #0
 800be14:	da19      	bge.n	800be4a <USBH_AUDIO_InterfaceInit+0xc6>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800be16:	f8b3 1350 	ldrh.w	r1, [r3, #848]	; 0x350
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 800be1a:	b1b1      	cbz	r1, 800be4a <USBH_AUDIO_InterfaceInit+0xc6>
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be1c:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800be20:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 800be24:	f880 9006 	strb.w	r9, [r0, #6]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be28:	8101      	strh	r1, [r0, #8]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800be2a:	f893 1344 	ldrb.w	r1, [r3, #836]	; 0x344
 800be2e:	72c1      	strb	r1, [r0, #11]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 800be30:	f893 1345 	ldrb.w	r1, [r3, #837]	; 0x345
 800be34:	7281      	strb	r1, [r0, #10]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800be36:	fb08 6102 	mla	r1, r8, r2, r6
        alt_settings++;
 800be3a:	3201      	adds	r2, #1
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800be3c:	f893 9352 	ldrb.w	r9, [r3, #850]	; 0x352
        alt_settings++;
 800be40:	b2d2      	uxtb	r2, r2
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800be42:	f8a1 900e 	strh.w	r9, [r1, #14]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 800be46:	f880 e00c 	strb.w	lr, [r0, #12]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800be4a:	3332      	adds	r3, #50	; 0x32
 800be4c:	4563      	cmp	r3, ip
 800be4e:	d1d3      	bne.n	800bdf8 <USBH_AUDIO_InterfaceInit+0x74>
    status = USBH_OK;
 800be50:	2a00      	cmp	r2, #0
 800be52:	462b      	mov	r3, r5
  alt_settings = 0U;
 800be54:	f04f 0200 	mov.w	r2, #0
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be58:	f04f 090a 	mov.w	r9, #10
    status = USBH_OK;
 800be5c:	bf0c      	ite	eq
 800be5e:	f04f 0802 	moveq.w	r8, #2
 800be62:	f04f 0800 	movne.w	r8, #0
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800be66:	f893 e347 	ldrb.w	lr, [r3, #839]	; 0x347
 800be6a:	f1be 0f01 	cmp.w	lr, #1
 800be6e:	d121      	bne.n	800beb4 <USBH_AUDIO_InterfaceInit+0x130>
 800be70:	f893 1348 	ldrb.w	r1, [r3, #840]	; 0x348
 800be74:	2902      	cmp	r1, #2
 800be76:	d11d      	bne.n	800beb4 <USBH_AUDIO_InterfaceInit+0x130>
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800be78:	f993 134e 	ldrsb.w	r1, [r3, #846]	; 0x34e
 800be7c:	f893 a34e 	ldrb.w	sl, [r3, #846]	; 0x34e
 800be80:	2900      	cmp	r1, #0
 800be82:	db17      	blt.n	800beb4 <USBH_AUDIO_InterfaceInit+0x130>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800be84:	f8b3 1350 	ldrh.w	r1, [r3, #848]	; 0x350
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800be88:	b1a1      	cbz	r1, 800beb4 <USBH_AUDIO_InterfaceInit+0x130>
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be8a:	fb09 6002 	mla	r0, r9, r2, r6
        alt_settings++;
 800be8e:	3201      	adds	r2, #1
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800be90:	f880 a038 	strb.w	sl, [r0, #56]	; 0x38
        alt_settings++;
 800be94:	b2d2      	uxtb	r2, r2
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800be96:	8741      	strh	r1, [r0, #58]	; 0x3a
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800be98:	f893 1344 	ldrb.w	r1, [r3, #836]	; 0x344
 800be9c:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 800bea0:	f893 1345 	ldrb.w	r1, [r3, #837]	; 0x345
 800bea4:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800bea8:	f893 1352 	ldrb.w	r1, [r3, #850]	; 0x352
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 800beac:	f880 e03e 	strb.w	lr, [r0, #62]	; 0x3e
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800beb0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800beb4:	3332      	adds	r3, #50	; 0x32
 800beb6:	4563      	cmp	r3, ip
 800beb8:	d1d5      	bne.n	800be66 <USBH_AUDIO_InterfaceInit+0xe2>
  if (alt_settings > 0U)
 800beba:	b97a      	cbnz	r2, 800bedc <USBH_AUDIO_InterfaceInit+0x158>
  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 800bebc:	f1b8 0f00 	cmp.w	r8, #0
 800bec0:	d00c      	beq.n	800bedc <USBH_AUDIO_InterfaceInit+0x158>
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
 800bec2:	4874      	ldr	r0, [pc, #464]	; (800c094 <USBH_AUDIO_InterfaceInit+0x310>)
 800bec4:	f012 fafc 	bl	801e4c0 <iprintf>
 800bec8:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800becc:	4875      	ldr	r0, [pc, #468]	; (800c0a4 <USBH_AUDIO_InterfaceInit+0x320>)
 800bece:	6819      	ldr	r1, [r3, #0]
 800bed0:	f012 faf6 	bl	801e4c0 <iprintf>
 800bed4:	4871      	ldr	r0, [pc, #452]	; (800c09c <USBH_AUDIO_InterfaceInit+0x318>)
 800bed6:	f012 fb79 	bl	801e5cc <puts>
    return USBH_FAIL;
 800beda:	e76c      	b.n	800bdb6 <USBH_AUDIO_InterfaceInit+0x32>
  alt_settings = 0U;
 800bedc:	2200      	movs	r2, #0
 800bede:	4623      	mov	r3, r4
 800bee0:	f104 0e32 	add.w	lr, r4, #50	; 0x32
 800bee4:	4610      	mov	r0, r2
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 800bee6:	f893 c03e 	ldrb.w	ip, [r3, #62]	; 0x3e
 800beea:	f1bc 0f01 	cmp.w	ip, #1
 800beee:	d117      	bne.n	800bf20 <USBH_AUDIO_InterfaceInit+0x19c>
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 800bef0:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800bef2:	4281      	cmp	r1, r0
 800bef4:	d914      	bls.n	800bf20 <USBH_AUDIO_InterfaceInit+0x19c>
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 800bef6:	f893 003d 	ldrb.w	r0, [r3, #61]	; 0x3d
 800befa:	f884 00f8 	strb.w	r0, [r4, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 800befe:	f893 003c 	ldrb.w	r0, [r3, #60]	; 0x3c
 800bf02:	f884 00f9 	strb.w	r0, [r4, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800bf06:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 800bf0a:	f8a4 10f6 	strh.w	r1, [r4, #246]	; 0xf6
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800bf0e:	f884 00f4 	strb.w	r0, [r4, #244]	; 0xf4
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800bf12:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
        AUDIO_Handle->headphone.supported = 1U;
 800bf16:	f884 c0fa 	strb.w	ip, [r4, #250]	; 0xfa
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800bf1a:	f884 00fc 	strb.w	r0, [r4, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 800bf1e:	4608      	mov	r0, r1
    if (AUDIO_Handle->stream_in[index].valid == 1U)
 800bf20:	f893 c00c 	ldrb.w	ip, [r3, #12]
 800bf24:	f1bc 0f01 	cmp.w	ip, #1
 800bf28:	d114      	bne.n	800bf54 <USBH_AUDIO_InterfaceInit+0x1d0>
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 800bf2a:	8919      	ldrh	r1, [r3, #8]
 800bf2c:	4291      	cmp	r1, r2
 800bf2e:	d911      	bls.n	800bf54 <USBH_AUDIO_InterfaceInit+0x1d0>
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 800bf30:	7ada      	ldrb	r2, [r3, #11]
 800bf32:	f884 2140 	strb.w	r2, [r4, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 800bf36:	7a9a      	ldrb	r2, [r3, #10]
 800bf38:	f884 2141 	strb.w	r2, [r4, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 800bf3c:	799a      	ldrb	r2, [r3, #6]
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 800bf3e:	f8a4 113e 	strh.w	r1, [r4, #318]	; 0x13e
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 800bf42:	f884 213c 	strb.w	r2, [r4, #316]	; 0x13c
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800bf46:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
        AUDIO_Handle->microphone.supported = 1U;
 800bf4a:	f884 c142 	strb.w	ip, [r4, #322]	; 0x142
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800bf4e:	f884 2144 	strb.w	r2, [r4, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 800bf52:	460a      	mov	r2, r1
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800bf54:	330a      	adds	r3, #10
 800bf56:	4573      	cmp	r3, lr
 800bf58:	d1c5      	bne.n	800bee6 <USBH_AUDIO_InterfaceInit+0x162>
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	23ff      	movs	r3, #255	; 0xff
 800bf5e:	4628      	mov	r0, r5
 800bf60:	4611      	mov	r1, r2
 800bf62:	f000 fdb1 	bl	800cac8 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 800bf66:	2809      	cmp	r0, #9
 800bf68:	d822      	bhi.n	800bfb0 <USBH_AUDIO_InterfaceInit+0x22c>
 800bf6a:	2300      	movs	r3, #0
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800bf6c:	f897 2347 	ldrb.w	r2, [r7, #839]	; 0x347
 800bf70:	2a03      	cmp	r2, #3
 800bf72:	d147      	bne.n	800c004 <USBH_AUDIO_InterfaceInit+0x280>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800bf74:	f8b7 2350 	ldrh.w	r2, [r7, #848]	; 0x350
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800bf78:	2a00      	cmp	r2, #0
 800bf7a:	d043      	beq.n	800c004 <USBH_AUDIO_InterfaceInit+0x280>
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800bf7c:	f997 034e 	ldrsb.w	r0, [r7, #846]	; 0x34e
 800bf80:	f897 134e 	ldrb.w	r1, [r7, #846]	; 0x34e
 800bf84:	2800      	cmp	r0, #0
 800bf86:	da3d      	bge.n	800c004 <USBH_AUDIO_InterfaceInit+0x280>
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800bf88:	f8a6 2186 	strh.w	r2, [r6, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800bf8c:	2232      	movs	r2, #50	; 0x32
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800bf8e:	f886 1184 	strb.w	r1, [r6, #388]	; 0x184
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800bf92:	fb02 5303 	mla	r3, r2, r3, r5
 800bf96:	f893 2344 	ldrb.w	r2, [r3, #836]	; 0x344
 800bf9a:	f886 2188 	strb.w	r2, [r6, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800bf9e:	f893 3352 	ldrb.w	r3, [r3, #850]	; 0x352
 800bfa2:	f886 318b 	strb.w	r3, [r6, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	f886 3189 	strb.w	r3, [r6, #393]	; 0x189
    AUDIO_Handle->control.supported = 1U;
 800bfac:	f884 3189 	strb.w	r3, [r4, #393]	; 0x189
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bfb0:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 800bfb4:	f105 071c 	add.w	r7, r5, #28
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
 800bfb8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 800c0a8 <USBH_AUDIO_InterfaceInit+0x324>
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bfbc:	69de      	ldr	r6, [r3, #28]
  ptr = USB_LEN_CFG_DESC;
 800bfbe:	2309      	movs	r3, #9
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
 800bfc0:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 800c09c <USBH_AUDIO_InterfaceInit+0x318>
  ptr = USB_LEN_CFG_DESC;
 800bfc4:	f8ad 3016 	strh.w	r3, [sp, #22]
  AUDIO_Handle->class_desc.ASNum = 0U;
 800bfc8:	2300      	movs	r3, #0
  uint8_t                       itf_number = 0U;
 800bfca:	4698      	mov	r8, r3
  uint8_t                       itf_index = 0U;
 800bfcc:	4699      	mov	r9, r3
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 800bfce:	e9c6 333a 	strd	r3, r3, [r6, #232]	; 0xe8
  while (ptr < phost->device.CfgDesc.wTotalLength)
 800bfd2:	f8b5 133a 	ldrh.w	r1, [r5, #826]	; 0x33a
 800bfd6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800bfda:	4291      	cmp	r1, r2
 800bfdc:	d817      	bhi.n	800c00e <USBH_AUDIO_InterfaceInit+0x28a>
  if (AUDIO_Handle->headphone.supported == 1U)
 800bfde:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	f040 8105 	bne.w	800c1f2 <USBH_AUDIO_InterfaceInit+0x46e>
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bfe8:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 800bfec:	f240 1701 	movw	r7, #257	; 0x101
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800bff0:	69de      	ldr	r6, [r3, #28]
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800bff2:	2300      	movs	r3, #0
 800bff4:	f8b6 10ea 	ldrh.w	r1, [r6, #234]	; 0xea
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	428a      	cmp	r2, r1
 800bffc:	f0c0 8098 	bcc.w	800c130 <USBH_AUDIO_InterfaceInit+0x3ac>
  uint8_t UnitID = 0U, Type, Index;
 800c000:	2100      	movs	r1, #0
 800c002:	e0a1      	b.n	800c148 <USBH_AUDIO_InterfaceInit+0x3c4>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800c004:	3301      	adds	r3, #1
 800c006:	3732      	adds	r7, #50	; 0x32
 800c008:	2b0a      	cmp	r3, #10
 800c00a:	d1af      	bne.n	800bf6c <USBH_AUDIO_InterfaceInit+0x1e8>
 800c00c:	e7d0      	b.n	800bfb0 <USBH_AUDIO_InterfaceInit+0x22c>
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c00e:	4638      	mov	r0, r7
 800c010:	f10d 0116 	add.w	r1, sp, #22
 800c014:	f001 f945 	bl	800d2a2 <USBH_GetNextDesc>
    switch (pdesc->bDescriptorType)
 800c018:	7842      	ldrb	r2, [r0, #1]
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c01a:	4607      	mov	r7, r0
    switch (pdesc->bDescriptorType)
 800c01c:	2a04      	cmp	r2, #4
 800c01e:	d015      	beq.n	800c04c <USBH_AUDIO_InterfaceInit+0x2c8>
 800c020:	2a24      	cmp	r2, #36	; 0x24
 800c022:	d1d6      	bne.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 800c024:	f895 233c 	ldrb.w	r2, [r5, #828]	; 0x33c
 800c028:	4542      	cmp	r2, r8
 800c02a:	d3d2      	bcc.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c02c:	f1b9 0f09 	cmp.w	r9, #9
 800c030:	d915      	bls.n	800c05e <USBH_AUDIO_InterfaceInit+0x2da>
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
 800c032:	4818      	ldr	r0, [pc, #96]	; (800c094 <USBH_AUDIO_InterfaceInit+0x310>)
 800c034:	f012 fa44 	bl	801e4c0 <iprintf>
 800c038:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
 800c03c:	4650      	mov	r0, sl
 800c03e:	6811      	ldr	r1, [r2, #0]
 800c040:	f012 fa3e 	bl	801e4c0 <iprintf>
 800c044:	4658      	mov	r0, fp
 800c046:	f012 fac1 	bl	801e5cc <puts>
            status = USBH_FAIL;
 800c04a:	e7c2      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 800c04c:	f890 8002 	ldrb.w	r8, [r0, #2]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 800c050:	78c2      	ldrb	r2, [r0, #3]
 800c052:	4628      	mov	r0, r5
 800c054:	4641      	mov	r1, r8
 800c056:	f000 fd53 	bl	800cb00 <USBH_FindInterfaceIndex>
 800c05a:	4681      	mov	r9, r0
        break;
 800c05c:	e7b9      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 800c05e:	2232      	movs	r2, #50	; 0x32
 800c060:	fb02 5209 	mla	r2, r2, r9, r5
 800c064:	f892 2348 	ldrb.w	r2, [r2, #840]	; 0x348
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800c068:	2a01      	cmp	r2, #1
 800c06a:	d147      	bne.n	800c0fc <USBH_AUDIO_InterfaceInit+0x378>
    switch (pdesc[2])
 800c06c:	7882      	ldrb	r2, [r0, #2]
 800c06e:	3a01      	subs	r2, #1
 800c070:	2a05      	cmp	r2, #5
 800c072:	d8ae      	bhi.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
 800c074:	e8df f002 	tbb	[pc, r2]
 800c078:	381a0503 	.word	0x381a0503
 800c07c:	242e      	.short	0x242e
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 800c07e:	66f0      	str	r0, [r6, #108]	; 0x6c
        break;
 800c080:	e7a7      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 800c082:	f8b6 20ea 	ldrh.w	r2, [r6, #234]	; 0xea
 800c086:	1c51      	adds	r1, r2, #1
 800c088:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c08c:	f8a6 10ea 	strh.w	r1, [r6, #234]	; 0xea
 800c090:	6710      	str	r0, [r2, #112]	; 0x70
        break;
 800c092:	e79e      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
 800c094:	0801fbc8 	.word	0x0801fbc8
 800c098:	0801fbd1 	.word	0x0801fbd1
 800c09c:	0801fbc6 	.word	0x0801fbc6
 800c0a0:	0801fbf9 	.word	0x0801fbf9
 800c0a4:	0801fc21 	.word	0x0801fc21
 800c0a8:	0801fc47 	.word	0x0801fc47
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 800c0ac:	f8b6 20ec 	ldrh.w	r2, [r6, #236]	; 0xec
 800c0b0:	1c51      	adds	r1, r2, #1
 800c0b2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c0b6:	f8a6 10ec 	strh.w	r1, [r6, #236]	; 0xec
 800c0ba:	f8c2 0080 	str.w	r0, [r2, #128]	; 0x80
        break;
 800c0be:	e788      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 800c0c0:	f8b6 20ee 	ldrh.w	r2, [r6, #238]	; 0xee
 800c0c4:	1c51      	adds	r1, r2, #1
 800c0c6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c0ca:	f8a6 10ee 	strh.w	r1, [r6, #238]	; 0xee
 800c0ce:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
        break;
 800c0d2:	e77e      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 800c0d4:	f8b6 20f0 	ldrh.w	r2, [r6, #240]	; 0xf0
 800c0d8:	1c51      	adds	r1, r2, #1
 800c0da:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c0de:	f8a6 10f0 	strh.w	r1, [r6, #240]	; 0xf0
 800c0e2:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
        break;
 800c0e6:	e774      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 800c0e8:	f8b6 20f2 	ldrh.w	r2, [r6, #242]	; 0xf2
 800c0ec:	1c51      	adds	r1, r2, #1
 800c0ee:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c0f2:	f8a6 10f2 	strh.w	r1, [r6, #242]	; 0xf2
 800c0f6:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
        break;
 800c0fa:	e76a      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 800c0fc:	2a02      	cmp	r2, #2
 800c0fe:	f47f af68 	bne.w	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
      switch (pdesc[2])
 800c102:	7882      	ldrb	r2, [r0, #2]
 800c104:	2a01      	cmp	r2, #1
 800c106:	d00c      	beq.n	800c122 <USBH_AUDIO_InterfaceInit+0x39e>
 800c108:	2a02      	cmp	r2, #2
 800c10a:	f47f af62 	bne.w	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 800c10e:	f8b6 20e8 	ldrh.w	r2, [r6, #232]	; 0xe8
 800c112:	1c51      	adds	r1, r2, #1
 800c114:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800c118:	f8a6 10e8 	strh.w	r1, [r6, #232]	; 0xe8
 800c11c:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
          break;
 800c120:	e757      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 800c122:	f8b6 20e8 	ldrh.w	r2, [r6, #232]	; 0xe8
 800c126:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800c12a:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
          break;
 800c12e:	e750      	b.n	800bfd2 <USBH_AUDIO_InterfaceInit+0x24e>
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 800c130:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c134:	3301      	adds	r3, #1
 800c136:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c138:	8890      	ldrh	r0, [r2, #4]
 800c13a:	42b8      	cmp	r0, r7
 800c13c:	f47f af5c 	bne.w	800bff8 <USBH_AUDIO_InterfaceInit+0x274>
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800c140:	79d3      	ldrb	r3, [r2, #7]
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800c142:	78d1      	ldrb	r1, [r2, #3]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800c144:	f886 3109 	strb.w	r3, [r6, #265]	; 0x109
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800c148:	f8b6 00e8 	ldrh.w	r0, [r6, #232]	; 0xe8
 800c14c:	2300      	movs	r3, #0
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	4282      	cmp	r2, r0
 800c152:	d209      	bcs.n	800c168 <USBH_AUDIO_InterfaceInit+0x3e4>
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 800c154:	eb06 07c2 	add.w	r7, r6, r2, lsl #3
 800c158:	3301      	adds	r3, #1
 800c15a:	f8d7 70c0 	ldr.w	r7, [r7, #192]	; 0xc0
 800c15e:	78ff      	ldrb	r7, [r7, #3]
 800c160:	428f      	cmp	r7, r1
 800c162:	d1f4      	bne.n	800c14e <USBH_AUDIO_InterfaceInit+0x3ca>
      AUDIO_Handle->headphone.asociated_as = Index;
 800c164:	f886 2104 	strb.w	r2, [r6, #260]	; 0x104
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 800c168:	f240 1703 	movw	r7, #259	; 0x103
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800c16c:	4628      	mov	r0, r5
 800c16e:	f7ff fbc5 	bl	800b8fc <USBH_AUDIO_FindLinkedUnit>
    if (value == 0U)
 800c172:	b308      	cbz	r0, 800c1b8 <USBH_AUDIO_InterfaceInit+0x434>
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800c174:	f3c0 2207 	ubfx	r2, r0, #8, #8
    Index = (uint8_t)(value & 0xFFU);
 800c178:	b2c3      	uxtb	r3, r0
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 800c17a:	f3c0 4107 	ubfx	r1, r0, #16, #8
    switch (Type)
 800c17e:	1ed0      	subs	r0, r2, #3
 800c180:	2803      	cmp	r0, #3
 800c182:	d805      	bhi.n	800c190 <USBH_AUDIO_InterfaceInit+0x40c>
 800c184:	e8df f000 	tbb	[pc, r0]
 800c188:	020a070d 	.word	0x020a070d
        AUDIO_Handle->headphone.asociated_feature = Index;
 800c18c:	f886 3107 	strb.w	r3, [r6, #263]	; 0x107
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 800c190:	2a03      	cmp	r2, #3
 800c192:	d1eb      	bne.n	800c16c <USBH_AUDIO_InterfaceInit+0x3e8>
 800c194:	e010      	b.n	800c1b8 <USBH_AUDIO_InterfaceInit+0x434>
        AUDIO_Handle->headphone.asociated_mixer = Index;
 800c196:	f886 3105 	strb.w	r3, [r6, #261]	; 0x105
        break;
 800c19a:	e7f9      	b.n	800c190 <USBH_AUDIO_InterfaceInit+0x40c>
        AUDIO_Handle->headphone.asociated_selector = Index;
 800c19c:	f886 3106 	strb.w	r3, [r6, #262]	; 0x106
        break;
 800c1a0:	e7f6      	b.n	800c190 <USBH_AUDIO_InterfaceInit+0x40c>
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 800c1a2:	2b03      	cmp	r3, #3
        AUDIO_Handle->headphone.asociated_terminal = Index;
 800c1a4:	f886 3108 	strb.w	r3, [r6, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 800c1a8:	d8f2      	bhi.n	800c190 <USBH_AUDIO_InterfaceInit+0x40c>
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 800c1aa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1b2:	889b      	ldrh	r3, [r3, #4]
 800c1b4:	42bb      	cmp	r3, r7
 800c1b6:	d0eb      	beq.n	800c190 <USBH_AUDIO_InterfaceInit+0x40c>
    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 800c1b8:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
 800c1bc:	4628      	mov	r0, r5
 800c1be:	f003 fba9 	bl	800f914 <USBH_AllocPipe>
    (void)USBH_OpenPipe(phost,
 800c1c2:	f8b4 30f6 	ldrh.w	r3, [r4, #246]	; 0xf6
    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 800c1c6:	4601      	mov	r1, r0
    (void)USBH_OpenPipe(phost,
 800c1c8:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
 800c1cc:	9302      	str	r3, [sp, #8]
 800c1ce:	2301      	movs	r3, #1
    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 800c1d0:	f884 00fb 	strb.w	r0, [r4, #251]	; 0xfb
    (void)USBH_OpenPipe(phost,
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	9301      	str	r3, [sp, #4]
 800c1d8:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800c1dc:	9300      	str	r3, [sp, #0]
 800c1de:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800c1e2:	f003 fb83 	bl	800f8ec <USBH_OpenPipe>
    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f894 10fb 	ldrb.w	r1, [r4, #251]	; 0xfb
 800c1ec:	4628      	mov	r0, r5
 800c1ee:	f7f6 f98f 	bl	8002510 <USBH_LL_SetToggle>
  if (AUDIO_Handle->microphone.supported == 1U)
 800c1f2:	f894 3142 	ldrb.w	r3, [r4, #322]	; 0x142
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d148      	bne.n	800c28c <USBH_AUDIO_InterfaceInit+0x508>
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c1fa:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 800c1fe:	f240 2701 	movw	r7, #513	; 0x201
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c202:	69de      	ldr	r6, [r3, #28]
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800c204:	2300      	movs	r3, #0
 800c206:	f8b6 10ea 	ldrh.w	r1, [r6, #234]	; 0xea
 800c20a:	b2da      	uxtb	r2, r3
 800c20c:	428a      	cmp	r2, r1
 800c20e:	d301      	bcc.n	800c214 <USBH_AUDIO_InterfaceInit+0x490>
  uint8_t UnitID = 0U, Type, Index;
 800c210:	2100      	movs	r1, #0
 800c212:	e00a      	b.n	800c22a <USBH_AUDIO_InterfaceInit+0x4a6>
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 800c214:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c218:	3301      	adds	r3, #1
 800c21a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c21c:	8890      	ldrh	r0, [r2, #4]
 800c21e:	42b8      	cmp	r0, r7
 800c220:	d1f3      	bne.n	800c20a <USBH_AUDIO_InterfaceInit+0x486>
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800c222:	79d3      	ldrb	r3, [r2, #7]
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800c224:	78d1      	ldrb	r1, [r2, #3]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800c226:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800c22a:	4628      	mov	r0, r5
 800c22c:	f7ff fb66 	bl	800b8fc <USBH_AUDIO_FindLinkedUnit>
    if (value == 0U)
 800c230:	b178      	cbz	r0, 800c252 <USBH_AUDIO_InterfaceInit+0x4ce>
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800c232:	f3c0 2207 	ubfx	r2, r0, #8, #8
    Index = (uint8_t)(value & 0xFFU);
 800c236:	b2c3      	uxtb	r3, r0
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 800c238:	f3c0 4107 	ubfx	r1, r0, #16, #8
    switch (Type)
 800c23c:	1ed0      	subs	r0, r2, #3
 800c23e:	2803      	cmp	r0, #3
 800c240:	d805      	bhi.n	800c24e <USBH_AUDIO_InterfaceInit+0x4ca>
 800c242:	e8df f000 	tbb	[pc, r0]
 800c246:	4a50      	.short	0x4a50
 800c248:	024d      	.short	0x024d
        AUDIO_Handle->microphone.asociated_feature = Index;
 800c24a:	f886 314f 	strb.w	r3, [r6, #335]	; 0x14f
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 800c24e:	2a03      	cmp	r2, #3
 800c250:	d1eb      	bne.n	800c22a <USBH_AUDIO_InterfaceInit+0x4a6>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 800c252:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 800c256:	4628      	mov	r0, r5
 800c258:	f003 fb5c 	bl	800f914 <USBH_AllocPipe>
    (void)USBH_OpenPipe(phost,
 800c25c:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 800c260:	4601      	mov	r1, r0
    (void)USBH_OpenPipe(phost,
 800c262:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
 800c266:	9302      	str	r3, [sp, #8]
 800c268:	2301      	movs	r3, #1
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 800c26a:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    (void)USBH_OpenPipe(phost,
 800c26e:	4628      	mov	r0, r5
 800c270:	9301      	str	r3, [sp, #4]
 800c272:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800c27c:	f003 fb36 	bl	800f8ec <USBH_OpenPipe>
    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 800c280:	2200      	movs	r2, #0
 800c282:	f894 1143 	ldrb.w	r1, [r4, #323]	; 0x143
 800c286:	4628      	mov	r0, r5
 800c288:	f7f6 f942 	bl	8002510 <USBH_LL_SetToggle>
  if (AUDIO_Handle->control.supported == 1U)
 800c28c:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
 800c290:	2b01      	cmp	r3, #1
 800c292:	d11c      	bne.n	800c2ce <USBH_AUDIO_InterfaceInit+0x54a>
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 800c294:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
 800c298:	4628      	mov	r0, r5
 800c29a:	f003 fb3b 	bl	800f914 <USBH_AllocPipe>
    (void)USBH_OpenPipe(phost,
 800c29e:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 800c2a2:	4601      	mov	r1, r0
    (void)USBH_OpenPipe(phost,
 800c2a4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
 800c2a8:	9302      	str	r3, [sp, #8]
 800c2aa:	2303      	movs	r3, #3
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 800c2ac:	f884 018a 	strb.w	r0, [r4, #394]	; 0x18a
    (void)USBH_OpenPipe(phost,
 800c2b0:	4628      	mov	r0, r5
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800c2be:	f003 fb15 	bl	800f8ec <USBH_OpenPipe>
    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f894 118a 	ldrb.w	r1, [r4, #394]	; 0x18a
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	f7f6 f921 	bl	8002510 <USBH_LL_SetToggle>
  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 800c2ce:	2301      	movs	r3, #1
  return USBH_OK;
 800c2d0:	f04f 0800 	mov.w	r8, #0
  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 800c2d4:	7023      	strb	r3, [r4, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800c2d6:	70e3      	strb	r3, [r4, #3]
  return USBH_OK;
 800c2d8:	e56d      	b.n	800bdb6 <USBH_AUDIO_InterfaceInit+0x32>
        AUDIO_Handle->microphone.asociated_mixer = Index;
 800c2da:	f886 314d 	strb.w	r3, [r6, #333]	; 0x14d
        break;
 800c2de:	e7b6      	b.n	800c24e <USBH_AUDIO_InterfaceInit+0x4ca>
        AUDIO_Handle->microphone.asociated_selector = Index;
 800c2e0:	f886 314e 	strb.w	r3, [r6, #334]	; 0x14e
        break;
 800c2e4:	e7b3      	b.n	800c24e <USBH_AUDIO_InterfaceInit+0x4ca>
        AUDIO_Handle->microphone.asociated_terminal = Index;
 800c2e6:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
        break;
 800c2ea:	e7b0      	b.n	800c24e <USBH_AUDIO_InterfaceInit+0x4ca>

0800c2ec <USBH_AUDIO_FrequencySet>:
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c2ec:	4770      	bx	lr

0800c2ee <USBH_AUDIO_BufferEmptyCallback>:
 800c2ee:	4770      	bx	lr

0800c2f0 <USBH_AUDIO_Process>:
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 800c2f0:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800c2f4:	b570      	push	{r4, r5, r6, lr}
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 800c2f6:	69dc      	ldr	r4, [r3, #28]
{
 800c2f8:	4605      	mov	r5, r0
  if (AUDIO_Handle->headphone.supported == 1U)
 800c2fa:	f894 30fa 	ldrb.w	r3, [r4, #250]	; 0xfa
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d133      	bne.n	800c36a <USBH_AUDIO_Process+0x7a>
  switch (AUDIO_Handle->play_state)
 800c302:	78a3      	ldrb	r3, [r4, #2]
 800c304:	3b01      	subs	r3, #1
 800c306:	2b04      	cmp	r3, #4
 800c308:	d82f      	bhi.n	800c36a <USBH_AUDIO_Process+0x7a>
 800c30a:	e8df f003 	tbb	[pc, r3]
 800c30e:	3003      	.short	0x3003
 800c310:	431b      	.short	0x431b
 800c312:	8a          	.byte	0x8a
 800c313:	00          	.byte	0x00
      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 800c314:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800c318:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c31c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c320:	79db      	ldrb	r3, [r3, #7]
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800c322:	2b00      	cmp	r3, #0
 800c324:	bf0c      	ite	eq
 800c326:	2303      	moveq	r3, #3
 800c328:	2302      	movne	r3, #2
 800c32a:	70a3      	strb	r3, [r4, #2]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c32c:	2302      	movs	r3, #2
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c32e:	f8c5 35b0 	str.w	r3, [r5, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c332:	2300      	movs	r3, #0
 800c334:	f505 61b6 	add.w	r1, r5, #1456	; 0x5b0
 800c338:	f8d5 05a8 	ldr.w	r0, [r5, #1448]	; 0x5a8
 800c33c:	461a      	mov	r2, r3
 800c33e:	f7fd fb0a 	bl	8009956 <osMessageQueuePut>
 800c342:	e012      	b.n	800c36a <USBH_AUDIO_Process+0x7a>
      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800c344:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800c348:	4a72      	ldr	r2, [pc, #456]	; (800c514 <USBH_AUDIO_Process+0x224>)
      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800c34a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800c34e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
  wIndex = Ep;
 800c352:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800c356:	6102      	str	r2, [r0, #16]
  phost->Control.setup.b.wLength.w = wLength;
 800c358:	2203      	movs	r2, #3
  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800c35a:	3108      	adds	r1, #8
  phost->Control.setup.b.wIndex.w = wIndex;
 800c35c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800c35e:	82c2      	strh	r2, [r0, #22]
  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800c360:	f000 ffa6 	bl	800d2b0 <USBH_CtlReq>
      if (status == USBH_OK)
 800c364:	b908      	cbnz	r0, 800c36a <USBH_AUDIO_Process+0x7a>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800c366:	2305      	movs	r3, #5
 800c368:	70a3      	strb	r3, [r4, #2]
}
 800c36a:	2001      	movs	r0, #1
 800c36c:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800c36e:	4a69      	ldr	r2, [pc, #420]	; (800c514 <USBH_AUDIO_Process+0x224>)
  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800c370:	f504 7186 	add.w	r1, r4, #268	; 0x10c
  wIndex = Ep;
 800c374:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 800c378:	6102      	str	r2, [r0, #16]
  phost->Control.setup.b.wLength.w = wLength;
 800c37a:	2203      	movs	r2, #3
  phost->Control.setup.b.wIndex.w = wIndex;
 800c37c:	8283      	strh	r3, [r0, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800c37e:	82c2      	strh	r2, [r0, #22]
  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 800c380:	f000 ff96 	bl	800d2b0 <USBH_CtlReq>
      if (status == USBH_OK)
 800c384:	2800      	cmp	r0, #0
 800c386:	d1f0      	bne.n	800c36a <USBH_AUDIO_Process+0x7a>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800c388:	2305      	movs	r3, #5
        USBH_AUDIO_FrequencySet(phost);
 800c38a:	4628      	mov	r0, r5
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800c38c:	70a3      	strb	r3, [r4, #2]
        USBH_AUDIO_FrequencySet(phost);
 800c38e:	f7ff ffad 	bl	800c2ec <USBH_AUDIO_FrequencySet>
 800c392:	e7ea      	b.n	800c36a <USBH_AUDIO_Process+0x7a>
  switch (AUDIO_Handle->processing_state)
 800c394:	7920      	ldrb	r0, [r4, #4]
 800c396:	2801      	cmp	r0, #1
 800c398:	d025      	beq.n	800c3e6 <USBH_AUDIO_Process+0xf6>
 800c39a:	2802      	cmp	r0, #2
 800c39c:	d1e5      	bne.n	800c36a <USBH_AUDIO_Process+0x7a>
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800c39e:	f894 10fb 	ldrb.w	r1, [r4, #251]	; 0xfb
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f7f6 f8a4 	bl	80024f0 <USBH_LL_GetURBState>
 800c3a8:	2801      	cmp	r0, #1
 800c3aa:	d1de      	bne.n	800c36a <USBH_AUDIO_Process+0x7a>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 800c3ac:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 800c3b0:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
 800c3b4:	1a9b      	subs	r3, r3, r2
 800c3b6:	f894 20fc 	ldrb.w	r2, [r4, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d3d5      	bcc.n	800c36a <USBH_AUDIO_Process+0x7a>
        AUDIO_Handle->headphone.timer = phost->Timer;
 800c3be:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
 800c3c2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        if (AUDIO_Handle->control.supported == 1U)
 800c3c6:	f894 3189 	ldrb.w	r3, [r4, #393]	; 0x189
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d16c      	bne.n	800c4a8 <USBH_AUDIO_Process+0x1b8>
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800c3ce:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800c3d2:	69de      	ldr	r6, [r3, #28]
  switch (AUDIO_Handle->control_state)
 800c3d4:	78f3      	ldrb	r3, [r6, #3]
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	2b04      	cmp	r3, #4
 800c3da:	d865      	bhi.n	800c4a8 <USBH_AUDIO_Process+0x1b8>
 800c3dc:	e8df f003 	tbb	[pc, r3]
 800c3e0:	85643f23 	.word	0x85643f23
 800c3e4:	8d          	.byte	0x8d
 800c3e5:	00          	.byte	0x00
      if ((phost->Timer & 1U) == 0U)
 800c3e6:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
 800c3ea:	07da      	lsls	r2, r3, #31
 800c3ec:	d417      	bmi.n	800c41e <USBH_AUDIO_Process+0x12e>
        AUDIO_Handle->headphone.timer = phost->Timer;
 800c3ee:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
        (void)USBH_IsocSendData(phost,
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
        AUDIO_Handle->headphone.timer = phost->Timer;
 800c3f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 800c3fc:	2302      	movs	r3, #2
        (void)USBH_IsocSendData(phost,
 800c3fe:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 800c402:	7123      	strb	r3, [r4, #4]
        (void)USBH_IsocSendData(phost,
 800c404:	f894 30fb 	ldrb.w	r3, [r4, #251]	; 0xfb
 800c408:	f001 fd98 	bl	800df3c <USBH_IsocSendData>
        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 800c40c:	f8b4 3120 	ldrh.w	r3, [r4, #288]	; 0x120
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800c410:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 800c414:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800c418:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 800c41c:	e7a5      	b.n	800c36a <USBH_AUDIO_Process+0x7a>
        osDelay(1);
 800c41e:	f7fd f9b6 	bl	800978e <osDelay>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c422:	2304      	movs	r3, #4
 800c424:	e783      	b.n	800c32e <USBH_AUDIO_Process+0x3e>
      if ((phost->Timer & 1U) == 0U)
 800c426:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
 800c42a:	07db      	lsls	r3, r3, #31
 800c42c:	d43c      	bmi.n	800c4a8 <USBH_AUDIO_Process+0x1b8>
        AUDIO_Handle->control.timer = phost->Timer;
 800c42e:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
        (void)USBH_InterruptReceiveData(phost,
 800c432:	f506 71c8 	add.w	r1, r6, #400	; 0x190
 800c436:	f896 2186 	ldrb.w	r2, [r6, #390]	; 0x186
 800c43a:	4628      	mov	r0, r5
        AUDIO_Handle->control.timer = phost->Timer;
 800c43c:	f8c6 318c 	str.w	r3, [r6, #396]	; 0x18c
        (void)USBH_InterruptReceiveData(phost,
 800c440:	f896 318a 	ldrb.w	r3, [r6, #394]	; 0x18a
 800c444:	f001 fd6a 	bl	800df1c <USBH_InterruptReceiveData>
        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 800c448:	f896 3107 	ldrb.w	r3, [r6, #263]	; 0x107
 800c44c:	f886 31a0 	strb.w	r3, [r6, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800c450:	f896 3109 	ldrb.w	r3, [r6, #265]	; 0x109
 800c454:	f886 31a1 	strb.w	r3, [r6, #417]	; 0x1a1
        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 800c458:	2302      	movs	r3, #2
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800c45a:	70f3      	strb	r3, [r6, #3]
        status = USBH_OK;
 800c45c:	e024      	b.n	800c4a8 <USBH_AUDIO_Process+0x1b8>
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 800c45e:	f896 118a 	ldrb.w	r1, [r6, #394]	; 0x18a
 800c462:	4628      	mov	r0, r5
 800c464:	f7f6 f844 	bl	80024f0 <USBH_LL_GetURBState>
 800c468:	2801      	cmp	r0, #1
 800c46a:	d016      	beq.n	800c49a <USBH_AUDIO_Process+0x1aa>
      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 800c46c:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
 800c470:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
 800c474:	1a9b      	subs	r3, r3, r2
 800c476:	f896 218b 	ldrb.w	r2, [r6, #395]	; 0x18b
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d314      	bcc.n	800c4a8 <USBH_AUDIO_Process+0x1b8>
        AUDIO_Handle->control.timer = phost->Timer;
 800c47e:	f8d5 3594 	ldr.w	r3, [r5, #1428]	; 0x594
        (void)USBH_InterruptReceiveData(phost,
 800c482:	f506 71c8 	add.w	r1, r6, #400	; 0x190
 800c486:	f896 2186 	ldrb.w	r2, [r6, #390]	; 0x186
 800c48a:	4628      	mov	r0, r5
        AUDIO_Handle->control.timer = phost->Timer;
 800c48c:	f8c6 318c 	str.w	r3, [r6, #396]	; 0x18c
        (void)USBH_InterruptReceiveData(phost,
 800c490:	f896 318a 	ldrb.w	r3, [r6, #394]	; 0x18a
 800c494:	f001 fd42 	bl	800df1c <USBH_InterruptReceiveData>
 800c498:	e006      	b.n	800c4a8 <USBH_AUDIO_Process+0x1b8>
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 800c49a:	f896 1190 	ldrb.w	r1, [r6, #400]	; 0x190
 800c49e:	4628      	mov	r0, r5
 800c4a0:	f7ff fac0 	bl	800ba24 <USBH_AUDIO_SetControlAttribute>
 800c4a4:	2801      	cmp	r0, #1
 800c4a6:	d1e1      	bne.n	800c46c <USBH_AUDIO_Process+0x17c>
        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 800c4a8:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
 800c4ac:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d824      	bhi.n	800c4fe <USBH_AUDIO_Process+0x20e>
          (void)USBH_IsocSendData(phost,
 800c4b4:	f894 30fb 	ldrb.w	r3, [r4, #251]	; 0xfb
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
 800c4be:	f8d4 1114 	ldr.w	r1, [r4, #276]	; 0x114
 800c4c2:	f001 fd3b 	bl	800df3c <USBH_IsocSendData>
          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 800c4c6:	f8b4 2120 	ldrh.w	r2, [r4, #288]	; 0x120
 800c4ca:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 800c4ce:	4413      	add	r3, r2
 800c4d0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 800c4d4:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800c4d8:	4413      	add	r3, r2
 800c4da:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 800c4de:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 800c4e2:	4413      	add	r3, r2
 800c4e4:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 800c4e8:	e73f      	b.n	800c36a <USBH_AUDIO_Process+0x7a>
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 800c4ea:	2101      	movs	r1, #1
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f7ff fa99 	bl	800ba24 <USBH_AUDIO_SetControlAttribute>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d1d8      	bne.n	800c4a8 <USBH_AUDIO_Process+0x1b8>
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e7af      	b.n	800c45a <USBH_AUDIO_Process+0x16a>
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 800c4fa:	2102      	movs	r1, #2
 800c4fc:	e7f6      	b.n	800c4ec <USBH_AUDIO_Process+0x1fc>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800c4fe:	f04f 33ff 	mov.w	r3, #4294967295
          USBH_AUDIO_BufferEmptyCallback(phost);
 800c502:	4628      	mov	r0, r5
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 800c504:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800c508:	2305      	movs	r3, #5
 800c50a:	70a3      	strb	r3, [r4, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 800c50c:	f7ff feef 	bl	800c2ee <USBH_AUDIO_BufferEmptyCallback>
 800c510:	e72b      	b.n	800c36a <USBH_AUDIO_Process+0x7a>
 800c512:	bf00      	nop
 800c514:	01000122 	.word	0x01000122

0800c518 <USBH_CDC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 800c518:	2000      	movs	r0, #0
 800c51a:	4770      	bx	lr

0800c51c <USBH_CDC_InterfaceDeInit>:
{
 800c51c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c51e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800c522:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c524:	69dd      	ldr	r5, [r3, #28]
  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800c526:	7829      	ldrb	r1, [r5, #0]
 800c528:	b139      	cbz	r1, 800c53a <USBH_CDC_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c52a:	f003 f9ee 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c52e:	7829      	ldrb	r1, [r5, #0]
 800c530:	4620      	mov	r0, r4
 800c532:	f003 fa07 	bl	800f944 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c536:	2300      	movs	r3, #0
 800c538:	702b      	strb	r3, [r5, #0]
  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800c53a:	7b29      	ldrb	r1, [r5, #12]
 800c53c:	b141      	cbz	r1, 800c550 <USBH_CDC_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c53e:	4620      	mov	r0, r4
 800c540:	f003 f9e3 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800c544:	7b29      	ldrb	r1, [r5, #12]
 800c546:	4620      	mov	r0, r4
 800c548:	f003 f9fc 	bl	800f944 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c54c:	2300      	movs	r3, #0
 800c54e:	732b      	strb	r3, [r5, #12]
  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800c550:	7b69      	ldrb	r1, [r5, #13]
 800c552:	b141      	cbz	r1, 800c566 <USBH_CDC_InterfaceDeInit+0x4a>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c554:	4620      	mov	r0, r4
 800c556:	f003 f9d8 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c55a:	7b69      	ldrb	r1, [r5, #13]
 800c55c:	4620      	mov	r0, r4
 800c55e:	f003 f9f1 	bl	800f944 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c562:	2300      	movs	r3, #0
 800c564:	736b      	strb	r3, [r5, #13]
  if ((phost->pActiveClass->pData) != NULL)
 800c566:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800c56a:	69d8      	ldr	r0, [r3, #28]
 800c56c:	b128      	cbz	r0, 800c57a <USBH_CDC_InterfaceDeInit+0x5e>
    USBH_free(phost->pActiveClass->pData);
 800c56e:	f011 fbbb 	bl	801dce8 <free>
    phost->pActiveClass->pData = 0U;
 800c572:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800c576:	2200      	movs	r2, #0
 800c578:	61da      	str	r2, [r3, #28]
}
 800c57a:	2000      	movs	r0, #0
 800c57c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c580 <USBH_CDC_InterfaceInit>:
{
 800c580:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c584:	2202      	movs	r2, #2
 800c586:	2301      	movs	r3, #1
{
 800c588:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c58a:	4611      	mov	r1, r2
 800c58c:	f000 fa9c 	bl	800cac8 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c590:	2809      	cmp	r0, #9
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c592:	4607      	mov	r7, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c594:	d909      	bls.n	800c5aa <USBH_CDC_InterfaceInit+0x2a>
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
 800c596:	485a      	ldr	r0, [pc, #360]	; (800c700 <USBH_CDC_InterfaceInit+0x180>)
 800c598:	f011 ff92 	bl	801e4c0 <iprintf>
 800c59c:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800c5a0:	4858      	ldr	r0, [pc, #352]	; (800c704 <USBH_CDC_InterfaceInit+0x184>)
 800c5a2:	6819      	ldr	r1, [r3, #0]
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 800c5a4:	f011 ff8c 	bl	801e4c0 <iprintf>
 800c5a8:	e014      	b.n	800c5d4 <USBH_CDC_InterfaceInit+0x54>
  status = USBH_SelectInterface(phost, interface);
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f000 fa45 	bl	800ca3c <USBH_SelectInterface>
  if (status != USBH_OK)
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	b988      	cbnz	r0, 800c5da <USBH_CDC_InterfaceInit+0x5a>
  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c5b6:	f8d5 854c 	ldr.w	r8, [r5, #1356]	; 0x54c
 800c5ba:	2050      	movs	r0, #80	; 0x50
 800c5bc:	f011 fb8c 	bl	801dcd8 <malloc>
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	f8c8 001c 	str.w	r0, [r8, #28]
  if (CDC_Handle == NULL)
 800c5c6:	b950      	cbnz	r0, 800c5de <USBH_CDC_InterfaceInit+0x5e>
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
 800c5c8:	484d      	ldr	r0, [pc, #308]	; (800c700 <USBH_CDC_InterfaceInit+0x180>)
 800c5ca:	f011 ff79 	bl	801e4c0 <iprintf>
 800c5ce:	484e      	ldr	r0, [pc, #312]	; (800c708 <USBH_CDC_InterfaceInit+0x188>)
 800c5d0:	f011 ff76 	bl	801e4c0 <iprintf>
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 800c5d4:	484d      	ldr	r0, [pc, #308]	; (800c70c <USBH_CDC_InterfaceInit+0x18c>)
 800c5d6:	f011 fff9 	bl	801e5cc <puts>
    return USBH_FAIL;
 800c5da:	2602      	movs	r6, #2
 800c5dc:	e08b      	b.n	800c6f6 <USBH_CDC_InterfaceInit+0x176>
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c5de:	2250      	movs	r2, #80	; 0x50
 800c5e0:	4631      	mov	r1, r6
 800c5e2:	f011 fb97 	bl	801dd14 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c5e6:	2032      	movs	r0, #50	; 0x32
 800c5e8:	fb00 5707 	mla	r7, r0, r7, r5
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c5ec:	4628      	mov	r0, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c5ee:	f997 234e 	ldrsb.w	r2, [r7, #846]	; 0x34e
 800c5f2:	f897 334e 	ldrb.w	r3, [r7, #846]	; 0x34e
 800c5f6:	2a00      	cmp	r2, #0
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c5f8:	bfbc      	itt	lt
 800c5fa:	7063      	strblt	r3, [r4, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c5fc:	f8b7 3350 	ldrhlt.w	r3, [r7, #848]	; 0x350
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c600:	7861      	ldrb	r1, [r4, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c602:	bfb8      	it	lt
 800c604:	8163      	strhlt	r3, [r4, #10]
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c606:	f003 f985 	bl	800f914 <USBH_AllocPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c60a:	8963      	ldrh	r3, [r4, #10]
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c60c:	4601      	mov	r1, r0
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c60e:	7862      	ldrb	r2, [r4, #1]
 800c610:	9302      	str	r3, [sp, #8]
 800c612:	2303      	movs	r3, #3
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c614:	7020      	strb	r0, [r4, #0]
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c616:	4628      	mov	r0, r5
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800c624:	f003 f962 	bl	800f8ec <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c628:	2200      	movs	r2, #0
 800c62a:	7821      	ldrb	r1, [r4, #0]
 800c62c:	4628      	mov	r0, r5
 800c62e:	f7f5 ff6f 	bl	8002510 <USBH_LL_SetToggle>
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c632:	2300      	movs	r3, #0
 800c634:	210a      	movs	r1, #10
 800c636:	4628      	mov	r0, r5
 800c638:	461a      	mov	r2, r3
 800c63a:	f000 fa45 	bl	800cac8 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c63e:	2809      	cmp	r0, #9
 800c640:	d907      	bls.n	800c652 <USBH_CDC_InterfaceInit+0xd2>
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
 800c642:	482f      	ldr	r0, [pc, #188]	; (800c700 <USBH_CDC_InterfaceInit+0x180>)
 800c644:	f011 ff3c 	bl	801e4c0 <iprintf>
 800c648:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800c64c:	4830      	ldr	r0, [pc, #192]	; (800c710 <USBH_CDC_InterfaceInit+0x190>)
 800c64e:	6819      	ldr	r1, [r3, #0]
 800c650:	e7a8      	b.n	800c5a4 <USBH_CDC_InterfaceInit+0x24>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c652:	2232      	movs	r2, #50	; 0x32
 800c654:	fb02 5300 	mla	r3, r2, r0, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c658:	fb02 5000 	mla	r0, r2, r0, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c65c:	f893 734e 	ldrb.w	r7, [r3, #846]	; 0x34e
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c660:	f8b3 1350 	ldrh.w	r1, [r3, #848]	; 0x350
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c664:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c668:	f890 2356 	ldrb.w	r2, [r0, #854]	; 0x356
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c66c:	2b00      	cmp	r3, #0
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c66e:	f8b0 3358 	ldrh.w	r3, [r0, #856]	; 0x358
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c672:	bfb4      	ite	lt
 800c674:	8361      	strhlt	r1, [r4, #26]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c676:	8321      	strhge	r1, [r4, #24]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c678:	f990 1356 	ldrsb.w	r1, [r0, #854]	; 0x356
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c67c:	4628      	mov	r0, r5
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c67e:	bfac      	ite	ge
 800c680:	73a7      	strbge	r7, [r4, #14]
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c682:	73e7      	strblt	r7, [r4, #15]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c684:	2900      	cmp	r1, #0
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c686:	f04f 0702 	mov.w	r7, #2
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c68a:	bfa8      	it	ge
 800c68c:	73a2      	strbge	r2, [r4, #14]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c68e:	7ba1      	ldrb	r1, [r4, #14]
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c690:	bfba      	itte	lt
 800c692:	73e2      	strblt	r2, [r4, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c694:	8363      	strhlt	r3, [r4, #26]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c696:	8323      	strhge	r3, [r4, #24]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c698:	f003 f93c 	bl	800f914 <USBH_AllocPipe>
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c69c:	7be1      	ldrb	r1, [r4, #15]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c69e:	7360      	strb	r0, [r4, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c6a0:	4628      	mov	r0, r5
 800c6a2:	f003 f937 	bl	800f914 <USBH_AllocPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c6a6:	8b23      	ldrh	r3, [r4, #24]
 800c6a8:	7ba2      	ldrb	r2, [r4, #14]
 800c6aa:	9302      	str	r3, [sp, #8]
 800c6ac:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800c6b0:	7b61      	ldrb	r1, [r4, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c6b2:	7320      	strb	r0, [r4, #12]
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	9701      	str	r7, [sp, #4]
 800c6b8:	9300      	str	r3, [sp, #0]
 800c6ba:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800c6be:	f003 f915 	bl	800f8ec <USBH_OpenPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c6c2:	8b63      	ldrh	r3, [r4, #26]
 800c6c4:	7be2      	ldrb	r2, [r4, #15]
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	7b21      	ldrb	r1, [r4, #12]
 800c6ca:	e9cd 7301 	strd	r7, r3, [sp, #4]
 800c6ce:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
  CDC_Handle->state = CDC_IDLE_STATE;
 800c6d2:	2700      	movs	r7, #0
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800c6d4:	9300      	str	r3, [sp, #0]
 800c6d6:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800c6da:	f003 f907 	bl	800f8ec <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c6de:	463a      	mov	r2, r7
 800c6e0:	7b61      	ldrb	r1, [r4, #13]
 800c6e2:	4628      	mov	r0, r5
  CDC_Handle->state = CDC_IDLE_STATE;
 800c6e4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c6e8:	f7f5 ff12 	bl	8002510 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800c6ec:	463a      	mov	r2, r7
 800c6ee:	7b21      	ldrb	r1, [r4, #12]
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f7f5 ff0d 	bl	8002510 <USBH_LL_SetToggle>
}
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	b004      	add	sp, #16
 800c6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6fe:	bf00      	nop
 800c700:	0801fbc8 	.word	0x0801fbc8
 800c704:	0801fc81 	.word	0x0801fc81
 800c708:	0801fcbe 	.word	0x0801fcbe
 800c70c:	0801fbc6 	.word	0x0801fbc6
 800c710:	0801fce4 	.word	0x0801fce4

0800c714 <USBH_CDC_ClassRequest>:
{
 800c714:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c716:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 800c71a:	f242 12a1 	movw	r2, #8609	; 0x21a1
{
 800c71e:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c720:	69d9      	ldr	r1, [r3, #28]
  phost->Control.setup.b.wIndex.w = 0U;
 800c722:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c726:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.wIndex.w = 0U;
 800c728:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c72c:	2207      	movs	r2, #7
 800c72e:	f000 fdbf 	bl	800d2b0 <USBH_CtlReq>
  if (status == USBH_OK)
 800c732:	4605      	mov	r5, r0
 800c734:	b930      	cbnz	r0, 800c744 <USBH_CDC_ClassRequest+0x30>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c736:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 800c73a:	2102      	movs	r1, #2
 800c73c:	4620      	mov	r0, r4
 800c73e:	4798      	blx	r3
}
 800c740:	4628      	mov	r0, r5
 800c742:	bd38      	pop	{r3, r4, r5, pc}
  else if (status == USBH_NOT_SUPPORTED)
 800c744:	2803      	cmp	r0, #3
 800c746:	d1fb      	bne.n	800c740 <USBH_CDC_ClassRequest+0x2c>
    USBH_ErrLog("Control error: CDC: Device Get Line Coding configuration failed");
 800c748:	4804      	ldr	r0, [pc, #16]	; (800c75c <USBH_CDC_ClassRequest+0x48>)
 800c74a:	f011 feb9 	bl	801e4c0 <iprintf>
 800c74e:	4804      	ldr	r0, [pc, #16]	; (800c760 <USBH_CDC_ClassRequest+0x4c>)
 800c750:	f011 feb6 	bl	801e4c0 <iprintf>
 800c754:	4803      	ldr	r0, [pc, #12]	; (800c764 <USBH_CDC_ClassRequest+0x50>)
 800c756:	f011 ff39 	bl	801e5cc <puts>
 800c75a:	e7f1      	b.n	800c740 <USBH_CDC_ClassRequest+0x2c>
 800c75c:	0801fb84 	.word	0x0801fb84
 800c760:	0801fd18 	.word	0x0801fd18
 800c764:	0801fbc6 	.word	0x0801fbc6

0800c768 <USBH_CDC_TransmitCallback>:
 800c768:	4770      	bx	lr

0800c76a <USBH_CDC_ReceiveCallback>:
 800c76a:	4770      	bx	lr

0800c76c <USBH_CDC_LineCodingChanged>:
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800c76c:	4770      	bx	lr

0800c76e <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c76e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800c772:	b573      	push	{r0, r1, r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c774:	69dd      	ldr	r5, [r3, #28]
{
 800c776:	4604      	mov	r4, r0
  switch (CDC_Handle->state)
 800c778:	f895 604c 	ldrb.w	r6, [r5, #76]	; 0x4c
 800c77c:	2e04      	cmp	r6, #4
 800c77e:	d818      	bhi.n	800c7b2 <USBH_CDC_Process+0x44>
 800c780:	e8df f006 	tbb	[pc, r6]
 800c784:	401b0312 	.word	0x401b0312
 800c788:	c2          	.byte	0xc2
 800c789:	00          	.byte	0x00
  phost->Control.setup.b.wIndex.w = 0U;
 800c78a:	f242 0021 	movw	r0, #8225	; 0x2021
 800c78e:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c792:	6ca9      	ldr	r1, [r5, #72]	; 0x48
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c794:	2207      	movs	r2, #7
  phost->Control.setup.b.wIndex.w = 0U;
 800c796:	e9c4 0304 	strd	r0, r3, [r4, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 fd88 	bl	800d2b0 <USBH_CtlReq>
      if (req_status == USBH_OK)
 800c7a0:	b928      	cbnz	r0, 800c7ae <USBH_CDC_Process+0x40>
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c7a2:	2302      	movs	r3, #2
          CDC_Handle->state = CDC_ERROR_STATE;
 800c7a4:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
}
 800c7a8:	4630      	mov	r0, r6
 800c7aa:	b002      	add	sp, #8
 800c7ac:	bd70      	pop	{r4, r5, r6, pc}
        if (req_status != USBH_BUSY)
 800c7ae:	2801      	cmp	r0, #1
 800c7b0:	d101      	bne.n	800c7b6 <USBH_CDC_Process+0x48>
  USBH_StatusTypeDef status = USBH_BUSY;
 800c7b2:	2601      	movs	r6, #1
 800c7b4:	e7f8      	b.n	800c7a8 <USBH_CDC_Process+0x3a>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c7b6:	2304      	movs	r3, #4
 800c7b8:	e7f4      	b.n	800c7a4 <USBH_CDC_Process+0x36>
  phost->Control.setup.b.wIndex.w = 0U;
 800c7ba:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800c7be:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c7c2:	f105 0140 	add.w	r1, r5, #64	; 0x40
  phost->Control.setup.b.wIndex.w = 0U;
 800c7c6:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c7ca:	2207      	movs	r2, #7
 800c7cc:	f000 fd70 	bl	800d2b0 <USBH_CtlReq>
      if (req_status == USBH_OK)
 800c7d0:	b990      	cbnz	r0, 800c7f8 <USBH_CDC_Process+0x8a>
        CDC_Handle->state = CDC_IDLE_STATE;
 800c7d2:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c7d6:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 800c7da:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800c7de:	684b      	ldr	r3, [r1, #4]
 800c7e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d1e4      	bne.n	800c7b2 <USBH_CDC_Process+0x44>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c7e8:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800c7ea:	680b      	ldr	r3, [r1, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d1e0      	bne.n	800c7b2 <USBH_CDC_Process+0x44>
          USBH_CDC_LineCodingChanged(phost);
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f7ff ffbb 	bl	800c76c <USBH_CDC_LineCodingChanged>
 800c7f6:	e7dc      	b.n	800c7b2 <USBH_CDC_Process+0x44>
        if (req_status != USBH_BUSY)
 800c7f8:	2801      	cmp	r0, #1
 800c7fa:	d0da      	beq.n	800c7b2 <USBH_CDC_Process+0x44>
          CDC_Handle->state = CDC_ERROR_STATE;
 800c7fc:	2304      	movs	r3, #4
 800c7fe:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
 800c802:	e7d6      	b.n	800c7b2 <USBH_CDC_Process+0x44>
  switch (CDC_Handle->data_tx_state)
 800c804:	f895 004d 	ldrb.w	r0, [r5, #77]	; 0x4d
 800c808:	2801      	cmp	r0, #1
 800c80a:	d02f      	beq.n	800c86c <USBH_CDC_Process+0xfe>
 800c80c:	2802      	cmp	r0, #2
 800c80e:	d03c      	beq.n	800c88a <USBH_CDC_Process+0x11c>
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c810:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800c814:	69dd      	ldr	r5, [r3, #28]
  switch (CDC_Handle->data_rx_state)
 800c816:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d063      	beq.n	800c8e6 <USBH_CDC_Process+0x178>
 800c81e:	2b04      	cmp	r3, #4
 800c820:	d1c7      	bne.n	800c7b2 <USBH_CDC_Process+0x44>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c822:	7b29      	ldrb	r1, [r5, #12]
 800c824:	4620      	mov	r0, r4
 800c826:	f7f5 fe63 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800c82a:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800c82c:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 800c82e:	d1c0      	bne.n	800c7b2 <USBH_CDC_Process+0x44>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800c830:	7b29      	ldrb	r1, [r5, #12]
 800c832:	4620      	mov	r0, r4
 800c834:	f7f5 fe58 	bl	80024e8 <USBH_LL_GetLastXferSize>
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800c838:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800c83a:	4298      	cmp	r0, r3
 800c83c:	d05d      	beq.n	800c8fa <USBH_CDC_Process+0x18c>
 800c83e:	8b6a      	ldrh	r2, [r5, #26]
 800c840:	4290      	cmp	r0, r2
 800c842:	d95a      	bls.n	800c8fa <USBH_CDC_Process+0x18c>
          CDC_Handle->RxDataLength -= length ;
 800c844:	1a1b      	subs	r3, r3, r0
 800c846:	62ab      	str	r3, [r5, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800c848:	6a2b      	ldr	r3, [r5, #32]
 800c84a:	4418      	add	r0, r3
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c84c:	2303      	movs	r3, #3
          CDC_Handle->pRxData += length;
 800c84e:	6228      	str	r0, [r5, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800c850:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c854:	2304      	movs	r3, #4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c856:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800c85a:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c85e:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c862:	2300      	movs	r3, #0
 800c864:	461a      	mov	r2, r3
 800c866:	f7fd f876 	bl	8009956 <osMessageQueuePut>
 800c86a:	e79d      	b.n	800c7a8 <USBH_CDC_Process+0x3a>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c86c:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800c86e:	8b2a      	ldrh	r2, [r5, #24]
        (void)USBH_BulkSendData(phost,
 800c870:	7b6b      	ldrb	r3, [r5, #13]
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c872:	4296      	cmp	r6, r2
        (void)USBH_BulkSendData(phost,
 800c874:	69e9      	ldr	r1, [r5, #28]
 800c876:	9000      	str	r0, [sp, #0]
        (void)USBH_BulkSendData(phost,
 800c878:	4620      	mov	r0, r4
 800c87a:	bf98      	it	ls
 800c87c:	b2b2      	uxthls	r2, r6
 800c87e:	f001 fb26 	bl	800dece <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c882:	2302      	movs	r3, #2
 800c884:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
      break;
 800c888:	e7c2      	b.n	800c810 <USBH_CDC_Process+0xa2>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c88a:	7b69      	ldrb	r1, [r5, #13]
 800c88c:	4620      	mov	r0, r4
 800c88e:	f7f5 fe2f 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800c892:	2801      	cmp	r0, #1
 800c894:	d121      	bne.n	800c8da <USBH_CDC_Process+0x16c>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c898:	8b29      	ldrh	r1, [r5, #24]
 800c89a:	428b      	cmp	r3, r1
 800c89c:	d90c      	bls.n	800c8b8 <USBH_CDC_Process+0x14a>
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c89e:	69ea      	ldr	r2, [r5, #28]
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c8a0:	1a5b      	subs	r3, r3, r1
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c8a2:	440a      	add	r2, r1
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c8a4:	626b      	str	r3, [r5, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c8a6:	61ea      	str	r2, [r5, #28]
        if (CDC_Handle->TxDataLength > 0U)
 800c8a8:	b94b      	cbnz	r3, 800c8be <USBH_CDC_Process+0x150>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c8aa:	2300      	movs	r3, #0
          USBH_CDC_TransmitCallback(phost);
 800c8ac:	4620      	mov	r0, r4
          CDC_Handle->data_tx_state = CDC_IDLE;
 800c8ae:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800c8b2:	f7ff ff59 	bl	800c768 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c8b6:	e004      	b.n	800c8c2 <USBH_CDC_Process+0x154>
          CDC_Handle->TxDataLength = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	626b      	str	r3, [r5, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800c8bc:	e7f5      	b.n	800c8aa <USBH_CDC_Process+0x13c>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c8be:	f885 004d 	strb.w	r0, [r5, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c8c2:	2304      	movs	r3, #4
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c8c4:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800c8c8:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c8cc:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	f7fd f83f 	bl	8009956 <osMessageQueuePut>
 800c8d8:	e79a      	b.n	800c810 <USBH_CDC_Process+0xa2>
        if (URB_Status == USBH_URB_NOTREADY)
 800c8da:	2802      	cmp	r0, #2
 800c8dc:	d198      	bne.n	800c810 <USBH_CDC_Process+0xa2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c8de:	2301      	movs	r3, #1
 800c8e0:	f885 304d 	strb.w	r3, [r5, #77]	; 0x4d
 800c8e4:	e7ed      	b.n	800c8c2 <USBH_CDC_Process+0x154>
      (void)USBH_BulkReceiveData(phost,
 800c8e6:	7b2b      	ldrb	r3, [r5, #12]
 800c8e8:	4620      	mov	r0, r4
 800c8ea:	8b6a      	ldrh	r2, [r5, #26]
 800c8ec:	6a29      	ldr	r1, [r5, #32]
 800c8ee:	f001 fb05 	bl	800defc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800c8f2:	2304      	movs	r3, #4
 800c8f4:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
      break;
 800c8f8:	e75b      	b.n	800c7b2 <USBH_CDC_Process+0x44>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c8fa:	2300      	movs	r3, #0
          USBH_CDC_ReceiveCallback(phost);
 800c8fc:	4620      	mov	r0, r4
          CDC_Handle->data_rx_state = CDC_IDLE;
 800c8fe:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800c902:	f7ff ff32 	bl	800c76a <USBH_CDC_ReceiveCallback>
 800c906:	e7a5      	b.n	800c854 <USBH_CDC_Process+0xe6>
      req_status = USBH_ClrFeature(phost, 0x00U);
 800c908:	2100      	movs	r1, #0
 800c90a:	f000 ffdc 	bl	800d8c6 <USBH_ClrFeature>
      if (req_status == USBH_OK)
 800c90e:	2800      	cmp	r0, #0
 800c910:	f47f af4f 	bne.w	800c7b2 <USBH_CDC_Process+0x44>
        CDC_Handle->state = CDC_IDLE_STATE;
 800c914:	f885 004c 	strb.w	r0, [r5, #76]	; 0x4c
 800c918:	e74b      	b.n	800c7b2 <USBH_CDC_Process+0x44>

0800c91a <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 800c91a:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800c91c:	2540      	movs	r5, #64	; 0x40
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 800c91e:	4604      	mov	r4, r0
    phost->Pipes[i] = 0U;
 800c920:	2100      	movs	r1, #0
 800c922:	f200 5054 	addw	r0, r0, #1364	; 0x554
 800c926:	462a      	mov	r2, r5
 800c928:	f011 f9f4 	bl	801dd14 <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 800c92c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c930:	2100      	movs	r1, #0
 800c932:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 800c936:	f011 f9ed 	bl	801dd14 <memset>
  }

  phost->gState = HOST_IDLE;
 800c93a:	2300      	movs	r3, #0
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 800c93c:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c93e:	71a5      	strb	r5, [r4, #6]
  phost->gState = HOST_IDLE;
 800c940:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
 800c942:	7063      	strb	r3, [r4, #1]
  phost->Timer = 0U;
 800c944:	f8c4 3594 	str.w	r3, [r4, #1428]	; 0x594
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c948:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->RequestState = CMD_SEND;
 800c94c:	70a2      	strb	r2, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 800c94e:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c950:	f8c4 331c 	str.w	r3, [r4, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 800c954:	bd38      	pop	{r3, r4, r5, pc}
	...

0800c958 <USBH_Init>:
{
 800c958:	b570      	push	{r4, r5, r6, lr}
 800c95a:	460e      	mov	r6, r1
  if (phost == NULL)
 800c95c:	4604      	mov	r4, r0
 800c95e:	b950      	cbnz	r0, 800c976 <USBH_Init+0x1e>
    USBH_ErrLog("Invalid Host handle");
 800c960:	481c      	ldr	r0, [pc, #112]	; (800c9d4 <USBH_Init+0x7c>)
 800c962:	f011 fdad 	bl	801e4c0 <iprintf>
 800c966:	481c      	ldr	r0, [pc, #112]	; (800c9d8 <USBH_Init+0x80>)
 800c968:	f011 fdaa 	bl	801e4c0 <iprintf>
 800c96c:	481b      	ldr	r0, [pc, #108]	; (800c9dc <USBH_Init+0x84>)
 800c96e:	f011 fe2d 	bl	801e5cc <puts>
    return USBH_FAIL;
 800c972:	2002      	movs	r0, #2
}
 800c974:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
 800c976:	2500      	movs	r5, #0
  phost->id = id;
 800c978:	f880 259c 	strb.w	r2, [r0, #1436]	; 0x59c
  phost->pActiveClass = NULL;
 800c97c:	f8c0 554c 	str.w	r5, [r0, #1356]	; 0x54c
  phost->ClassNumber = 0U;
 800c980:	f8c0 5550 	str.w	r5, [r0, #1360]	; 0x550
  (void)DeInitStateMachine(phost);
 800c984:	f7ff ffc9 	bl	800c91a <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
 800c988:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800c98c:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_disconnected = 0U;
 800c990:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c994:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 800c998:	b10e      	cbz	r6, 800c99e <USBH_Init+0x46>
    phost->pUser = pUsrFunc;
 800c99a:	f8c4 65a4 	str.w	r6, [r4, #1444]	; 0x5a4
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c99e:	2200      	movs	r2, #0
 800c9a0:	2104      	movs	r1, #4
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f7fc ff9c 	bl	80098e0 <osMessageQueueNew>
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c9a8:	4a0d      	ldr	r2, [pc, #52]	; (800c9e0 <USBH_Init+0x88>)
 800c9aa:	4b0e      	ldr	r3, [pc, #56]	; (800c9e4 <USBH_Init+0x8c>)
  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c9ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800c9b0:	f8c4 05a8 	str.w	r0, [r4, #1448]	; 0x5a8
  USBH_Thread_Atrr.name = "USBH_Queue";
 800c9b4:	6013      	str	r3, [r2, #0]
  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c9b6:	2318      	movs	r3, #24
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c9b8:	480b      	ldr	r0, [pc, #44]	; (800c9e8 <USBH_Init+0x90>)
  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800c9ba:	e9c2 1305 	strd	r1, r3, [r2, #20]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800c9be:	4621      	mov	r1, r4
 800c9c0:	f7fc fe9c 	bl	80096fc <osThreadNew>
 800c9c4:	f8c4 05ac 	str.w	r0, [r4, #1452]	; 0x5ac
  (void)USBH_LL_Init(phost);
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f7f5 fd59 	bl	8002480 <USBH_LL_Init>
  return USBH_OK;
 800c9ce:	2000      	movs	r0, #0
 800c9d0:	e7d0      	b.n	800c974 <USBH_Init+0x1c>
 800c9d2:	bf00      	nop
 800c9d4:	0801fb84 	.word	0x0801fb84
 800c9d8:	0801fd5c 	.word	0x0801fd5c
 800c9dc:	0801fbc6 	.word	0x0801fbc6
 800c9e0:	24007454 	.word	0x24007454
 800c9e4:	0801fd70 	.word	0x0801fd70
 800c9e8:	0800d1b5 	.word	0x0800d1b5

0800c9ec <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c9ec:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 800c9ee:	b1b9      	cbz	r1, 800ca20 <USBH_RegisterClass+0x34>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c9f0:	f8d0 3550 	ldr.w	r3, [r0, #1360]	; 0x550
 800c9f4:	2b04      	cmp	r3, #4
 800c9f6:	d808      	bhi.n	800ca0a <USBH_RegisterClass+0x1e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c9f8:	1c5a      	adds	r2, r3, #1
 800c9fa:	f503 73a7 	add.w	r3, r3, #334	; 0x14e
 800c9fe:	f8c0 2550 	str.w	r2, [r0, #1360]	; 0x550
 800ca02:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
      status = USBH_OK;
 800ca06:	2000      	movs	r0, #0
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 800ca08:	bd08      	pop	{r3, pc}
      USBH_ErrLog("Max Class Number reached");
 800ca0a:	4808      	ldr	r0, [pc, #32]	; (800ca2c <USBH_RegisterClass+0x40>)
 800ca0c:	f011 fd58 	bl	801e4c0 <iprintf>
 800ca10:	4807      	ldr	r0, [pc, #28]	; (800ca30 <USBH_RegisterClass+0x44>)
    USBH_ErrLog("Invalid Class handle");
 800ca12:	f011 fd55 	bl	801e4c0 <iprintf>
 800ca16:	4807      	ldr	r0, [pc, #28]	; (800ca34 <USBH_RegisterClass+0x48>)
 800ca18:	f011 fdd8 	bl	801e5cc <puts>
    status = USBH_FAIL;
 800ca1c:	2002      	movs	r0, #2
 800ca1e:	e7f3      	b.n	800ca08 <USBH_RegisterClass+0x1c>
    USBH_ErrLog("Invalid Class handle");
 800ca20:	4802      	ldr	r0, [pc, #8]	; (800ca2c <USBH_RegisterClass+0x40>)
 800ca22:	f011 fd4d 	bl	801e4c0 <iprintf>
 800ca26:	4804      	ldr	r0, [pc, #16]	; (800ca38 <USBH_RegisterClass+0x4c>)
 800ca28:	e7f3      	b.n	800ca12 <USBH_RegisterClass+0x26>
 800ca2a:	bf00      	nop
 800ca2c:	0801fb84 	.word	0x0801fb84
 800ca30:	0801fd7b 	.word	0x0801fd7b
 800ca34:	0801fbc6 	.word	0x0801fbc6
 800ca38:	0801fd94 	.word	0x0801fd94

0800ca3c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ca3c:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ca3e:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
{
 800ca42:	4604      	mov	r4, r0
 800ca44:	460d      	mov	r5, r1
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ca46:	428b      	cmp	r3, r1
 800ca48:	d924      	bls.n	800ca94 <USBH_SelectInterface+0x58>
  {
    phost->device.current_interface = interface;
 800ca4a:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
    USBH_UsrLog("Switching to Interface (#%d)", interface);
 800ca4e:	4817      	ldr	r0, [pc, #92]	; (800caac <USBH_SelectInterface+0x70>)
 800ca50:	f011 fd36 	bl	801e4c0 <iprintf>
 800ca54:	4816      	ldr	r0, [pc, #88]	; (800cab0 <USBH_SelectInterface+0x74>)
 800ca56:	f011 fdb9 	bl	801e5cc <puts>
    USBH_UsrLog("Class    : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass);
 800ca5a:	2132      	movs	r1, #50	; 0x32
 800ca5c:	4815      	ldr	r0, [pc, #84]	; (800cab4 <USBH_SelectInterface+0x78>)
 800ca5e:	fb01 4405 	mla	r4, r1, r5, r4
 800ca62:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 800ca66:	f011 fd2b 	bl	801e4c0 <iprintf>
 800ca6a:	4811      	ldr	r0, [pc, #68]	; (800cab0 <USBH_SelectInterface+0x74>)
 800ca6c:	f011 fdae 	bl	801e5cc <puts>
    USBH_UsrLog("SubClass : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass);
 800ca70:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
 800ca74:	4810      	ldr	r0, [pc, #64]	; (800cab8 <USBH_SelectInterface+0x7c>)
 800ca76:	f011 fd23 	bl	801e4c0 <iprintf>
 800ca7a:	480d      	ldr	r0, [pc, #52]	; (800cab0 <USBH_SelectInterface+0x74>)
 800ca7c:	f011 fda6 	bl	801e5cc <puts>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
 800ca80:	f894 1349 	ldrb.w	r1, [r4, #841]	; 0x349
 800ca84:	480d      	ldr	r0, [pc, #52]	; (800cabc <USBH_SelectInterface+0x80>)
 800ca86:	f011 fd1b 	bl	801e4c0 <iprintf>
 800ca8a:	4809      	ldr	r0, [pc, #36]	; (800cab0 <USBH_SelectInterface+0x74>)
 800ca8c:	f011 fd9e 	bl	801e5cc <puts>
  USBH_StatusTypeDef status = USBH_OK;
 800ca90:	2000      	movs	r0, #0
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
  }

  return status;
}
 800ca92:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ErrLog("Cannot Select This Interface.");
 800ca94:	480a      	ldr	r0, [pc, #40]	; (800cac0 <USBH_SelectInterface+0x84>)
 800ca96:	f011 fd13 	bl	801e4c0 <iprintf>
 800ca9a:	480a      	ldr	r0, [pc, #40]	; (800cac4 <USBH_SelectInterface+0x88>)
 800ca9c:	f011 fd10 	bl	801e4c0 <iprintf>
 800caa0:	4803      	ldr	r0, [pc, #12]	; (800cab0 <USBH_SelectInterface+0x74>)
 800caa2:	f011 fd93 	bl	801e5cc <puts>
    status = USBH_FAIL;
 800caa6:	2002      	movs	r0, #2
 800caa8:	e7f3      	b.n	800ca92 <USBH_SelectInterface+0x56>
 800caaa:	bf00      	nop
 800caac:	0801fda9 	.word	0x0801fda9
 800cab0:	0801fbc6 	.word	0x0801fbc6
 800cab4:	0801fdc6 	.word	0x0801fdc6
 800cab8:	0801fdd5 	.word	0x0801fdd5
 800cabc:	0801fde4 	.word	0x0801fde4
 800cac0:	0801fb84 	.word	0x0801fb84
 800cac4:	0801fdf3 	.word	0x0801fdf3

0800cac8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cac8:	b570      	push	{r4, r5, r6, lr}
 800caca:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800cacc:	f890 6347 	ldrb.w	r6, [r0, #839]	; 0x347
 800cad0:	b2e5      	uxtb	r5, r4
 800cad2:	428e      	cmp	r6, r1
 800cad4:	d001      	beq.n	800cada <USBH_FindInterface+0x12>
 800cad6:	29ff      	cmp	r1, #255	; 0xff
 800cad8:	d10b      	bne.n	800caf2 <USBH_FindInterface+0x2a>
 800cada:	f890 6348 	ldrb.w	r6, [r0, #840]	; 0x348
 800cade:	4296      	cmp	r6, r2
 800cae0:	d001      	beq.n	800cae6 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cae2:	2aff      	cmp	r2, #255	; 0xff
 800cae4:	d105      	bne.n	800caf2 <USBH_FindInterface+0x2a>
 800cae6:	f890 6349 	ldrb.w	r6, [r0, #841]	; 0x349
 800caea:	429e      	cmp	r6, r3
 800caec:	d006      	beq.n	800cafc <USBH_FindInterface+0x34>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800caee:	2bff      	cmp	r3, #255	; 0xff
 800caf0:	d004      	beq.n	800cafc <USBH_FindInterface+0x34>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800caf2:	3401      	adds	r4, #1
 800caf4:	3032      	adds	r0, #50	; 0x32
 800caf6:	2c0a      	cmp	r4, #10
 800caf8:	d1e8      	bne.n	800cacc <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800cafa:	25ff      	movs	r5, #255	; 0xff
}
 800cafc:	4628      	mov	r0, r5
 800cafe:	bd70      	pop	{r4, r5, r6, pc}

0800cb00 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800cb00:	2300      	movs	r3, #0
 800cb02:	b530      	push	{r4, r5, lr}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800cb04:	f890 5344 	ldrb.w	r5, [r0, #836]	; 0x344
 800cb08:	b2dc      	uxtb	r4, r3
 800cb0a:	428d      	cmp	r5, r1
 800cb0c:	d103      	bne.n	800cb16 <USBH_FindInterfaceIndex+0x16>
 800cb0e:	f890 5345 	ldrb.w	r5, [r0, #837]	; 0x345
 800cb12:	4295      	cmp	r5, r2
 800cb14:	d004      	beq.n	800cb20 <USBH_FindInterfaceIndex+0x20>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cb16:	3301      	adds	r3, #1
 800cb18:	3032      	adds	r0, #50	; 0x32
 800cb1a:	2b0a      	cmp	r3, #10
 800cb1c:	d1f2      	bne.n	800cb04 <USBH_FindInterfaceIndex+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800cb1e:	24ff      	movs	r4, #255	; 0xff
}
 800cb20:	4620      	mov	r0, r4
 800cb22:	bd30      	pop	{r4, r5, pc}

0800cb24 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cb24:	b510      	push	{r4, lr}
 800cb26:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800cb28:	f7f5 fd1a 	bl	8002560 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800cb2c:	2101      	movs	r1, #1
 800cb2e:	4620      	mov	r0, r4
 800cb30:	f7f5 fce2 	bl	80024f8 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800cb34:	2000      	movs	r0, #0
 800cb36:	bd10      	pop	{r4, pc}

0800cb38 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cb38:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cb3a:	2302      	movs	r3, #2
{
 800cb3c:	b088      	sub	sp, #32
 800cb3e:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cb40:	f88d 301f 	strb.w	r3, [sp, #31]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cb44:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d101      	bne.n	800cb50 <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cb4c:	2303      	movs	r3, #3
 800cb4e:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 800cb50:	7823      	ldrb	r3, [r4, #0]
 800cb52:	2b0b      	cmp	r3, #11
 800cb54:	f200 82dc 	bhi.w	800d110 <USBH_Process+0x5d8>
 800cb58:	e8df f013 	tbh	[pc, r3, lsl #1]
 800cb5c:	002e000c 	.word	0x002e000c
 800cb60:	02dd005d 	.word	0x02dd005d
 800cb64:	009302da 	.word	0x009302da
 800cb68:	023e02b4 	.word	0x023e02b4
 800cb6c:	02580247 	.word	0x02580247
 800cb70:	02d40274 	.word	0x02d40274
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800cb74:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f000 82c9 	beq.w	800d110 <USBH_Process+0x5d8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cb7e:	2501      	movs	r5, #1
        USBH_UsrLog("USB Device Connected");
 800cb80:	48be      	ldr	r0, [pc, #760]	; (800ce7c <USBH_Process+0x344>)
 800cb82:	f011 fc9d 	bl	801e4c0 <iprintf>
 800cb86:	48be      	ldr	r0, [pc, #760]	; (800ce80 <USBH_Process+0x348>)
 800cb88:	f011 fd20 	bl	801e5cc <puts>
        USBH_Delay(200U);
 800cb8c:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cb8e:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 800cb90:	f7f5 fcdb 	bl	800254a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800cb94:	4620      	mov	r0, r4
 800cb96:	f7f5 fcf5 	bl	8002584 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cb9a:	2300      	movs	r3, #0
        phost->Timeout = 0U;

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cb9c:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cba0:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 800cba4:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cba8:	461a      	mov	r2, r3
 800cbaa:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800cbae:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800cbb2:	f7fc fed0 	bl	8009956 <osMessageQueuePut>
#endif
#endif
      break;
 800cbb6:	e2ab      	b.n	800d110 <USBH_Process+0x5d8>
      if (phost->device.PortEnabled == 1U)
 800cbb8:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d10c      	bne.n	800cbda <USBH_Process+0xa2>
        USBH_UsrLog("USB Device Reset Completed");
 800cbc0:	48b0      	ldr	r0, [pc, #704]	; (800ce84 <USBH_Process+0x34c>)
 800cbc2:	f011 fc7d 	bl	801e4c0 <iprintf>
 800cbc6:	48ae      	ldr	r0, [pc, #696]	; (800ce80 <USBH_Process+0x348>)
 800cbc8:	f011 fd00 	bl	801e5cc <puts>
        phost->device.RstCnt = 0U;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cbd2:	2302      	movs	r3, #2
            phost->gState = HOST_ABORT_STATE;
 800cbd4:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e1fa      	b.n	800cfd0 <USBH_Process+0x498>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cbda:	f8d4 3598 	ldr.w	r3, [r4, #1432]	; 0x598
 800cbde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbe2:	d911      	bls.n	800cc08 <USBH_Process+0xd0>
          phost->device.RstCnt++;
 800cbe4:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 800cbec:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 800cbee:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800cbf2:	d907      	bls.n	800cc04 <USBH_Process+0xcc>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 800cbf4:	48a4      	ldr	r0, [pc, #656]	; (800ce88 <USBH_Process+0x350>)
 800cbf6:	f011 fc63 	bl	801e4c0 <iprintf>
 800cbfa:	48a1      	ldr	r0, [pc, #644]	; (800ce80 <USBH_Process+0x348>)
 800cbfc:	f011 fce6 	bl	801e5cc <puts>
            phost->gState = HOST_ABORT_STATE;
 800cc00:	230d      	movs	r3, #13
 800cc02:	e7e7      	b.n	800cbd4 <USBH_Process+0x9c>
            phost->gState = HOST_IDLE;
 800cc04:	2300      	movs	r3, #0
 800cc06:	e7e5      	b.n	800cbd4 <USBH_Process+0x9c>
          phost->Timeout += 10U;
 800cc08:	330a      	adds	r3, #10
          USBH_Delay(10U);
 800cc0a:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 800cc0c:	f8c4 3598 	str.w	r3, [r4, #1432]	; 0x598
          USBH_Delay(10U);
 800cc10:	f7f5 fc9b 	bl	800254a <USBH_Delay>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cc14:	e7df      	b.n	800cbd6 <USBH_Process+0x9e>
      if (phost->pUser != NULL)
 800cc16:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 800cc1a:	b113      	cbz	r3, 800cc22 <USBH_Process+0xea>
        phost->pUser(phost, HOST_USER_CONNECTION);
 800cc1c:	2104      	movs	r1, #4
 800cc1e:	4620      	mov	r0, r4
 800cc20:	4798      	blx	r3
      USBH_Delay(100U);
 800cc22:	2064      	movs	r0, #100	; 0x64
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cc24:	2500      	movs	r5, #0
      USBH_Delay(100U);
 800cc26:	f7f5 fc90 	bl	800254a <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f7f5 fc52 	bl	80024d4 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 800cc30:	2305      	movs	r3, #5
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800cc32:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cc36:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
 800cc38:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cc3a:	4620      	mov	r0, r4
 800cc3c:	f002 fe6a 	bl	800f914 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cc40:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800cc42:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cc44:	4620      	mov	r0, r4
 800cc46:	f002 fe65 	bl	800f914 <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cc4a:	79a3      	ldrb	r3, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cc4c:	4601      	mov	r1, r0
 800cc4e:	7120      	strb	r0, [r4, #4]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cc50:	9302      	str	r3, [sp, #8]
 800cc52:	2280      	movs	r2, #128	; 0x80
 800cc54:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800cc58:	4620      	mov	r0, r4
 800cc5a:	9501      	str	r5, [sp, #4]
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800cc62:	f002 fe43 	bl	800f8ec <USBH_OpenPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cc66:	79a3      	ldrb	r3, [r4, #6]
 800cc68:	462a      	mov	r2, r5
 800cc6a:	7961      	ldrb	r1, [r4, #5]
 800cc6c:	4620      	mov	r0, r4
 800cc6e:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800cc72:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800cc76:	9300      	str	r3, [sp, #0]
 800cc78:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800cc7c:	f002 fe36 	bl	800f8ec <USBH_OpenPipe>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cc80:	e7a9      	b.n	800cbd6 <USBH_Process+0x9e>
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
  USBH_ErrLog("enum state = %d", phost->EnumState);
 800cc82:	4882      	ldr	r0, [pc, #520]	; (800ce8c <USBH_Process+0x354>)
 800cc84:	f011 fc1c 	bl	801e4c0 <iprintf>
 800cc88:	7861      	ldrb	r1, [r4, #1]
 800cc8a:	4881      	ldr	r0, [pc, #516]	; (800ce90 <USBH_Process+0x358>)
 800cc8c:	f011 fc18 	bl	801e4c0 <iprintf>
 800cc90:	487b      	ldr	r0, [pc, #492]	; (800ce80 <USBH_Process+0x348>)
 800cc92:	f011 fc9b 	bl	801e5cc <puts>
  switch (phost->EnumState)
 800cc96:	7865      	ldrb	r5, [r4, #1]
 800cc98:	2d07      	cmp	r5, #7
 800cc9a:	d830      	bhi.n	800ccfe <USBH_Process+0x1c6>
 800cc9c:	e8df f015 	tbh	[pc, r5, lsl #1]
 800cca0:	00550008 	.word	0x00550008
 800cca4:	00df00b1 	.word	0x00df00b1
 800cca8:	012c00e6 	.word	0x012c00e6
 800ccac:	01760155 	.word	0x01760155
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800ccb0:	2108      	movs	r1, #8
 800ccb2:	4620      	mov	r0, r4
 800ccb4:	f000 fc5c 	bl	800d570 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800ccb8:	4606      	mov	r6, r0
 800ccba:	b9f0      	cbnz	r0, 800ccfa <USBH_Process+0x1c2>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ccbc:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ccc0:	2501      	movs	r5, #1
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ccc2:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ccc4:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ccc6:	7921      	ldrb	r1, [r4, #4]
 800ccc8:	2280      	movs	r2, #128	; 0x80
 800ccca:	4620      	mov	r0, r4
 800cccc:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ccd0:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800ccda:	f002 fe07 	bl	800f8ec <USBH_OpenPipe>
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ccde:	79a3      	ldrb	r3, [r4, #6]
 800cce0:	4632      	mov	r2, r6
 800cce2:	7961      	ldrb	r1, [r4, #5]
 800cce4:	4620      	mov	r0, r4
 800cce6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ccea:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800ccee:	9300      	str	r3, [sp, #0]
 800ccf0:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800ccf4:	f002 fdfa 	bl	800f8ec <USBH_OpenPipe>
 800ccf8:	e03e      	b.n	800cd78 <USBH_Process+0x240>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ccfa:	2803      	cmp	r0, #3
 800ccfc:	d001      	beq.n	800cd02 <USBH_Process+0x1ca>
  switch (phost->EnumState)
 800ccfe:	2501      	movs	r5, #1
 800cd00:	e03a      	b.n	800cd78 <USBH_Process+0x240>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 800cd02:	4862      	ldr	r0, [pc, #392]	; (800ce8c <USBH_Process+0x354>)
 800cd04:	f011 fbdc 	bl	801e4c0 <iprintf>
 800cd08:	4862      	ldr	r0, [pc, #392]	; (800ce94 <USBH_Process+0x35c>)
 800cd0a:	f011 fbd9 	bl	801e4c0 <iprintf>
 800cd0e:	485c      	ldr	r0, [pc, #368]	; (800ce80 <USBH_Process+0x348>)
 800cd10:	f011 fc5c 	bl	801e5cc <puts>
        phost->device.EnumCnt++;
 800cd14:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800cd18:	3301      	adds	r3, #1
 800cd1a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800cd1c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800cd1e:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cd22:	d907      	bls.n	800cd34 <USBH_Process+0x1fc>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cd24:	485c      	ldr	r0, [pc, #368]	; (800ce98 <USBH_Process+0x360>)
 800cd26:	f011 fbcb 	bl	801e4c0 <iprintf>
 800cd2a:	4855      	ldr	r0, [pc, #340]	; (800ce80 <USBH_Process+0x348>)
 800cd2c:	f011 fc4e 	bl	801e5cc <puts>
          phost->gState = HOST_ABORT_STATE;
 800cd30:	230d      	movs	r3, #13
 800cd32:	e008      	b.n	800cd46 <USBH_Process+0x20e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cd34:	7961      	ldrb	r1, [r4, #5]
 800cd36:	4620      	mov	r0, r4
 800cd38:	f002 fe04 	bl	800f944 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cd3c:	7921      	ldrb	r1, [r4, #4]
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f002 fe00 	bl	800f944 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800cd44:	2300      	movs	r3, #0
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 800cd46:	7023      	strb	r3, [r4, #0]
 800cd48:	e7d9      	b.n	800ccfe <USBH_Process+0x1c6>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800cd4a:	2112      	movs	r1, #18
 800cd4c:	4620      	mov	r0, r4
 800cd4e:	f000 fc0f 	bl	800d570 <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800cd52:	bb78      	cbnz	r0, 800cdb4 <USBH_Process+0x27c>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 800cd54:	f8b4 1330 	ldrh.w	r1, [r4, #816]	; 0x330
 800cd58:	4850      	ldr	r0, [pc, #320]	; (800ce9c <USBH_Process+0x364>)
 800cd5a:	f011 fbb1 	bl	801e4c0 <iprintf>
 800cd5e:	4848      	ldr	r0, [pc, #288]	; (800ce80 <USBH_Process+0x348>)
 800cd60:	f011 fc34 	bl	801e5cc <puts>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 800cd64:	f8b4 132e 	ldrh.w	r1, [r4, #814]	; 0x32e
 800cd68:	484d      	ldr	r0, [pc, #308]	; (800cea0 <USBH_Process+0x368>)
 800cd6a:	f011 fba9 	bl	801e4c0 <iprintf>
 800cd6e:	4844      	ldr	r0, [pc, #272]	; (800ce80 <USBH_Process+0x348>)
 800cd70:	f011 fc2c 	bl	801e5cc <puts>
        phost->EnumState = ENUM_SET_ADDR;
 800cd74:	2302      	movs	r3, #2
 800cd76:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
 800cd78:	f88d 501f 	strb.w	r5, [sp, #31]
      if (status == USBH_OK)
 800cd7c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800cd80:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f040 81c3 	bne.w	800d110 <USBH_Process+0x5d8>
        USBH_UsrLog("Enumeration done.");
 800cd8a:	4846      	ldr	r0, [pc, #280]	; (800cea4 <USBH_Process+0x36c>)
 800cd8c:	f011 fb98 	bl	801e4c0 <iprintf>
 800cd90:	483b      	ldr	r0, [pc, #236]	; (800ce80 <USBH_Process+0x348>)
 800cd92:	f011 fc1b 	bl	801e5cc <puts>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cd96:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
        phost->device.current_interface = 0U;
 800cd9a:	f884 5324 	strb.w	r5, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	f040 8113 	bne.w	800cfca <USBH_Process+0x492>
          USBH_UsrLog("This device has only 1 configuration.");
 800cda4:	4840      	ldr	r0, [pc, #256]	; (800cea8 <USBH_Process+0x370>)
 800cda6:	f011 fb8b 	bl	801e4c0 <iprintf>
 800cdaa:	4835      	ldr	r0, [pc, #212]	; (800ce80 <USBH_Process+0x348>)
 800cdac:	f011 fc0e 	bl	801e5cc <puts>
        phost->gState = HOST_SET_CONFIGURATION;
 800cdb0:	2308      	movs	r3, #8
 800cdb2:	e10b      	b.n	800cfcc <USBH_Process+0x494>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cdb4:	2803      	cmp	r0, #3
 800cdb6:	d1a2      	bne.n	800ccfe <USBH_Process+0x1c6>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800cdb8:	4834      	ldr	r0, [pc, #208]	; (800ce8c <USBH_Process+0x354>)
 800cdba:	f011 fb81 	bl	801e4c0 <iprintf>
 800cdbe:	483b      	ldr	r0, [pc, #236]	; (800ceac <USBH_Process+0x374>)
 800cdc0:	f011 fb7e 	bl	801e4c0 <iprintf>
 800cdc4:	482e      	ldr	r0, [pc, #184]	; (800ce80 <USBH_Process+0x348>)
 800cdc6:	f011 fc01 	bl	801e5cc <puts>
        phost->device.EnumCnt++;
 800cdca:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800cdce:	3301      	adds	r3, #1
 800cdd0:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800cdd2:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800cdd4:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cdd8:	d908      	bls.n	800cdec <USBH_Process+0x2b4>
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800cdda:	482f      	ldr	r0, [pc, #188]	; (800ce98 <USBH_Process+0x360>)
 800cddc:	f011 fb70 	bl	801e4c0 <iprintf>
 800cde0:	4827      	ldr	r0, [pc, #156]	; (800ce80 <USBH_Process+0x348>)
 800cde2:	f011 fbf3 	bl	801e5cc <puts>
          phost->gState = HOST_ABORT_STATE;
 800cde6:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
 800cde8:	7023      	strb	r3, [r4, #0]
 800cdea:	e7c5      	b.n	800cd78 <USBH_Process+0x240>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdec:	7961      	ldrb	r1, [r4, #5]
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f002 fda8 	bl	800f944 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdf4:	7921      	ldrb	r1, [r4, #4]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	f002 fda4 	bl	800f944 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	7063      	strb	r3, [r4, #1]
 800ce00:	e7f2      	b.n	800cde8 <USBH_Process+0x2b0>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ce02:	2101      	movs	r1, #1
 800ce04:	4620      	mov	r0, r4
 800ce06:	f000 fd29 	bl	800d85c <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800ce0a:	4606      	mov	r6, r0
 800ce0c:	b980      	cbnz	r0, 800ce30 <USBH_Process+0x2f8>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ce0e:	2501      	movs	r5, #1
        USBH_Delay(2U);
 800ce10:	2002      	movs	r0, #2
 800ce12:	f7f5 fb9a 	bl	800254a <USBH_Delay>
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ce16:	4826      	ldr	r0, [pc, #152]	; (800ceb0 <USBH_Process+0x378>)
 800ce18:	4629      	mov	r1, r5
        phost->device.address = USBH_DEVICE_ADDRESS;
 800ce1a:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 800ce1e:	f011 fb4f 	bl	801e4c0 <iprintf>
 800ce22:	4817      	ldr	r0, [pc, #92]	; (800ce80 <USBH_Process+0x348>)
 800ce24:	f011 fbd2 	bl	801e5cc <puts>
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ce2c:	79a3      	ldrb	r3, [r4, #6]
 800ce2e:	e74a      	b.n	800ccc6 <USBH_Process+0x18e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce30:	2803      	cmp	r0, #3
 800ce32:	f47f af64 	bne.w	800ccfe <USBH_Process+0x1c6>
        USBH_ErrLog("Control error: Device Set Address request failed");
 800ce36:	4815      	ldr	r0, [pc, #84]	; (800ce8c <USBH_Process+0x354>)
 800ce38:	f011 fb42 	bl	801e4c0 <iprintf>
 800ce3c:	481d      	ldr	r0, [pc, #116]	; (800ceb4 <USBH_Process+0x37c>)
 800ce3e:	f011 fb3f 	bl	801e4c0 <iprintf>
 800ce42:	480f      	ldr	r0, [pc, #60]	; (800ce80 <USBH_Process+0x348>)
 800ce44:	f011 fbc2 	bl	801e5cc <puts>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 800ce48:	4813      	ldr	r0, [pc, #76]	; (800ce98 <USBH_Process+0x360>)
 800ce4a:	f011 fb39 	bl	801e4c0 <iprintf>
 800ce4e:	480c      	ldr	r0, [pc, #48]	; (800ce80 <USBH_Process+0x348>)
 800ce50:	f011 fbbc 	bl	801e5cc <puts>
        phost->gState = HOST_ABORT_STATE;
 800ce54:	230d      	movs	r3, #13
 800ce56:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 800ce58:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ce5a:	7063      	strb	r3, [r4, #1]
 800ce5c:	e74f      	b.n	800ccfe <USBH_Process+0x1c6>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ce5e:	2109      	movs	r1, #9
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 fbe2 	bl	800d62a <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800ce66:	bb38      	cbnz	r0, 800ceb8 <USBH_Process+0x380>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ce68:	2304      	movs	r3, #4
 800ce6a:	e7f6      	b.n	800ce5a <USBH_Process+0x322>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ce6c:	f8b4 133a 	ldrh.w	r1, [r4, #826]	; 0x33a
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fbda 	bl	800d62a <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800ce76:	b9f8      	cbnz	r0, 800ceb8 <USBH_Process+0x380>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800ce78:	2305      	movs	r3, #5
 800ce7a:	e7ee      	b.n	800ce5a <USBH_Process+0x322>
 800ce7c:	0801fe11 	.word	0x0801fe11
 800ce80:	0801fbc6 	.word	0x0801fbc6
 800ce84:	0801fe26 	.word	0x0801fe26
 800ce88:	0801fe41 	.word	0x0801fe41
 800ce8c:	0801fb84 	.word	0x0801fb84
 800ce90:	0801fe6d 	.word	0x0801fe6d
 800ce94:	0801fe7d 	.word	0x0801fe7d
 800ce98:	0801feb1 	.word	0x0801feb1
 800ce9c:	0801fef0 	.word	0x0801fef0
 800cea0:	0801fef9 	.word	0x0801fef9
 800cea4:	08020020 	.word	0x08020020
 800cea8:	08020032 	.word	0x08020032
 800ceac:	0801ff02 	.word	0x0801ff02
 800ceb0:	0801ff3b 	.word	0x0801ff3b
 800ceb4:	0801ff53 	.word	0x0801ff53
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ceb8:	2803      	cmp	r0, #3
 800ceba:	f47f af20 	bne.w	800ccfe <USBH_Process+0x1c6>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 800cebe:	48aa      	ldr	r0, [pc, #680]	; (800d168 <USBH_Process+0x630>)
 800cec0:	f011 fafe 	bl	801e4c0 <iprintf>
 800cec4:	48a9      	ldr	r0, [pc, #676]	; (800d16c <USBH_Process+0x634>)
 800cec6:	f011 fafb 	bl	801e4c0 <iprintf>
 800ceca:	48a9      	ldr	r0, [pc, #676]	; (800d170 <USBH_Process+0x638>)
 800cecc:	f011 fb7e 	bl	801e5cc <puts>
        phost->device.EnumCnt++;
 800ced0:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800ced4:	3301      	adds	r3, #1
 800ced6:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800ced8:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800ceda:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cede:	f63f af21 	bhi.w	800cd24 <USBH_Process+0x1ec>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cee2:	7961      	ldrb	r1, [r4, #5]
 800cee4:	4620      	mov	r0, r4
 800cee6:	f002 fd2d 	bl	800f944 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ceea:	7921      	ldrb	r1, [r4, #4]
 800ceec:	4620      	mov	r0, r4
 800ceee:	f002 fd29 	bl	800f944 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cef2:	2300      	movs	r3, #0
 800cef4:	7063      	strb	r3, [r4, #1]
 800cef6:	e726      	b.n	800cd46 <USBH_Process+0x20e>
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cef8:	f894 1334 	ldrb.w	r1, [r4, #820]	; 0x334
 800cefc:	b319      	cbz	r1, 800cf46 <USBH_Process+0x40e>
                                        phost->device.Data, 0xFFU);
 800cefe:	f504 768e 	add.w	r6, r4, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cf02:	23ff      	movs	r3, #255	; 0xff
 800cf04:	4620      	mov	r0, r4
 800cf06:	4632      	mov	r2, r6
 800cf08:	f000 fc81 	bl	800d80e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800cf0c:	b9a0      	cbnz	r0, 800cf38 <USBH_Process+0x400>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 800cf0e:	4631      	mov	r1, r6
 800cf10:	4898      	ldr	r0, [pc, #608]	; (800d174 <USBH_Process+0x63c>)
 800cf12:	f011 fad5 	bl	801e4c0 <iprintf>
          USBH_UsrLog("Manufacturer : N/A");
 800cf16:	4896      	ldr	r0, [pc, #600]	; (800d170 <USBH_Process+0x638>)
 800cf18:	f011 fb58 	bl	801e5cc <puts>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cf1c:	2306      	movs	r3, #6
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
        {
          USBH_UsrLog("Product : N/A");
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf1e:	7063      	strb	r3, [r4, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf20:	2305      	movs	r3, #5
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf22:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800cf26:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf2a:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cf2e:	2300      	movs	r3, #0
 800cf30:	461a      	mov	r2, r3
 800cf32:	f7fc fd10 	bl	8009956 <osMessageQueuePut>
 800cf36:	e6e2      	b.n	800ccfe <USBH_Process+0x1c6>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf38:	2803      	cmp	r0, #3
 800cf3a:	f47f aee0 	bne.w	800ccfe <USBH_Process+0x1c6>
          USBH_UsrLog("Manufacturer : N/A");
 800cf3e:	488e      	ldr	r0, [pc, #568]	; (800d178 <USBH_Process+0x640>)
 800cf40:	f011 fabe 	bl	801e4c0 <iprintf>
 800cf44:	e7e7      	b.n	800cf16 <USBH_Process+0x3de>
 800cf46:	9105      	str	r1, [sp, #20]
        USBH_UsrLog("Manufacturer : N/A");
 800cf48:	e7f9      	b.n	800cf3e <USBH_Process+0x406>
      if (phost->device.DevDesc.iProduct != 0U)
 800cf4a:	f894 1335 	ldrb.w	r1, [r4, #821]	; 0x335
 800cf4e:	b1d9      	cbz	r1, 800cf88 <USBH_Process+0x450>
                                        phost->device.Data, 0xFFU);
 800cf50:	f504 758e 	add.w	r5, r4, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cf54:	23ff      	movs	r3, #255	; 0xff
 800cf56:	4620      	mov	r0, r4
 800cf58:	462a      	mov	r2, r5
 800cf5a:	f000 fc58 	bl	800d80e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800cf5e:	b940      	cbnz	r0, 800cf72 <USBH_Process+0x43a>
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 800cf60:	4629      	mov	r1, r5
 800cf62:	4886      	ldr	r0, [pc, #536]	; (800d17c <USBH_Process+0x644>)
 800cf64:	f011 faac 	bl	801e4c0 <iprintf>
 800cf68:	4881      	ldr	r0, [pc, #516]	; (800d170 <USBH_Process+0x638>)
 800cf6a:	f011 fb2f 	bl	801e5cc <puts>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf6e:	2307      	movs	r3, #7
 800cf70:	e773      	b.n	800ce5a <USBH_Process+0x322>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf72:	2803      	cmp	r0, #3
 800cf74:	f47f aec3 	bne.w	800ccfe <USBH_Process+0x1c6>
          USBH_UsrLog("Product : N/A");
 800cf78:	4881      	ldr	r0, [pc, #516]	; (800d180 <USBH_Process+0x648>)
 800cf7a:	f011 faa1 	bl	801e4c0 <iprintf>
 800cf7e:	487c      	ldr	r0, [pc, #496]	; (800d170 <USBH_Process+0x638>)
 800cf80:	f011 fb24 	bl	801e5cc <puts>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cf84:	2307      	movs	r3, #7
 800cf86:	e7ca      	b.n	800cf1e <USBH_Process+0x3e6>
 800cf88:	9105      	str	r1, [sp, #20]
          /* .. */
        }
      }
      else
      {
        USBH_UsrLog("Product : N/A");
 800cf8a:	e7f5      	b.n	800cf78 <USBH_Process+0x440>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cf8c:	f894 1336 	ldrb.w	r1, [r4, #822]	; 0x336
 800cf90:	b199      	cbz	r1, 800cfba <USBH_Process+0x482>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
                                        phost->device.Data, 0xFFU);
 800cf92:	f504 768e 	add.w	r6, r4, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cf96:	23ff      	movs	r3, #255	; 0xff
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4632      	mov	r2, r6
 800cf9c:	f000 fc37 	bl	800d80e <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	b938      	cbnz	r0, 800cfb4 <USBH_Process+0x47c>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	4877      	ldr	r0, [pc, #476]	; (800d184 <USBH_Process+0x64c>)
 800cfa8:	f011 fa8a 	bl	801e4c0 <iprintf>
 800cfac:	4870      	ldr	r0, [pc, #448]	; (800d170 <USBH_Process+0x638>)
 800cfae:	f011 fb0d 	bl	801e5cc <puts>
          Status = USBH_OK;
 800cfb2:	e6e1      	b.n	800cd78 <USBH_Process+0x240>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfb4:	2803      	cmp	r0, #3
 800cfb6:	f47f aea2 	bne.w	800ccfe <USBH_Process+0x1c6>
        {
          USBH_UsrLog("Serial Number : N/A");
 800cfba:	4873      	ldr	r0, [pc, #460]	; (800d188 <USBH_Process+0x650>)
          Status = USBH_OK;
 800cfbc:	2500      	movs	r5, #0
          USBH_UsrLog("Serial Number : N/A");
 800cfbe:	f011 fa7f 	bl	801e4c0 <iprintf>
 800cfc2:	486b      	ldr	r0, [pc, #428]	; (800d170 <USBH_Process+0x638>)
 800cfc4:	f011 fb02 	bl	801e5cc <puts>
          Status = USBH_OK;
 800cfc8:	e6d6      	b.n	800cd78 <USBH_Process+0x240>
          phost->gState = HOST_INPUT;
 800cfca:	2307      	movs	r3, #7
 800cfcc:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cfce:	2305      	movs	r3, #5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfd0:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	e5e7      	b.n	800cba8 <USBH_Process+0x70>
      if (phost->pUser != NULL)
 800cfd8:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f000 8097 	beq.w	800d110 <USBH_Process+0x5d8>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cfe2:	2101      	movs	r1, #1
 800cfe4:	4620      	mov	r0, r4
 800cfe6:	4798      	blx	r3
 800cfe8:	e6e2      	b.n	800cdb0 <USBH_Process+0x278>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cfea:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 800cfee:	4620      	mov	r0, r4
 800cff0:	f000 fc41 	bl	800d876 <USBH_SetCfg>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	f47f adee 	bne.w	800cbd6 <USBH_Process+0x9e>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cffa:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
 800cffc:	4863      	ldr	r0, [pc, #396]	; (800d18c <USBH_Process+0x654>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cffe:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog("Default configuration set.");
 800d000:	f011 fa5e 	bl	801e4c0 <iprintf>
 800d004:	485a      	ldr	r0, [pc, #360]	; (800d170 <USBH_Process+0x638>)
 800d006:	f011 fae1 	bl	801e5cc <puts>
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d00a:	e5e4      	b.n	800cbd6 <USBH_Process+0x9e>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d00c:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 800d010:	069b      	lsls	r3, r3, #26
 800d012:	d50e      	bpl.n	800d032 <USBH_Process+0x4fa>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d014:	2101      	movs	r1, #1
 800d016:	4620      	mov	r0, r4
 800d018:	f000 fc48 	bl	800d8ac <USBH_SetFeature>
 800d01c:	f88d 001f 	strb.w	r0, [sp, #31]
        if (status == USBH_OK)
 800d020:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d024:	b93b      	cbnz	r3, 800d036 <USBH_Process+0x4fe>
          USBH_UsrLog("Device remote wakeup enabled");
 800d026:	485a      	ldr	r0, [pc, #360]	; (800d190 <USBH_Process+0x658>)
          USBH_UsrLog("Remote wakeup not supported by the device");
 800d028:	f011 fa4a 	bl	801e4c0 <iprintf>
 800d02c:	4850      	ldr	r0, [pc, #320]	; (800d170 <USBH_Process+0x638>)
 800d02e:	f011 facd 	bl	801e5cc <puts>
        phost->gState = HOST_CHECK_CLASS;
 800d032:	230a      	movs	r3, #10
 800d034:	e5ce      	b.n	800cbd4 <USBH_Process+0x9c>
        else if (status == USBH_NOT_SUPPORTED)
 800d036:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	f47f adcb 	bne.w	800cbd6 <USBH_Process+0x9e>
          USBH_UsrLog("Remote wakeup not supported by the device");
 800d040:	4854      	ldr	r0, [pc, #336]	; (800d194 <USBH_Process+0x65c>)
 800d042:	e7f1      	b.n	800d028 <USBH_Process+0x4f0>
      if (phost->ClassNumber == 0U)
 800d044:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
 800d048:	b91b      	cbnz	r3, 800d052 <USBH_Process+0x51a>
        USBH_UsrLog("No Class has been registered.");
 800d04a:	4853      	ldr	r0, [pc, #332]	; (800d198 <USBH_Process+0x660>)
          USBH_UsrLog("No registered class for this device.");
 800d04c:	f011 fa38 	bl	801e4c0 <iprintf>
 800d050:	e030      	b.n	800d0b4 <USBH_Process+0x57c>
        phost->pActiveClass = NULL;
 800d052:	2300      	movs	r3, #0
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d054:	f894 0347 	ldrb.w	r0, [r4, #839]	; 0x347
 800d058:	f204 514c 	addw	r1, r4, #1356	; 0x54c
        phost->pActiveClass = NULL;
 800d05c:	f8c4 354c 	str.w	r3, [r4, #1356]	; 0x54c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d060:	f504 63a7 	add.w	r3, r4, #1336	; 0x538
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d064:	f853 2b04 	ldr.w	r2, [r3], #4
 800d068:	7915      	ldrb	r5, [r2, #4]
 800d06a:	4285      	cmp	r5, r0
 800d06c:	d119      	bne.n	800d0a2 <USBH_Process+0x56a>
            phost->pActiveClass = phost->pClass[idx];
 800d06e:	f8c4 254c 	str.w	r2, [r4, #1356]	; 0x54c
        if (phost->pActiveClass != NULL)
 800d072:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800d076:	b30b      	cbz	r3, 800d0bc <USBH_Process+0x584>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	4620      	mov	r0, r4
 800d07c:	4798      	blx	r3
 800d07e:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800d082:	b988      	cbnz	r0, 800d0a8 <USBH_Process+0x570>
            phost->gState = HOST_CLASS_REQUEST;
 800d084:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d086:	4845      	ldr	r0, [pc, #276]	; (800d19c <USBH_Process+0x664>)
            phost->gState = HOST_CLASS_REQUEST;
 800d088:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 800d08a:	6819      	ldr	r1, [r3, #0]
 800d08c:	f011 fa18 	bl	801e4c0 <iprintf>
 800d090:	4837      	ldr	r0, [pc, #220]	; (800d170 <USBH_Process+0x638>)
 800d092:	f011 fa9b 	bl	801e5cc <puts>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d096:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 800d09a:	2103      	movs	r1, #3
 800d09c:	4620      	mov	r0, r4
 800d09e:	4798      	blx	r3
 800d0a0:	e795      	b.n	800cfce <USBH_Process+0x496>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d0a2:	4299      	cmp	r1, r3
 800d0a4:	d1de      	bne.n	800d064 <USBH_Process+0x52c>
 800d0a6:	e7e4      	b.n	800d072 <USBH_Process+0x53a>
            phost->gState = HOST_ABORT_STATE;
 800d0a8:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d0aa:	483d      	ldr	r0, [pc, #244]	; (800d1a0 <USBH_Process+0x668>)
            phost->gState = HOST_ABORT_STATE;
 800d0ac:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 800d0ae:	6819      	ldr	r1, [r3, #0]
 800d0b0:	f011 fa06 	bl	801e4c0 <iprintf>
          USBH_UsrLog("No registered class for this device.");
 800d0b4:	482e      	ldr	r0, [pc, #184]	; (800d170 <USBH_Process+0x638>)
 800d0b6:	f011 fa89 	bl	801e5cc <puts>
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0ba:	e788      	b.n	800cfce <USBH_Process+0x496>
          phost->gState = HOST_ABORT_STATE;
 800d0bc:	230d      	movs	r3, #13
          USBH_UsrLog("No registered class for this device.");
 800d0be:	4839      	ldr	r0, [pc, #228]	; (800d1a4 <USBH_Process+0x66c>)
          phost->gState = HOST_ABORT_STATE;
 800d0c0:	7023      	strb	r3, [r4, #0]
          USBH_UsrLog("No registered class for this device.");
 800d0c2:	e7c3      	b.n	800d04c <USBH_Process+0x514>
      if (phost->pActiveClass != NULL)
 800d0c4:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800d0c8:	b1ab      	cbz	r3, 800d0f6 <USBH_Process+0x5be>
        status = phost->pActiveClass->Requests(phost);
 800d0ca:	691b      	ldr	r3, [r3, #16]
 800d0cc:	4620      	mov	r0, r4
 800d0ce:	4798      	blx	r3
 800d0d0:	f88d 001f 	strb.w	r0, [sp, #31]
        if (status == USBH_OK)
 800d0d4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d0d8:	b90b      	cbnz	r3, 800d0de <USBH_Process+0x5a6>
          phost->gState = HOST_CLASS;
 800d0da:	230b      	movs	r3, #11
 800d0dc:	e776      	b.n	800cfcc <USBH_Process+0x494>
        else if (status == USBH_FAIL)
 800d0de:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800d0e2:	2b02      	cmp	r3, #2
 800d0e4:	f47f af73 	bne.w	800cfce <USBH_Process+0x496>
          phost->gState = HOST_ABORT_STATE;
 800d0e8:	230d      	movs	r3, #13
          USBH_ErrLog("Device not responding Please Unplug.");
 800d0ea:	481f      	ldr	r0, [pc, #124]	; (800d168 <USBH_Process+0x630>)
          phost->gState = HOST_ABORT_STATE;
 800d0ec:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 800d0ee:	f011 f9e7 	bl	801e4c0 <iprintf>
 800d0f2:	482d      	ldr	r0, [pc, #180]	; (800d1a8 <USBH_Process+0x670>)
 800d0f4:	e7aa      	b.n	800d04c <USBH_Process+0x514>
        phost->gState = HOST_ABORT_STATE;
 800d0f6:	230d      	movs	r3, #13
        USBH_ErrLog("Invalid Class Driver.");
 800d0f8:	481b      	ldr	r0, [pc, #108]	; (800d168 <USBH_Process+0x630>)
        phost->gState = HOST_ABORT_STATE;
 800d0fa:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
 800d0fc:	f011 f9e0 	bl	801e4c0 <iprintf>
 800d100:	482a      	ldr	r0, [pc, #168]	; (800d1ac <USBH_Process+0x674>)
 800d102:	e7a3      	b.n	800d04c <USBH_Process+0x514>
      if (phost->pActiveClass != NULL)
 800d104:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800d108:	b113      	cbz	r3, 800d110 <USBH_Process+0x5d8>
        phost->pActiveClass->BgndProcess(phost);
 800d10a:	695b      	ldr	r3, [r3, #20]
 800d10c:	4620      	mov	r0, r4
 800d10e:	4798      	blx	r3
}
 800d110:	2000      	movs	r0, #0
 800d112:	b008      	add	sp, #32
 800d114:	bd70      	pop	{r4, r5, r6, pc}
      phost->device.is_disconnected = 0U;
 800d116:	2500      	movs	r5, #0
      (void)DeInitStateMachine(phost);
 800d118:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
 800d11a:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
      (void)DeInitStateMachine(phost);
 800d11e:	f7ff fbfc 	bl	800c91a <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
 800d122:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800d126:	b123      	cbz	r3, 800d132 <USBH_Process+0x5fa>
        phost->pActiveClass->DeInit(phost);
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	4620      	mov	r0, r4
 800d12c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d12e:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
      if (phost->pUser != NULL)
 800d132:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 800d136:	b113      	cbz	r3, 800d13e <USBH_Process+0x606>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d138:	2105      	movs	r1, #5
 800d13a:	4620      	mov	r0, r4
 800d13c:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
 800d13e:	481c      	ldr	r0, [pc, #112]	; (800d1b0 <USBH_Process+0x678>)
 800d140:	f011 f9be 	bl	801e4c0 <iprintf>
 800d144:	480a      	ldr	r0, [pc, #40]	; (800d170 <USBH_Process+0x638>)
 800d146:	f011 fa41 	bl	801e5cc <puts>
      if (phost->device.is_ReEnumerated == 1U)
 800d14a:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d106      	bne.n	800d160 <USBH_Process+0x628>
        phost->device.is_ReEnumerated = 0U;
 800d152:	2300      	movs	r3, #0
        (void)USBH_Start(phost);
 800d154:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 800d156:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        (void)USBH_Start(phost);
 800d15a:	f7ff fce3 	bl	800cb24 <USBH_Start>
 800d15e:	e53a      	b.n	800cbd6 <USBH_Process+0x9e>
        (void)USBH_LL_Start(phost);
 800d160:	4620      	mov	r0, r4
 800d162:	f7f5 f9fd 	bl	8002560 <USBH_LL_Start>
 800d166:	e536      	b.n	800cbd6 <USBH_Process+0x9e>
 800d168:	0801fb84 	.word	0x0801fb84
 800d16c:	0801ff84 	.word	0x0801ff84
 800d170:	0801fbc6 	.word	0x0801fbc6
 800d174:	0801ffc6 	.word	0x0801ffc6
 800d178:	0801ffd8 	.word	0x0801ffd8
 800d17c:	080202b2 	.word	0x080202b2
 800d180:	0801ffeb 	.word	0x0801ffeb
 800d184:	0801fff9 	.word	0x0801fff9
 800d188:	0802000c 	.word	0x0802000c
 800d18c:	08020058 	.word	0x08020058
 800d190:	08020073 	.word	0x08020073
 800d194:	08020090 	.word	0x08020090
 800d198:	080200ba 	.word	0x080200ba
 800d19c:	080200d8 	.word	0x080200d8
 800d1a0:	080200ea 	.word	0x080200ea
 800d1a4:	0802010a 	.word	0x0802010a
 800d1a8:	0802012f 	.word	0x0802012f
 800d1ac:	08020154 	.word	0x08020154
 800d1b0:	0802016a 	.word	0x0802016a

0800d1b4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d1b4:	b538      	push	{r3, r4, r5, lr}
 800d1b6:	4604      	mov	r4, r0
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d1b8:	f500 65b6 	add.w	r5, r0, #1456	; 0x5b0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	4629      	mov	r1, r5
 800d1c4:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800d1c8:	f7fc fbf5 	bl	80099b6 <osMessageQueueGet>
    if (status == osOK)
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d1f5      	bne.n	800d1bc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f7ff fcb1 	bl	800cb38 <USBH_Process>
 800d1d6:	e7f1      	b.n	800d1bc <USBH_Process_OS+0x8>

0800d1d8 <USBH_LL_SetTimer>:
  phost->Timer = time;
 800d1d8:	f8c0 1594 	str.w	r1, [r0, #1428]	; 0x594
}
 800d1dc:	4770      	bx	lr

0800d1de <USBH_LL_IncTimer>:
  phost->Timer++;
 800d1de:	f8d0 2594 	ldr.w	r2, [r0, #1428]	; 0x594
 800d1e2:	3201      	adds	r2, #1
 800d1e4:	f8c0 2594 	str.w	r2, [r0, #1428]	; 0x594
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d1e8:	7802      	ldrb	r2, [r0, #0]
 800d1ea:	2a0b      	cmp	r2, #11
 800d1ec:	d104      	bne.n	800d1f8 <USBH_LL_IncTimer+0x1a>
 800d1ee:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 800d1f2:	b10b      	cbz	r3, 800d1f8 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 800d1f4:	699b      	ldr	r3, [r3, #24]
 800d1f6:	4718      	bx	r3
}
 800d1f8:	4770      	bx	lr

0800d1fa <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 800d1fa:	2301      	movs	r3, #1
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d1fc:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
  phost->device.PortEnabled = 1U;
 800d200:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d204:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d208:	2300      	movs	r3, #0
 800d20a:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800d20e:	461a      	mov	r2, r3
 800d210:	f7fc bba1 	b.w	8009956 <osMessageQueuePut>

0800d214 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 800d214:	2300      	movs	r3, #0
 800d216:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
}
 800d21a:	4770      	bx	lr

0800d21c <USBH_LL_Connect>:
{
 800d21c:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 800d21e:	2301      	movs	r3, #1
  phost->device.is_disconnected = 0U;
 800d220:	2400      	movs	r4, #0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d222:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
  phost->device.is_connected = 1U;
 800d226:	f880 3320 	strb.w	r3, [r0, #800]	; 0x320
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d22a:	4622      	mov	r2, r4
  phost->device.is_disconnected = 0U;
 800d22c:	f880 4321 	strb.w	r4, [r0, #801]	; 0x321
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d230:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d234:	4623      	mov	r3, r4
  phost->device.is_ReEnumerated = 0U;
 800d236:	f880 4322 	strb.w	r4, [r0, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d23a:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800d23e:	f7fc fb8a 	bl	8009956 <osMessageQueuePut>
}
 800d242:	4620      	mov	r0, r4
 800d244:	bd10      	pop	{r4, pc}

0800d246 <USBH_LL_Disconnect>:
{
 800d246:	b570      	push	{r4, r5, r6, lr}
  phost->device.is_connected = 0U;
 800d248:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 800d24a:	2601      	movs	r6, #1
{
 800d24c:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 800d24e:	f880 6321 	strb.w	r6, [r0, #801]	; 0x321
  phost->device.PortEnabled = 0U;
 800d252:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d256:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  (void)USBH_LL_Stop(phost);
 800d25a:	f7f5 f98a 	bl	8002572 <USBH_LL_Stop>
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d25e:	7921      	ldrb	r1, [r4, #4]
 800d260:	4620      	mov	r0, r4
 800d262:	f002 fb6f 	bl	800f944 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d266:	7961      	ldrb	r1, [r4, #5]
 800d268:	4620      	mov	r0, r4
 800d26a:	f002 fb6b 	bl	800f944 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d26e:	462b      	mov	r3, r5
 800d270:	462a      	mov	r2, r5
 800d272:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800d276:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d27a:	f8c4 65b0 	str.w	r6, [r4, #1456]	; 0x5b0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d27e:	f7fc fb6a 	bl	8009956 <osMessageQueuePut>
}
 800d282:	4628      	mov	r0, r5
 800d284:	bd70      	pop	{r4, r5, r6, pc}

0800d286 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d286:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d288:	2301      	movs	r3, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d28a:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d28e:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d292:	2300      	movs	r3, #0
 800d294:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800d298:	461a      	mov	r2, r3
 800d29a:	f7fc fb5c 	bl	8009956 <osMessageQueuePut>
#endif

  return USBH_OK;
}
 800d29e:	2000      	movs	r0, #0
 800d2a0:	bd08      	pop	{r3, pc}

0800d2a2 <USBH_GetNextDesc>:
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d2a2:	7802      	ldrb	r2, [r0, #0]
 800d2a4:	880b      	ldrh	r3, [r1, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);

  return (pnext);
}
 800d2a6:	4410      	add	r0, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d2a8:	4413      	add	r3, r2
 800d2aa:	800b      	strh	r3, [r1, #0]
}
 800d2ac:	4770      	bx	lr
	...

0800d2b0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d2b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
  switch (phost->RequestState)
 800d2b2:	7885      	ldrb	r5, [r0, #2]
{
 800d2b4:	4604      	mov	r4, r0
  switch (phost->RequestState)
 800d2b6:	2d01      	cmp	r5, #1
 800d2b8:	d005      	beq.n	800d2c6 <USBH_CtlReq+0x16>
 800d2ba:	2d02      	cmp	r5, #2
 800d2bc:	d014      	beq.n	800d2e8 <USBH_CtlReq+0x38>
 800d2be:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 800d2c0:	4628      	mov	r0, r5
 800d2c2:	b002      	add	sp, #8
 800d2c4:	bd70      	pop	{r4, r5, r6, pc}
      phost->RequestState = CMD_WAIT;
 800d2c6:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 800d2c8:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 800d2ca:	8182      	strh	r2, [r0, #12]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2cc:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
      phost->RequestState = CMD_WAIT;
 800d2d0:	7083      	strb	r3, [r0, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2d2:	2303      	movs	r3, #3
      phost->Control.state = CTRL_SETUP;
 800d2d4:	7605      	strb	r5, [r0, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d2d6:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2da:	2300      	movs	r3, #0
 800d2dc:	461a      	mov	r2, r3
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2de:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800d2e2:	f7fc fb38 	bl	8009956 <osMessageQueuePut>
  return status;
 800d2e6:	e7eb      	b.n	800d2c0 <USBH_CtlReq+0x10>
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 800d2e8:	7e05      	ldrb	r5, [r0, #24]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d2ea:	f500 66b6 	add.w	r6, r0, #1456	; 0x5b0
  switch (phost->Control.state)
 800d2ee:	1e6b      	subs	r3, r5, #1
 800d2f0:	2b0a      	cmp	r3, #10
 800d2f2:	d85e      	bhi.n	800d3b2 <USBH_CtlReq+0x102>
 800d2f4:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d2f8:	0013000b 	.word	0x0013000b
 800d2fc:	004c0041 	.word	0x004c0041
 800d300:	007e0072 	.word	0x007e0072
 800d304:	00ac00a2 	.word	0x00ac00a2
 800d308:	00e200d6 	.word	0x00e200d6
 800d30c:	00f7      	.short	0x00f7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d30e:	7942      	ldrb	r2, [r0, #5]
 800d310:	f100 0110 	add.w	r1, r0, #16
 800d314:	f000 fda4 	bl	800de60 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d318:	2302      	movs	r3, #2
        phost->Control.state = CTRL_IDLE;
 800d31a:	7623      	strb	r3, [r4, #24]
 800d31c:	e018      	b.n	800d350 <USBH_CtlReq+0xa0>
      break;

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d31e:	7941      	ldrb	r1, [r0, #5]
 800d320:	f7f5 f8e6 	bl	80024f0 <USBH_LL_GetURBState>
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d324:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d326:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800d328:	d11d      	bne.n	800d366 <USBH_CtlReq+0xb6>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d32a:	8ae2      	ldrh	r2, [r4, #22]
 800d32c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800d330:	b1aa      	cbz	r2, 800d35e <USBH_CtlReq+0xae>
        {
          if (direction == USB_D2H)
 800d332:	2b00      	cmp	r3, #0
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d334:	bfb4      	ite	lt
 800d336:	2303      	movlt	r3, #3
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d338:	2305      	movge	r3, #5
            phost->Control.state = CTRL_STATUS_OUT;
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d33a:	7623      	strb	r3, [r4, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d33c:	2303      	movs	r3, #3
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d33e:	4631      	mov	r1, r6
 800d340:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d344:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d348:	2300      	movs	r3, #0
 800d34a:	461a      	mov	r2, r3
 800d34c:	f7fc fb03 	bl	8009956 <osMessageQueuePut>
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d350:	2303      	movs	r3, #3
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d352:	4631      	mov	r1, r6
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d354:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d358:	2300      	movs	r3, #0
 800d35a:	461a      	mov	r2, r3
 800d35c:	e7bf      	b.n	800d2de <USBH_CtlReq+0x2e>
          if (direction == USB_D2H)
 800d35e:	2b00      	cmp	r3, #0
 800d360:	da4e      	bge.n	800d400 <USBH_CtlReq+0x150>
            phost->Control.state = CTRL_STATUS_OUT;
 800d362:	2309      	movs	r3, #9
 800d364:	e7e9      	b.n	800d33a <USBH_CtlReq+0x8a>
#endif
#endif
      }
      else
      {
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d366:	2804      	cmp	r0, #4
 800d368:	d001      	beq.n	800d36e <USBH_CtlReq+0xbe>
 800d36a:	2802      	cmp	r0, #2
 800d36c:	d121      	bne.n	800d3b2 <USBH_CtlReq+0x102>
        {
          phost->Control.state = CTRL_ERROR;
 800d36e:	230b      	movs	r3, #11
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
      {
        /* Nack received from device */
        phost->Control.state = CTRL_DATA_OUT;
 800d370:	7623      	strb	r3, [r4, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d372:	2303      	movs	r3, #3
 800d374:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
 800d378:	e014      	b.n	800d3a4 <USBH_CtlReq+0xf4>
      phost->Control.timer = (uint16_t)phost->Timer;
 800d37a:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d37e:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
 800d380:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d382:	6881      	ldr	r1, [r0, #8]
 800d384:	7903      	ldrb	r3, [r0, #4]
 800d386:	f000 fd92 	bl	800deae <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d38a:	2304      	movs	r3, #4
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d38c:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
 800d38e:	e010      	b.n	800d3b2 <USBH_CtlReq+0x102>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d390:	7901      	ldrb	r1, [r0, #4]
 800d392:	2503      	movs	r5, #3
 800d394:	f7f5 f8ac 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800d398:	2801      	cmp	r0, #1
 800d39a:	d10c      	bne.n	800d3b6 <USBH_CtlReq+0x106>
        phost->Control.state = CTRL_STATUS_OUT;
 800d39c:	2309      	movs	r3, #9
          phost->Control.state = CTRL_ERROR;
 800d39e:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3a0:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	4631      	mov	r1, r6
 800d3a8:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	f7fc fad2 	bl	8009956 <osMessageQueuePut>
  switch (phost->Control.state)
 800d3b2:	2501      	movs	r5, #1
 800d3b4:	e7cc      	b.n	800d350 <USBH_CtlReq+0xa0>
      if (URB_Status == USBH_URB_STALL)
 800d3b6:	2805      	cmp	r0, #5
 800d3b8:	d10c      	bne.n	800d3d4 <USBH_CtlReq+0x124>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	4631      	mov	r1, r6
 800d3be:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800d3c2:	461a      	mov	r2, r3
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d3c4:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d3c8:	f7fc fac5 	bl	8009956 <osMessageQueuePut>
        phost->RequestState = CMD_SEND;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	e7a2      	b.n	800d31a <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 800d3d4:	2804      	cmp	r0, #4
 800d3d6:	d1ec      	bne.n	800d3b2 <USBH_CtlReq+0x102>
          phost->Control.state = CTRL_ERROR;
 800d3d8:	230b      	movs	r3, #11
 800d3da:	e7e0      	b.n	800d39e <USBH_CtlReq+0xee>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d3dc:	2501      	movs	r5, #1
 800d3de:	9500      	str	r5, [sp, #0]
 800d3e0:	7943      	ldrb	r3, [r0, #5]
 800d3e2:	8982      	ldrh	r2, [r0, #12]
 800d3e4:	6881      	ldr	r1, [r0, #8]
 800d3e6:	f000 fd4b 	bl	800de80 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800d3ea:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 800d3ee:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d3f0:	2306      	movs	r3, #6
 800d3f2:	e792      	b.n	800d31a <USBH_CtlReq+0x6a>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d3f4:	7941      	ldrb	r1, [r0, #5]
 800d3f6:	f7f5 f87b 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800d3fa:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d3fc:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800d3fe:	d101      	bne.n	800d404 <USBH_CtlReq+0x154>
            phost->Control.state = CTRL_STATUS_IN;
 800d400:	2307      	movs	r3, #7
 800d402:	e79a      	b.n	800d33a <USBH_CtlReq+0x8a>
      else if (URB_Status == USBH_URB_STALL)
 800d404:	2805      	cmp	r0, #5
 800d406:	d103      	bne.n	800d410 <USBH_CtlReq+0x160>
        phost->Control.state = CTRL_STALLED;
 800d408:	230c      	movs	r3, #12
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d40a:	2503      	movs	r5, #3
        phost->Control.state = CTRL_STALLED;
 800d40c:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d40e:	e7d4      	b.n	800d3ba <USBH_CtlReq+0x10a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d410:	2802      	cmp	r0, #2
 800d412:	d101      	bne.n	800d418 <USBH_CtlReq+0x168>
        phost->Control.state = CTRL_DATA_OUT;
 800d414:	2305      	movs	r3, #5
 800d416:	e7ab      	b.n	800d370 <USBH_CtlReq+0xc0>
        if (URB_Status == USBH_URB_ERROR)
 800d418:	2804      	cmp	r0, #4
 800d41a:	d1ca      	bne.n	800d3b2 <USBH_CtlReq+0x102>
          phost->Control.state = CTRL_ERROR;
 800d41c:	230b      	movs	r3, #11
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d41e:	4631      	mov	r1, r6
 800d420:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
          phost->Control.state = CTRL_ERROR;
 800d424:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d426:	2303      	movs	r3, #3
 800d428:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d42c:	2300      	movs	r3, #0
 800d42e:	461a      	mov	r2, r3
 800d430:	f7fc fa91 	bl	8009956 <osMessageQueuePut>
        phost->RequestState = CMD_SEND;
 800d434:	2301      	movs	r3, #1
 800d436:	2502      	movs	r5, #2
 800d438:	70a3      	strb	r3, [r4, #2]
 800d43a:	e789      	b.n	800d350 <USBH_CtlReq+0xa0>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d43c:	2200      	movs	r2, #0
 800d43e:	7903      	ldrb	r3, [r0, #4]
 800d440:	4611      	mov	r1, r2
 800d442:	f000 fd34 	bl	800deae <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800d446:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 800d44a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d44c:	2308      	movs	r3, #8
 800d44e:	e79d      	b.n	800d38c <USBH_CtlReq+0xdc>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d450:	7901      	ldrb	r1, [r0, #4]
 800d452:	f7f5 f84d 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800d456:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d458:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 800d45a:	d10d      	bne.n	800d478 <USBH_CtlReq+0x1c8>
    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
      if (URB_Status == USBH_URB_DONE)
      {
        status = USBH_OK;
        phost->Control.state = CTRL_COMPLETE;
 800d45c:	230d      	movs	r3, #13
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d45e:	4631      	mov	r1, r6
 800d460:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
        status = USBH_OK;
 800d464:	2500      	movs	r5, #0
        phost->Control.state = CTRL_COMPLETE;
 800d466:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d468:	2303      	movs	r3, #3
 800d46a:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d46e:	2300      	movs	r3, #0
 800d470:	461a      	mov	r2, r3
 800d472:	f7fc fa70 	bl	8009956 <osMessageQueuePut>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d476:	e7a9      	b.n	800d3cc <USBH_CtlReq+0x11c>
      else if (URB_Status == USBH_URB_ERROR)
 800d478:	2b04      	cmp	r3, #4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d47a:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800d47e:	f04f 0503 	mov.w	r5, #3
      else if (URB_Status == USBH_URB_ERROR)
 800d482:	d107      	bne.n	800d494 <USBH_CtlReq+0x1e4>
        phost->Control.state = CTRL_ERROR;
 800d484:	230b      	movs	r3, #11
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d486:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
        phost->Control.state = CTRL_ERROR;
 800d48a:	7623      	strb	r3, [r4, #24]
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d48c:	2300      	movs	r3, #0
 800d48e:	4631      	mov	r1, r6
 800d490:	461a      	mov	r2, r3
 800d492:	e78c      	b.n	800d3ae <USBH_CtlReq+0xfe>
        if (URB_Status == USBH_URB_STALL)
 800d494:	2b05      	cmp	r3, #5
 800d496:	d18c      	bne.n	800d3b2 <USBH_CtlReq+0x102>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d498:	2300      	movs	r3, #0
 800d49a:	4631      	mov	r1, r6
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d49c:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	e791      	b.n	800d3c8 <USBH_CtlReq+0x118>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2501      	movs	r5, #1
 800d4a8:	4611      	mov	r1, r2
 800d4aa:	9500      	str	r5, [sp, #0]
 800d4ac:	7943      	ldrb	r3, [r0, #5]
 800d4ae:	f000 fce7 	bl	800de80 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800d4b2:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 800d4b6:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d4b8:	230a      	movs	r3, #10
 800d4ba:	e72e      	b.n	800d31a <USBH_CtlReq+0x6a>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d4bc:	7941      	ldrb	r1, [r0, #5]
 800d4be:	f7f5 f817 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800d4c2:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d4c4:	4603      	mov	r3, r0
      if (URB_Status == USBH_URB_DONE)
 800d4c6:	d0c9      	beq.n	800d45c <USBH_CtlReq+0x1ac>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d4c8:	2b02      	cmp	r3, #2
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d4ca:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
      else if (URB_Status == USBH_URB_NOTREADY)
 800d4ce:	d105      	bne.n	800d4dc <USBH_CtlReq+0x22c>
        phost->Control.state = CTRL_STATUS_OUT;
 800d4d0:	2309      	movs	r3, #9
 800d4d2:	7623      	strb	r3, [r4, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4d4:	2303      	movs	r3, #3
 800d4d6:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
 800d4da:	e7d7      	b.n	800d48c <USBH_CtlReq+0x1dc>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 800d4dc:	2b04      	cmp	r3, #4
 800d4de:	f47f af68 	bne.w	800d3b2 <USBH_CtlReq+0x102>
        {
          phost->Control.state = CTRL_ERROR;
 800d4e2:	230b      	movs	r3, #11
 800d4e4:	e7f5      	b.n	800d4d2 <USBH_CtlReq+0x222>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d4e6:	7e43      	ldrb	r3, [r0, #25]
 800d4e8:	3301      	adds	r3, #1
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	2b02      	cmp	r3, #2
 800d4ee:	7643      	strb	r3, [r0, #25]
 800d4f0:	d803      	bhi.n	800d4fa <USBH_CtlReq+0x24a>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d4f2:	2501      	movs	r5, #1
 800d4f4:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 800d4f6:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
 800d4f8:	e72a      	b.n	800d350 <USBH_CtlReq+0xa0>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 800d4fa:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d4fc:	f8d0 35a4 	ldr.w	r3, [r0, #1444]	; 0x5a4
 800d500:	2106      	movs	r1, #6
 800d502:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");
 800d504:	4809      	ldr	r0, [pc, #36]	; (800d52c <USBH_CtlReq+0x27c>)
        phost->Control.errorcount = 0U;
 800d506:	7665      	strb	r5, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
 800d508:	f010 ffda 	bl	801e4c0 <iprintf>
 800d50c:	4808      	ldr	r0, [pc, #32]	; (800d530 <USBH_CtlReq+0x280>)
 800d50e:	f010 ffd7 	bl	801e4c0 <iprintf>
 800d512:	4808      	ldr	r0, [pc, #32]	; (800d534 <USBH_CtlReq+0x284>)
 800d514:	f011 f85a 	bl	801e5cc <puts>

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d518:	7961      	ldrb	r1, [r4, #5]
 800d51a:	4620      	mov	r0, r4
 800d51c:	f002 fa12 	bl	800f944 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d520:	7921      	ldrb	r1, [r4, #4]
 800d522:	4620      	mov	r0, r4
 800d524:	f002 fa0e 	bl	800f944 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800d528:	7025      	strb	r5, [r4, #0]
      else if (status == USBH_FAIL)
 800d52a:	e783      	b.n	800d434 <USBH_CtlReq+0x184>
 800d52c:	0801fb84 	.word	0x0801fb84
 800d530:	08020182 	.word	0x08020182
 800d534:	0801fbc6 	.word	0x0801fbc6

0800d538 <USBH_GetDescriptor>:
{
 800d538:	b430      	push	{r4, r5}
 800d53a:	460c      	mov	r4, r1
 800d53c:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 800d53e:	7883      	ldrb	r3, [r0, #2]
{
 800d540:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 800d544:	2b01      	cmp	r3, #1
 800d546:	d10f      	bne.n	800d568 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d548:	f064 047f 	orn	r4, r4, #127	; 0x7f
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d54c:	2306      	movs	r3, #6
    phost->Control.setup.b.wValue.w = value_idx;
 800d54e:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d550:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d552:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d556:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 800d558:	f240 4309 	movw	r3, #1033	; 0x409
 800d55c:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.wLength.w = length;
 800d560:	82c5      	strh	r5, [r0, #22]
      phost->Control.setup.b.wIndex.w = 0U;
 800d562:	bf18      	it	ne
 800d564:	2300      	movne	r3, #0
 800d566:	8283      	strh	r3, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 800d568:	462a      	mov	r2, r5
}
 800d56a:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 800d56c:	f7ff bea0 	b.w	800d2b0 <USBH_CtlReq>

0800d570 <USBH_Get_DevDesc>:
{
 800d570:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = USBH_GetDescriptor(phost,
 800d572:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800d576:	460d      	mov	r5, r1
 800d578:	9100      	str	r1, [sp, #0]
 800d57a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d57e:	2100      	movs	r1, #0
{
 800d580:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 800d582:	f7ff ffd9 	bl	800d538 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800d586:	2800      	cmp	r0, #0
 800d588:	d147      	bne.n	800d61a <USBH_Get_DevDesc+0xaa>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d58a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d58e:	f894 2123 	ldrb.w	r2, [r4, #291]	; 0x123
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d592:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d596:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
  switch (dev_desc->bMaxPacketSize)
 800d59a:	2a20      	cmp	r2, #32
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d59c:	f884 3327 	strb.w	r3, [r4, #807]	; 0x327
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d5a0:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 800d5a4:	f8a4 3328 	strh.w	r3, [r4, #808]	; 0x328
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d5a8:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 800d5ac:	f884 332a 	strb.w	r3, [r4, #810]	; 0x32a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d5b0:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 800d5b4:	f884 332b 	strb.w	r3, [r4, #811]	; 0x32b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d5b8:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 800d5bc:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
  switch (dev_desc->bMaxPacketSize)
 800d5c0:	d82d      	bhi.n	800d61e <USBH_Get_DevDesc+0xae>
 800d5c2:	2a07      	cmp	r2, #7
 800d5c4:	d92d      	bls.n	800d622 <USBH_Get_DevDesc+0xb2>
 800d5c6:	f1a2 0308 	sub.w	r3, r2, #8
 800d5ca:	b2d9      	uxtb	r1, r3
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	408b      	lsls	r3, r1
 800d5d0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800d5d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d5d8:	b31b      	cbz	r3, 800d622 <USBH_Get_DevDesc+0xb2>
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d5da:	f884 232d 	strb.w	r2, [r4, #813]	; 0x32d
  if (length > 8U)
 800d5de:	2d08      	cmp	r5, #8
 800d5e0:	d91b      	bls.n	800d61a <USBH_Get_DevDesc+0xaa>
    dev_desc->idVendor           = LE16(buf +  8);
 800d5e2:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 800d5e6:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->idProduct          = LE16(buf + 10);
 800d5ea:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 800d5ee:	f8a4 3330 	strh.w	r3, [r4, #816]	; 0x330
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d5f2:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 800d5f6:	f8a4 3332 	strh.w	r3, [r4, #818]	; 0x332
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d5fa:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 800d5fe:	f884 3334 	strb.w	r3, [r4, #820]	; 0x334
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d602:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 800d606:	f884 3335 	strb.w	r3, [r4, #821]	; 0x335
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d60a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 800d60e:	f884 3336 	strb.w	r3, [r4, #822]	; 0x336
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d612:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 800d616:	f884 3337 	strb.w	r3, [r4, #823]	; 0x337
}
 800d61a:	b003      	add	sp, #12
 800d61c:	bd30      	pop	{r4, r5, pc}
  switch (dev_desc->bMaxPacketSize)
 800d61e:	2a40      	cmp	r2, #64	; 0x40
 800d620:	d0db      	beq.n	800d5da <USBH_Get_DevDesc+0x6a>
      dev_desc->bMaxPacketSize = 64U;
 800d622:	2340      	movs	r3, #64	; 0x40
 800d624:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
      break;
 800d628:	e7d9      	b.n	800d5de <USBH_Get_DevDesc+0x6e>

0800d62a <USBH_Get_CfgDesc>:
{
 800d62a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d62e:	f100 041c 	add.w	r4, r0, #28
{
 800d632:	b087      	sub	sp, #28
 800d634:	460e      	mov	r6, r1
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d63a:	9100      	str	r1, [sp, #0]
 800d63c:	4623      	mov	r3, r4
 800d63e:	2100      	movs	r1, #0
{
 800d640:	4605      	mov	r5, r0
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d642:	f7ff ff79 	bl	800d538 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800d646:	2800      	cmp	r0, #0
 800d648:	d172      	bne.n	800d730 <USBH_Get_CfgDesc+0x106>
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d64a:	f8b5 801e 	ldrh.w	r8, [r5, #30]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d64e:	7f6a      	ldrb	r2, [r5, #29]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d650:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d652:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d656:	f885 2339 	strb.w	r2, [r5, #825]	; 0x339
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d65a:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d65e:	bf28      	it	cs
 800d660:	f44f 7880 	movcs.w	r8, #256	; 0x100
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800d664:	2b09      	cmp	r3, #9
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d666:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d66a:	f885 233d 	strb.w	r2, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d66e:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d672:	bf18      	it	ne
 800d674:	2309      	movne	r3, #9
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d676:	f895 a020 	ldrb.w	sl, [r5, #32]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d67a:	f885 233e 	strb.w	r2, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d67e:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d682:	bf18      	it	ne
 800d684:	f885 3338 	strbne.w	r3, [r5, #824]	; 0x338
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d688:	2e09      	cmp	r6, #9
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d68a:	f885 233f 	strb.w	r2, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d68e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d692:	f8a5 833a 	strh.w	r8, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d696:	f885 a33c 	strb.w	sl, [r5, #828]	; 0x33c
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d69a:	f885 2340 	strb.w	r2, [r5, #832]	; 0x340
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d69e:	f240 80b0 	bls.w	800d802 <USBH_Get_CfgDesc+0x1d8>
  USBH_StatusTypeDef           status = USBH_OK;
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	462b      	mov	r3, r5
    ptr = USB_LEN_CFG_DESC;
 800d6a6:	2209      	movs	r2, #9
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d6a8:	4686      	mov	lr, r0
 800d6aa:	fa5f f68e 	uxtb.w	r6, lr
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d6ae:	f1be 0f0a 	cmp.w	lr, #10
 800d6b2:	d03d      	beq.n	800d730 <USBH_Get_CfgDesc+0x106>
 800d6b4:	4590      	cmp	r8, r2
 800d6b6:	d806      	bhi.n	800d6c6 <USBH_Get_CfgDesc+0x9c>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d6b8:	4653      	mov	r3, sl
 800d6ba:	2b0a      	cmp	r3, #10
 800d6bc:	bf28      	it	cs
 800d6be:	230a      	movcs	r3, #10
 800d6c0:	42b3      	cmp	r3, r6
 800d6c2:	d935      	bls.n	800d730 <USBH_Get_CfgDesc+0x106>
 800d6c4:	e033      	b.n	800d72e <USBH_Get_CfgDesc+0x104>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d6c6:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d6c8:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d6ca:	440a      	add	r2, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d6cc:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d6ce:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d6d0:	2904      	cmp	r1, #4
 800d6d2:	d1ec      	bne.n	800d6ae <USBH_Get_CfgDesc+0x84>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d6d4:	7821      	ldrb	r1, [r4, #0]
        ep_ix = 0U;
 800d6d6:	2700      	movs	r7, #0
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d6d8:	2909      	cmp	r1, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d6da:	bf1c      	itt	ne
 800d6dc:	2109      	movne	r1, #9
 800d6de:	7021      	strbne	r1, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d6e0:	7821      	ldrb	r1, [r4, #0]
 800d6e2:	f883 1342 	strb.w	r1, [r3, #834]	; 0x342
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d6e6:	7861      	ldrb	r1, [r4, #1]
 800d6e8:	f883 1343 	strb.w	r1, [r3, #835]	; 0x343
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d6ec:	78a1      	ldrb	r1, [r4, #2]
 800d6ee:	f883 1344 	strb.w	r1, [r3, #836]	; 0x344
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d6f2:	78e1      	ldrb	r1, [r4, #3]
 800d6f4:	f883 1345 	strb.w	r1, [r3, #837]	; 0x345
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d6f8:	7921      	ldrb	r1, [r4, #4]
 800d6fa:	f883 1346 	strb.w	r1, [r3, #838]	; 0x346
 800d6fe:	9102      	str	r1, [sp, #8]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d700:	7961      	ldrb	r1, [r4, #5]
 800d702:	f883 1347 	strb.w	r1, [r3, #839]	; 0x347
 800d706:	9103      	str	r1, [sp, #12]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d708:	79a1      	ldrb	r1, [r4, #6]
 800d70a:	f883 1348 	strb.w	r1, [r3, #840]	; 0x348
 800d70e:	9104      	str	r1, [sp, #16]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d710:	79e1      	ldrb	r1, [r4, #7]
 800d712:	9105      	str	r1, [sp, #20]
 800d714:	f883 1349 	strb.w	r1, [r3, #841]	; 0x349
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d718:	7a21      	ldrb	r1, [r4, #8]
 800d71a:	f883 134a 	strb.w	r1, [r3, #842]	; 0x34a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d71e:	2132      	movs	r1, #50	; 0x32
 800d720:	fb01 fb0e 	mul.w	fp, r1, lr
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d724:	9902      	ldr	r1, [sp, #8]
 800d726:	428f      	cmp	r7, r1
 800d728:	d26d      	bcs.n	800d806 <USBH_Get_CfgDesc+0x1dc>
 800d72a:	4590      	cmp	r8, r2
 800d72c:	d803      	bhi.n	800d736 <USBH_Get_CfgDesc+0x10c>
          return USBH_NOT_SUPPORTED;
 800d72e:	2003      	movs	r0, #3
}
 800d730:	b007      	add	sp, #28
 800d732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d736:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d738:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d73a:	440a      	add	r2, r1
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d73c:	7861      	ldrb	r1, [r4, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d73e:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d740:	2905      	cmp	r1, #5
 800d742:	d1ef      	bne.n	800d724 <USBH_Get_CfgDesc+0xfa>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d744:	9803      	ldr	r0, [sp, #12]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d746:	7821      	ldrb	r1, [r4, #0]
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800d748:	2801      	cmp	r0, #1
 800d74a:	d147      	bne.n	800d7dc <USBH_Get_CfgDesc+0x1b2>
 800d74c:	9804      	ldr	r0, [sp, #16]
 800d74e:	2802      	cmp	r0, #2
 800d750:	d144      	bne.n	800d7dc <USBH_Get_CfgDesc+0x1b2>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d752:	9805      	ldr	r0, [sp, #20]
 800d754:	b920      	cbnz	r0, 800d760 <USBH_Get_CfgDesc+0x136>
 800d756:	2909      	cmp	r1, #9
 800d758:	d002      	beq.n	800d760 <USBH_Get_CfgDesc+0x136>
                pdesc->bLength = 0x09U;
 800d75a:	f04f 0109 	mov.w	r1, #9
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d75e:	7021      	strb	r1, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d760:	1c78      	adds	r0, r7, #1
 800d762:	7821      	ldrb	r1, [r4, #0]
 800d764:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800d768:	4428      	add	r0, r5
 800d76a:	f880 1344 	strb.w	r1, [r0, #836]	; 0x344
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d76e:	7861      	ldrb	r1, [r4, #1]
 800d770:	f880 1345 	strb.w	r1, [r0, #837]	; 0x345
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d774:	78a1      	ldrb	r1, [r4, #2]
 800d776:	f880 1346 	strb.w	r1, [r0, #838]	; 0x346
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d77a:	f894 c003 	ldrb.w	ip, [r4, #3]
 800d77e:	f880 c347 	strb.w	ip, [r0, #839]	; 0x347
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d782:	88a1      	ldrh	r1, [r4, #4]
 800d784:	f8a0 1348 	strh.w	r1, [r0, #840]	; 0x348
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d788:	79a6      	ldrb	r6, [r4, #6]
 800d78a:	f880 634a 	strb.w	r6, [r0, #842]	; 0x34a
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800d78e:	b351      	cbz	r1, 800d7e6 <USBH_Get_CfgDesc+0x1bc>
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800d790:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800d794:	f021 0107 	bic.w	r1, r1, #7
 800d798:	f8a0 1348 	strh.w	r1, [r0, #840]	; 0x348
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800d79c:	1c78      	adds	r0, r7, #1
 800d79e:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 800d7a2:	b209      	sxth	r1, r1
 800d7a4:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 800d7a8:	f419 6fc0 	tst.w	r9, #1536	; 0x600
 800d7ac:	4428      	add	r0, r5
 800d7ae:	bf0c      	ite	eq
 800d7b0:	f3c9 090a 	ubfxeq	r9, r9, #0, #11
 800d7b4:	f44f 7900 	movne.w	r9, #512	; 0x200
 800d7b8:	ea41 0109 	orr.w	r1, r1, r9
 800d7bc:	f8a0 1348 	strh.w	r1, [r0, #840]	; 0x348
  USBH_StatusTypeDef status = USBH_OK;
 800d7c0:	2000      	movs	r0, #0
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d7c2:	f895 131d 	ldrb.w	r1, [r5, #797]	; 0x31d
 800d7c6:	b981      	cbnz	r1, 800d7ea <USBH_Get_CfgDesc+0x1c0>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d7c8:	f01c 0f01 	tst.w	ip, #1
 800d7cc:	d003      	beq.n	800d7d6 <USBH_Get_CfgDesc+0x1ac>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d7ce:	3e01      	subs	r6, #1
        status = USBH_NOT_SUPPORTED;
 800d7d0:	2e0f      	cmp	r6, #15
 800d7d2:	bf88      	it	hi
 800d7d4:	2003      	movhi	r0, #3
            ep_ix++;
 800d7d6:	3701      	adds	r7, #1
 800d7d8:	b2ff      	uxtb	r7, r7
 800d7da:	e7a3      	b.n	800d724 <USBH_Get_CfgDesc+0xfa>
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800d7dc:	2907      	cmp	r1, #7
 800d7de:	d0bf      	beq.n	800d760 <USBH_Get_CfgDesc+0x136>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d7e0:	f04f 0107 	mov.w	r1, #7
 800d7e4:	e7bb      	b.n	800d75e <USBH_Get_CfgDesc+0x134>
    status = USBH_NOT_SUPPORTED;
 800d7e6:	2003      	movs	r0, #3
 800d7e8:	e7eb      	b.n	800d7c2 <USBH_Get_CfgDesc+0x198>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d7ea:	f00c 0c03 	and.w	ip, ip, #3
 800d7ee:	f1bc 0f01 	cmp.w	ip, #1
 800d7f2:	d0ec      	beq.n	800d7ce <USBH_Get_CfgDesc+0x1a4>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800d7f4:	f1bc 0f03 	cmp.w	ip, #3
 800d7f8:	d1ed      	bne.n	800d7d6 <USBH_Get_CfgDesc+0x1ac>
        status = USBH_NOT_SUPPORTED;
 800d7fa:	2e00      	cmp	r6, #0
 800d7fc:	bf08      	it	eq
 800d7fe:	2003      	moveq	r0, #3
 800d800:	e7e9      	b.n	800d7d6 <USBH_Get_CfgDesc+0x1ac>
  USBH_StatusTypeDef           status = USBH_OK;
 800d802:	2000      	movs	r0, #0
  return status;
 800d804:	e794      	b.n	800d730 <USBH_Get_CfgDesc+0x106>
        if_ix++;
 800d806:	f10e 0e01 	add.w	lr, lr, #1
 800d80a:	3332      	adds	r3, #50	; 0x32
 800d80c:	e74d      	b.n	800d6aa <USBH_Get_CfgDesc+0x80>

0800d80e <USBH_Get_StringDesc>:
{
 800d80e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                              phost->device.Data, length);
 800d810:	f500 768e 	add.w	r6, r0, #284	; 0x11c
{
 800d814:	4615      	mov	r5, r2
 800d816:	461f      	mov	r7, r3
  status = USBH_GetDescriptor(phost,
 800d818:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	2100      	movs	r1, #0
 800d820:	4633      	mov	r3, r6
{
 800d822:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 800d824:	f7ff fe88 	bl	800d538 <USBH_GetDescriptor>
  if (status == USBH_OK)
 800d828:	b978      	cbnz	r0, 800d84a <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d82a:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 800d82e:	2b03      	cmp	r3, #3
 800d830:	d10b      	bne.n	800d84a <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d832:	f894 411c 	ldrb.w	r4, [r4, #284]	; 0x11c
 800d836:	1ea1      	subs	r1, r4, #2
    for (idx = 0U; idx < strlength; idx += 2U)
 800d838:	4604      	mov	r4, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d83a:	42b9      	cmp	r1, r7
 800d83c:	bf28      	it	cs
 800d83e:	4639      	movcs	r1, r7
 800d840:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
 800d842:	42a1      	cmp	r1, r4
 800d844:	d803      	bhi.n	800d84e <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 800d846:	2300      	movs	r3, #0
 800d848:	702b      	strb	r3, [r5, #0]
}
 800d84a:	b003      	add	sp, #12
 800d84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 800d84e:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
 800d850:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
 800d852:	789b      	ldrb	r3, [r3, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d854:	b2a4      	uxth	r4, r4
      *pdest =  psrc[idx];
 800d856:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800d85a:	e7f2      	b.n	800d842 <USBH_Get_StringDesc+0x34>

0800d85c <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 800d85c:	7883      	ldrb	r3, [r0, #2]
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d105      	bne.n	800d86e <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d862:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d866:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d868:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800d86a:	2300      	movs	r3, #0
 800d86c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 800d86e:	2200      	movs	r2, #0
 800d870:	4611      	mov	r1, r2
 800d872:	f7ff bd1d 	b.w	800d2b0 <USBH_CtlReq>

0800d876 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 800d876:	7883      	ldrb	r3, [r0, #2]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d105      	bne.n	800d888 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d87c:	f44f 6310 	mov.w	r3, #2304	; 0x900
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d880:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d882:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800d884:	2300      	movs	r3, #0
 800d886:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 800d888:	2200      	movs	r2, #0
 800d88a:	4611      	mov	r1, r2
 800d88c:	f7ff bd10 	b.w	800d2b0 <USBH_CtlReq>

0800d890 <USBH_SetInterface>:
  if (phost->RequestState == CMD_SEND)
 800d890:	7883      	ldrb	r3, [r0, #2]
 800d892:	2b01      	cmp	r3, #1
 800d894:	d106      	bne.n	800d8a4 <USBH_SetInterface+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800d896:	f640 3301 	movw	r3, #2817	; 0xb01
    phost->Control.setup.b.wValue.w = altSetting;
 800d89a:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d89c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800d89e:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4611      	mov	r1, r2
 800d8a8:	f7ff bd02 	b.w	800d2b0 <USBH_CtlReq>

0800d8ac <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 800d8ac:	7883      	ldrb	r3, [r0, #2]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d105      	bne.n	800d8be <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d8b2:	f44f 7340 	mov.w	r3, #768	; 0x300
    phost->Control.setup.b.wValue.w = wValue;
 800d8b6:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d8b8:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 800d8be:	2200      	movs	r2, #0
 800d8c0:	4611      	mov	r1, r2
 800d8c2:	f7ff bcf5 	b.w	800d2b0 <USBH_CtlReq>

0800d8c6 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 800d8c6:	7883      	ldrb	r3, [r0, #2]
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d105      	bne.n	800d8d8 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d8cc:	f44f 7381 	mov.w	r3, #258	; 0x102
    phost->Control.setup.b.wIndex.w = ep_num;
 800d8d0:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d8d2:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 800d8d8:	2200      	movs	r2, #0
 800d8da:	4611      	mov	r1, r2
 800d8dc:	f7ff bce8 	b.w	800d2b0 <USBH_CtlReq>

0800d8e0 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d8e0:	b508      	push	{r3, lr}
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800d8e2:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 800d8e6:	69db      	ldr	r3, [r3, #28]

  if (HID_Handle->state == HID_POLL)
 800d8e8:	789a      	ldrb	r2, [r3, #2]
 800d8ea:	2a06      	cmp	r2, #6
 800d8ec:	d113      	bne.n	800d916 <USBH_HID_SOFProcess+0x36>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800d8ee:	6a19      	ldr	r1, [r3, #32]
 800d8f0:	f8d0 2594 	ldr.w	r2, [r0, #1428]	; 0x594
 800d8f4:	1a52      	subs	r2, r2, r1
 800d8f6:	8b99      	ldrh	r1, [r3, #28]
 800d8f8:	428a      	cmp	r2, r1
 800d8fa:	d30c      	bcc.n	800d916 <USBH_HID_SOFProcess+0x36>
    {
      HID_Handle->state = HID_GET_DATA;
 800d8fc:	2204      	movs	r2, #4
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d8fe:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
      HID_Handle->state = HID_GET_DATA;
 800d902:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800d904:	2302      	movs	r3, #2
 800d906:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800d90a:	2300      	movs	r3, #0
 800d90c:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800d910:	461a      	mov	r2, r3
 800d912:	f7fc f820 	bl	8009956 <osMessageQueuePut>
#endif
#endif
    }
  }
  return USBH_OK;
}
 800d916:	2000      	movs	r0, #0
 800d918:	bd08      	pop	{r3, pc}

0800d91a <USBH_HID_InterfaceDeInit>:
{
 800d91a:	b538      	push	{r3, r4, r5, lr}
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800d91c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800d920:	4604      	mov	r4, r0
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800d922:	69dd      	ldr	r5, [r3, #28]
  if (HID_Handle->InPipe != 0x00U)
 800d924:	7869      	ldrb	r1, [r5, #1]
 800d926:	b139      	cbz	r1, 800d938 <USBH_HID_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 800d928:	f001 ffef 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 800d92c:	7869      	ldrb	r1, [r5, #1]
 800d92e:	4620      	mov	r0, r4
 800d930:	f002 f808 	bl	800f944 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 800d934:	2300      	movs	r3, #0
 800d936:	706b      	strb	r3, [r5, #1]
  if (HID_Handle->OutPipe != 0x00U)
 800d938:	7829      	ldrb	r1, [r5, #0]
 800d93a:	b141      	cbz	r1, 800d94e <USBH_HID_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 800d93c:	4620      	mov	r0, r4
 800d93e:	f001 ffe4 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 800d942:	7829      	ldrb	r1, [r5, #0]
 800d944:	4620      	mov	r0, r4
 800d946:	f001 fffd 	bl	800f944 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 800d94a:	2300      	movs	r3, #0
 800d94c:	702b      	strb	r3, [r5, #0]
  if ((phost->pActiveClass->pData) != NULL)
 800d94e:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800d952:	69d8      	ldr	r0, [r3, #28]
 800d954:	b128      	cbz	r0, 800d962 <USBH_HID_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 800d956:	f010 f9c7 	bl	801dce8 <free>
    phost->pActiveClass->pData = 0U;
 800d95a:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800d95e:	2200      	movs	r2, #0
 800d960:	61da      	str	r2, [r3, #28]
}
 800d962:	2000      	movs	r0, #0
 800d964:	bd38      	pop	{r3, r4, r5, pc}
	...

0800d968 <USBH_HID_InterfaceInit>:
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800d968:	f8d0 154c 	ldr.w	r1, [r0, #1356]	; 0x54c
 800d96c:	23ff      	movs	r3, #255	; 0xff
 800d96e:	2201      	movs	r2, #1
{
 800d970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d974:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800d976:	7909      	ldrb	r1, [r1, #4]
{
 800d978:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800d97a:	f7ff f8a5 	bl	800cac8 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d97e:	2809      	cmp	r0, #9
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 800d980:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d982:	d90d      	bls.n	800d9a0 <USBH_HID_InterfaceInit+0x38>
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800d984:	4850      	ldr	r0, [pc, #320]	; (800dac8 <USBH_HID_InterfaceInit+0x160>)
 800d986:	f010 fd9b 	bl	801e4c0 <iprintf>
 800d98a:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800d98e:	484f      	ldr	r0, [pc, #316]	; (800dacc <USBH_HID_InterfaceInit+0x164>)
 800d990:	6819      	ldr	r1, [r3, #0]
 800d992:	f010 fd95 	bl	801e4c0 <iprintf>
    USBH_UsrLog("Protocol not supported.");
 800d996:	484e      	ldr	r0, [pc, #312]	; (800dad0 <USBH_HID_InterfaceInit+0x168>)
 800d998:	f010 fe18 	bl	801e5cc <puts>
    return USBH_FAIL;
 800d99c:	2702      	movs	r7, #2
 800d99e:	e04d      	b.n	800da3c <USBH_HID_InterfaceInit+0xd4>
  status = USBH_SelectInterface(phost, interface);
 800d9a0:	4601      	mov	r1, r0
 800d9a2:	4628      	mov	r0, r5
 800d9a4:	f7ff f84a 	bl	800ca3c <USBH_SelectInterface>
  if (status != USBH_OK)
 800d9a8:	4607      	mov	r7, r0
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d1f6      	bne.n	800d99c <USBH_HID_InterfaceInit+0x34>
  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 800d9ae:	f8d5 854c 	ldr.w	r8, [r5, #1356]	; 0x54c
 800d9b2:	2034      	movs	r0, #52	; 0x34
 800d9b4:	f010 f990 	bl	801dcd8 <malloc>
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	f8c8 001c 	str.w	r0, [r8, #28]
  if (HID_Handle == NULL)
 800d9be:	b930      	cbnz	r0, 800d9ce <USBH_HID_InterfaceInit+0x66>
    USBH_DbgLog("Cannot allocate memory for HID Handle");
 800d9c0:	4841      	ldr	r0, [pc, #260]	; (800dac8 <USBH_HID_InterfaceInit+0x160>)
 800d9c2:	f010 fd7d 	bl	801e4c0 <iprintf>
 800d9c6:	4843      	ldr	r0, [pc, #268]	; (800dad4 <USBH_HID_InterfaceInit+0x16c>)
    USBH_UsrLog("Protocol not supported.");
 800d9c8:	f010 fd7a 	bl	801e4c0 <iprintf>
 800d9cc:	e7e3      	b.n	800d996 <USBH_HID_InterfaceInit+0x2e>
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 800d9ce:	2234      	movs	r2, #52	; 0x34
 800d9d0:	4639      	mov	r1, r7
 800d9d2:	f010 f99f 	bl	801dd14 <memset>
  HID_Handle->state = HID_ERROR;
 800d9d6:	2307      	movs	r3, #7
 800d9d8:	70a3      	strb	r3, [r4, #2]
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 800d9da:	2332      	movs	r3, #50	; 0x32
 800d9dc:	fb03 5306 	mla	r3, r3, r6, r5
 800d9e0:	f893 3349 	ldrb.w	r3, [r3, #841]	; 0x349
 800d9e4:	2b01      	cmp	r3, #1
 800d9e6:	d12d      	bne.n	800da44 <USBH_HID_InterfaceInit+0xdc>
    USBH_UsrLog("KeyBoard device found!");
 800d9e8:	483b      	ldr	r0, [pc, #236]	; (800dad8 <USBH_HID_InterfaceInit+0x170>)
 800d9ea:	f010 fd69 	bl	801e4c0 <iprintf>
 800d9ee:	4838      	ldr	r0, [pc, #224]	; (800dad0 <USBH_HID_InterfaceInit+0x168>)
 800d9f0:	f010 fdec 	bl	801e5cc <puts>
    HID_Handle->Init = USBH_HID_KeybdInit;
 800d9f4:	4b39      	ldr	r3, [pc, #228]	; (800dadc <USBH_HID_InterfaceInit+0x174>)
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d9f6:	2032      	movs	r0, #50	; 0x32
    HID_Handle->Init = USBH_HID_MouseInit;
 800d9f8:	6323      	str	r3, [r4, #48]	; 0x30
  HID_Handle->state     = HID_INIT;
 800d9fa:	2300      	movs	r3, #0
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800d9fc:	f04f 0903 	mov.w	r9, #3
 800da00:	fb16 f800 	smulbb	r8, r6, r0
  HID_Handle->state     = HID_INIT;
 800da04:	70a3      	strb	r3, [r4, #2]
  HID_Handle->ctl_state = HID_REQ_INIT;
 800da06:	7163      	strb	r3, [r4, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da08:	44a8      	add	r8, r5
 800da0a:	fb00 5306 	mla	r3, r0, r6, r5
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800da0e:	fb00 5606 	mla	r6, r0, r6, r5
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da12:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 800da16:	f896 6346 	ldrb.w	r6, [r6, #838]	; 0x346
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800da1a:	76a2      	strb	r2, [r4, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da1c:	f8b3 2350 	ldrh.w	r2, [r3, #848]	; 0x350
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800da20:	f893 3352 	ldrb.w	r3, [r3, #850]	; 0x352
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800da24:	8322      	strh	r2, [r4, #24]
  if (HID_Handle->poll  < HID_MIN_POLL)
 800da26:	2b09      	cmp	r3, #9
    HID_Handle->poll = HID_MIN_POLL;
 800da28:	bf98      	it	ls
 800da2a:	230a      	movls	r3, #10
 800da2c:	2e05      	cmp	r6, #5
 800da2e:	bf28      	it	cs
 800da30:	2605      	movcs	r6, #5
 800da32:	83a3      	strh	r3, [r4, #28]
  for (num = 0U; num < max_ep; num++)
 800da34:	eb08 06c6 	add.w	r6, r8, r6, lsl #3
 800da38:	45b0      	cmp	r8, r6
 800da3a:	d10f      	bne.n	800da5c <USBH_HID_InterfaceInit+0xf4>
}
 800da3c:	4638      	mov	r0, r7
 800da3e:	b005      	add	sp, #20
 800da40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 800da44:	2b02      	cmp	r3, #2
 800da46:	d107      	bne.n	800da58 <USBH_HID_InterfaceInit+0xf0>
    USBH_UsrLog("Mouse device found!");
 800da48:	4825      	ldr	r0, [pc, #148]	; (800dae0 <USBH_HID_InterfaceInit+0x178>)
 800da4a:	f010 fd39 	bl	801e4c0 <iprintf>
 800da4e:	4820      	ldr	r0, [pc, #128]	; (800dad0 <USBH_HID_InterfaceInit+0x168>)
 800da50:	f010 fdbc 	bl	801e5cc <puts>
    HID_Handle->Init = USBH_HID_MouseInit;
 800da54:	4b23      	ldr	r3, [pc, #140]	; (800dae4 <USBH_HID_InterfaceInit+0x17c>)
 800da56:	e7ce      	b.n	800d9f6 <USBH_HID_InterfaceInit+0x8e>
    USBH_UsrLog("Protocol not supported.");
 800da58:	4823      	ldr	r0, [pc, #140]	; (800dae8 <USBH_HID_InterfaceInit+0x180>)
 800da5a:	e7b5      	b.n	800d9c8 <USBH_HID_InterfaceInit+0x60>
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 800da5c:	f998 334e 	ldrsb.w	r3, [r8, #846]	; 0x34e
 800da60:	f898 134e 	ldrb.w	r1, [r8, #846]	; 0x34e
 800da64:	2b00      	cmp	r3, #0
 800da66:	da19      	bge.n	800da9c <USBH_HID_InterfaceInit+0x134>
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800da68:	4628      	mov	r0, r5
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800da6a:	7121      	strb	r1, [r4, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800da6c:	f001 ff52 	bl	800f914 <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800da70:	8b23      	ldrh	r3, [r4, #24]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800da72:	4601      	mov	r1, r0
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800da74:	7922      	ldrb	r2, [r4, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 800da76:	7060      	strb	r0, [r4, #1]
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 800da78:	4628      	mov	r0, r5
 800da7a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800da7e:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800da82:	9300      	str	r3, [sp, #0]
 800da84:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800da88:	f001 ff30 	bl	800f8ec <USBH_OpenPipe>
      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 800da8c:	2200      	movs	r2, #0
 800da8e:	7861      	ldrb	r1, [r4, #1]
      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800da90:	4628      	mov	r0, r5
 800da92:	f108 0808 	add.w	r8, r8, #8
 800da96:	f7f4 fd3b 	bl	8002510 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 800da9a:	e7cd      	b.n	800da38 <USBH_HID_InterfaceInit+0xd0>
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800da9c:	4628      	mov	r0, r5
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 800da9e:	70e1      	strb	r1, [r4, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800daa0:	f001 ff38 	bl	800f914 <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800daa4:	8b23      	ldrh	r3, [r4, #24]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800daa6:	4601      	mov	r1, r0
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800daa8:	78e2      	ldrb	r2, [r4, #3]
      HID_Handle->OutPipe  = USBH_AllocPipe(phost, HID_Handle->OutEp);
 800daaa:	7020      	strb	r0, [r4, #0]
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 800daac:	4628      	mov	r0, r5
 800daae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800dab2:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800dab6:	9300      	str	r3, [sp, #0]
 800dab8:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800dabc:	f001 ff16 	bl	800f8ec <USBH_OpenPipe>
      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 800dac0:	2200      	movs	r2, #0
 800dac2:	7821      	ldrb	r1, [r4, #0]
 800dac4:	e7e4      	b.n	800da90 <USBH_HID_InterfaceInit+0x128>
 800dac6:	bf00      	nop
 800dac8:	0801fbc8 	.word	0x0801fbc8
 800dacc:	0801fbd1 	.word	0x0801fbd1
 800dad0:	0801fbc6 	.word	0x0801fbc6
 800dad4:	080201a7 	.word	0x080201a7
 800dad8:	080201cd 	.word	0x080201cd
 800dadc:	0800ddc1 	.word	0x0800ddc1
 800dae0:	080201e4 	.word	0x080201e4
 800dae4:	0800de15 	.word	0x0800de15
 800dae8:	080201f8 	.word	0x080201f8

0800daec <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 800daec:	b507      	push	{r0, r1, r2, lr}

  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800daee:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 800daf2:	9100      	str	r1, [sp, #0]
 800daf4:	f44f 5208 	mov.w	r2, #8704	; 0x2200
 800daf8:	2101      	movs	r1, #1
 800dafa:	f7ff fd1d 	bl	800d538 <USBH_GetDescriptor>
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
}
 800dafe:	b003      	add	sp, #12
 800db00:	f85d fb04 	ldr.w	pc, [sp], #4

0800db04 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 800db04:	b410      	push	{r4}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800db06:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800db0a:	f640 2421 	movw	r4, #2593	; 0xa21

  phost->Control.setup.b.wIndex.w = 0U;
 800db0e:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800db10:	8204      	strh	r4, [r0, #16]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 800db12:	8241      	strh	r1, [r0, #18]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, NULL, 0U);
 800db14:	4611      	mov	r1, r2
}
 800db16:	f85d 4b04 	ldr.w	r4, [sp], #4
  phost->Control.setup.b.wIndex.w = 0U;
 800db1a:	6142      	str	r2, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 800db1c:	f7ff bbc8 	b.w	800d2b0 <USBH_CtlReq>

0800db20 <USBH_HID_GetReport>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800db20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = reportLen;

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800db24:	4619      	mov	r1, r3
{
 800db26:	b430      	push	{r4, r5}
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 800db28:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800db2a:	2200      	movs	r2, #0
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800db2c:	f240 15a1 	movw	r5, #417	; 0x1a1
  phost->Control.setup.b.wIndex.w = 0U;
 800db30:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800db32:	f89d 2008 	ldrb.w	r2, [sp, #8]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800db36:	8205      	strh	r5, [r0, #16]
  phost->Control.setup.b.wLength.w = reportLen;
 800db38:	82c2      	strh	r2, [r0, #22]
}
 800db3a:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 800db3c:	f7ff bbb8 	b.w	800d2b0 <USBH_CtlReq>

0800db40 <USBH_HID_SetProtocol>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800db40:	f640 3221 	movw	r2, #2849	; 0xb21
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
  if (protocol != 0U)
 800db44:	fab1 f181 	clz	r1, r1
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800db48:	8202      	strh	r2, [r0, #16]
  if (protocol != 0U)
 800db4a:	0949      	lsrs	r1, r1, #5
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
  }

  phost->Control.setup.b.wIndex.w = 0U;
 800db4c:	2200      	movs	r2, #0
 800db4e:	8241      	strh	r1, [r0, #18]
 800db50:	6142      	str	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, NULL, 0U);
 800db52:	4611      	mov	r1, r2
 800db54:	f7ff bbac 	b.w	800d2b0 <USBH_CtlReq>

0800db58 <USBH_HID_ClassRequest>:
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800db58:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800db5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800db5e:	69de      	ldr	r6, [r3, #28]
{
 800db60:	4604      	mov	r4, r0
  switch (HID_Handle->ctl_state)
 800db62:	7975      	ldrb	r5, [r6, #5]
 800db64:	2d05      	cmp	r5, #5
 800db66:	d836      	bhi.n	800dbd6 <USBH_HID_ClassRequest+0x7e>
 800db68:	e8df f005 	tbb	[pc, r5]
 800db6c:	032d3503 	.word	0x032d3503
 800db70:	4d43      	.short	0x4d43
{
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 800db72:	8bc5      	ldrh	r5, [r0, #30]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800db74:	2d09      	cmp	r5, #9
 800db76:	d91e      	bls.n	800dbb6 <USBH_HID_ClassRequest+0x5e>
  {
    ptr = USB_LEN_CFG_DESC;
 800db78:	2309      	movs	r3, #9
      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 800db7a:	301c      	adds	r0, #28
    ptr = USB_LEN_CFG_DESC;
 800db7c:	f8ad 3006 	strh.w	r3, [sp, #6]

    while (ptr < CfgDescLen)
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db80:	f10d 0106 	add.w	r1, sp, #6
 800db84:	f7ff fb8d 	bl	800d2a2 <USBH_GetNextDesc>

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800db88:	7843      	ldrb	r3, [r0, #1]
 800db8a:	2b21      	cmp	r3, #33	; 0x21
 800db8c:	d116      	bne.n	800dbbc <USBH_HID_ClassRequest+0x64>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 800db8e:	7803      	ldrb	r3, [r0, #0]
 800db90:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800db94:	7843      	ldrb	r3, [r0, #1]
 800db96:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 800db9a:	8843      	ldrh	r3, [r0, #2]
 800db9c:	8533      	strh	r3, [r6, #40]	; 0x28
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800db9e:	7903      	ldrb	r3, [r0, #4]
 800dba0:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 800dba4:	7943      	ldrb	r3, [r0, #5]
 800dba6:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800dbaa:	7983      	ldrb	r3, [r0, #6]
 800dbac:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 800dbb0:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800dbb4:	85f3      	strh	r3, [r6, #46]	; 0x2e
      HID_Handle->ctl_state = HID_REQ_GET_REPORT_DESC;
 800dbb6:	2302      	movs	r3, #2
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800dbb8:	7173      	strb	r3, [r6, #5]
 800dbba:	e00c      	b.n	800dbd6 <USBH_HID_ClassRequest+0x7e>
    while (ptr < CfgDescLen)
 800dbbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800dbc0:	42ab      	cmp	r3, r5
 800dbc2:	d3dd      	bcc.n	800db80 <USBH_HID_ClassRequest+0x28>
 800dbc4:	e7f7      	b.n	800dbb6 <USBH_HID_ClassRequest+0x5e>
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 800dbc6:	8df1      	ldrh	r1, [r6, #46]	; 0x2e
 800dbc8:	f7ff ff90 	bl	800daec <USBH_HID_GetHIDReportDescriptor>
      if (classReqStatus == USBH_OK)
 800dbcc:	b908      	cbnz	r0, 800dbd2 <USBH_HID_ClassRequest+0x7a>
        HID_Handle->ctl_state = HID_REQ_SET_IDLE;
 800dbce:	2304      	movs	r3, #4
 800dbd0:	e7f2      	b.n	800dbb8 <USBH_HID_ClassRequest+0x60>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800dbd2:	2803      	cmp	r0, #3
 800dbd4:	d001      	beq.n	800dbda <USBH_HID_ClassRequest+0x82>
  switch (HID_Handle->ctl_state)
 800dbd6:	2501      	movs	r5, #1
 800dbd8:	e008      	b.n	800dbec <USBH_HID_ClassRequest+0x94>
        USBH_ErrLog("Control error: HID: Device Get Report Descriptor request failed");
 800dbda:	4818      	ldr	r0, [pc, #96]	; (800dc3c <USBH_HID_ClassRequest+0xe4>)
 800dbdc:	f010 fc70 	bl	801e4c0 <iprintf>
 800dbe0:	4817      	ldr	r0, [pc, #92]	; (800dc40 <USBH_HID_ClassRequest+0xe8>)
 800dbe2:	f010 fc6d 	bl	801e4c0 <iprintf>
 800dbe6:	4817      	ldr	r0, [pc, #92]	; (800dc44 <USBH_HID_ClassRequest+0xec>)
 800dbe8:	f010 fcf0 	bl	801e5cc <puts>
}
 800dbec:	4628      	mov	r0, r5
 800dbee:	b002      	add	sp, #8
 800dbf0:	bd70      	pop	{r4, r5, r6, pc}
      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	4611      	mov	r1, r2
 800dbf6:	f7ff ff85 	bl	800db04 <USBH_HID_SetIdle>
      if (classReqStatus == USBH_OK)
 800dbfa:	b908      	cbnz	r0, 800dc00 <USBH_HID_ClassRequest+0xa8>
          HID_Handle->ctl_state = HID_REQ_SET_PROTOCOL;
 800dbfc:	2305      	movs	r3, #5
 800dbfe:	e7db      	b.n	800dbb8 <USBH_HID_ClassRequest+0x60>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 800dc00:	2803      	cmp	r0, #3
 800dc02:	d1e8      	bne.n	800dbd6 <USBH_HID_ClassRequest+0x7e>
 800dc04:	e7fa      	b.n	800dbfc <USBH_HID_ClassRequest+0xa4>
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 800dc06:	2100      	movs	r1, #0
 800dc08:	f7ff ff9a 	bl	800db40 <USBH_HID_SetProtocol>
      if (classReqStatus == USBH_OK)
 800dc0c:	4605      	mov	r5, r0
 800dc0e:	b938      	cbnz	r0, 800dc20 <USBH_HID_ClassRequest+0xc8>
        HID_Handle->ctl_state = HID_REQ_IDLE;
 800dc10:	2301      	movs	r3, #1
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dc12:	2102      	movs	r1, #2
 800dc14:	4620      	mov	r0, r4
        HID_Handle->ctl_state = HID_REQ_IDLE;
 800dc16:	7173      	strb	r3, [r6, #5]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800dc18:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 800dc1c:	4798      	blx	r3
        status = USBH_OK;
 800dc1e:	e7e5      	b.n	800dbec <USBH_HID_ClassRequest+0x94>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800dc20:	2803      	cmp	r0, #3
 800dc22:	d1d8      	bne.n	800dbd6 <USBH_HID_ClassRequest+0x7e>
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800dc24:	4805      	ldr	r0, [pc, #20]	; (800dc3c <USBH_HID_ClassRequest+0xe4>)
        status = USBH_FAIL;
 800dc26:	2502      	movs	r5, #2
        USBH_ErrLog("Control error: HID: Device Set protocol request failed");
 800dc28:	f010 fc4a 	bl	801e4c0 <iprintf>
 800dc2c:	4806      	ldr	r0, [pc, #24]	; (800dc48 <USBH_HID_ClassRequest+0xf0>)
 800dc2e:	f010 fc47 	bl	801e4c0 <iprintf>
 800dc32:	4804      	ldr	r0, [pc, #16]	; (800dc44 <USBH_HID_ClassRequest+0xec>)
 800dc34:	f010 fcca 	bl	801e5cc <puts>
        status = USBH_FAIL;
 800dc38:	e7d8      	b.n	800dbec <USBH_HID_ClassRequest+0x94>
 800dc3a:	bf00      	nop
 800dc3c:	0801fb84 	.word	0x0801fb84
 800dc40:	08020210 	.word	0x08020210
 800dc44:	0801fbc6 	.word	0x0801fbc6
 800dc48:	08020250 	.word	0x08020250

0800dc4c <USBH_HID_FifoInit>:
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
  f->head = 0U;
 800dc4c:	2300      	movs	r3, #0
  f->tail = 0U;
  f->lock = 0U;
  f->size = size;
 800dc4e:	8102      	strh	r2, [r0, #8]
  f->buf = buf;
 800dc50:	6001      	str	r1, [r0, #0]
  f->head = 0U;
 800dc52:	6043      	str	r3, [r0, #4]
  f->lock = 0U;
 800dc54:	7283      	strb	r3, [r0, #10]
}
 800dc56:	4770      	bx	lr

0800dc58 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 800dc58:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;

  if (f->lock == 0U)
 800dc5a:	7a83      	ldrb	r3, [r0, #10]
 800dc5c:	b123      	cbz	r3, 800dc68 <USBH_HID_FifoWrite+0x10>
        }
      }
    }
  }

  f->lock = 0U;
 800dc5e:	2300      	movs	r3, #0

  return nbytes;
 800dc60:	4614      	mov	r4, r2
  f->lock = 0U;
 800dc62:	7283      	strb	r3, [r0, #10]
}
 800dc64:	4620      	mov	r0, r4
 800dc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f->lock = 1U;
 800dc68:	2401      	movs	r4, #1
          f->head = 0U;
 800dc6a:	469c      	mov	ip, r3
    f->lock = 1U;
 800dc6c:	7284      	strb	r4, [r0, #10]
    for (i = 0U; i < nbytes; i++)
 800dc6e:	b29c      	uxth	r4, r3
 800dc70:	42a2      	cmp	r2, r4
 800dc72:	d9f4      	bls.n	800dc5e <USBH_HID_FifoWrite+0x6>
      if (((f->head + 1U) == f->tail) ||
 800dc74:	8885      	ldrh	r5, [r0, #4]
 800dc76:	88c6      	ldrh	r6, [r0, #6]
 800dc78:	1c6f      	adds	r7, r5, #1
 800dc7a:	42b7      	cmp	r7, r6
 800dc7c:	d004      	beq.n	800dc88 <USBH_HID_FifoWrite+0x30>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800dc7e:	f8b0 e008 	ldrh.w	lr, [r0, #8]
      if (((f->head + 1U) == f->tail) ||
 800dc82:	4577      	cmp	r7, lr
 800dc84:	d103      	bne.n	800dc8e <USBH_HID_FifoWrite+0x36>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800dc86:	b916      	cbnz	r6, 800dc8e <USBH_HID_FifoWrite+0x36>
        f->lock = 0U;
 800dc88:	2300      	movs	r3, #0
 800dc8a:	7283      	strb	r3, [r0, #10]
        return i;
 800dc8c:	e7ea      	b.n	800dc64 <USBH_HID_FifoWrite+0xc>
        f->buf[f->head] = *p++;
 800dc8e:	5cce      	ldrb	r6, [r1, r3]
 800dc90:	3301      	adds	r3, #1
 800dc92:	6804      	ldr	r4, [r0, #0]
 800dc94:	5566      	strb	r6, [r4, r5]
        f->head++;
 800dc96:	8884      	ldrh	r4, [r0, #4]
        if (f->head == f->size)
 800dc98:	8905      	ldrh	r5, [r0, #8]
        f->head++;
 800dc9a:	3401      	adds	r4, #1
 800dc9c:	b2a4      	uxth	r4, r4
        if (f->head == f->size)
 800dc9e:	42a5      	cmp	r5, r4
        f->head++;
 800dca0:	8084      	strh	r4, [r0, #4]
          f->head = 0U;
 800dca2:	bf08      	it	eq
 800dca4:	f8a0 c004 	strheq.w	ip, [r0, #4]
    for (i = 0U; i < nbytes; i++)
 800dca8:	e7e1      	b.n	800dc6e <USBH_HID_FifoWrite+0x16>

0800dcaa <USBH_HID_EventCallback>:
  */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800dcaa:	4770      	bx	lr

0800dcac <USBH_HID_Process>:
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800dcac:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800dcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800dcb2:	69de      	ldr	r6, [r3, #28]
{
 800dcb4:	4607      	mov	r7, r0
  switch (HID_Handle->state)
 800dcb6:	78b4      	ldrb	r4, [r6, #2]
 800dcb8:	2c06      	cmp	r4, #6
 800dcba:	d83f      	bhi.n	800dd3c <USBH_HID_Process+0x90>
 800dcbc:	e8df f004 	tbb	[pc, r4]
 800dcc0:	3e3e1404 	.word	0x3e3e1404
 800dcc4:	2d40      	.short	0x2d40
 800dcc6:	50          	.byte	0x50
 800dcc7:	00          	.byte	0x00
      HID_Handle->Init(phost);
 800dcc8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800dcca:	4798      	blx	r3
      HID_Handle->state = HID_IDLE;
 800dccc:	2301      	movs	r3, #1
        HID_Handle->state = HID_SYNC;
 800dcce:	70b3      	strb	r3, [r6, #2]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dcd0:	2302      	movs	r3, #2
 800dcd2:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	461a      	mov	r2, r3
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dcda:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 800dcde:	f8d7 05a8 	ldr.w	r0, [r7, #1448]	; 0x5a8
 800dce2:	f7fb fe38 	bl	8009956 <osMessageQueuePut>
 800dce6:	e038      	b.n	800dd5a <USBH_HID_Process+0xae>
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800dce8:	7e33      	ldrb	r3, [r6, #24]
 800dcea:	2200      	movs	r2, #0
 800dcec:	2101      	movs	r1, #1
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	6973      	ldr	r3, [r6, #20]
 800dcf2:	f7ff ff15 	bl	800db20 <USBH_HID_GetReport>
      if (status == USBH_OK)
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	b908      	cbnz	r0, 800dcfe <USBH_HID_Process+0x52>
        HID_Handle->state = HID_SYNC;
 800dcfa:	2305      	movs	r3, #5
 800dcfc:	e7e7      	b.n	800dcce <USBH_HID_Process+0x22>
      else if (status == USBH_BUSY)
 800dcfe:	2801      	cmp	r0, #1
 800dd00:	d102      	bne.n	800dd08 <USBH_HID_Process+0x5c>
        HID_Handle->state = HID_IDLE;
 800dd02:	70b0      	strb	r0, [r6, #2]
        status = USBH_OK;
 800dd04:	2400      	movs	r4, #0
 800dd06:	e7e3      	b.n	800dcd0 <USBH_HID_Process+0x24>
      else if (status == USBH_NOT_SUPPORTED)
 800dd08:	2803      	cmp	r0, #3
 800dd0a:	d102      	bne.n	800dd12 <USBH_HID_Process+0x66>
        HID_Handle->state = HID_SYNC;
 800dd0c:	2305      	movs	r3, #5
 800dd0e:	70b3      	strb	r3, [r6, #2]
 800dd10:	e7f8      	b.n	800dd04 <USBH_HID_Process+0x58>
        HID_Handle->state = HID_ERROR;
 800dd12:	2307      	movs	r3, #7
        status = USBH_FAIL;
 800dd14:	2402      	movs	r4, #2
        HID_Handle->state = HID_ERROR;
 800dd16:	70b3      	strb	r3, [r6, #2]
        status = USBH_FAIL;
 800dd18:	e7da      	b.n	800dcd0 <USBH_HID_Process+0x24>
      if ((phost->Timer & 1U) != 0U)
 800dd1a:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd1e:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
      if ((phost->Timer & 1U) != 0U)
 800dd22:	07db      	lsls	r3, r3, #31
        HID_Handle->state = HID_GET_DATA;
 800dd24:	bf44      	itt	mi
 800dd26:	2304      	movmi	r3, #4
 800dd28:	70b3      	strbmi	r3, [r6, #2]
      phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dd2a:	2302      	movs	r3, #2
 800dd2c:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd30:	2300      	movs	r3, #0
 800dd32:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800dd36:	461a      	mov	r2, r3
 800dd38:	f7fb fe0d 	bl	8009956 <osMessageQueuePut>
  switch (HID_Handle->state)
 800dd3c:	2400      	movs	r4, #0
 800dd3e:	e00c      	b.n	800dd5a <USBH_HID_Process+0xae>
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800dd40:	7873      	ldrb	r3, [r6, #1]
      HID_Handle->DataReady = 0U;
 800dd42:	2400      	movs	r4, #0
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800dd44:	7e32      	ldrb	r2, [r6, #24]
 800dd46:	6971      	ldr	r1, [r6, #20]
 800dd48:	f000 f8e8 	bl	800df1c <USBH_InterruptReceiveData>
      HID_Handle->state = HID_POLL;
 800dd4c:	2306      	movs	r3, #6
 800dd4e:	70b3      	strb	r3, [r6, #2]
      HID_Handle->timer = phost->Timer;
 800dd50:	f8d7 3594 	ldr.w	r3, [r7, #1428]	; 0x594
      HID_Handle->DataReady = 0U;
 800dd54:	f886 4024 	strb.w	r4, [r6, #36]	; 0x24
      HID_Handle->timer = phost->Timer;
 800dd58:	6233      	str	r3, [r6, #32]
}
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	b003      	add	sp, #12
 800dd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800dd60:	7871      	ldrb	r1, [r6, #1]
 800dd62:	f7f4 fbc5 	bl	80024f0 <USBH_LL_GetURBState>
 800dd66:	4605      	mov	r5, r0
 800dd68:	7871      	ldrb	r1, [r6, #1]
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800dd6a:	4638      	mov	r0, r7
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 800dd6c:	2d01      	cmp	r5, #1
 800dd6e:	d118      	bne.n	800dda2 <USBH_HID_Process+0xf6>
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800dd70:	f7f4 fbba 	bl	80024e8 <USBH_LL_GetLastXferSize>
        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U))
 800dd74:	f896 4024 	ldrb.w	r4, [r6, #36]	; 0x24
 800dd78:	2c00      	cmp	r4, #0
 800dd7a:	d1df      	bne.n	800dd3c <USBH_HID_Process+0x90>
 800dd7c:	2800      	cmp	r0, #0
 800dd7e:	d0dd      	beq.n	800dd3c <USBH_HID_Process+0x90>
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 800dd80:	8b32      	ldrh	r2, [r6, #24]
 800dd82:	f106 0008 	add.w	r0, r6, #8
 800dd86:	6971      	ldr	r1, [r6, #20]
 800dd88:	f7ff ff66 	bl	800dc58 <USBH_HID_FifoWrite>
          USBH_HID_EventCallback(phost);
 800dd8c:	4638      	mov	r0, r7
          HID_Handle->DataReady = 1U;
 800dd8e:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
          USBH_HID_EventCallback(phost);
 800dd92:	f7ff ff8a 	bl	800dcaa <USBH_HID_EventCallback>
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dd96:	2302      	movs	r3, #2
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd98:	4622      	mov	r2, r4
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800dd9a:	f8c7 35b0 	str.w	r3, [r7, #1456]	; 0x5b0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dd9e:	4623      	mov	r3, r4
 800dda0:	e79b      	b.n	800dcda <USBH_HID_Process+0x2e>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 800dda2:	f7f4 fba5 	bl	80024f0 <USBH_LL_GetURBState>
 800dda6:	2805      	cmp	r0, #5
 800dda8:	d1c8      	bne.n	800dd3c <USBH_HID_Process+0x90>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800ddaa:	7eb1      	ldrb	r1, [r6, #26]
 800ddac:	4638      	mov	r0, r7
 800ddae:	f7ff fd8a 	bl	800d8c6 <USBH_ClrFeature>
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d1c1      	bne.n	800dd3c <USBH_HID_Process+0x90>
            HID_Handle->state = HID_GET_DATA;
 800ddb8:	2304      	movs	r3, #4
 800ddba:	70b3      	strb	r3, [r6, #2]
 800ddbc:	e7cd      	b.n	800dd5a <USBH_HID_Process+0xae>
	...

0800ddc0 <USBH_HID_KeybdInit>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ddc0:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c

  keybd_info.lctrl = 0U;
 800ddc4:	4a10      	ldr	r2, [pc, #64]	; (800de08 <USBH_HID_KeybdInit+0x48>)
  keybd_info.rgui = 0U;


  for (x = 0U; x < (sizeof(keybd_report_data) / sizeof(uint32_t)); x++)
  {
    keybd_report_data[x] = 0U;
 800ddc6:	4911      	ldr	r1, [pc, #68]	; (800de0c <USBH_HID_KeybdInit+0x4c>)
{
 800ddc8:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800ddca:	69dc      	ldr	r4, [r3, #28]
  keybd_info.lctrl = 0U;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	7053      	strb	r3, [r2, #1]
  keybd_info.lshift = 0U;
 800ddd0:	7093      	strb	r3, [r2, #2]
  keybd_info.lalt = 0U;
 800ddd2:	70d3      	strb	r3, [r2, #3]
  keybd_info.lgui = 0U;
 800ddd4:	7113      	strb	r3, [r2, #4]
  keybd_info.rctrl = 0U;
 800ddd6:	7153      	strb	r3, [r2, #5]
  keybd_info.rshift = 0U;
 800ddd8:	7193      	strb	r3, [r2, #6]
  keybd_info.ralt = 0U;
 800ddda:	71d3      	strb	r3, [r2, #7]
  keybd_info.rgui = 0U;
 800dddc:	7213      	strb	r3, [r2, #8]
    keybd_rx_report_buf[x] = 0U;
 800ddde:	4a0c      	ldr	r2, [pc, #48]	; (800de10 <USBH_HID_KeybdInit+0x50>)
    keybd_report_data[x] = 0U;
 800dde0:	600b      	str	r3, [r1, #0]
    keybd_rx_report_buf[x] = 0U;
 800dde2:	6013      	str	r3, [r2, #0]
    keybd_report_data[x] = 0U;
 800dde4:	604b      	str	r3, [r1, #4]
  if (HID_Handle->length > (sizeof(keybd_report_data)))
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
  }
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800dde6:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    keybd_rx_report_buf[x] = 0U;
 800ddea:	6053      	str	r3, [r2, #4]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800ddec:	f104 0008 	add.w	r0, r4, #8
  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800ddf0:	8b23      	ldrh	r3, [r4, #24]
  HID_Handle->pData = (uint8_t *)(void *)keybd_rx_report_buf;
 800ddf2:	6162      	str	r2, [r4, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800ddf4:	2250      	movs	r2, #80	; 0x50
  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800ddf6:	2b08      	cmp	r3, #8
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 800ddf8:	bf84      	itt	hi
 800ddfa:	2308      	movhi	r3, #8
 800ddfc:	8323      	strhhi	r3, [r4, #24]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 800ddfe:	f7ff ff25 	bl	800dc4c <USBH_HID_FifoInit>

  return USBH_OK;
}
 800de02:	2000      	movs	r0, #0
 800de04:	bd10      	pop	{r4, pc}
 800de06:	bf00      	nop
 800de08:	24007478 	.word	0x24007478
 800de0c:	24007488 	.word	0x24007488
 800de10:	24007490 	.word	0x24007490

0800de14 <USBH_HID_MouseInit>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800de14:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c

  mouse_info.x = 0U;
 800de18:	4a0e      	ldr	r2, [pc, #56]	; (800de54 <USBH_HID_MouseInit+0x40>)
  mouse_info.buttons[1] = 0U;
  mouse_info.buttons[2] = 0U;

  for (i = 0U; i < (sizeof(mouse_report_data) / sizeof(uint32_t)); i++)
  {
    mouse_report_data[i] = 0U;
 800de1a:	490f      	ldr	r1, [pc, #60]	; (800de58 <USBH_HID_MouseInit+0x44>)
{
 800de1c:	b510      	push	{r4, lr}
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800de1e:	69dc      	ldr	r4, [r3, #28]
  mouse_info.x = 0U;
 800de20:	2300      	movs	r3, #0
 800de22:	7013      	strb	r3, [r2, #0]
  mouse_info.y = 0U;
 800de24:	7053      	strb	r3, [r2, #1]
  mouse_info.buttons[0] = 0U;
 800de26:	7093      	strb	r3, [r2, #2]
  mouse_info.buttons[1] = 0U;
 800de28:	70d3      	strb	r3, [r2, #3]
  mouse_info.buttons[2] = 0U;
 800de2a:	7113      	strb	r3, [r2, #4]
    mouse_rx_report_buf[i] = 0U;
 800de2c:	4a0b      	ldr	r2, [pc, #44]	; (800de5c <USBH_HID_MouseInit+0x48>)
    mouse_report_data[i] = 0U;
 800de2e:	600b      	str	r3, [r1, #0]
    mouse_rx_report_buf[i] = 0U;
 800de30:	6013      	str	r3, [r2, #0]
    mouse_report_data[i] = 0U;
 800de32:	604b      	str	r3, [r1, #4]
  if (HID_Handle->length > sizeof(mouse_report_data))
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
  }
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800de34:	f500 718e 	add.w	r1, r0, #284	; 0x11c
    mouse_rx_report_buf[i] = 0U;
 800de38:	6053      	str	r3, [r2, #4]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800de3a:	f104 0008 	add.w	r0, r4, #8
  if (HID_Handle->length > sizeof(mouse_report_data))
 800de3e:	8b23      	ldrh	r3, [r4, #24]
  HID_Handle->pData = (uint8_t *)(void *)mouse_rx_report_buf;
 800de40:	6162      	str	r2, [r4, #20]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800de42:	2250      	movs	r2, #80	; 0x50
  if (HID_Handle->length > sizeof(mouse_report_data))
 800de44:	2b08      	cmp	r3, #8
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800de46:	bf84      	itt	hi
 800de48:	2308      	movhi	r3, #8
 800de4a:	8323      	strhhi	r3, [r4, #24]
  USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800de4c:	f7ff fefe 	bl	800dc4c <USBH_HID_FifoInit>

  return USBH_OK;
}
 800de50:	2000      	movs	r0, #0
 800de52:	bd10      	pop	{r4, pc}
 800de54:	24007498 	.word	0x24007498
 800de58:	240074a0 	.word	0x240074a0
 800de5c:	240074a8 	.word	0x240074a8

0800de60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800de60:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de62:	2400      	movs	r4, #0
{
 800de64:	460b      	mov	r3, r1
 800de66:	4611      	mov	r1, r2
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de68:	2208      	movs	r2, #8
 800de6a:	e9cd 4300 	strd	r4, r3, [sp]
 800de6e:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800de72:	4623      	mov	r3, r4
 800de74:	4622      	mov	r2, r4
 800de76:	f7f4 fbaa 	bl	80025ce <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 800de7a:	4620      	mov	r0, r4
 800de7c:	b004      	add	sp, #16
 800de7e:	bd10      	pop	{r4, pc}

0800de80 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800de80:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800de82:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800de86:	b085      	sub	sp, #20
 800de88:	460c      	mov	r4, r1
 800de8a:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 800de8c:	2d00      	cmp	r5, #0
{
 800de8e:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de92:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 800de94:	bf18      	it	ne
 800de96:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800de98:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800de9c:	2301      	movs	r3, #1
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	2300      	movs	r3, #0
 800dea2:	461a      	mov	r2, r3
 800dea4:	f7f4 fb93 	bl	80025ce <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 800dea8:	2000      	movs	r0, #0
 800deaa:	b005      	add	sp, #20
 800deac:	bd30      	pop	{r4, r5, pc}

0800deae <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800deae:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800deb0:	2400      	movs	r4, #0
{
 800deb2:	b085      	sub	sp, #20
 800deb4:	460d      	mov	r5, r1
 800deb6:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800deb8:	4623      	mov	r3, r4
 800deba:	9501      	str	r5, [sp, #4]
 800debc:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800dec0:	2201      	movs	r2, #1
 800dec2:	9200      	str	r2, [sp, #0]
 800dec4:	f7f4 fb83 	bl	80025ce <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 800dec8:	4620      	mov	r0, r4
 800deca:	b005      	add	sp, #20
 800decc:	bd30      	pop	{r4, r5, pc}

0800dece <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800dece:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ded0:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 800ded4:	b085      	sub	sp, #20
 800ded6:	460c      	mov	r4, r1
 800ded8:	4619      	mov	r1, r3
  {
    do_ping = 0U;
 800deda:	2d00      	cmp	r5, #0
{
 800dedc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dee0:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 800dee2:	bf18      	it	ne
 800dee4:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dee6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800deea:	2301      	movs	r3, #1
 800deec:	2200      	movs	r2, #0
 800deee:	9300      	str	r3, [sp, #0]
 800def0:	2302      	movs	r3, #2
 800def2:	f7f4 fb6c 	bl	80025ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 800def6:	2000      	movs	r0, #0
 800def8:	b005      	add	sp, #20
 800defa:	bd30      	pop	{r4, r5, pc}

0800defc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800defc:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800defe:	2400      	movs	r4, #0
{
 800df00:	b085      	sub	sp, #20
 800df02:	460d      	mov	r5, r1
 800df04:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df06:	2302      	movs	r3, #2
 800df08:	9501      	str	r5, [sp, #4]
 800df0a:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800df0e:	2201      	movs	r2, #1
 800df10:	9200      	str	r2, [sp, #0]
 800df12:	f7f4 fb5c 	bl	80025ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 800df16:	4620      	mov	r0, r4
 800df18:	b005      	add	sp, #20
 800df1a:	bd30      	pop	{r4, r5, pc}

0800df1c <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800df1c:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df1e:	2400      	movs	r4, #0
{
 800df20:	b085      	sub	sp, #20
 800df22:	460d      	mov	r5, r1
 800df24:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df26:	2303      	movs	r3, #3
 800df28:	9501      	str	r5, [sp, #4]
 800df2a:	e9cd 2402 	strd	r2, r4, [sp, #8]
 800df2e:	2201      	movs	r2, #1
 800df30:	9200      	str	r2, [sp, #0]
 800df32:	f7f4 fb4c 	bl	80025ce <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
}
 800df36:	4620      	mov	r0, r4
 800df38:	b005      	add	sp, #20
 800df3a:	bd30      	pop	{r4, r5, pc}

0800df3c <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800df3c:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df3e:	b292      	uxth	r2, r2
{
 800df40:	b085      	sub	sp, #20
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df42:	2400      	movs	r4, #0
{
 800df44:	460d      	mov	r5, r1
 800df46:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df48:	2301      	movs	r3, #1
 800df4a:	9403      	str	r4, [sp, #12]
 800df4c:	9300      	str	r3, [sp, #0]
 800df4e:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800df52:	4622      	mov	r2, r4
 800df54:	f7f4 fb3b 	bl	80025ce <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
}
 800df58:	4620      	mov	r0, r4
 800df5a:	b005      	add	sp, #20
 800df5c:	bd30      	pop	{r4, r5, pc}

0800df5e <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 800df5e:	2000      	movs	r0, #0
 800df60:	4770      	bx	lr
	...

0800df64 <USBH_MSC_Process>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800df64:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800df68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800df6c:	69dc      	ldr	r4, [r3, #28]
{
 800df6e:	4606      	mov	r6, r0
  switch (MSC_Handle->state)
 800df70:	7b23      	ldrb	r3, [r4, #12]
 800df72:	b123      	cbz	r3, 800df7e <USBH_MSC_Process+0x1a>
  USBH_StatusTypeDef error = USBH_BUSY;
 800df74:	1e58      	subs	r0, r3, #1
 800df76:	bf18      	it	ne
 800df78:	2001      	movne	r0, #1
}
 800df7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800df7e:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800df82:	f500 68b6 	add.w	r8, r0, #1456	; 0x5b0
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800df86:	7822      	ldrb	r2, [r4, #0]
 800df88:	2701      	movs	r7, #1
 800df8a:	428a      	cmp	r2, r1
 800df8c:	f240 815e 	bls.w	800e24c <USBH_MSC_Process+0x2e8>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800df90:	2534      	movs	r5, #52	; 0x34
 800df92:	fb05 4301 	mla	r3, r5, r1, r4
 800df96:	f883 7091 	strb.w	r7, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800df9a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800df9e:	2b08      	cmp	r3, #8
 800dfa0:	d81c      	bhi.n	800dfdc <USBH_MSC_Process+0x78>
 800dfa2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dfa6:	0009      	.short	0x0009
 800dfa8:	0059001b 	.word	0x0059001b
 800dfac:	002700ad 	.word	0x002700ad
 800dfb0:	001b00f3 	.word	0x001b00f3
 800dfb4:	014f001b 	.word	0x014f001b
            USBH_UsrLog("LUN #%d: ", MSC_Handle->current_lun);
 800dfb8:	48ae      	ldr	r0, [pc, #696]	; (800e274 <USBH_MSC_Process+0x310>)
 800dfba:	f010 fa81 	bl	801e4c0 <iprintf>
 800dfbe:	48ae      	ldr	r0, [pc, #696]	; (800e278 <USBH_MSC_Process+0x314>)
 800dfc0:	f010 fb04 	bl	801e5cc <puts>
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800dfc4:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800dfc8:	2234      	movs	r2, #52	; 0x34
 800dfca:	fb02 4303 	mla	r3, r2, r3, r4
 800dfce:	2204      	movs	r2, #4
 800dfd0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 800dfd4:	f8d6 3594 	ldr.w	r3, [r6, #1428]	; 0x594
 800dfd8:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dfdc:	2304      	movs	r3, #4
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dfde:	4641      	mov	r1, r8
 800dfe0:	f8d6 05a8 	ldr.w	r0, [r6, #1448]	; 0x5a8
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dfe4:	f8c6 35b0 	str.w	r3, [r6, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800dfe8:	2300      	movs	r3, #0
 800dfea:	461a      	mov	r2, r3
 800dfec:	f7fb fcb3 	bl	8009956 <osMessageQueuePut>
  USBH_StatusTypeDef error = USBH_BUSY;
 800dff0:	2001      	movs	r0, #1
 800dff2:	e7c2      	b.n	800df7a <USBH_MSC_Process+0x16>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800dff4:	fb05 4201 	mla	r2, r5, r1, r4
 800dff8:	b2c9      	uxtb	r1, r1
 800dffa:	329f      	adds	r2, #159	; 0x9f
 800dffc:	f000 fbe2 	bl	800e7c4 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 800e000:	2800      	cmp	r0, #0
 800e002:	f040 80bb 	bne.w	800e17c <USBH_MSC_Process+0x218>
              USBH_UsrLog("Inquiry Vendor  : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.vendor_id);
 800e006:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800e00a:	489c      	ldr	r0, [pc, #624]	; (800e27c <USBH_MSC_Process+0x318>)
 800e00c:	fb05 4101 	mla	r1, r5, r1, r4
 800e010:	31a2      	adds	r1, #162	; 0xa2
 800e012:	f010 fa55 	bl	801e4c0 <iprintf>
 800e016:	4898      	ldr	r0, [pc, #608]	; (800e278 <USBH_MSC_Process+0x314>)
 800e018:	f010 fad8 	bl	801e5cc <puts>
              USBH_UsrLog("Inquiry Product : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.product_id);
 800e01c:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800e020:	4897      	ldr	r0, [pc, #604]	; (800e280 <USBH_MSC_Process+0x31c>)
 800e022:	fb05 4101 	mla	r1, r5, r1, r4
 800e026:	31ab      	adds	r1, #171	; 0xab
 800e028:	f010 fa4a 	bl	801e4c0 <iprintf>
 800e02c:	4892      	ldr	r0, [pc, #584]	; (800e278 <USBH_MSC_Process+0x314>)
 800e02e:	f010 facd 	bl	801e5cc <puts>
              USBH_UsrLog("Inquiry Version : %s", MSC_Handle->unit[MSC_Handle->current_lun].inquiry.revision_id);
 800e032:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800e036:	4893      	ldr	r0, [pc, #588]	; (800e284 <USBH_MSC_Process+0x320>)
 800e038:	fb05 4101 	mla	r1, r5, r1, r4
 800e03c:	31bc      	adds	r1, #188	; 0xbc
 800e03e:	f010 fa3f 	bl	801e4c0 <iprintf>
 800e042:	488d      	ldr	r0, [pc, #564]	; (800e278 <USBH_MSC_Process+0x314>)
 800e044:	f010 fac2 	bl	801e5cc <puts>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800e048:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e04c:	fb05 4403 	mla	r4, r5, r3, r4
 800e050:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800e052:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800e056:	e7c1      	b.n	800dfdc <USBH_MSC_Process+0x78>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800e058:	b2c9      	uxtb	r1, r1
 800e05a:	f000 fb5b 	bl	800e714 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 800e05e:	b9f8      	cbnz	r0, 800e0a0 <USBH_MSC_Process+0x13c>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800e060:	2234      	movs	r2, #52	; 0x34
 800e062:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e066:	fb02 4303 	mla	r3, r2, r3, r4
 800e06a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800e06e:	b1a2      	cbz	r2, 800e09a <USBH_MSC_Process+0x136>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800e070:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device ready");
 800e072:	4885      	ldr	r0, [pc, #532]	; (800e288 <USBH_MSC_Process+0x324>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800e074:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device ready");
 800e078:	f010 fa22 	bl	801e4c0 <iprintf>
 800e07c:	487e      	ldr	r0, [pc, #504]	; (800e278 <USBH_MSC_Process+0x314>)
 800e07e:	f010 faa5 	bl	801e5cc <puts>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800e082:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e086:	2234      	movs	r2, #52	; 0x34
 800e088:	fb02 4403 	mla	r4, r2, r3, r4
 800e08c:	2303      	movs	r3, #3
 800e08e:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800e092:	2300      	movs	r3, #0
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800e094:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 800e098:	e7a0      	b.n	800dfdc <USBH_MSC_Process+0x78>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800e09a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800e09e:	e7f0      	b.n	800e082 <USBH_MSC_Process+0x11e>
            if (ready_status == USBH_FAIL)
 800e0a0:	2802      	cmp	r0, #2
 800e0a2:	d120      	bne.n	800e0e6 <USBH_MSC_Process+0x182>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800e0a4:	2234      	movs	r2, #52	; 0x34
 800e0a6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e0aa:	fb02 4303 	mla	r3, r2, r3, r4
 800e0ae:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800e0b2:	2a02      	cmp	r2, #2
 800e0b4:	d013      	beq.n	800e0de <USBH_MSC_Process+0x17a>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800e0b6:	2201      	movs	r2, #1
                USBH_UsrLog("MSC Device NOT ready");
 800e0b8:	4874      	ldr	r0, [pc, #464]	; (800e28c <USBH_MSC_Process+0x328>)
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800e0ba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
                USBH_UsrLog("MSC Device NOT ready");
 800e0be:	f010 f9ff 	bl	801e4c0 <iprintf>
 800e0c2:	486d      	ldr	r0, [pc, #436]	; (800e278 <USBH_MSC_Process+0x314>)
 800e0c4:	f010 fa82 	bl	801e5cc <puts>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800e0c8:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e0cc:	2234      	movs	r2, #52	; 0x34
 800e0ce:	fb02 4403 	mla	r4, r2, r3, r4
 800e0d2:	f240 1305 	movw	r3, #261	; 0x105
 800e0d6:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800e0da:	2302      	movs	r3, #2
 800e0dc:	e7da      	b.n	800e094 <USBH_MSC_Process+0x130>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800e0de:	2200      	movs	r2, #0
 800e0e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
 800e0e4:	e7f0      	b.n	800e0c8 <USBH_MSC_Process+0x164>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800e0e6:	2804      	cmp	r0, #4
 800e0e8:	f47f af78 	bne.w	800dfdc <USBH_MSC_Process+0x78>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800e0ec:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e0f0:	2234      	movs	r2, #52	; 0x34
 800e0f2:	fb02 4403 	mla	r4, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800e0f6:	f240 2301 	movw	r3, #513	; 0x201
 800e0fa:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800e0fe:	e76d      	b.n	800dfdc <USBH_MSC_Process+0x78>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800e100:	fb05 4201 	mla	r2, r5, r1, r4
 800e104:	b2c9      	uxtb	r1, r1
 800e106:	3294      	adds	r2, #148	; 0x94
 800e108:	f000 fb27 	bl	800e75a <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 800e10c:	bbb0      	cbnz	r0, 800e17c <USBH_MSC_Process+0x218>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800e10e:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e112:	fb05 4303 	mla	r3, r5, r3, r4
 800e116:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
 800e11a:	2a01      	cmp	r2, #1
 800e11c:	d122      	bne.n	800e164 <USBH_MSC_Process+0x200>
                USBH_UsrLog("MSC Device capacity : %lu Bytes", \
 800e11e:	f8b3 2098 	ldrh.w	r2, [r3, #152]	; 0x98
 800e122:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e126:	485a      	ldr	r0, [pc, #360]	; (800e290 <USBH_MSC_Process+0x32c>)
 800e128:	4351      	muls	r1, r2
 800e12a:	f010 f9c9 	bl	801e4c0 <iprintf>
 800e12e:	4852      	ldr	r0, [pc, #328]	; (800e278 <USBH_MSC_Process+0x314>)
 800e130:	f010 fa4c 	bl	801e5cc <puts>
                USBH_UsrLog("Block number : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_nbr));
 800e134:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e138:	4856      	ldr	r0, [pc, #344]	; (800e294 <USBH_MSC_Process+0x330>)
 800e13a:	fb05 4303 	mla	r3, r5, r3, r4
 800e13e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e142:	f010 f9bd 	bl	801e4c0 <iprintf>
 800e146:	484c      	ldr	r0, [pc, #304]	; (800e278 <USBH_MSC_Process+0x314>)
 800e148:	f010 fa40 	bl	801e5cc <puts>
                USBH_UsrLog("Block Size   : %lu", (int32_t)(MSC_Handle->unit[MSC_Handle->current_lun].capacity.block_size));
 800e14c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e150:	4851      	ldr	r0, [pc, #324]	; (800e298 <USBH_MSC_Process+0x334>)
 800e152:	fb05 4503 	mla	r5, r5, r3, r4
 800e156:	f8b5 1098 	ldrh.w	r1, [r5, #152]	; 0x98
 800e15a:	f010 f9b1 	bl	801e4c0 <iprintf>
 800e15e:	4846      	ldr	r0, [pc, #280]	; (800e278 <USBH_MSC_Process+0x314>)
 800e160:	f010 fa34 	bl	801e5cc <puts>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800e164:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e168:	2101      	movs	r1, #1
 800e16a:	2234      	movs	r2, #52	; 0x34
 800e16c:	fb02 4203 	mla	r2, r2, r3, r4
              MSC_Handle->current_lun++;
 800e170:	440b      	add	r3, r1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800e172:	f8a2 1090 	strh.w	r1, [r2, #144]	; 0x90
              MSC_Handle->current_lun++;
 800e176:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800e17a:	e72f      	b.n	800dfdc <USBH_MSC_Process+0x78>
            else if (scsi_status == USBH_FAIL)
 800e17c:	2802      	cmp	r0, #2
 800e17e:	d159      	bne.n	800e234 <USBH_MSC_Process+0x2d0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800e180:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e184:	fb05 4403 	mla	r4, r5, r3, r4
 800e188:	2305      	movs	r3, #5
 800e18a:	e762      	b.n	800e052 <USBH_MSC_Process+0xee>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800e18c:	fb05 4201 	mla	r2, r5, r1, r4
 800e190:	b2c9      	uxtb	r1, r1
 800e192:	329c      	adds	r2, #156	; 0x9c
 800e194:	f000 fb76 	bl	800e884 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 800e198:	2800      	cmp	r0, #0
 800e19a:	d13d      	bne.n	800e218 <USBH_MSC_Process+0x2b4>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800e19c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e1a0:	fb05 4503 	mla	r5, r5, r3, r4
 800e1a4:	f895 109c 	ldrb.w	r1, [r5, #156]	; 0x9c
 800e1a8:	f001 02fb 	and.w	r2, r1, #251	; 0xfb
 800e1ac:	2a02      	cmp	r2, #2
 800e1ae:	d10b      	bne.n	800e1c8 <USBH_MSC_Process+0x264>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800e1b0:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 800e1b4:	f8d6 3594 	ldr.w	r3, [r6, #1428]	; 0x594
 800e1b8:	1a1b      	subs	r3, r3, r0
 800e1ba:	f242 700f 	movw	r0, #9999	; 0x270f
 800e1be:	4283      	cmp	r3, r0
 800e1c0:	d802      	bhi.n	800e1c8 <USBH_MSC_Process+0x264>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800e1c2:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
                  break;
 800e1c6:	e709      	b.n	800dfdc <USBH_MSC_Process+0x78>
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800e1c8:	4834      	ldr	r0, [pc, #208]	; (800e29c <USBH_MSC_Process+0x338>)
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800e1ca:	2534      	movs	r5, #52	; 0x34
              USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.key);
 800e1cc:	f010 f978 	bl	801e4c0 <iprintf>
 800e1d0:	4829      	ldr	r0, [pc, #164]	; (800e278 <USBH_MSC_Process+0x314>)
 800e1d2:	f010 f9fb 	bl	801e5cc <puts>
              USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.asc);
 800e1d6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e1da:	4831      	ldr	r0, [pc, #196]	; (800e2a0 <USBH_MSC_Process+0x33c>)
 800e1dc:	fb05 4303 	mla	r3, r5, r3, r4
 800e1e0:	f893 109d 	ldrb.w	r1, [r3, #157]	; 0x9d
 800e1e4:	f010 f96c 	bl	801e4c0 <iprintf>
 800e1e8:	4823      	ldr	r0, [pc, #140]	; (800e278 <USBH_MSC_Process+0x314>)
 800e1ea:	f010 f9ef 	bl	801e5cc <puts>
              USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[MSC_Handle->current_lun].sense.ascq);
 800e1ee:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e1f2:	482c      	ldr	r0, [pc, #176]	; (800e2a4 <USBH_MSC_Process+0x340>)
 800e1f4:	fb05 4303 	mla	r3, r5, r3, r4
 800e1f8:	f893 109e 	ldrb.w	r1, [r3, #158]	; 0x9e
 800e1fc:	f010 f960 	bl	801e4c0 <iprintf>
 800e200:	481d      	ldr	r0, [pc, #116]	; (800e278 <USBH_MSC_Process+0x314>)
 800e202:	f010 f9e3 	bl	801e5cc <puts>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800e206:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e20a:	2201      	movs	r2, #1
 800e20c:	fb05 4503 	mla	r5, r5, r3, r4
              MSC_Handle->current_lun++;
 800e210:	4413      	add	r3, r2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800e212:	f885 2090 	strb.w	r2, [r5, #144]	; 0x90
              MSC_Handle->current_lun++;
 800e216:	e7ae      	b.n	800e176 <USBH_MSC_Process+0x212>
            if (scsi_status == USBH_FAIL)
 800e218:	2802      	cmp	r0, #2
 800e21a:	d10b      	bne.n	800e234 <USBH_MSC_Process+0x2d0>
              USBH_UsrLog("MSC Device NOT ready");
 800e21c:	481b      	ldr	r0, [pc, #108]	; (800e28c <USBH_MSC_Process+0x328>)
 800e21e:	f010 f94f 	bl	801e4c0 <iprintf>
 800e222:	4815      	ldr	r0, [pc, #84]	; (800e278 <USBH_MSC_Process+0x314>)
 800e224:	f010 f9d2 	bl	801e5cc <puts>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800e228:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e22c:	fb05 4403 	mla	r4, r5, r3, r4
 800e230:	2308      	movs	r3, #8
 800e232:	e70e      	b.n	800e052 <USBH_MSC_Process+0xee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800e234:	2804      	cmp	r0, #4
 800e236:	f47f aed1 	bne.w	800dfdc <USBH_MSC_Process+0x78>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800e23a:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800e23e:	fb05 4403 	mla	r4, r5, r3, r4
 800e242:	e758      	b.n	800e0f6 <USBH_MSC_Process+0x192>
            MSC_Handle->current_lun++;
 800e244:	3101      	adds	r1, #1
 800e246:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
            break;
 800e24a:	e6c7      	b.n	800dfdc <USBH_MSC_Process+0x78>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e24c:	2204      	movs	r2, #4
        MSC_Handle->current_lun = 0U;
 800e24e:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800e252:	7327      	strb	r7, [r4, #12]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e254:	4641      	mov	r1, r8
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800e256:	f8c0 25b0 	str.w	r2, [r0, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e25a:	461a      	mov	r2, r3
 800e25c:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800e260:	f7fb fb79 	bl	8009956 <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800e264:	4630      	mov	r0, r6
 800e266:	f8d6 35a4 	ldr.w	r3, [r6, #1444]	; 0x5a4
 800e26a:	2102      	movs	r1, #2
 800e26c:	4798      	blx	r3
  USBH_StatusTypeDef error = USBH_BUSY;
 800e26e:	4638      	mov	r0, r7
 800e270:	e683      	b.n	800df7a <USBH_MSC_Process+0x16>
 800e272:	bf00      	nop
 800e274:	0802028b 	.word	0x0802028b
 800e278:	0801fbc6 	.word	0x0801fbc6
 800e27c:	08020295 	.word	0x08020295
 800e280:	080202aa 	.word	0x080202aa
 800e284:	080202bf 	.word	0x080202bf
 800e288:	080202d4 	.word	0x080202d4
 800e28c:	080202e5 	.word	0x080202e5
 800e290:	080202fa 	.word	0x080202fa
 800e294:	0802031a 	.word	0x0802031a
 800e298:	0802032d 	.word	0x0802032d
 800e29c:	08020340 	.word	0x08020340
 800e2a0:	08020350 	.word	0x08020350
 800e2a4:	0802036b 	.word	0x0802036b

0800e2a8 <USBH_MSC_ClassRequest>:
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e2a8:	f8d0 254c 	ldr.w	r2, [r0, #1356]	; 0x54c
{
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e2b0:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
 800e2b2:	7ba2      	ldrb	r2, [r4, #14]
 800e2b4:	2a02      	cmp	r2, #2
 800e2b6:	d002      	beq.n	800e2be <USBH_MSC_ClassRequest+0x16>
 800e2b8:	2a03      	cmp	r2, #3
 800e2ba:	d028      	beq.n	800e30e <USBH_MSC_ClassRequest+0x66>
 800e2bc:	bb6a      	cbnz	r2, 800e31a <USBH_MSC_ClassRequest+0x72>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800e2be:	4621      	mov	r1, r4
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f000 f8fd 	bl	800e4c0 <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 800e2c6:	2803      	cmp	r0, #3
 800e2c8:	d11e      	bne.n	800e308 <USBH_MSC_ClassRequest+0x60>
        MSC_Handle->max_lun = 0U;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800e2ce:	7821      	ldrb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800e2d0:	4813      	ldr	r0, [pc, #76]	; (800e320 <USBH_MSC_ClassRequest+0x78>)
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800e2d2:	2902      	cmp	r1, #2
 800e2d4:	bf96      	itet	ls
 800e2d6:	3101      	addls	r1, #1
 800e2d8:	2102      	movhi	r1, #2
 800e2da:	b2c9      	uxtbls	r1, r1
 800e2dc:	7021      	strb	r1, [r4, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);
 800e2de:	f010 f8ef 	bl	801e4c0 <iprintf>
 800e2e2:	4810      	ldr	r0, [pc, #64]	; (800e324 <USBH_MSC_ClassRequest+0x7c>)
 800e2e4:	f010 f972 	bl	801e5cc <puts>
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800e2e8:	7821      	ldrb	r1, [r4, #0]
 800e2ea:	b159      	cbz	r1, 800e304 <USBH_MSC_ClassRequest+0x5c>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800e2ec:	2202      	movs	r2, #2
          MSC_Handle->unit[i].state_changed = 0U;
 800e2ee:	2300      	movs	r3, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800e2f0:	2901      	cmp	r1, #1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800e2f2:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 800e2f6:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800e2fa:	bf1c      	itt	ne
 800e2fc:	f884 20c6 	strbne.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 800e300:	f884 30f5 	strbne.w	r3, [r4, #245]	; 0xf5
  switch (MSC_Handle->req_state)
 800e304:	2000      	movs	r0, #0
 800e306:	e001      	b.n	800e30c <USBH_MSC_ClassRequest+0x64>
      if (status == USBH_OK)
 800e308:	2800      	cmp	r0, #0
 800e30a:	d0e0      	beq.n	800e2ce <USBH_MSC_ClassRequest+0x26>
}
 800e30c:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800e30e:	2100      	movs	r1, #0
 800e310:	f7ff fad9 	bl	800d8c6 <USBH_ClrFeature>
 800e314:	b908      	cbnz	r0, 800e31a <USBH_MSC_ClassRequest+0x72>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800e316:	7be3      	ldrb	r3, [r4, #15]
 800e318:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 800e31a:	2001      	movs	r0, #1
 800e31c:	e7f6      	b.n	800e30c <USBH_MSC_ClassRequest+0x64>
 800e31e:	bf00      	nop
 800e320:	0802038f 	.word	0x0802038f
 800e324:	0801fbc6 	.word	0x0801fbc6

0800e328 <USBH_MSC_InterfaceDeInit>:
{
 800e328:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e32a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800e32e:	4604      	mov	r4, r0
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e330:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 800e332:	7969      	ldrb	r1, [r5, #5]
 800e334:	b139      	cbz	r1, 800e346 <USBH_MSC_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800e336:	f001 fae8 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800e33a:	7969      	ldrb	r1, [r5, #5]
 800e33c:	4620      	mov	r0, r4
 800e33e:	f001 fb01 	bl	800f944 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800e342:	2300      	movs	r3, #0
 800e344:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 800e346:	7929      	ldrb	r1, [r5, #4]
 800e348:	b141      	cbz	r1, 800e35c <USBH_MSC_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800e34a:	4620      	mov	r0, r4
 800e34c:	f001 fadd 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 800e350:	7929      	ldrb	r1, [r5, #4]
 800e352:	4620      	mov	r0, r4
 800e354:	f001 faf6 	bl	800f944 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800e358:	2300      	movs	r3, #0
 800e35a:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 800e35c:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800e360:	69d8      	ldr	r0, [r3, #28]
 800e362:	b128      	cbz	r0, 800e370 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 800e364:	f00f fcc0 	bl	801dce8 <free>
    phost->pActiveClass->pData = 0U;
 800e368:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
 800e36c:	2200      	movs	r2, #0
 800e36e:	61da      	str	r2, [r3, #28]
}
 800e370:	2000      	movs	r0, #0
 800e372:	bd38      	pop	{r3, r4, r5, pc}

0800e374 <USBH_MSC_InterfaceInit>:
{
 800e374:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800e378:	f8d0 154c 	ldr.w	r1, [r0, #1356]	; 0x54c
 800e37c:	2350      	movs	r3, #80	; 0x50
 800e37e:	2206      	movs	r2, #6
{
 800e380:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800e382:	7909      	ldrb	r1, [r1, #4]
 800e384:	f7fe fba0 	bl	800cac8 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800e388:	2809      	cmp	r0, #9
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800e38a:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800e38c:	d90d      	bls.n	800e3aa <USBH_MSC_InterfaceInit+0x36>
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 800e38e:	4844      	ldr	r0, [pc, #272]	; (800e4a0 <USBH_MSC_InterfaceInit+0x12c>)
 800e390:	f010 f896 	bl	801e4c0 <iprintf>
 800e394:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800e398:	4842      	ldr	r0, [pc, #264]	; (800e4a4 <USBH_MSC_InterfaceInit+0x130>)
 800e39a:	6819      	ldr	r1, [r3, #0]
 800e39c:	f010 f890 	bl	801e4c0 <iprintf>
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 800e3a0:	4841      	ldr	r0, [pc, #260]	; (800e4a8 <USBH_MSC_InterfaceInit+0x134>)
 800e3a2:	f010 f913 	bl	801e5cc <puts>
    return USBH_FAIL;
 800e3a6:	2702      	movs	r7, #2
 800e3a8:	e04b      	b.n	800e442 <USBH_MSC_InterfaceInit+0xce>
  status = USBH_SelectInterface(phost, interface);
 800e3aa:	4601      	mov	r1, r0
 800e3ac:	4628      	mov	r0, r5
 800e3ae:	f7fe fb45 	bl	800ca3c <USBH_SelectInterface>
  if (status != USBH_OK)
 800e3b2:	4607      	mov	r7, r0
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	d1f6      	bne.n	800e3a6 <USBH_MSC_InterfaceInit+0x32>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800e3b8:	f8d5 854c 	ldr.w	r8, [r5, #1356]	; 0x54c
 800e3bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800e3c0:	f00f fc8a 	bl	801dcd8 <malloc>
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 800e3ca:	b930      	cbnz	r0, 800e3da <USBH_MSC_InterfaceInit+0x66>
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
 800e3cc:	4834      	ldr	r0, [pc, #208]	; (800e4a0 <USBH_MSC_InterfaceInit+0x12c>)
 800e3ce:	f010 f877 	bl	801e4c0 <iprintf>
 800e3d2:	4836      	ldr	r0, [pc, #216]	; (800e4ac <USBH_MSC_InterfaceInit+0x138>)
 800e3d4:	f010 f874 	bl	801e4c0 <iprintf>
 800e3d8:	e7e2      	b.n	800e3a0 <USBH_MSC_InterfaceInit+0x2c>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800e3da:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e3de:	4639      	mov	r1, r7
 800e3e0:	f00f fc98 	bl	801dd14 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e3e4:	2032      	movs	r0, #50	; 0x32
 800e3e6:	fb00 5306 	mla	r3, r0, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e3ea:	fb00 5606 	mla	r6, r0, r6, r5
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800e3ee:	4628      	mov	r0, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e3f0:	f893 134e 	ldrb.w	r1, [r3, #846]	; 0x34e
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e3f4:	f8b3 2350 	ldrh.w	r2, [r3, #848]	; 0x350
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e3f8:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 800e3fc:	2b00      	cmp	r3, #0
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e3fe:	f8b6 3358 	ldrh.w	r3, [r6, #856]	; 0x358
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800e402:	bfac      	ite	ge
 800e404:	71a1      	strbge	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800e406:	71e1      	strblt	r1, [r4, #7]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e408:	f996 1356 	ldrsb.w	r1, [r6, #854]	; 0x356
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e40c:	bfb4      	ite	lt
 800e40e:	8162      	strhlt	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e410:	8122      	strhge	r2, [r4, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e412:	2900      	cmp	r1, #0
 800e414:	f896 2356 	ldrb.w	r2, [r6, #854]	; 0x356
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e418:	bfb4      	ite	lt
 800e41a:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800e41c:	71a2      	strbge	r2, [r4, #6]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800e41e:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800e420:	bfb4      	ite	lt
 800e422:	71e2      	strblt	r2, [r4, #7]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e424:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800e426:	f001 fa75 	bl	800f914 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800e42a:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800e42c:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800e42e:	4628      	mov	r0, r5
 800e430:	f001 fa70 	bl	800f914 <USBH_AllocPipe>
 800e434:	7120      	strb	r0, [r4, #4]
  (void)USBH_MSC_BOT_Init(phost);
 800e436:	4628      	mov	r0, r5
 800e438:	f000 f84c 	bl	800e4d4 <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800e43c:	79a2      	ldrb	r2, [r4, #6]
 800e43e:	b922      	cbnz	r2, 800e44a <USBH_MSC_InterfaceInit+0xd6>
    return USBH_NOT_SUPPORTED;
 800e440:	2703      	movs	r7, #3
}
 800e442:	4638      	mov	r0, r7
 800e444:	b004      	add	sp, #16
 800e446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 800e44a:	8923      	ldrh	r3, [r4, #8]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d0f7      	beq.n	800e440 <USBH_MSC_InterfaceInit+0xcc>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800e450:	9302      	str	r3, [sp, #8]
 800e452:	2602      	movs	r6, #2
 800e454:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800e458:	4628      	mov	r0, r5
 800e45a:	7961      	ldrb	r1, [r4, #5]
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	9601      	str	r6, [sp, #4]
 800e460:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800e464:	f001 fa42 	bl	800f8ec <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800e468:	79e2      	ldrb	r2, [r4, #7]
 800e46a:	2a00      	cmp	r2, #0
 800e46c:	d0e8      	beq.n	800e440 <USBH_MSC_InterfaceInit+0xcc>
 800e46e:	8963      	ldrh	r3, [r4, #10]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d0e5      	beq.n	800e440 <USBH_MSC_InterfaceInit+0xcc>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800e474:	7921      	ldrb	r1, [r4, #4]
 800e476:	4628      	mov	r0, r5
 800e478:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800e47c:	f895 331d 	ldrb.w	r3, [r5, #797]	; 0x31d
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800e486:	f001 fa31 	bl	800f8ec <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800e48a:	7921      	ldrb	r1, [r4, #4]
 800e48c:	2200      	movs	r2, #0
 800e48e:	4628      	mov	r0, r5
 800e490:	f7f4 f83e 	bl	8002510 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800e494:	2200      	movs	r2, #0
 800e496:	7961      	ldrb	r1, [r4, #5]
 800e498:	4628      	mov	r0, r5
 800e49a:	f7f4 f839 	bl	8002510 <USBH_LL_SetToggle>
  return USBH_OK;
 800e49e:	e7d0      	b.n	800e442 <USBH_MSC_InterfaceInit+0xce>
 800e4a0:	0801fbc8 	.word	0x0801fbc8
 800e4a4:	0801fbd1 	.word	0x0801fbd1
 800e4a8:	0801fbc6 	.word	0x0801fbc6
 800e4ac:	080203ab 	.word	0x080203ab

0800e4b0 <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 800e4b0:	f64f 7121 	movw	r1, #65313	; 0xff21
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, NULL, 0U);
 800e4ba:	4611      	mov	r1, r2
 800e4bc:	f7fe bef8 	b.w	800d2b0 <USBH_CtlReq>

0800e4c0 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 800e4c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800e4c4:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 800e4c8:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 800e4cc:	2201      	movs	r2, #1
 800e4ce:	f7fe beef 	b.w	800d2b0 <USBH_CtlReq>
	...

0800e4d4 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4d4:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
  MSC_Handle->hbot.state = BOT_SEND_CBW;
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;

  return USBH_OK;
}
 800e4d8:	2000      	movs	r0, #0
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800e4da:	4905      	ldr	r1, [pc, #20]	; (800e4f0 <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4dc:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800e4de:	4a05      	ldr	r2, [pc, #20]	; (800e4f4 <USBH_MSC_BOT_Init+0x20>)
 800e4e0:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800e4ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
}
 800e4ee:	4770      	bx	lr
 800e4f0:	43425355 	.word	0x43425355
 800e4f4:	20304050 	.word	0x20304050

0800e4f8 <USBH_MSC_BOT_Process>:
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4f8:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800e4fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e4fe:	69dc      	ldr	r4, [r3, #28]
{
 800e500:	4606      	mov	r6, r0
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 800e502:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 800e506:	1e6b      	subs	r3, r5, #1
 800e508:	2b0a      	cmp	r3, #10
 800e50a:	d848      	bhi.n	800e59e <USBH_MSC_BOT_Process+0xa6>
 800e50c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e510:	001b000b 	.word	0x001b000b
 800e514:	00530049 	.word	0x00530049
 800e518:	007c0070 	.word	0x007c0070
 800e51c:	00af00a7 	.word	0x00af00a7
 800e520:	00de00d3 	.word	0x00de00d3
 800e524:	00f7      	.short	0x00f7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800e526:	2302      	movs	r3, #2
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800e528:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800e52a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800e52e:	f104 0154 	add.w	r1, r4, #84	; 0x54
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800e532:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800e536:	7963      	ldrb	r3, [r4, #5]
 800e538:	9200      	str	r2, [sp, #0]
 800e53a:	221f      	movs	r2, #31
 800e53c:	f7ff fcc7 	bl	800dece <USBH_BulkSendData>

    default:
      break;
  }
  return status;
}
 800e540:	4628      	mov	r0, r5
 800e542:	b003      	add	sp, #12
 800e544:	bdf0      	pop	{r4, r5, r6, r7, pc}
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e546:	7961      	ldrb	r1, [r4, #5]
 800e548:	f7f3 ffd2 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800e54c:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e54e:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800e550:	d116      	bne.n	800e580 <USBH_MSC_BOT_Process+0x88>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800e552:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e554:	2b00      	cmp	r3, #0
 800e556:	d040      	beq.n	800e5da <USBH_MSC_BOT_Process+0xe2>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800e558:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 800e55c:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800e55e:	bfb4      	ite	lt
 800e560:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800e562:	2305      	movge	r3, #5
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e564:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e568:	2302      	movs	r3, #2
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e56a:	f506 61b6 	add.w	r1, r6, #1456	; 0x5b0
 800e56e:	f8d6 05a8 	ldr.w	r0, [r6, #1448]	; 0x5a8
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e572:	f8c6 35b0 	str.w	r3, [r6, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e576:	2300      	movs	r3, #0
 800e578:	461a      	mov	r2, r3
 800e57a:	f7fb f9ec 	bl	8009956 <osMessageQueuePut>
 800e57e:	e7df      	b.n	800e540 <USBH_MSC_BOT_Process+0x48>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e580:	2802      	cmp	r0, #2
 800e582:	d163      	bne.n	800e64c <USBH_MSC_BOT_Process+0x154>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e584:	2701      	movs	r7, #1
 800e586:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e58a:	f8c6 55b0 	str.w	r5, [r6, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e58e:	2300      	movs	r3, #0
 800e590:	f506 61b6 	add.w	r1, r6, #1456	; 0x5b0
 800e594:	f8d6 05a8 	ldr.w	r0, [r6, #1448]	; 0x5a8
 800e598:	461a      	mov	r2, r3
 800e59a:	f7fb f9dc 	bl	8009956 <osMessageQueuePut>
  switch (MSC_Handle->hbot.state)
 800e59e:	2501      	movs	r5, #1
 800e5a0:	e7ce      	b.n	800e540 <USBH_MSC_BOT_Process+0x48>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800e5a2:	7923      	ldrb	r3, [r4, #4]
 800e5a4:	8962      	ldrh	r2, [r4, #10]
 800e5a6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800e5aa:	f7ff fca7 	bl	800defc <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800e5ae:	2304      	movs	r3, #4
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e5b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800e5b4:	e7f3      	b.n	800e59e <USBH_MSC_BOT_Process+0xa6>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e5b6:	7921      	ldrb	r1, [r4, #4]
 800e5b8:	f7f3 ff9a 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800e5bc:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e5be:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800e5c0:	d112      	bne.n	800e5e8 <USBH_MSC_BOT_Process+0xf0>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800e5c2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e5c4:	8962      	ldrh	r2, [r4, #10]
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d937      	bls.n	800e63a <USBH_MSC_BOT_Process+0x142>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800e5ca:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800e5ce:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800e5d0:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800e5d2:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800e5d4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800e5d8:	b90b      	cbnz	r3, 800e5de <USBH_MSC_BOT_Process+0xe6>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e5da:	2307      	movs	r3, #7
 800e5dc:	e7c2      	b.n	800e564 <USBH_MSC_BOT_Process+0x6c>
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800e5de:	7923      	ldrb	r3, [r4, #4]
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	f7ff fc8b 	bl	800defc <USBH_BulkReceiveData>
 800e5e6:	e7ab      	b.n	800e540 <USBH_MSC_BOT_Process+0x48>
      else if (URB_Status == USBH_URB_STALL)
 800e5e8:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
 800e5ea:	d1d8      	bne.n	800e59e <USBH_MSC_BOT_Process+0xa6>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800e5ec:	2309      	movs	r3, #9
 800e5ee:	e030      	b.n	800e652 <USBH_MSC_BOT_Process+0x15a>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800e5f0:	2501      	movs	r5, #1
 800e5f2:	7963      	ldrb	r3, [r4, #5]
 800e5f4:	8922      	ldrh	r2, [r4, #8]
 800e5f6:	9500      	str	r5, [sp, #0]
 800e5f8:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800e5fc:	f7ff fc67 	bl	800dece <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800e600:	2306      	movs	r3, #6
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e602:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800e606:	e79b      	b.n	800e540 <USBH_MSC_BOT_Process+0x48>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e608:	7961      	ldrb	r1, [r4, #5]
 800e60a:	f7f3 ff71 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800e60e:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800e610:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800e612:	d115      	bne.n	800e640 <USBH_MSC_BOT_Process+0x148>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800e614:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800e616:	8922      	ldrh	r2, [r4, #8]
 800e618:	4293      	cmp	r3, r2
 800e61a:	d90e      	bls.n	800e63a <USBH_MSC_BOT_Process+0x142>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800e61c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800e620:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800e622:	4411      	add	r1, r2
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800e624:	65e3      	str	r3, [r4, #92]	; 0x5c
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800e626:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d0d5      	beq.n	800e5da <USBH_MSC_BOT_Process+0xe2>
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800e62e:	7963      	ldrb	r3, [r4, #5]
 800e630:	9000      	str	r0, [sp, #0]
 800e632:	4630      	mov	r0, r6
 800e634:	f7ff fc4b 	bl	800dece <USBH_BulkSendData>
 800e638:	e796      	b.n	800e568 <USBH_MSC_BOT_Process+0x70>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800e63a:	2300      	movs	r3, #0
 800e63c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800e63e:	e7cc      	b.n	800e5da <USBH_MSC_BOT_Process+0xe2>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e640:	2802      	cmp	r0, #2
 800e642:	d103      	bne.n	800e64c <USBH_MSC_BOT_Process+0x154>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800e644:	2305      	movs	r3, #5
 800e646:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800e64a:	e79e      	b.n	800e58a <USBH_MSC_BOT_Process+0x92>
      else if (URB_Status == USBH_URB_STALL)
 800e64c:	2d05      	cmp	r5, #5
 800e64e:	d1a6      	bne.n	800e59e <USBH_MSC_BOT_Process+0xa6>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800e650:	230a      	movs	r3, #10
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800e652:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800e656:	2302      	movs	r3, #2
 800e658:	f8c6 35b0 	str.w	r3, [r6, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e65c:	e797      	b.n	800e58e <USBH_MSC_BOT_Process+0x96>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800e65e:	7923      	ldrb	r3, [r4, #4]
 800e660:	220d      	movs	r2, #13
 800e662:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800e666:	f7ff fc49 	bl	800defc <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800e66a:	2308      	movs	r3, #8
 800e66c:	e7a0      	b.n	800e5b0 <USBH_MSC_BOT_Process+0xb8>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800e66e:	7921      	ldrb	r1, [r4, #4]
 800e670:	f7f3 ff3e 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800e674:	2801      	cmp	r0, #1
 800e676:	d11c      	bne.n	800e6b2 <USBH_MSC_BOT_Process+0x1ba>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e678:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800e67c:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800e680:	4630      	mov	r0, r6
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e682:	f8d6 354c 	ldr.w	r3, [r6, #1356]	; 0x54c
 800e686:	69dc      	ldr	r4, [r3, #28]
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800e688:	7921      	ldrb	r1, [r4, #4]
 800e68a:	f7f3 ff2d 	bl	80024e8 <USBH_LL_GetLastXferSize>
 800e68e:	280d      	cmp	r0, #13
 800e690:	d10d      	bne.n	800e6ae <USBH_MSC_BOT_Process+0x1b6>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800e692:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800e694:	4b1e      	ldr	r3, [pc, #120]	; (800e710 <USBH_MSC_BOT_Process+0x218>)
 800e696:	429a      	cmp	r2, r3
 800e698:	d109      	bne.n	800e6ae <USBH_MSC_BOT_Process+0x1b6>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800e69a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800e69c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d105      	bne.n	800e6ae <USBH_MSC_BOT_Process+0x1b6>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800e6a2:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
          status = USBH_FAIL;
 800e6a6:	2d00      	cmp	r5, #0
 800e6a8:	bf18      	it	ne
 800e6aa:	2502      	movne	r5, #2
 800e6ac:	e75c      	b.n	800e568 <USBH_MSC_BOT_Process+0x70>
 800e6ae:	2502      	movs	r5, #2
 800e6b0:	e75a      	b.n	800e568 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 800e6b2:	2805      	cmp	r0, #5
 800e6b4:	e799      	b.n	800e5ea <USBH_MSC_BOT_Process+0xf2>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800e6b6:	79e1      	ldrb	r1, [r4, #7]
 800e6b8:	f7ff f905 	bl	800d8c6 <USBH_ClrFeature>
      if (error == USBH_OK)
 800e6bc:	b908      	cbnz	r0, 800e6c2 <USBH_MSC_BOT_Process+0x1ca>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800e6be:	2307      	movs	r3, #7
 800e6c0:	e776      	b.n	800e5b0 <USBH_MSC_BOT_Process+0xb8>
      else if (error == USBH_UNRECOVERED_ERROR)
 800e6c2:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
 800e6c4:	f47f af6b 	bne.w	800e59e <USBH_MSC_BOT_Process+0xa6>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800e6c8:	230b      	movs	r3, #11
 800e6ca:	e771      	b.n	800e5b0 <USBH_MSC_BOT_Process+0xb8>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800e6cc:	79a1      	ldrb	r1, [r4, #6]
 800e6ce:	f7ff f8fa 	bl	800d8c6 <USBH_ClrFeature>
      if (error == USBH_OK)
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	b988      	cbnz	r0, 800e6fa <USBH_MSC_BOT_Process+0x202>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800e6d6:	7961      	ldrb	r1, [r4, #5]
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7f3 ff28 	bl	800252e <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800e6de:	f1c0 0001 	rsb	r0, r0, #1
 800e6e2:	7961      	ldrb	r1, [r4, #5]
 800e6e4:	b2c2      	uxtb	r2, r0
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f7f3 ff12 	bl	8002510 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800e6ec:	462a      	mov	r2, r5
 800e6ee:	7921      	ldrb	r1, [r4, #4]
 800e6f0:	4630      	mov	r0, r6
 800e6f2:	f7f3 ff0d 	bl	8002510 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800e6f6:	2309      	movs	r3, #9
 800e6f8:	e75a      	b.n	800e5b0 <USBH_MSC_BOT_Process+0xb8>
        if (error == USBH_UNRECOVERED_ERROR)
 800e6fa:	2804      	cmp	r0, #4
 800e6fc:	e7e2      	b.n	800e6c4 <USBH_MSC_BOT_Process+0x1cc>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800e6fe:	f7ff fed7 	bl	800e4b0 <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 800e702:	4605      	mov	r5, r0
 800e704:	2800      	cmp	r0, #0
 800e706:	f47f af1b 	bne.w	800e540 <USBH_MSC_BOT_Process+0x48>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e70a:	2301      	movs	r3, #1
 800e70c:	e779      	b.n	800e602 <USBH_MSC_BOT_Process+0x10a>
 800e70e:	bf00      	nop
 800e710:	53425355 	.word	0x53425355

0800e714 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800e714:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e716:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 800e71a:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800e71c:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800e720:	2d01      	cmp	r5, #1
 800e722:	d004      	beq.n	800e72e <USBH_MSC_SCSI_TestUnitReady+0x1a>
 800e724:	2d02      	cmp	r5, #2
 800e726:	d014      	beq.n	800e752 <USBH_MSC_SCSI_TestUnitReady+0x3e>
 800e728:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 800e72a:	4628      	mov	r0, r5
 800e72c:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800e72e:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e730:	230a      	movs	r3, #10
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e732:	2210      	movs	r2, #16
 800e734:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e738:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800e73c:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800e73e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e742:	f00f fae7 	bl	801dd14 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e746:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e748:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e74c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
 800e750:	e7eb      	b.n	800e72a <USBH_MSC_SCSI_TestUnitReady+0x16>
}
 800e752:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 800e756:	f7ff becf 	b.w	800e4f8 <USBH_MSC_BOT_Process>

0800e75a <USBH_MSC_SCSI_ReadCapacity>:
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e75a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800e75e:	b570      	push	{r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e760:	69dc      	ldr	r4, [r3, #28]
{
 800e762:	4616      	mov	r6, r2

  switch (MSC_Handle->hbot.cmd_state)
 800e764:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800e768:	2d01      	cmp	r5, #1
 800e76a:	d004      	beq.n	800e776 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 800e76c:	2d02      	cmp	r5, #2
 800e76e:	d01b      	beq.n	800e7a8 <USBH_MSC_SCSI_ReadCapacity+0x4e>
 800e770:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
 800e772:	4628      	mov	r0, r5
 800e774:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800e776:	2308      	movs	r3, #8
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e778:	2210      	movs	r2, #16
 800e77a:	2100      	movs	r1, #0
 800e77c:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800e780:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e782:	2380      	movs	r3, #128	; 0x80
 800e784:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e788:	f00f fac4 	bl	801dd14 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e78c:	f242 530a 	movw	r3, #9482	; 0x250a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e790:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e794:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e798:	2302      	movs	r3, #2
 800e79a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e79e:	f104 0310 	add.w	r3, r4, #16
 800e7a2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 800e7a6:	e7e4      	b.n	800e772 <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e7a8:	f7ff fea6 	bl	800e4f8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	d1df      	bne.n	800e772 <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800e7b2:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e7b6:	6813      	ldr	r3, [r2, #0]
 800e7b8:	ba1b      	rev	r3, r3
 800e7ba:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800e7bc:	88d3      	ldrh	r3, [r2, #6]
 800e7be:	ba5b      	rev16	r3, r3
 800e7c0:	80b3      	strh	r3, [r6, #4]
 800e7c2:	e7d6      	b.n	800e772 <USBH_MSC_SCSI_ReadCapacity+0x18>

0800e7c4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800e7c4:	b570      	push	{r4, r5, r6, lr}
 800e7c6:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e7c8:	f8d0 254c 	ldr.w	r2, [r0, #1356]	; 0x54c
{
 800e7cc:	460b      	mov	r3, r1
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e7ce:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800e7d0:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800e7d4:	2d01      	cmp	r5, #1
 800e7d6:	d004      	beq.n	800e7e2 <USBH_MSC_SCSI_Inquiry+0x1e>
 800e7d8:	2d02      	cmp	r5, #2
 800e7da:	d021      	beq.n	800e820 <USBH_MSC_SCSI_Inquiry+0x5c>
 800e7dc:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 800e7de:	4628      	mov	r0, r5
 800e7e0:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e7e2:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e7e4:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800e7e6:	2124      	movs	r1, #36	; 0x24
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e7e8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e7ec:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800e7f0:	2200      	movs	r2, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800e7f2:	65e1      	str	r1, [r4, #92]	; 0x5c
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800e7f4:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e7f8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e7fc:	2302      	movs	r3, #2
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800e7fe:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 800e802:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e806:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e80a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e80e:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e812:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800e816:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e81a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 800e81e:	e7de      	b.n	800e7de <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e820:	f7ff fe6a 	bl	800e4f8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 800e824:	4605      	mov	r5, r0
 800e826:	2800      	cmp	r0, #0
 800e828:	d1d9      	bne.n	800e7de <USBH_MSC_SCSI_Inquiry+0x1a>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800e82a:	4601      	mov	r1, r0
 800e82c:	2222      	movs	r2, #34	; 0x22
 800e82e:	4630      	mov	r0, r6
 800e830:	f00f fa70 	bl	801dd14 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800e834:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800e838:	f106 010c 	add.w	r1, r6, #12
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800e83c:	781a      	ldrb	r2, [r3, #0]
 800e83e:	f002 021f 	and.w	r2, r2, #31
 800e842:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800e844:	781a      	ldrb	r2, [r3, #0]
 800e846:	0952      	lsrs	r2, r2, #5
 800e848:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800e84a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800e84e:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
 800e850:	bfbc      	itt	lt
 800e852:	2201      	movlt	r2, #1
 800e854:	70b2      	strblt	r2, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800e856:	689a      	ldr	r2, [r3, #8]
 800e858:	f8c6 2003 	str.w	r2, [r6, #3]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	f8c6 2007 	str.w	r2, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800e862:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e866:	f103 0210 	add.w	r2, r3, #16
 800e86a:	3320      	adds	r3, #32
 800e86c:	f852 0b04 	ldr.w	r0, [r2], #4
 800e870:	429a      	cmp	r2, r3
 800e872:	f841 0b04 	str.w	r0, [r1], #4
 800e876:	d1f9      	bne.n	800e86c <USBH_MSC_SCSI_Inquiry+0xa8>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800e878:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e87c:	6a1b      	ldr	r3, [r3, #32]
 800e87e:	f8c6 301d 	str.w	r3, [r6, #29]
 800e882:	e7ac      	b.n	800e7de <USBH_MSC_SCSI_Inquiry+0x1a>

0800e884 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800e884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e886:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800e88a:	460f      	mov	r7, r1
 800e88c:	4616      	mov	r6, r2
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800e88e:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 800e890:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 800e894:	2d01      	cmp	r5, #1
 800e896:	d004      	beq.n	800e8a2 <USBH_MSC_SCSI_RequestSense+0x1e>
 800e898:	2d02      	cmp	r5, #2
 800e89a:	d020      	beq.n	800e8de <USBH_MSC_SCSI_RequestSense+0x5a>
 800e89c:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 800e89e:	4628      	mov	r0, r5
 800e8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e8a2:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800e8a4:	260e      	movs	r6, #14
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e8a6:	2210      	movs	r2, #16
 800e8a8:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800e8aa:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e8ae:	f104 0063 	add.w	r0, r4, #99	; 0x63
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800e8b2:	65e6      	str	r6, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e8b4:	017f      	lsls	r7, r7, #5
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800e8b6:	f00f fa2d 	bl	801dd14 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e8ba:	f240 330a 	movw	r3, #778	; 0x30a
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800e8be:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800e8c2:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e8c6:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800e8c8:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800e8cc:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e8d0:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800e8d4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800e8d8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 800e8dc:	e7df      	b.n	800e89e <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 800e8de:	f7ff fe0b 	bl	800e4f8 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d1da      	bne.n	800e89e <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800e8e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800e8ec:	789a      	ldrb	r2, [r3, #2]
 800e8ee:	f002 020f 	and.w	r2, r2, #15
 800e8f2:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800e8f4:	7b1a      	ldrb	r2, [r3, #12]
 800e8f6:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800e8f8:	7b5b      	ldrb	r3, [r3, #13]
 800e8fa:	70b3      	strb	r3, [r6, #2]
 800e8fc:	e7cf      	b.n	800e89e <USBH_MSC_SCSI_RequestSense+0x1a>

0800e8fe <USBH_MTP_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 800e8fe:	2000      	movs	r0, #0
 800e900:	4770      	bx	lr

0800e902 <USBH_MTP_ClassRequest>:
{
 800e902:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e904:	2305      	movs	r3, #5
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e906:	f500 61b6 	add.w	r1, r0, #1456	; 0x5b0
  phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e90a:	f8c0 35b0 	str.w	r3, [r0, #1456]	; 0x5b0
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800e90e:	2300      	movs	r3, #0
 800e910:	f8d0 05a8 	ldr.w	r0, [r0, #1448]	; 0x5a8
 800e914:	461a      	mov	r2, r3
 800e916:	f7fb f81e 	bl	8009956 <osMessageQueuePut>
}
 800e91a:	2000      	movs	r0, #0
 800e91c:	bd08      	pop	{r3, pc}

0800e91e <USBH_MTP_InterfaceDeInit>:
{
 800e91e:	b538      	push	{r3, r4, r5, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800e920:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800e924:	4605      	mov	r5, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800e926:	69dc      	ldr	r4, [r3, #28]
  if (MTP_Handle->DataOutPipe != 0U)
 800e928:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 800e92c:	f894 1d2d 	ldrb.w	r1, [r4, #3373]	; 0xd2d
 800e930:	b149      	cbz	r1, 800e946 <USBH_MTP_InterfaceDeInit+0x28>
    (void)USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 800e932:	f000 ffea 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 800e936:	f894 1d2d 	ldrb.w	r1, [r4, #3373]	; 0xd2d
 800e93a:	4628      	mov	r0, r5
 800e93c:	f001 f802 	bl	800f944 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 800e940:	2300      	movs	r3, #0
 800e942:	f884 3d2d 	strb.w	r3, [r4, #3373]	; 0xd2d
  if (MTP_Handle->DataInPipe != 0U)
 800e946:	f894 1d2c 	ldrb.w	r1, [r4, #3372]	; 0xd2c
 800e94a:	b151      	cbz	r1, 800e962 <USBH_MTP_InterfaceDeInit+0x44>
    (void)USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 800e94c:	4628      	mov	r0, r5
 800e94e:	f000 ffdc 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 800e952:	f894 1d2c 	ldrb.w	r1, [r4, #3372]	; 0xd2c
 800e956:	4628      	mov	r0, r5
 800e958:	f000 fff4 	bl	800f944 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 800e95c:	2300      	movs	r3, #0
 800e95e:	f884 3d2c 	strb.w	r3, [r4, #3372]	; 0xd2c
  if (MTP_Handle->NotificationPipe != 0U)
 800e962:	f894 1d2e 	ldrb.w	r1, [r4, #3374]	; 0xd2e
 800e966:	b151      	cbz	r1, 800e97e <USBH_MTP_InterfaceDeInit+0x60>
    (void)USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 800e968:	4628      	mov	r0, r5
 800e96a:	f000 ffce 	bl	800f90a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 800e96e:	f894 1d2e 	ldrb.w	r1, [r4, #3374]	; 0xd2e
 800e972:	4628      	mov	r0, r5
 800e974:	f000 ffe6 	bl	800f944 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 800e978:	2300      	movs	r3, #0
 800e97a:	f884 3d2e 	strb.w	r3, [r4, #3374]	; 0xd2e
  if (phost->pActiveClass->pData != NULL)
 800e97e:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800e982:	69d8      	ldr	r0, [r3, #28]
 800e984:	b128      	cbz	r0, 800e992 <USBH_MTP_InterfaceDeInit+0x74>
    USBH_free(phost->pActiveClass->pData);
 800e986:	f00f f9af 	bl	801dce8 <free>
    phost->pActiveClass->pData = 0U;
 800e98a:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
 800e98e:	2200      	movs	r2, #0
 800e990:	61da      	str	r2, [r3, #28]
}
 800e992:	2000      	movs	r0, #0
 800e994:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e998 <USBH_MTP_InterfaceInit>:
  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 800e998:	2301      	movs	r3, #1
 800e99a:	2106      	movs	r1, #6
{
 800e99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 800e9a0:	461a      	mov	r2, r3
{
 800e9a2:	b085      	sub	sp, #20
 800e9a4:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 800e9a6:	f7fe f88f 	bl	800cac8 <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e9aa:	2809      	cmp	r0, #9
  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 800e9ac:	4680      	mov	r8, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e9ae:	d90c      	bls.n	800e9ca <USBH_MTP_InterfaceInit+0x32>
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
 800e9b0:	4890      	ldr	r0, [pc, #576]	; (800ebf4 <USBH_MTP_InterfaceInit+0x25c>)
 800e9b2:	f00f fd85 	bl	801e4c0 <iprintf>
 800e9b6:	4890      	ldr	r0, [pc, #576]	; (800ebf8 <USBH_MTP_InterfaceInit+0x260>)
    USBH_DbgLog("Invalid Control endpoint number");
 800e9b8:	f00f fd82 	bl	801e4c0 <iprintf>
 800e9bc:	488f      	ldr	r0, [pc, #572]	; (800ebfc <USBH_MTP_InterfaceInit+0x264>)
 800e9be:	f00f fe05 	bl	801e5cc <puts>
}
 800e9c2:	2002      	movs	r0, #2
 800e9c4:	b005      	add	sp, #20
 800e9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  (void)USBH_SelectInterface(phost, interface);
 800e9ca:	4601      	mov	r1, r0
 800e9cc:	4620      	mov	r0, r4
 800e9ce:	f7fe f835 	bl	800ca3c <USBH_SelectInterface>
  status = USBH_SelectInterface(phost, interface);
 800e9d2:	4641      	mov	r1, r8
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f7fe f831 	bl	800ca3c <USBH_SelectInterface>
  if (status != USBH_OK)
 800e9da:	2800      	cmp	r0, #0
 800e9dc:	d1f1      	bne.n	800e9c2 <USBH_MTP_InterfaceInit+0x2a>
 800e9de:	46a1      	mov	r9, r4
 800e9e0:	f504 7afa 	add.w	sl, r4, #500	; 0x1f4
 800e9e4:	4623      	mov	r3, r4
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800e9e6:	f893 2347 	ldrb.w	r2, [r3, #839]	; 0x347
 800e9ea:	2a06      	cmp	r2, #6
 800e9ec:	d114      	bne.n	800ea18 <USBH_MTP_InterfaceInit+0x80>
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	2600      	movs	r6, #0
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 800e9f2:	f992 134e 	ldrsb.w	r1, [r2, #846]	; 0x34e
 800e9f6:	2900      	cmp	r1, #0
 800e9f8:	da0a      	bge.n	800ea10 <USBH_MTP_InterfaceInit+0x78>
 800e9fa:	f8b2 1350 	ldrh.w	r1, [r2, #848]	; 0x350
 800e9fe:	b139      	cbz	r1, 800ea10 <USBH_MTP_InterfaceInit+0x78>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800ea00:	f892 b34f 	ldrb.w	fp, [r2, #847]	; 0x34f
 800ea04:	f00b 0b03 	and.w	fp, fp, #3
 800ea08:	f1bb 0f03 	cmp.w	fp, #3
 800ea0c:	f000 80e1 	beq.w	800ebd2 <USBH_MTP_InterfaceInit+0x23a>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800ea10:	3601      	adds	r6, #1
 800ea12:	3208      	adds	r2, #8
 800ea14:	2e05      	cmp	r6, #5
 800ea16:	d1ec      	bne.n	800e9f2 <USBH_MTP_InterfaceInit+0x5a>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800ea18:	3332      	adds	r3, #50	; 0x32
 800ea1a:	4553      	cmp	r3, sl
 800ea1c:	d1e3      	bne.n	800e9e6 <USBH_MTP_InterfaceInit+0x4e>
    USBH_DbgLog("Invalid Control endpoint number");
 800ea1e:	4875      	ldr	r0, [pc, #468]	; (800ebf4 <USBH_MTP_InterfaceInit+0x25c>)
 800ea20:	f00f fd4e 	bl	801e4c0 <iprintf>
 800ea24:	4876      	ldr	r0, [pc, #472]	; (800ec00 <USBH_MTP_InterfaceInit+0x268>)
 800ea26:	e7c7      	b.n	800e9b8 <USBH_MTP_InterfaceInit+0x20>
  (void)USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 800ea28:	f242 12d0 	movw	r2, #8656	; 0x21d0
 800ea2c:	2100      	movs	r1, #0
 800ea2e:	f00f f971 	bl	801dd14 <memset>
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800ea32:	1c73      	adds	r3, r6, #1
 800ea34:	2632      	movs	r6, #50	; 0x32
 800ea36:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 800ea3a:	4620      	mov	r0, r4
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800ea3c:	fb06 f608 	mul.w	r6, r6, r8
 800ea40:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
 800ea44:	4426      	add	r6, r4
 800ea46:	f896 1346 	ldrb.w	r1, [r6, #838]	; 0x346
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800ea4a:	f8b6 3348 	ldrh.w	r3, [r6, #840]	; 0x348
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800ea4e:	f885 1d31 	strb.w	r1, [r5, #3377]	; 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800ea52:	f8a5 3d36 	strh.w	r3, [r5, #3382]	; 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 800ea56:	f000 ff5d 	bl	800f914 <USBH_AllocPipe>
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 800ea5a:	f896 334a 	ldrb.w	r3, [r6, #842]	; 0x34a
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 800ea5e:	f885 0d2e 	strb.w	r0, [r5, #3374]	; 0xd2e
 800ea62:	4601      	mov	r1, r0
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 800ea64:	f8a5 3d44 	strh.w	r3, [r5, #3396]	; 0xd44
  (void)USBH_OpenPipe(phost, MTP_Handle->NotificationPipe, MTP_Handle->NotificationEp,
 800ea68:	4620      	mov	r0, r4
 800ea6a:	f8b5 3d36 	ldrh.w	r3, [r5, #3382]	; 0xd36
 800ea6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ea72:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800ea76:	9300      	str	r3, [sp, #0]
 800ea78:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800ea7c:	f895 2d31 	ldrb.w	r2, [r5, #3377]	; 0xd31
 800ea80:	f000 ff34 	bl	800f8ec <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 800ea84:	f895 1d2e 	ldrb.w	r1, [r5, #3374]	; 0xd2e
 800ea88:	2200      	movs	r2, #0
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f7f3 fd40 	bl	8002510 <USBH_LL_SetToggle>
 800ea90:	4621      	mov	r1, r4
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800ea92:	f891 3347 	ldrb.w	r3, [r1, #839]	; 0x347
 800ea96:	2b06      	cmp	r3, #6
 800ea98:	d113      	bne.n	800eac2 <USBH_MTP_InterfaceInit+0x12a>
 800ea9a:	4608      	mov	r0, r1
 800ea9c:	2300      	movs	r3, #0
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 800ea9e:	f990 234e 	ldrsb.w	r2, [r0, #846]	; 0x34e
 800eaa2:	2a00      	cmp	r2, #0
 800eaa4:	f103 0201 	add.w	r2, r3, #1
 800eaa8:	da06      	bge.n	800eab8 <USBH_MTP_InterfaceInit+0x120>
 800eaaa:	f8b0 3350 	ldrh.w	r3, [r0, #848]	; 0x350
 800eaae:	b11b      	cbz	r3, 800eab8 <USBH_MTP_InterfaceInit+0x120>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800eab0:	f890 334f 	ldrb.w	r3, [r0, #847]	; 0x34f
 800eab4:	079e      	lsls	r6, r3, #30
 800eab6:	d444      	bmi.n	800eb42 <USBH_MTP_InterfaceInit+0x1aa>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800eab8:	2a05      	cmp	r2, #5
 800eaba:	4613      	mov	r3, r2
 800eabc:	f100 0008 	add.w	r0, r0, #8
 800eac0:	d1ed      	bne.n	800ea9e <USBH_MTP_InterfaceInit+0x106>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800eac2:	3132      	adds	r1, #50	; 0x32
 800eac4:	4551      	cmp	r1, sl
 800eac6:	d1e4      	bne.n	800ea92 <USBH_MTP_InterfaceInit+0xfa>
    USBH_DbgLog("Invalid Data IN endpoint number");
 800eac8:	484a      	ldr	r0, [pc, #296]	; (800ebf4 <USBH_MTP_InterfaceInit+0x25c>)
 800eaca:	f00f fcf9 	bl	801e4c0 <iprintf>
 800eace:	484d      	ldr	r0, [pc, #308]	; (800ec04 <USBH_MTP_InterfaceInit+0x26c>)
 800ead0:	e772      	b.n	800e9b8 <USBH_MTP_InterfaceInit+0x20>
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800ead2:	2032      	movs	r0, #50	; 0x32
  (void)USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 800ead4:	2602      	movs	r6, #2
  MTP_Handle->is_ready = 0U;
 800ead6:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800eada:	fb00 f808 	mul.w	r8, r0, r8
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 800eade:	4620      	mov	r0, r4
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800eae0:	eb08 08c3 	add.w	r8, r8, r3, lsl #3
 800eae4:	44a0      	add	r8, r4
 800eae6:	f898 1346 	ldrb.w	r1, [r8, #838]	; 0x346
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800eaea:	f8b8 3348 	ldrh.w	r3, [r8, #840]	; 0x348
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800eaee:	f885 1d2f 	strb.w	r1, [r5, #3375]	; 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800eaf2:	f8a5 3d32 	strh.w	r3, [r5, #3378]	; 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 800eaf6:	f000 ff0d 	bl	800f914 <USBH_AllocPipe>
  (void)USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 800eafa:	f8b5 3d32 	ldrh.w	r3, [r5, #3378]	; 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 800eafe:	f885 0d2d 	strb.w	r0, [r5, #3373]	; 0xd2d
 800eb02:	4601      	mov	r1, r0
  (void)USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 800eb04:	9302      	str	r3, [sp, #8]
 800eb06:	4620      	mov	r0, r4
 800eb08:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800eb0c:	9601      	str	r6, [sp, #4]
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800eb14:	f895 2d2f 	ldrb.w	r2, [r5, #3375]	; 0xd2f
 800eb18:	f000 fee8 	bl	800f8ec <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	f895 1d2d 	ldrb.w	r1, [r5, #3373]	; 0xd2d
 800eb22:	4620      	mov	r0, r4
 800eb24:	f7f3 fcf4 	bl	8002510 <USBH_LL_SetToggle>
  MTP_Handle->is_ready = 0U;
 800eb28:	2300      	movs	r3, #0
  return USBH_PTP_Init(phost);
 800eb2a:	4620      	mov	r0, r4
  MTP_Handle->state = MTP_OPENSESSION;
 800eb2c:	f885 6d38 	strb.w	r6, [r5, #3384]	; 0xd38
  MTP_Handle->is_ready = 0U;
 800eb30:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 800eb34:	f885 3d3c 	strb.w	r3, [r5, #3388]	; 0xd3c
}
 800eb38:	b005      	add	sp, #20
 800eb3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return USBH_PTP_Init(phost);
 800eb3e:	f000 bbe4 	b.w	800f30a <USBH_PTP_Init>
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800eb42:	2332      	movs	r3, #50	; 0x32
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 800eb44:	4620      	mov	r0, r4
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800eb46:	fb03 f308 	mul.w	r3, r3, r8
 800eb4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb4e:	4423      	add	r3, r4
 800eb50:	f893 1346 	ldrb.w	r1, [r3, #838]	; 0x346
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800eb54:	f8b3 3348 	ldrh.w	r3, [r3, #840]	; 0x348
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800eb58:	f885 1d30 	strb.w	r1, [r5, #3376]	; 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800eb5c:	f8a5 3d34 	strh.w	r3, [r5, #3380]	; 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 800eb60:	f000 fed8 	bl	800f914 <USBH_AllocPipe>
  (void)USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 800eb64:	f8b5 3d34 	ldrh.w	r3, [r5, #3380]	; 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 800eb68:	f885 0d2c 	strb.w	r0, [r5, #3372]	; 0xd2c
 800eb6c:	4601      	mov	r1, r0
  (void)USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 800eb6e:	9302      	str	r3, [sp, #8]
 800eb70:	2302      	movs	r3, #2
 800eb72:	4620      	mov	r0, r4
 800eb74:	9301      	str	r3, [sp, #4]
 800eb76:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800eb7a:	9300      	str	r3, [sp, #0]
 800eb7c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800eb80:	f895 2d30 	ldrb.w	r2, [r5, #3376]	; 0xd30
 800eb84:	f000 feb2 	bl	800f8ec <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f895 1d2c 	ldrb.w	r1, [r5, #3372]	; 0xd2c
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f7f3 fcbe 	bl	8002510 <USBH_LL_SetToggle>
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800eb94:	f899 3347 	ldrb.w	r3, [r9, #839]	; 0x347
 800eb98:	2b06      	cmp	r3, #6
 800eb9a:	d111      	bne.n	800ebc0 <USBH_MTP_InterfaceInit+0x228>
 800eb9c:	464a      	mov	r2, r9
 800eb9e:	2300      	movs	r3, #0
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800eba0:	f992 134e 	ldrsb.w	r1, [r2, #846]	; 0x34e
 800eba4:	3301      	adds	r3, #1
 800eba6:	2900      	cmp	r1, #0
 800eba8:	db06      	blt.n	800ebb8 <USBH_MTP_InterfaceInit+0x220>
 800ebaa:	f8b2 1350 	ldrh.w	r1, [r2, #848]	; 0x350
 800ebae:	b119      	cbz	r1, 800ebb8 <USBH_MTP_InterfaceInit+0x220>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800ebb0:	f892 134f 	ldrb.w	r1, [r2, #847]	; 0x34f
 800ebb4:	0789      	lsls	r1, r1, #30
 800ebb6:	d48c      	bmi.n	800ead2 <USBH_MTP_InterfaceInit+0x13a>
      for (endpoint = 0U;  endpoint < USBH_MAX_NUM_ENDPOINTS ; endpoint ++)
 800ebb8:	2b05      	cmp	r3, #5
 800ebba:	f102 0208 	add.w	r2, r2, #8
 800ebbe:	d1ef      	bne.n	800eba0 <USBH_MTP_InterfaceInit+0x208>
  for (interface = 0U;  interface < USBH_MAX_NUM_INTERFACES ; interface ++)
 800ebc0:	f109 0932 	add.w	r9, r9, #50	; 0x32
 800ebc4:	45d1      	cmp	r9, sl
 800ebc6:	d1e5      	bne.n	800eb94 <USBH_MTP_InterfaceInit+0x1fc>
    USBH_DbgLog("Invalid Data OUT endpoint number");
 800ebc8:	480a      	ldr	r0, [pc, #40]	; (800ebf4 <USBH_MTP_InterfaceInit+0x25c>)
 800ebca:	f00f fc79 	bl	801e4c0 <iprintf>
 800ebce:	480e      	ldr	r0, [pc, #56]	; (800ec08 <USBH_MTP_InterfaceInit+0x270>)
 800ebd0:	e6f2      	b.n	800e9b8 <USBH_MTP_InterfaceInit+0x20>
  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 800ebd2:	f8d4 554c 	ldr.w	r5, [r4, #1356]	; 0x54c
 800ebd6:	f242 10d0 	movw	r0, #8656	; 0x21d0
 800ebda:	f00f f87d 	bl	801dcd8 <malloc>
 800ebde:	4607      	mov	r7, r0
 800ebe0:	61e8      	str	r0, [r5, #28]
  if (MTP_Handle == NULL)
 800ebe2:	2800      	cmp	r0, #0
 800ebe4:	f47f af20 	bne.w	800ea28 <USBH_MTP_InterfaceInit+0x90>
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
 800ebe8:	4802      	ldr	r0, [pc, #8]	; (800ebf4 <USBH_MTP_InterfaceInit+0x25c>)
 800ebea:	f00f fc69 	bl	801e4c0 <iprintf>
 800ebee:	4807      	ldr	r0, [pc, #28]	; (800ec0c <USBH_MTP_InterfaceInit+0x274>)
 800ebf0:	e6e2      	b.n	800e9b8 <USBH_MTP_InterfaceInit+0x20>
 800ebf2:	bf00      	nop
 800ebf4:	0801fbc8 	.word	0x0801fbc8
 800ebf8:	080203d5 	.word	0x080203d5
 800ebfc:	0801fbc6 	.word	0x0801fbc6
 800ec00:	0802046d 	.word	0x0802046d
 800ec04:	0802044d 	.word	0x0802044d
 800ec08:	0802042c 	.word	0x0802042c
 800ec0c:	08020406 	.word	0x08020406

0800ec10 <USBH_MTP_EventsCallback>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 800ec10:	4770      	bx	lr
	...

0800ec14 <USBH_MTP_Process>:
{
 800ec14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ec18:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800ec1c:	4604      	mov	r4, r0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ec1e:	69dd      	ldr	r5, [r3, #28]
  switch (MTP_Handle->state)
 800ec20:	f505 5880 	add.w	r8, r5, #4096	; 0x1000
 800ec24:	f898 6d38 	ldrb.w	r6, [r8, #3384]	; 0xd38
 800ec28:	2e05      	cmp	r6, #5
 800ec2a:	f200 8223 	bhi.w	800f074 <USBH_MTP_Process+0x460>
 800ec2e:	e8df f016 	tbh	[pc, r6, lsl #1]
 800ec32:	0132      	.short	0x0132
 800ec34:	00060022 	.word	0x00060022
 800ec38:	00ab0221 	.word	0x00ab0221
 800ec3c:	00e5      	.short	0x00e5
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 800ec3e:	2101      	movs	r1, #1
 800ec40:	f000 fcf2 	bl	800f628 <USBH_PTP_OpenSession>
      if (status == USBH_OK)
 800ec44:	4606      	mov	r6, r0
 800ec46:	b998      	cbnz	r0, 800ec70 <USBH_MTP_Process+0x5c>
        USBH_UsrLog("MTP Session #0 Opened");
 800ec48:	48b2      	ldr	r0, [pc, #712]	; (800ef14 <USBH_MTP_Process+0x300>)
 800ec4a:	f00f fc39 	bl	801e4c0 <iprintf>
 800ec4e:	48b2      	ldr	r0, [pc, #712]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ec50:	f00f fcbc 	bl	801e5cc <puts>
        MTP_Handle->state = MTP_GETDEVICEINFO;
 800ec54:	2301      	movs	r3, #1
        MTP_Handle->state = MTP_GETSTORAGEIDS;
 800ec56:	f888 3d38 	strb.w	r3, [r8, #3384]	; 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ec5a:	2305      	movs	r3, #5
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ec5c:	4632      	mov	r2, r6
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ec5e:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ec62:	4633      	mov	r3, r6
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ec64:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800ec68:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800ec6c:	f7fa fe73 	bl	8009956 <osMessageQueuePut>
}
 800ec70:	4630      	mov	r0, r6
 800ec72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800ec76:	4629      	mov	r1, r5
 800ec78:	f000 fd11 	bl	800f69e <USBH_PTP_GetDeviceInfo>
      if (status == USBH_OK)
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d1f6      	bne.n	800ec70 <USBH_MTP_Process+0x5c>
        USBH_DbgLog(">>>>> MTP Device Information");
 800ec82:	48a6      	ldr	r0, [pc, #664]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ec84:	f00f fc1c 	bl	801e4c0 <iprintf>
 800ec88:	48a5      	ldr	r0, [pc, #660]	; (800ef20 <USBH_MTP_Process+0x30c>)
 800ec8a:	f00f fc19 	bl	801e4c0 <iprintf>
 800ec8e:	48a2      	ldr	r0, [pc, #648]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ec90:	f00f fc9c 	bl	801e5cc <puts>
        USBH_DbgLog("Standard version : %x", MTP_Handle->info.devinfo.StandardVersion);
 800ec94:	48a1      	ldr	r0, [pc, #644]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ec96:	f00f fc13 	bl	801e4c0 <iprintf>
 800ec9a:	8829      	ldrh	r1, [r5, #0]
 800ec9c:	48a1      	ldr	r0, [pc, #644]	; (800ef24 <USBH_MTP_Process+0x310>)
 800ec9e:	f00f fc0f 	bl	801e4c0 <iprintf>
 800eca2:	489d      	ldr	r0, [pc, #628]	; (800ef18 <USBH_MTP_Process+0x304>)
 800eca4:	f00f fc92 	bl	801e5cc <puts>
        USBH_DbgLog("Vendor ExtID : %s", (MTP_Handle->info.devinfo.VendorExtensionID == 6) ? "MTP" : "NOT SUPPORTED");
 800eca8:	489c      	ldr	r0, [pc, #624]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ecaa:	f00f fc09 	bl	801e4c0 <iprintf>
 800ecae:	4a9e      	ldr	r2, [pc, #632]	; (800ef28 <USBH_MTP_Process+0x314>)
 800ecb0:	4b9e      	ldr	r3, [pc, #632]	; (800ef2c <USBH_MTP_Process+0x318>)
 800ecb2:	6869      	ldr	r1, [r5, #4]
 800ecb4:	489e      	ldr	r0, [pc, #632]	; (800ef30 <USBH_MTP_Process+0x31c>)
 800ecb6:	2906      	cmp	r1, #6
 800ecb8:	bf0c      	ite	eq
 800ecba:	4611      	moveq	r1, r2
 800ecbc:	4619      	movne	r1, r3
 800ecbe:	f00f fbff 	bl	801e4c0 <iprintf>
 800ecc2:	4895      	ldr	r0, [pc, #596]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ecc4:	f00f fc82 	bl	801e5cc <puts>
        USBH_DbgLog("Functional mode : %s", (MTP_Handle->info.devinfo.FunctionalMode == 0U) ? "Standard" : "Vendor");
 800ecc8:	4894      	ldr	r0, [pc, #592]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ecca:	f00f fbf9 	bl	801e4c0 <iprintf>
 800ecce:	4b99      	ldr	r3, [pc, #612]	; (800ef34 <USBH_MTP_Process+0x320>)
 800ecd0:	4a99      	ldr	r2, [pc, #612]	; (800ef38 <USBH_MTP_Process+0x324>)
 800ecd2:	f8b5 110a 	ldrh.w	r1, [r5, #266]	; 0x10a
 800ecd6:	4899      	ldr	r0, [pc, #612]	; (800ef3c <USBH_MTP_Process+0x328>)
 800ecd8:	2900      	cmp	r1, #0
 800ecda:	bf0c      	ite	eq
 800ecdc:	4611      	moveq	r1, r2
 800ecde:	4619      	movne	r1, r3
 800ece0:	f00f fbee 	bl	801e4c0 <iprintf>
 800ece4:	488c      	ldr	r0, [pc, #560]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ece6:	f00f fc71 	bl	801e5cc <puts>
        USBH_DbgLog("Number of Supported Operation(s) : %d", MTP_Handle->info.devinfo.OperationsSupported_len);
 800ecea:	488c      	ldr	r0, [pc, #560]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ecec:	f00f fbe8 	bl	801e4c0 <iprintf>
 800ecf0:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 800ecf4:	4892      	ldr	r0, [pc, #584]	; (800ef40 <USBH_MTP_Process+0x32c>)
 800ecf6:	f00f fbe3 	bl	801e4c0 <iprintf>
 800ecfa:	4887      	ldr	r0, [pc, #540]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ecfc:	f00f fc66 	bl	801e5cc <puts>
        USBH_DbgLog("Number of Supported Events(s) : %d", MTP_Handle->info.devinfo.EventsSupported_len);
 800ed00:	4886      	ldr	r0, [pc, #536]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ed02:	f00f fbdd 	bl	801e4c0 <iprintf>
 800ed06:	f8d5 11d8 	ldr.w	r1, [r5, #472]	; 0x1d8
 800ed0a:	488e      	ldr	r0, [pc, #568]	; (800ef44 <USBH_MTP_Process+0x330>)
 800ed0c:	f00f fbd8 	bl	801e4c0 <iprintf>
 800ed10:	4881      	ldr	r0, [pc, #516]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ed12:	f00f fc5b 	bl	801e5cc <puts>
        USBH_DbgLog("Number of Supported Proprieties : %d", MTP_Handle->info.devinfo.DevicePropertiesSupported_len);
 800ed16:	4881      	ldr	r0, [pc, #516]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ed18:	f00f fbd2 	bl	801e4c0 <iprintf>
 800ed1c:	f8d5 12a4 	ldr.w	r1, [r5, #676]	; 0x2a4
 800ed20:	4889      	ldr	r0, [pc, #548]	; (800ef48 <USBH_MTP_Process+0x334>)
 800ed22:	f00f fbcd 	bl	801e4c0 <iprintf>
 800ed26:	487c      	ldr	r0, [pc, #496]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ed28:	f00f fc50 	bl	801e5cc <puts>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
 800ed2c:	487b      	ldr	r0, [pc, #492]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ed2e:	f00f fbc7 	bl	801e4c0 <iprintf>
 800ed32:	f505 61a1 	add.w	r1, r5, #1288	; 0x508
 800ed36:	4885      	ldr	r0, [pc, #532]	; (800ef4c <USBH_MTP_Process+0x338>)
 800ed38:	f00f fbc2 	bl	801e4c0 <iprintf>
 800ed3c:	4876      	ldr	r0, [pc, #472]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ed3e:	f00f fc45 	bl	801e5cc <puts>
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
 800ed42:	4876      	ldr	r0, [pc, #472]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ed44:	f00f fbbc 	bl	801e4c0 <iprintf>
 800ed48:	f205 6107 	addw	r1, r5, #1543	; 0x607
 800ed4c:	4880      	ldr	r0, [pc, #512]	; (800ef50 <USBH_MTP_Process+0x33c>)
 800ed4e:	f00f fbb7 	bl	801e4c0 <iprintf>
 800ed52:	4871      	ldr	r0, [pc, #452]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ed54:	f00f fc3a 	bl	801e5cc <puts>
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
 800ed58:	4870      	ldr	r0, [pc, #448]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ed5a:	f00f fbb1 	bl	801e4c0 <iprintf>
 800ed5e:	f205 7106 	addw	r1, r5, #1798	; 0x706
 800ed62:	487c      	ldr	r0, [pc, #496]	; (800ef54 <USBH_MTP_Process+0x340>)
 800ed64:	f00f fbac 	bl	801e4c0 <iprintf>
 800ed68:	486b      	ldr	r0, [pc, #428]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ed6a:	f00f fc2f 	bl	801e5cc <puts>
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);
 800ed6e:	486b      	ldr	r0, [pc, #428]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ed70:	f00f fba6 	bl	801e4c0 <iprintf>
 800ed74:	f605 0105 	addw	r1, r5, #2053	; 0x805
 800ed78:	4877      	ldr	r0, [pc, #476]	; (800ef58 <USBH_MTP_Process+0x344>)
 800ed7a:	f00f fba1 	bl	801e4c0 <iprintf>
 800ed7e:	4866      	ldr	r0, [pc, #408]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ed80:	f00f fc24 	bl	801e5cc <puts>
        MTP_Handle->state = MTP_GETSTORAGEIDS;
 800ed84:	2304      	movs	r3, #4
 800ed86:	e766      	b.n	800ec56 <USBH_MTP_Process+0x42>
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800ed88:	f605 1104 	addw	r1, r5, #2308	; 0x904
 800ed8c:	f000 fcd7 	bl	800f73e <USBH_PTP_GetStorageIds>
      if (status == USBH_OK)
 800ed90:	4606      	mov	r6, r0
 800ed92:	2800      	cmp	r0, #0
 800ed94:	f47f af6c 	bne.w	800ec70 <USBH_MTP_Process+0x5c>
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
 800ed98:	4860      	ldr	r0, [pc, #384]	; (800ef1c <USBH_MTP_Process+0x308>)
 800ed9a:	f605 1908 	addw	r9, r5, #2312	; 0x908
 800ed9e:	f00f fb8f 	bl	801e4c0 <iprintf>
 800eda2:	f8d5 1904 	ldr.w	r1, [r5, #2308]	; 0x904
 800eda6:	486d      	ldr	r0, [pc, #436]	; (800ef5c <USBH_MTP_Process+0x348>)
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800eda8:	4637      	mov	r7, r6
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
 800edaa:	f00f fb89 	bl	801e4c0 <iprintf>
 800edae:	485a      	ldr	r0, [pc, #360]	; (800ef18 <USBH_MTP_Process+0x304>)
 800edb0:	f00f fc0c 	bl	801e5cc <puts>
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
 800edb4:	f8df a1b4 	ldr.w	sl, [pc, #436]	; 800ef6c <USBH_MTP_Process+0x358>
 800edb8:	4b58      	ldr	r3, [pc, #352]	; (800ef1c <USBH_MTP_Process+0x308>)
 800edba:	f8df b15c 	ldr.w	fp, [pc, #348]	; 800ef18 <USBH_MTP_Process+0x304>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800edbe:	f8d5 2904 	ldr.w	r2, [r5, #2308]	; 0x904
 800edc2:	42ba      	cmp	r2, r7
 800edc4:	d80b      	bhi.n	800edde <USBH_MTP_Process+0x1ca>
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 800edc6:	2205      	movs	r2, #5
        MTP_Handle->current_storage_unit = 0U;
 800edc8:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800edcc:	2300      	movs	r3, #0
 800edce:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 800edd2:	f888 2d38 	strb.w	r2, [r8, #3384]	; 0xd38
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800edd6:	f8c4 25b0 	str.w	r2, [r4, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800edda:	461a      	mov	r2, r3
 800eddc:	e742      	b.n	800ec64 <USBH_MTP_Process+0x50>
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
 800edde:	4618      	mov	r0, r3
 800ede0:	f00f fb6e 	bl	801e4c0 <iprintf>
 800ede4:	4639      	mov	r1, r7
 800ede6:	f859 2b04 	ldr.w	r2, [r9], #4
 800edea:	4650      	mov	r0, sl
 800edec:	f00f fb68 	bl	801e4c0 <iprintf>
 800edf0:	4658      	mov	r0, fp
 800edf2:	f00f fbeb 	bl	801e5cc <puts>
        for (idx  = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800edf6:	3701      	adds	r7, #1
 800edf8:	4b48      	ldr	r3, [pc, #288]	; (800ef1c <USBH_MTP_Process+0x308>)
 800edfa:	e7e0      	b.n	800edbe <USBH_MTP_Process+0x1aa>
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800edfc:	f505 5900 	add.w	r9, r5, #8192	; 0x2000
      status = USBH_PTP_GetStorageInfo(phost,
 800ee00:	f44f 7708 	mov.w	r7, #544	; 0x220
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800ee04:	f8d9 31c8 	ldr.w	r3, [r9, #456]	; 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800ee08:	fb07 5203 	mla	r2, r7, r3, r5
 800ee0c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ee10:	f502 6212 	add.w	r2, r2, #2336	; 0x920
 800ee14:	f8d3 1908 	ldr.w	r1, [r3, #2312]	; 0x908
 800ee18:	f000 fce7 	bl	800f7ea <USBH_PTP_GetStorageInfo>
      if (status == USBH_OK)
 800ee1c:	4606      	mov	r6, r0
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	f47f af26 	bne.w	800ec70 <USBH_MTP_Process+0x5c>
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
 800ee24:	f8d9 11c8 	ldr.w	r1, [r9, #456]	; 0x1c8
 800ee28:	484d      	ldr	r0, [pc, #308]	; (800ef60 <USBH_MTP_Process+0x34c>)
 800ee2a:	434f      	muls	r7, r1
 800ee2c:	f607 233b 	addw	r3, r7, #2619	; 0xa3b
 800ee30:	f607 173c 	addw	r7, r7, #2364	; 0x93c
 800ee34:	442b      	add	r3, r5
 800ee36:	19ea      	adds	r2, r5, r7
 800ee38:	f00f fb42 	bl	801e4c0 <iprintf>
 800ee3c:	4836      	ldr	r0, [pc, #216]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ee3e:	f00f fbc5 	bl	801e5cc <puts>
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 800ee42:	f8d9 31c8 	ldr.w	r3, [r9, #456]	; 0x1c8
 800ee46:	f8d5 2904 	ldr.w	r2, [r5, #2308]	; 0x904
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	f8c9 31c8 	str.w	r3, [r9, #456]	; 0x1c8
 800ee52:	d31b      	bcc.n	800ee8c <USBH_MTP_Process+0x278>
          MTP_Handle->is_ready = 1U;
 800ee54:	2301      	movs	r3, #1
          MTP_Handle->state = MTP_IDLE;
 800ee56:	f888 6d38 	strb.w	r6, [r8, #3384]	; 0xd38
          USBH_UsrLog("MTP Class initialized.");
 800ee5a:	4842      	ldr	r0, [pc, #264]	; (800ef64 <USBH_MTP_Process+0x350>)
          MTP_Handle->current_storage_unit = 0U;
 800ee5c:	e9c9 6372 	strd	r6, r3, [r9, #456]	; 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 800ee60:	f8d5 3908 	ldr.w	r3, [r5, #2312]	; 0x908
 800ee64:	f8c8 3d18 	str.w	r3, [r8, #3352]	; 0xd18
          USBH_UsrLog("MTP Class initialized.");
 800ee68:	f00f fb2a 	bl	801e4c0 <iprintf>
 800ee6c:	482a      	ldr	r0, [pc, #168]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ee6e:	f00f fbad 	bl	801e5cc <puts>
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
 800ee72:	f605 113c 	addw	r1, r5, #2364	; 0x93c
 800ee76:	483c      	ldr	r0, [pc, #240]	; (800ef68 <USBH_MTP_Process+0x354>)
 800ee78:	f00f fb22 	bl	801e4c0 <iprintf>
 800ee7c:	4826      	ldr	r0, [pc, #152]	; (800ef18 <USBH_MTP_Process+0x304>)
 800ee7e:	f00f fba5 	bl	801e5cc <puts>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ee82:	f8d4 35a4 	ldr.w	r3, [r4, #1444]	; 0x5a4
 800ee86:	2102      	movs	r1, #2
 800ee88:	4620      	mov	r0, r4
 800ee8a:	4798      	blx	r3
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ee8c:	2305      	movs	r3, #5
 800ee8e:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800ee92:	2300      	movs	r3, #0
 800ee94:	e7a1      	b.n	800edda <USBH_MTP_Process+0x1c6>
  switch (MTP_Handle->events.state)
 800ee96:	f898 3d3c 	ldrb.w	r3, [r8, #3388]	; 0xd3c
 800ee9a:	b12b      	cbz	r3, 800eea8 <USBH_MTP_Process+0x294>
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d018      	beq.n	800eed2 <USBH_MTP_Process+0x2be>
      osDelay(10U);
 800eea0:	200a      	movs	r0, #10
 800eea2:	f7fa fc74 	bl	800978e <osDelay>
 800eea6:	e7f1      	b.n	800ee8c <USBH_MTP_Process+0x278>
      if ((phost->Timer & 1U) == 0U)
 800eea8:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
 800eeac:	07db      	lsls	r3, r3, #31
 800eeae:	d4f7      	bmi.n	800eea0 <USBH_MTP_Process+0x28c>
        MTP_Handle->events.timer = phost->Timer;
 800eeb0:	f8d0 3594 	ldr.w	r3, [r0, #1428]	; 0x594
        (void)USBH_InterruptReceiveData(phost,
 800eeb4:	f505 51ea 	add.w	r1, r5, #7488	; 0x1d40
 800eeb8:	f898 2d36 	ldrb.w	r2, [r8, #3382]	; 0xd36
        MTP_Handle->events.timer = phost->Timer;
 800eebc:	f8c8 3d40 	str.w	r3, [r8, #3392]	; 0xd40
        (void)USBH_InterruptReceiveData(phost,
 800eec0:	3108      	adds	r1, #8
 800eec2:	f898 3d2e 	ldrb.w	r3, [r8, #3374]	; 0xd2e
 800eec6:	f7ff f829 	bl	800df1c <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 800eeca:	2301      	movs	r3, #1
 800eecc:	f888 3d3c 	strb.w	r3, [r8, #3388]	; 0xd3c
 800eed0:	e7e6      	b.n	800eea0 <USBH_MTP_Process+0x28c>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 800eed2:	f898 1d2e 	ldrb.w	r1, [r8, #3374]	; 0xd2e
 800eed6:	f7f3 fb0b 	bl	80024f0 <USBH_LL_GetURBState>
 800eeda:	2801      	cmp	r0, #1
 800eedc:	d157      	bne.n	800ef8e <USBH_MTP_Process+0x37a>
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800eede:	f8d4 354c 	ldr.w	r3, [r4, #1356]	; 0x54c
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
 800eee2:	480e      	ldr	r0, [pc, #56]	; (800ef1c <USBH_MTP_Process+0x308>)
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800eee4:	69df      	ldr	r7, [r3, #28]
  code = MTP_Handle->events.container.code;
 800eee6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eeea:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 800eeee:	f8b3 9d4e 	ldrh.w	r9, [r3, #3406]	; 0xd4e
  param1 = MTP_Handle->events.container.param1;
 800eef2:	f8d3 ad54 	ldr.w	sl, [r3, #3412]	; 0xd54
  switch (code)
 800eef6:	f5a9 4380 	sub.w	r3, r9, #16384	; 0x4000
 800eefa:	2b0e      	cmp	r3, #14
 800eefc:	f200 80b4 	bhi.w	800f068 <USBH_MTP_Process+0x454>
 800ef00:	e8df f003 	tbb	[pc, r3]
 800ef04:	6a645e36 	.word	0x6a645e36
 800ef08:	827c7670 	.word	0x827c7670
 800ef0c:	9a948e88 	.word	0x9a948e88
 800ef10:	a6a0      	.short	0xa6a0
 800ef12:	ac          	.byte	0xac
 800ef13:	00          	.byte	0x00
 800ef14:	080204af 	.word	0x080204af
 800ef18:	0801fbc6 	.word	0x0801fbc6
 800ef1c:	0801fbc8 	.word	0x0801fbc8
 800ef20:	080204c5 	.word	0x080204c5
 800ef24:	080204e2 	.word	0x080204e2
 800ef28:	0802048d 	.word	0x0802048d
 800ef2c:	08020491 	.word	0x08020491
 800ef30:	080204f8 	.word	0x080204f8
 800ef34:	080204a8 	.word	0x080204a8
 800ef38:	0802049f 	.word	0x0802049f
 800ef3c:	0802050a 	.word	0x0802050a
 800ef40:	0802051f 	.word	0x0802051f
 800ef44:	08020545 	.word	0x08020545
 800ef48:	08020568 	.word	0x08020568
 800ef4c:	0801ffc6 	.word	0x0801ffc6
 800ef50:	0802058d 	.word	0x0802058d
 800ef54:	08020598 	.word	0x08020598
 800ef58:	080205ac 	.word	0x080205ac
 800ef5c:	080205bf 	.word	0x080205bf
 800ef60:	080205f2 	.word	0x080205f2
 800ef64:	08020608 	.word	0x08020608
 800ef68:	0802061f 	.word	0x0802061f
 800ef6c:	080205df 	.word	0x080205df
      USBH_DbgLog("EVT: PTP_EC_Undefined in session %u", MTP_Handle->ptp.session_id);
 800ef70:	f00f faa6 	bl	801e4c0 <iprintf>
 800ef74:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800ef78:	483f      	ldr	r0, [pc, #252]	; (800f078 <USBH_MTP_Process+0x464>)
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
 800ef7a:	f00f faa1 	bl	801e4c0 <iprintf>
 800ef7e:	483f      	ldr	r0, [pc, #252]	; (800f07c <USBH_MTP_Process+0x468>)
 800ef80:	f00f fb24 	bl	801e5cc <puts>
  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 800ef84:	4652      	mov	r2, sl
 800ef86:	4649      	mov	r1, r9
 800ef88:	4620      	mov	r0, r4
 800ef8a:	f7ff fe41 	bl	800ec10 <USBH_MTP_EventsCallback>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 800ef8e:	f8d8 2d40 	ldr.w	r2, [r8, #3392]	; 0xd40
 800ef92:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
 800ef96:	1a9b      	subs	r3, r3, r2
 800ef98:	f8b8 2d44 	ldrh.w	r2, [r8, #3396]	; 0xd44
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	f4ff af7f 	bcc.w	800eea0 <USBH_MTP_Process+0x28c>
        MTP_Handle->events.timer = phost->Timer;
 800efa2:	f8d4 3594 	ldr.w	r3, [r4, #1428]	; 0x594
        (void)USBH_InterruptReceiveData(phost,
 800efa6:	f505 51ea 	add.w	r1, r5, #7488	; 0x1d40
 800efaa:	f898 2d36 	ldrb.w	r2, [r8, #3382]	; 0xd36
 800efae:	4620      	mov	r0, r4
        MTP_Handle->events.timer = phost->Timer;
 800efb0:	f8c8 3d40 	str.w	r3, [r8, #3392]	; 0xd40
        (void)USBH_InterruptReceiveData(phost,
 800efb4:	3108      	adds	r1, #8
 800efb6:	f898 3d2e 	ldrb.w	r3, [r8, #3374]	; 0xd2e
 800efba:	f7fe ffaf 	bl	800df1c <USBH_InterruptReceiveData>
 800efbe:	e76f      	b.n	800eea0 <USBH_MTP_Process+0x28c>
      USBH_DbgLog("EVT: PTP_EC_CancelTransaction in session %u", MTP_Handle->ptp.session_id);
 800efc0:	f00f fa7e 	bl	801e4c0 <iprintf>
 800efc4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800efc8:	482d      	ldr	r0, [pc, #180]	; (800f080 <USBH_MTP_Process+0x46c>)
 800efca:	e7d6      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_ObjectAdded in session %u", MTP_Handle->ptp.session_id);
 800efcc:	f00f fa78 	bl	801e4c0 <iprintf>
 800efd0:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800efd4:	482b      	ldr	r0, [pc, #172]	; (800f084 <USBH_MTP_Process+0x470>)
 800efd6:	e7d0      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_ObjectRemoved in session %u", MTP_Handle->ptp.session_id);
 800efd8:	f00f fa72 	bl	801e4c0 <iprintf>
 800efdc:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800efe0:	4829      	ldr	r0, [pc, #164]	; (800f088 <USBH_MTP_Process+0x474>)
 800efe2:	e7ca      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_StoreAdded in session %u", MTP_Handle->ptp.session_id);
 800efe4:	f00f fa6c 	bl	801e4c0 <iprintf>
 800efe8:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800efec:	4827      	ldr	r0, [pc, #156]	; (800f08c <USBH_MTP_Process+0x478>)
 800efee:	e7c4      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_StoreRemoved in session %u", MTP_Handle->ptp.session_id);
 800eff0:	f00f fa66 	bl	801e4c0 <iprintf>
 800eff4:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800eff8:	4825      	ldr	r0, [pc, #148]	; (800f090 <USBH_MTP_Process+0x47c>)
 800effa:	e7be      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_DevicePropChanged in session %u", MTP_Handle->ptp.session_id);
 800effc:	f00f fa60 	bl	801e4c0 <iprintf>
 800f000:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f004:	4823      	ldr	r0, [pc, #140]	; (800f094 <USBH_MTP_Process+0x480>)
 800f006:	e7b8      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_ObjectInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800f008:	f00f fa5a 	bl	801e4c0 <iprintf>
 800f00c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f010:	4821      	ldr	r0, [pc, #132]	; (800f098 <USBH_MTP_Process+0x484>)
 800f012:	e7b2      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_DeviceInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800f014:	f00f fa54 	bl	801e4c0 <iprintf>
 800f018:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f01c:	481f      	ldr	r0, [pc, #124]	; (800f09c <USBH_MTP_Process+0x488>)
 800f01e:	e7ac      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_RequestObjectTransfer in session %u", MTP_Handle->ptp.session_id);
 800f020:	f00f fa4e 	bl	801e4c0 <iprintf>
 800f024:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f028:	481d      	ldr	r0, [pc, #116]	; (800f0a0 <USBH_MTP_Process+0x48c>)
 800f02a:	e7a6      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_StoreFull in session %u", MTP_Handle->ptp.session_id);
 800f02c:	f00f fa48 	bl	801e4c0 <iprintf>
 800f030:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f034:	481b      	ldr	r0, [pc, #108]	; (800f0a4 <USBH_MTP_Process+0x490>)
 800f036:	e7a0      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_DeviceReset in session %u", MTP_Handle->ptp.session_id);
 800f038:	f00f fa42 	bl	801e4c0 <iprintf>
 800f03c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f040:	4819      	ldr	r0, [pc, #100]	; (800f0a8 <USBH_MTP_Process+0x494>)
 800f042:	e79a      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_StorageInfoChanged in session %u", MTP_Handle->ptp.session_id);
 800f044:	f00f fa3c 	bl	801e4c0 <iprintf>
 800f048:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f04c:	4817      	ldr	r0, [pc, #92]	; (800f0ac <USBH_MTP_Process+0x498>)
 800f04e:	e794      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_CaptureComplete in session %u", MTP_Handle->ptp.session_id);
 800f050:	f00f fa36 	bl	801e4c0 <iprintf>
 800f054:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f058:	4815      	ldr	r0, [pc, #84]	; (800f0b0 <USBH_MTP_Process+0x49c>)
 800f05a:	e78e      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
 800f05c:	f00f fa30 	bl	801e4c0 <iprintf>
 800f060:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f064:	4813      	ldr	r0, [pc, #76]	; (800f0b4 <USBH_MTP_Process+0x4a0>)
 800f066:	e788      	b.n	800ef7a <USBH_MTP_Process+0x366>
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
 800f068:	f00f fa2a 	bl	801e4c0 <iprintf>
 800f06c:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 800f070:	4811      	ldr	r0, [pc, #68]	; (800f0b8 <USBH_MTP_Process+0x4a4>)
 800f072:	e782      	b.n	800ef7a <USBH_MTP_Process+0x366>
  switch (MTP_Handle->state)
 800f074:	2601      	movs	r6, #1
 800f076:	e5fb      	b.n	800ec70 <USBH_MTP_Process+0x5c>
 800f078:	0802063a 	.word	0x0802063a
 800f07c:	0801fbc6 	.word	0x0801fbc6
 800f080:	0802065e 	.word	0x0802065e
 800f084:	0802068a 	.word	0x0802068a
 800f088:	080206b0 	.word	0x080206b0
 800f08c:	080206d8 	.word	0x080206d8
 800f090:	080206fd 	.word	0x080206fd
 800f094:	08020724 	.word	0x08020724
 800f098:	08020750 	.word	0x08020750
 800f09c:	0802077c 	.word	0x0802077c
 800f0a0:	080207a8 	.word	0x080207a8
 800f0a4:	080207d8 	.word	0x080207d8
 800f0a8:	080207fc 	.word	0x080207fc
 800f0ac:	08020822 	.word	0x08020822
 800f0b0:	0802084f 	.word	0x0802084f
 800f0b4:	08020879 	.word	0x08020879
 800f0b8:	080208a4 	.word	0x080208a4

0800f0bc <PTP_GetString>:
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 800f0bc:	780b      	ldrb	r3, [r1, #0]
{
 800f0be:	b530      	push	{r4, r5, lr}
  *len = data[0];
 800f0c0:	8013      	strh	r3, [r2, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
  data ++; /* Adjust the offset ignoring the String Len */

  for (idx = 0U; idx < strlength; idx += 2U)
 800f0c2:	4604      	mov	r4, r0
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 800f0c4:	f811 3b01 	ldrb.w	r3, [r1], #1
  for (idx = 0U; idx < strlength; idx += 2U)
 800f0c8:	2200      	movs	r2, #0
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 800f0ca:	005b      	lsls	r3, r3, #1
  for (idx = 0U; idx < strlength; idx += 2U)
 800f0cc:	b295      	uxth	r5, r2
 800f0ce:	42ab      	cmp	r3, r5
 800f0d0:	d803      	bhi.n	800f0da <PTP_GetString+0x1e>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
    str++;
  }
  *str = 0U; /* mark end of string */
 800f0d2:	085b      	lsrs	r3, r3, #1
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	54c2      	strb	r2, [r0, r3]
}
 800f0d8:	bd30      	pop	{r4, r5, pc}
    *str = data[idx];
 800f0da:	5c8d      	ldrb	r5, [r1, r2]
 800f0dc:	3202      	adds	r2, #2
 800f0de:	f804 5b01 	strb.w	r5, [r4], #1
  for (idx = 0U; idx < strlength; idx += 2U)
 800f0e2:	e7f3      	b.n	800f0cc <PTP_GetString+0x10>

0800f0e4 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 800f0e4:	b530      	push	{r4, r5, lr}
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 800f0e6:	188c      	adds	r4, r1, r2
{
 800f0e8:	4605      	mov	r5, r0
  size = LE32(&data[offset]);
 800f0ea:	5c8a      	ldrb	r2, [r1, r2]
 800f0ec:	78a3      	ldrb	r3, [r4, #2]
  while (size > idx)
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 800f0ee:	3404      	adds	r4, #4
  size = LE32(&data[offset]);
 800f0f0:	f814 0c03 	ldrb.w	r0, [r4, #-3]
 800f0f4:	041b      	lsls	r3, r3, #16
 800f0f6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  uint32_t size, idx = 0U;
 800f0fa:	2000      	movs	r0, #0
  size = LE32(&data[offset]);
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800f102:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  while (size > idx)
 800f106:	4298      	cmp	r0, r3
 800f108:	d100      	bne.n	800f10c <PTP_GetArray16+0x28>
    idx++;
  }
  return size;
}
 800f10a:	bd30      	pop	{r4, r5, pc}
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 800f10c:	f814 2010 	ldrb.w	r2, [r4, r0, lsl #1]
 800f110:	f825 2010 	strh.w	r2, [r5, r0, lsl #1]
    idx++;
 800f114:	3001      	adds	r0, #1
 800f116:	e7f6      	b.n	800f106 <PTP_GetArray16+0x22>

0800f118 <PTP_DecodeDeviceInfo>:
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f118:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800f11c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
 800f11e:	484c      	ldr	r0, [pc, #304]	; (800f250 <PTP_DecodeDeviceInfo+0x138>)
{
 800f120:	460c      	mov	r4, r1
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f122:	69dd      	ldr	r5, [r3, #28]
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
 800f124:	f00f f9cc 	bl	801e4c0 <iprintf>
 800f128:	484a      	ldr	r0, [pc, #296]	; (800f254 <PTP_DecodeDeviceInfo+0x13c>)
 800f12a:	f00f f9c9 	bl	801e4c0 <iprintf>
 800f12e:	484a      	ldr	r0, [pc, #296]	; (800f258 <PTP_DecodeDeviceInfo+0x140>)
 800f130:	f00f fa4c 	bl	801e5cc <puts>
  if (MTP_Handle->ptp.iteration == 0U)
 800f134:	f505 5300 	add.w	r3, r5, #8192	; 0x2000
 800f138:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	f040 8085 	bne.w	800f24c <PTP_DecodeDeviceInfo+0x134>
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800f142:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800f146:	f505 51ec 	add.w	r1, r5, #7552	; 0x1d80
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800f14a:	f505 57ec 	add.w	r7, r5, #7552	; 0x1d80
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800f14e:	f104 000a 	add.w	r0, r4, #10
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800f152:	f8b3 2d90 	ldrh.w	r2, [r3, #3472]	; 0xd90
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800f156:	3118      	adds	r1, #24
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800f158:	3710      	adds	r7, #16
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800f15a:	8022      	strh	r2, [r4, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 800f15c:	f8d3 2d92 	ldr.w	r2, [r3, #3474]	; 0xd92
 800f160:	6062      	str	r2, [r4, #4]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800f162:	f10d 0206 	add.w	r2, sp, #6
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 800f166:	f8b3 3d96 	ldrh.w	r3, [r3, #3478]	; 0xd96
 800f16a:	8123      	strh	r3, [r4, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800f16c:	f7ff ffa6 	bl	800f0bc <PTP_GetString>
    totallen = (uint32_t)(len * 2U) + 1U;
 800f170:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 800f174:	4639      	mov	r1, r7
 800f176:	f504 7088 	add.w	r0, r4, #272	; 0x110
    totallen = (uint32_t)(len * 2U) + 1U;
 800f17a:	005e      	lsls	r6, r3, #1
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 800f17c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f180:	7a9a      	ldrb	r2, [r3, #10]
 800f182:	7a5b      	ldrb	r3, [r3, #9]
 800f184:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 800f188:	f106 020b 	add.w	r2, r6, #11
    totallen = (uint32_t)(len * 2U) + 1U;
 800f18c:	3601      	adds	r6, #1
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 800f18e:	f8a4 310a 	strh.w	r3, [r4, #266]	; 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 800f192:	f7ff ffa7 	bl	800f0e4 <PTP_GetArray16>
 800f196:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
    totallen = totallen + (dev_info->OperationsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f19a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 800f19e:	f504 70ee 	add.w	r0, r4, #476	; 0x1dc
 800f1a2:	f106 020e 	add.w	r2, r6, #14
 800f1a6:	f7ff ff9d 	bl	800f0e4 <PTP_GetArray16>
 800f1aa:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
    totallen = totallen + (dev_info->EventsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1ae:	eb06 0240 	add.w	r2, r6, r0, lsl #1
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 800f1b2:	f504 702a 	add.w	r0, r4, #680	; 0x2a8
    totallen = totallen + (dev_info->EventsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1b6:	1d15      	adds	r5, r2, #4
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 800f1b8:	3212      	adds	r2, #18
 800f1ba:	f7ff ff93 	bl	800f0e4 <PTP_GetArray16>
 800f1be:	f8c4 02a4 	str.w	r0, [r4, #676]	; 0x2a4
    totallen = totallen + (dev_info->DevicePropertiesSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1c2:	eb05 0240 	add.w	r2, r5, r0, lsl #1
    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 800f1c6:	f504 705d 	add.w	r0, r4, #884	; 0x374
    totallen = totallen + (dev_info->DevicePropertiesSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1ca:	1d15      	adds	r5, r2, #4
    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 800f1cc:	3212      	adds	r2, #18
 800f1ce:	f7ff ff89 	bl	800f0e4 <PTP_GetArray16>
 800f1d2:	f8c4 0370 	str.w	r0, [r4, #880]	; 0x370
    totallen = totallen + (dev_info->CaptureFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1d6:	eb05 0240 	add.w	r2, r5, r0, lsl #1
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800f1da:	f504 6088 	add.w	r0, r4, #1088	; 0x440
    totallen = totallen + (dev_info->CaptureFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1de:	1d15      	adds	r5, r2, #4
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800f1e0:	3212      	adds	r2, #18
 800f1e2:	f7ff ff7f 	bl	800f0e4 <PTP_GetArray16>
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800f1e6:	f10d 0206 	add.w	r2, sp, #6
    totallen = totallen + (dev_info->ImageFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1ea:	eb05 0140 	add.w	r1, r5, r0, lsl #1
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800f1ee:	f8c4 043c 	str.w	r0, [r4, #1084]	; 0x43c
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800f1f2:	f504 60a1 	add.w	r0, r4, #1288	; 0x508
    totallen = totallen + (dev_info->ImageFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800f1f6:	1d0d      	adds	r5, r1, #4
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800f1f8:	3112      	adds	r1, #18
 800f1fa:	4439      	add	r1, r7
 800f1fc:	f7ff ff5e 	bl	800f0bc <PTP_GetString>
    totallen += (uint32_t)(len * 2U) + 1U;
 800f200:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800f204:	f10d 0206 	add.w	r2, sp, #6
 800f208:	f204 6007 	addw	r0, r4, #1543	; 0x607
    totallen += (uint32_t)(len * 2U) + 1U;
 800f20c:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800f210:	1d0d      	adds	r5, r1, #4
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800f212:	310f      	adds	r1, #15
 800f214:	4439      	add	r1, r7
 800f216:	f7ff ff51 	bl	800f0bc <PTP_GetString>
    totallen += (uint32_t)(len * 2U) + 1U;
 800f21a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800f21e:	f10d 0206 	add.w	r2, sp, #6
 800f222:	f204 7006 	addw	r0, r4, #1798	; 0x706
    totallen += (uint32_t)(len * 2U) + 1U;
 800f226:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800f22a:	1c4d      	adds	r5, r1, #1
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800f22c:	310c      	adds	r1, #12
 800f22e:	4439      	add	r1, r7
 800f230:	f7ff ff44 	bl	800f0bc <PTP_GetString>
    totallen += (uint32_t)(len * 2U) + 1U;
 800f234:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 800f238:	f10d 0206 	add.w	r2, sp, #6
 800f23c:	f604 0005 	addw	r0, r4, #2053	; 0x805
 800f240:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800f244:	310c      	adds	r1, #12
 800f246:	4439      	add	r1, r7
 800f248:	f7ff ff38 	bl	800f0bc <PTP_GetString>
}
 800f24c:	b003      	add	sp, #12
 800f24e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f250:	0801fbc8 	.word	0x0801fbc8
 800f254:	080208c9 	.word	0x080208c9
 800f258:	0801fbc6 	.word	0x0801fbc6

0800f25c <PTP_BufferFullCallback>:
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f25c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
  switch (MTP_Handle->ptp.data_container.code)
 800f260:	f241 020d 	movw	r2, #4109	; 0x100d
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f264:	69d9      	ldr	r1, [r3, #28]
  switch (MTP_Handle->ptp.data_container.code)
 800f266:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800f26a:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	; 0xd8a
 800f26e:	4293      	cmp	r3, r2
{
 800f270:	b510      	push	{r4, lr}
  switch (MTP_Handle->ptp.data_container.code)
 800f272:	d026      	beq.n	800f2c2 <PTP_BufferFullCallback+0x66>
 800f274:	d808      	bhi.n	800f288 <PTP_BufferFullCallback+0x2c>
 800f276:	f241 0201 	movw	r2, #4097	; 0x1001
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d007      	beq.n	800f28e <PTP_BufferFullCallback+0x32>
 800f27e:	f241 0209 	movw	r2, #4105	; 0x1009
 800f282:	4293      	cmp	r3, r2
 800f284:	d007      	beq.n	800f296 <PTP_BufferFullCallback+0x3a>
}
 800f286:	bd10      	pop	{r4, pc}
  switch (MTP_Handle->ptp.data_container.code)
 800f288:	f241 021b 	movw	r2, #4123	; 0x101b
 800f28c:	e7f9      	b.n	800f282 <PTP_BufferFullCallback+0x26>
}
 800f28e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800f292:	f7ff bf41 	b.w	800f118 <PTP_DecodeDeviceInfo>
      if (MTP_Handle->ptp.iteration == 0U)
 800f296:	f501 5400 	add.w	r4, r1, #8192	; 0x2000
 800f29a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1f1      	bne.n	800f286 <PTP_BufferFullCallback+0x2a>
        (void)USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data,
 800f2a2:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 800f2a6:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
 800f2aa:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
 800f2ae:	3110      	adds	r1, #16
 800f2b0:	f00e fd22 	bl	801dcf8 <memcpy>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800f2b4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
 800f2b8:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800f2bc:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
 800f2c0:	e7e1      	b.n	800f286 <PTP_BufferFullCallback+0x2a>
      if (MTP_Handle->ptp.iteration == 0U)
 800f2c2:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800f2c6:	f8d1 31bc 	ldr.w	r3, [r1, #444]	; 0x1bc
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d1db      	bne.n	800f286 <PTP_BufferFullCallback+0x2a>
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800f2ce:	f8d1 31c4 	ldr.w	r3, [r1, #452]	; 0x1c4
 800f2d2:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 800f2d6:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
}
 800f2da:	e7d4      	b.n	800f286 <PTP_BufferFullCallback+0x2a>

0800f2dc <PTP_GetArray32.constprop.0>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
 800f2dc:	b530      	push	{r4, r5, lr}
{
  uint32_t size, idx = 0U;

  size = LE32(&data[offset]);
 800f2de:	680c      	ldr	r4, [r1, #0]
  while (size > idx)
 800f2e0:	1f02      	subs	r2, r0, #4
 800f2e2:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f2e6:	4281      	cmp	r1, r0
 800f2e8:	d101      	bne.n	800f2ee <PTP_GetArray32.constprop.0+0x12>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
    idx++;
  }
  return size;
}
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	bd30      	pop	{r4, r5, pc}
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 800f2ee:	798b      	ldrb	r3, [r1, #6]
 800f2f0:	3104      	adds	r1, #4
 800f2f2:	784d      	ldrb	r5, [r1, #1]
 800f2f4:	041b      	lsls	r3, r3, #16
 800f2f6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800f2fa:	780d      	ldrb	r5, [r1, #0]
 800f2fc:	432b      	orrs	r3, r5
 800f2fe:	78cd      	ldrb	r5, [r1, #3]
 800f300:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800f304:	f842 3f04 	str.w	r3, [r2, #4]!
    idx++;
 800f308:	e7ed      	b.n	800f2e6 <PTP_GetArray32.constprop.0+0xa>

0800f30a <USBH_PTP_Init>:
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f30a:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
  MTP_Handle->ptp.state = PTP_IDLE;
 800f30e:	f44f 7280 	mov.w	r2, #256	; 0x100
}
 800f312:	2000      	movs	r0, #0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f314:	69db      	ldr	r3, [r3, #28]
  MTP_Handle->ptp.state = PTP_IDLE;
 800f316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f31a:	f8a3 2d60 	strh.w	r2, [r3, #3424]	; 0xd60
}
 800f31e:	4770      	bx	lr

0800f320 <USBH_PTP_SendRequest>:
{
 800f320:	b538      	push	{r3, r4, r5, lr}
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f322:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800f326:	460d      	mov	r5, r1
  (void)USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 800f328:	2220      	movs	r2, #32
 800f32a:	2100      	movs	r1, #0
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f32c:	69dc      	ldr	r4, [r3, #28]
  (void)USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 800f32e:	f504 50eb 	add.w	r0, r4, #7520	; 0x1d60
 800f332:	3004      	adds	r0, #4
 800f334:	f00e fcee 	bl	801dd14 <memset>
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - ((sizeof(uint32_t) * (5U - (uint32_t)req->Nparam)));
 800f338:	f895 2020 	ldrb.w	r2, [r5, #32]
 800f33c:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
}
 800f340:	2000      	movs	r0, #0
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - ((sizeof(uint32_t) * (5U - (uint32_t)req->Nparam)));
 800f342:	3203      	adds	r2, #3
 800f344:	0092      	lsls	r2, r2, #2
 800f346:	f8c3 2d64 	str.w	r2, [r3, #3428]	; 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 800f34a:	2201      	movs	r2, #1
 800f34c:	f8a3 2d68 	strh.w	r2, [r3, #3432]	; 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 800f350:	882a      	ldrh	r2, [r5, #0]
 800f352:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	; 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 800f356:	68aa      	ldr	r2, [r5, #8]
 800f358:	f8c3 2d6c 	str.w	r2, [r3, #3436]	; 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 800f35c:	68ea      	ldr	r2, [r5, #12]
 800f35e:	f8c3 2d70 	str.w	r2, [r3, #3440]	; 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 800f362:	692a      	ldr	r2, [r5, #16]
 800f364:	f8c3 2d74 	str.w	r2, [r3, #3444]	; 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 800f368:	696a      	ldr	r2, [r5, #20]
 800f36a:	f8c3 2d78 	str.w	r2, [r3, #3448]	; 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 800f36e:	69aa      	ldr	r2, [r5, #24]
 800f370:	f8c3 2d7c 	str.w	r2, [r3, #3452]	; 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 800f374:	69ea      	ldr	r2, [r5, #28]
 800f376:	f8c3 2d80 	str.w	r2, [r3, #3456]	; 0xd80
}
 800f37a:	bd38      	pop	{r3, r4, r5, pc}

0800f37c <USBH_PTP_GetResponse>:
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f37c:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
}
 800f380:	2000      	movs	r0, #0
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f382:	69db      	ldr	r3, [r3, #28]
  resp->Code = MTP_Handle->ptp.resp_container.code;
 800f384:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f388:	f8b3 218a 	ldrh.w	r2, [r3, #394]	; 0x18a
 800f38c:	800a      	strh	r2, [r1, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 800f38e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800f392:	604a      	str	r2, [r1, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 800f394:	f8d3 218c 	ldr.w	r2, [r3, #396]	; 0x18c
 800f398:	608a      	str	r2, [r1, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800f39a:	f8d3 2190 	ldr.w	r2, [r3, #400]	; 0x190
 800f39e:	60ca      	str	r2, [r1, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 800f3a0:	f8d3 2194 	ldr.w	r2, [r3, #404]	; 0x194
 800f3a4:	610a      	str	r2, [r1, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 800f3a6:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800f3aa:	614a      	str	r2, [r1, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 800f3ac:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 800f3b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 800f3b4:	618a      	str	r2, [r1, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 800f3b6:	61cb      	str	r3, [r1, #28]
}
 800f3b8:	4770      	bx	lr

0800f3ba <USBH_PTP_Process>:
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f3ba:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
{
 800f3be:	b5f0      	push	{r4, r5, r6, r7, lr}
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f3c0:	69dd      	ldr	r5, [r3, #28]
{
 800f3c2:	b08d      	sub	sp, #52	; 0x34
 800f3c4:	4604      	mov	r4, r0
  switch (MTP_Handle->ptp.state)
 800f3c6:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
 800f3ca:	f897 6d60 	ldrb.w	r6, [r7, #3424]	; 0xd60
 800f3ce:	1e73      	subs	r3, r6, #1
 800f3d0:	2b08      	cmp	r3, #8
 800f3d2:	f200 80af 	bhi.w	800f534 <USBH_PTP_Process+0x17a>
 800f3d6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f3da:	0009      	.short	0x0009
 800f3dc:	0043001a 	.word	0x0043001a
 800f3e0:	00a00051 	.word	0x00a00051
 800f3e4:	010100af 	.word	0x010100af
 800f3e8:	0123010b 	.word	0x0123010b
      (void)USBH_BulkSendData(phost,
 800f3ec:	2101      	movs	r1, #1
 800f3ee:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 800f3f2:	f8b7 2d64 	ldrh.w	r2, [r7, #3428]	; 0xd64
 800f3f6:	9100      	str	r1, [sp, #0]
 800f3f8:	f505 51eb 	add.w	r1, r5, #7520	; 0x1d60
 800f3fc:	3104      	adds	r1, #4
 800f3fe:	f7fe fd66 	bl	800dece <USBH_BulkSendData>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 800f402:	2302      	movs	r3, #2
      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 800f404:	f887 3d60 	strb.w	r3, [r7, #3424]	; 0xd60
}
 800f408:	4630      	mov	r0, r6
 800f40a:	b00d      	add	sp, #52	; 0x34
 800f40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800f40e:	f897 1d2d 	ldrb.w	r1, [r7, #3373]	; 0xd2d
 800f412:	f7f3 f86d 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f416:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800f418:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 800f41a:	d110      	bne.n	800f43e <USBH_PTP_Process+0x84>
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 800f41c:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800f420:	f8d5 31ac 	ldr.w	r3, [r5, #428]	; 0x1ac
 800f424:	b90b      	cbnz	r3, 800f42a <USBH_PTP_Process+0x70>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 800f426:	2307      	movs	r3, #7
 800f428:	e002      	b.n	800f430 <USBH_PTP_Process+0x76>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d103      	bne.n	800f436 <USBH_PTP_Process+0x7c>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800f42e:	2303      	movs	r3, #3
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 800f430:	f887 3d60 	strb.w	r3, [r7, #3424]	; 0xd60
 800f434:	e05b      	b.n	800f4ee <USBH_PTP_Process+0x134>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 800f436:	2b02      	cmp	r3, #2
 800f438:	d159      	bne.n	800f4ee <USBH_PTP_Process+0x134>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 800f43a:	2305      	movs	r3, #5
 800f43c:	e7f8      	b.n	800f430 <USBH_PTP_Process+0x76>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f43e:	2802      	cmp	r0, #2
 800f440:	f040 80c3 	bne.w	800f5ca <USBH_PTP_Process+0x210>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f444:	2501      	movs	r5, #1
 800f446:	f887 5d60 	strb.w	r5, [r7, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800f44a:	f8c4 65b0 	str.w	r6, [r4, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f44e:	2300      	movs	r3, #0
 800f450:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800f454:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
 800f458:	461a      	mov	r2, r3
 800f45a:	f7fa fa7c 	bl	8009956 <osMessageQueuePut>
 800f45e:	e069      	b.n	800f534 <USBH_PTP_Process+0x17a>
      (void)USBH_BulkSendData(phost,
 800f460:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800f464:	2601      	movs	r6, #1
 800f466:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 800f46a:	f8b7 2d32 	ldrh.w	r2, [r7, #3378]	; 0xd32
 800f46e:	9600      	str	r6, [sp, #0]
 800f470:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800f474:	f7fe fd2b 	bl	800dece <USBH_BulkSendData>
      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 800f478:	2304      	movs	r3, #4
 800f47a:	e7c3      	b.n	800f404 <USBH_PTP_Process+0x4a>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800f47c:	f897 1d2d 	ldrb.w	r1, [r7, #3373]	; 0xd2d
 800f480:	f7f3 f836 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f484:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800f486:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 800f488:	d141      	bne.n	800f50e <USBH_PTP_Process+0x154>
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 800f48a:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800f48e:	f8b7 3d32 	ldrh.w	r3, [r7, #3378]	; 0xd32
 800f492:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
 800f496:	429a      	cmp	r2, r3
 800f498:	d935      	bls.n	800f506 <USBH_PTP_Process+0x14c>
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 800f49a:	1ad2      	subs	r2, r2, r3
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800f49c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 800f4a0:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800f4a4:	4419      	add	r1, r3
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800f4a6:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800f4aa:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800f4ae:	4413      	add	r3, r2
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800f4b0:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800f4b4:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800f4b8:	d30a      	bcc.n	800f4d0 <USBH_PTP_Process+0x116>
            PTP_BufferFullCallback(phost);
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	f7ff fece 	bl	800f25c <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 800f4c6:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
 800f4ca:	3301      	adds	r3, #1
 800f4cc:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
        if (MTP_Handle->ptp.data_length > 0U)
 800f4d0:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d0a6      	beq.n	800f426 <USBH_PTP_Process+0x6c>
          (void)USBH_BulkSendData(phost,
 800f4d8:	2101      	movs	r1, #1
 800f4da:	f897 3d2d 	ldrb.w	r3, [r7, #3373]	; 0xd2d
 800f4de:	f8b7 2d32 	ldrh.w	r2, [r7, #3378]	; 0xd32
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	9100      	str	r1, [sp, #0]
 800f4e6:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800f4ea:	f7fe fcf0 	bl	800dece <USBH_BulkSendData>
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800f4ee:	2302      	movs	r3, #2
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f4f0:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
 800f4f4:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800f4f8:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	461a      	mov	r2, r3
 800f500:	f7fa fa29 	bl	8009956 <osMessageQueuePut>
 800f504:	e780      	b.n	800f408 <USBH_PTP_Process+0x4e>
          MTP_Handle->ptp.data_length = 0U;
 800f506:	2300      	movs	r3, #0
 800f508:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
        if (MTP_Handle->ptp.data_length > 0U)
 800f50c:	e78b      	b.n	800f426 <USBH_PTP_Process+0x6c>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f50e:	2802      	cmp	r0, #2
 800f510:	d15b      	bne.n	800f5ca <USBH_PTP_Process+0x210>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800f512:	2303      	movs	r3, #3
 800f514:	f887 3d60 	strb.w	r3, [r7, #3424]	; 0xd60
 800f518:	e797      	b.n	800f44a <USBH_PTP_Process+0x90>
      (void)USBH_BulkReceiveData(phost,
 800f51a:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
 800f51e:	f897 3d2c 	ldrb.w	r3, [r7, #3372]	; 0xd2c
 800f522:	f8b7 2d34 	ldrh.w	r2, [r7, #3380]	; 0xd34
 800f526:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800f52a:	f7fe fce7 	bl	800defc <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 800f52e:	2306      	movs	r3, #6
      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 800f530:	f887 3d60 	strb.w	r3, [r7, #3424]	; 0xd60
  switch (MTP_Handle->ptp.state)
 800f534:	2601      	movs	r6, #1
 800f536:	e767      	b.n	800f408 <USBH_PTP_Process+0x4e>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800f538:	f897 1d2c 	ldrb.w	r1, [r7, #3372]	; 0xd2c
 800f53c:	f7f2 ffd8 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f540:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800f542:	4606      	mov	r6, r0
      if (URB_Status == USBH_URB_DONE)
 800f544:	d141      	bne.n	800f5ca <USBH_PTP_Process+0x210>
        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 800f546:	f505 5500 	add.w	r5, r5, #8192	; 0x2000
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 800f54a:	f897 1d2c 	ldrb.w	r1, [r7, #3372]	; 0xd2c
 800f54e:	4620      	mov	r0, r4
 800f550:	f7f2 ffca 	bl	80024e8 <USBH_LL_GetLastXferSize>
        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 800f554:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
 800f558:	1c5a      	adds	r2, r3, #1
 800f55a:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
 800f55e:	b933      	cbnz	r3, 800f56e <USBH_PTP_Process+0x1b4>
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 800f560:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
 800f564:	6812      	ldr	r2, [r2, #0]
          MTP_Handle->ptp.iteration = 0U;
 800f566:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 800f56a:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 800f56e:	f8b7 1d34 	ldrh.w	r1, [r7, #3380]	; 0xd34
 800f572:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
 800f576:	4281      	cmp	r1, r0
          MTP_Handle->ptp.data_length -= len;
 800f578:	eba3 0200 	sub.w	r2, r3, r0
        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 800f57c:	d822      	bhi.n	800f5c4 <USBH_PTP_Process+0x20a>
 800f57e:	b30b      	cbz	r3, 800f5c4 <USBH_PTP_Process+0x20a>
          MTP_Handle->ptp.data_ptr += len;
 800f580:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
 800f584:	4403      	add	r3, r0
          MTP_Handle->ptp.data_length -= len;
 800f586:	e9c5 326c 	strd	r3, r2, [r5, #432]	; 0x1b0
          MTP_Handle->ptp.data_packet += len;
 800f58a:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
 800f58e:	4418      	add	r0, r3
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800f590:	f5b0 7f7d 	cmp.w	r0, #1012	; 0x3f4
          MTP_Handle->ptp.data_packet += len;
 800f594:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800f598:	d30a      	bcc.n	800f5b0 <USBH_PTP_Process+0x1f6>
            PTP_BufferFullCallback(phost);
 800f59a:	4620      	mov	r0, r4
 800f59c:	f7ff fe5e 	bl	800f25c <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
            MTP_Handle->ptp.iteration++;
 800f5a6:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
          (void)USBH_BulkReceiveData(phost,
 800f5b0:	f897 3d2c 	ldrb.w	r3, [r7, #3372]	; 0xd2c
 800f5b4:	4620      	mov	r0, r4
 800f5b6:	f8b7 2d34 	ldrh.w	r2, [r7, #3380]	; 0xd34
 800f5ba:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
 800f5be:	f7fe fc9d 	bl	800defc <USBH_BulkReceiveData>
 800f5c2:	e721      	b.n	800f408 <USBH_PTP_Process+0x4e>
          MTP_Handle->ptp.data_length -= len;
 800f5c4:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800f5c8:	e72d      	b.n	800f426 <USBH_PTP_Process+0x6c>
      else if (URB_Status == USBH_URB_STALL)
 800f5ca:	2e05      	cmp	r6, #5
      else if (URB_Status == USBH_URB_STALL)
 800f5cc:	d1b2      	bne.n	800f534 <USBH_PTP_Process+0x17a>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800f5ce:	2309      	movs	r3, #9
 800f5d0:	f887 3d60 	strb.w	r3, [r7, #3424]	; 0xd60
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800f5d4:	2302      	movs	r3, #2
 800f5d6:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
 800f5da:	e738      	b.n	800f44e <USBH_PTP_Process+0x94>
      (void)USBH_BulkReceiveData(phost,
 800f5dc:	f505 5106 	add.w	r1, r5, #8576	; 0x2180
 800f5e0:	f897 3d2c 	ldrb.w	r3, [r7, #3372]	; 0xd2c
 800f5e4:	223f      	movs	r2, #63	; 0x3f
 800f5e6:	3104      	adds	r1, #4
 800f5e8:	f7fe fc88 	bl	800defc <USBH_BulkReceiveData>
      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 800f5ec:	2308      	movs	r3, #8
 800f5ee:	e79f      	b.n	800f530 <USBH_PTP_Process+0x176>
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800f5f0:	f897 1d2c 	ldrb.w	r1, [r7, #3372]	; 0xd2c
 800f5f4:	f7f2 ff7c 	bl	80024f0 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800f5f8:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800f5fa:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800f5fc:	d10e      	bne.n	800f61c <USBH_PTP_Process+0x262>
        (void)USBH_PTP_GetResponse(phost, &ptp_container);
 800f5fe:	a903      	add	r1, sp, #12
 800f600:	4620      	mov	r0, r4
 800f602:	f7ff febb 	bl	800f37c <USBH_PTP_GetResponse>
        if (ptp_container.Code == PTP_RC_OK)
 800f606:	f8bd 600c 	ldrh.w	r6, [sp, #12]
          status = USBH_FAIL;
 800f60a:	f242 0001 	movw	r0, #8193	; 0x2001
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800f60e:	f887 5d61 	strb.w	r5, [r7, #3425]	; 0xd61
          status = USBH_FAIL;
 800f612:	4286      	cmp	r6, r0
 800f614:	bf14      	ite	ne
 800f616:	2602      	movne	r6, #2
 800f618:	2600      	moveq	r6, #0
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800f61a:	e6f5      	b.n	800f408 <USBH_PTP_Process+0x4e>
      else if (URB_Status == USBH_URB_STALL)
 800f61c:	2805      	cmp	r0, #5
 800f61e:	e7d5      	b.n	800f5cc <USBH_PTP_Process+0x212>
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800f620:	2601      	movs	r6, #1
 800f622:	f887 6d61 	strb.w	r6, [r7, #3425]	; 0xd61
      break;
 800f626:	e6ef      	b.n	800f408 <USBH_PTP_Process+0x4e>

0800f628 <USBH_PTP_OpenSession>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f628:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 800f62c:	69da      	ldr	r2, [r3, #28]
{
 800f62e:	b5f0      	push	{r4, r5, r6, r7, lr}
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800f630:	f502 5780 	add.w	r7, r2, #4096	; 0x1000
{
 800f634:	b08b      	sub	sp, #44	; 0x2c
 800f636:	4604      	mov	r4, r0
  switch (MTP_Handle->ptp.req_state)
 800f638:	f897 5d61 	ldrb.w	r5, [r7, #3425]	; 0xd61
 800f63c:	2d01      	cmp	r5, #1
 800f63e:	d004      	beq.n	800f64a <USBH_PTP_OpenSession+0x22>
 800f640:	2d02      	cmp	r5, #2
 800f642:	d027      	beq.n	800f694 <USBH_PTP_OpenSession+0x6c>

    default:
      break;
  }
  return status;
}
 800f644:	2001      	movs	r0, #1
 800f646:	b00b      	add	sp, #44	; 0x2c
 800f648:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MTP_Handle->ptp.session_id = session;
 800f64a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 800f64e:	2600      	movs	r6, #0
      ptp_container.Code = PTP_OC_OpenSession;
 800f650:	f241 0302 	movw	r3, #4098	; 0x1002
      ptp_container.SessionID = session;
 800f654:	9102      	str	r1, [sp, #8]
      MTP_Handle->ptp.session_id = session;
 800f656:	f8c2 11a8 	str.w	r1, [r2, #424]	; 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 800f65a:	f8c2 61ac 	str.w	r6, [r2, #428]	; 0x1ac
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 800f65e:	f8c2 51a4 	str.w	r5, [r2, #420]	; 0x1a4
      ptp_container.Code = PTP_OC_OpenSession;
 800f662:	f8ad 3004 	strh.w	r3, [sp, #4]
      ptp_container.Nparam = 1U;
 800f666:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
      ptp_container.Param1 = session;
 800f66a:	e9cd 6103 	strd	r6, r1, [sp, #12]
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800f66e:	a901      	add	r1, sp, #4
 800f670:	f7ff fe56 	bl	800f320 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f674:	f240 2301 	movw	r3, #513	; 0x201
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f678:	4632      	mov	r2, r6
 800f67a:	f504 61b6 	add.w	r1, r4, #1456	; 0x5b0
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f67e:	f8a7 3d60 	strh.w	r3, [r7, #3424]	; 0xd60
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f682:	2305      	movs	r3, #5
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f684:	f8d4 05a8 	ldr.w	r0, [r4, #1448]	; 0x5a8
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f688:	f8c4 35b0 	str.w	r3, [r4, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f68c:	4633      	mov	r3, r6
 800f68e:	f7fa f962 	bl	8009956 <osMessageQueuePut>
      break;
 800f692:	e7d7      	b.n	800f644 <USBH_PTP_OpenSession+0x1c>
}
 800f694:	b00b      	add	sp, #44	; 0x2c
 800f696:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      status = USBH_PTP_Process(phost);
 800f69a:	f7ff be8e 	b.w	800f3ba <USBH_PTP_Process>

0800f69e <USBH_PTP_GetDeviceInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f69e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 800f6a2:	69db      	ldr	r3, [r3, #28]
{
 800f6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800f6a6:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
{
 800f6aa:	b08d      	sub	sp, #52	; 0x34
 800f6ac:	4605      	mov	r5, r0
  switch (MTP_Handle->ptp.req_state)
 800f6ae:	f897 4d61 	ldrb.w	r4, [r7, #3425]	; 0xd61
 800f6b2:	2c01      	cmp	r4, #1
 800f6b4:	d005      	beq.n	800f6c2 <USBH_PTP_GetDeviceInfo+0x24>
 800f6b6:	2c02      	cmp	r4, #2
 800f6b8:	d036      	beq.n	800f728 <USBH_PTP_GetDeviceInfo+0x8a>
 800f6ba:	2401      	movs	r4, #1

    default:
      break;
  }
  return status;
}
 800f6bc:	4620      	mov	r0, r4
 800f6be:	b00d      	add	sp, #52	; 0x34
 800f6c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f6c2:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f6c6:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f6ca:	2102      	movs	r1, #2
      MTP_Handle->ptp.data_length = 0U;
 800f6cc:	2600      	movs	r6, #0
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f6ce:	3304      	adds	r3, #4
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f6d0:	f8c2 11ac 	str.w	r1, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f6d4:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 800f6d8:	f241 0301 	movw	r3, #4097	; 0x1001
      MTP_Handle->ptp.data_length = 0U;
 800f6dc:	f8c2 61b4 	str.w	r6, [r2, #436]	; 0x1b4
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 800f6e0:	f8ad 300c 	strh.w	r3, [sp, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800f6e4:	f8d2 31a8 	ldr.w	r3, [r2, #424]	; 0x1a8
      MTP_Handle->ptp.data_packet_counter = 0U;
 800f6e8:	f8c2 61c0 	str.w	r6, [r2, #448]	; 0x1c0
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800f6ec:	9304      	str	r3, [sp, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800f6ee:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
      MTP_Handle->ptp.data_packet = 0U;
 800f6f2:	f8c2 61b8 	str.w	r6, [r2, #440]	; 0x1b8
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800f6f6:	1c59      	adds	r1, r3, #1
 800f6f8:	9305      	str	r3, [sp, #20]
      ptp_container.Nparam = 0U;
 800f6fa:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800f6fe:	f8c2 11a4 	str.w	r1, [r2, #420]	; 0x1a4
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800f702:	a903      	add	r1, sp, #12
 800f704:	f7ff fe0c 	bl	800f320 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f708:	f240 2301 	movw	r3, #513	; 0x201
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f70c:	4632      	mov	r2, r6
 800f70e:	f505 61b6 	add.w	r1, r5, #1456	; 0x5b0
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f712:	f8a7 3d60 	strh.w	r3, [r7, #3424]	; 0xd60
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f716:	2305      	movs	r3, #5
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f718:	f8d5 05a8 	ldr.w	r0, [r5, #1448]	; 0x5a8
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f71c:	f8c5 35b0 	str.w	r3, [r5, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f720:	4633      	mov	r3, r6
 800f722:	f7fa f918 	bl	8009956 <osMessageQueuePut>
      break;
 800f726:	e7c9      	b.n	800f6bc <USBH_PTP_GetDeviceInfo+0x1e>
 800f728:	9101      	str	r1, [sp, #4]
      status = USBH_PTP_Process(phost);
 800f72a:	f7ff fe46 	bl	800f3ba <USBH_PTP_Process>
      if (status == USBH_OK)
 800f72e:	9901      	ldr	r1, [sp, #4]
 800f730:	4604      	mov	r4, r0
 800f732:	2800      	cmp	r0, #0
 800f734:	d1c2      	bne.n	800f6bc <USBH_PTP_GetDeviceInfo+0x1e>
        PTP_DecodeDeviceInfo(phost, dev_info);
 800f736:	4628      	mov	r0, r5
 800f738:	f7ff fcee 	bl	800f118 <PTP_DecodeDeviceInfo>
 800f73c:	e7be      	b.n	800f6bc <USBH_PTP_GetDeviceInfo+0x1e>

0800f73e <USBH_PTP_GetStorageIds>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
  USBH_StatusTypeDef status = USBH_BUSY;
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f73e:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 800f742:	69db      	ldr	r3, [r3, #28]
{
 800f744:	b5f0      	push	{r4, r5, r6, r7, lr}
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800f746:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
{
 800f74a:	b08b      	sub	sp, #44	; 0x2c
 800f74c:	4605      	mov	r5, r0
 800f74e:	460e      	mov	r6, r1
  switch (MTP_Handle->ptp.req_state)
 800f750:	f897 4d61 	ldrb.w	r4, [r7, #3425]	; 0xd61
 800f754:	2c01      	cmp	r4, #1
 800f756:	d005      	beq.n	800f764 <USBH_PTP_GetStorageIds+0x26>
 800f758:	2c02      	cmp	r4, #2
 800f75a:	d036      	beq.n	800f7ca <USBH_PTP_GetStorageIds+0x8c>
 800f75c:	2401      	movs	r4, #1

    default:
      break;
  }
  return status;
}
 800f75e:	4620      	mov	r0, r4
 800f760:	b00b      	add	sp, #44	; 0x2c
 800f762:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f764:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f768:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f76c:	2102      	movs	r1, #2
      MTP_Handle->ptp.data_length = 0U;
 800f76e:	2600      	movs	r6, #0
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f770:	3304      	adds	r3, #4
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f772:	f8c2 11ac 	str.w	r1, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f776:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      ptp_container.Code = PTP_OC_GetStorageIDs;
 800f77a:	f241 0304 	movw	r3, #4100	; 0x1004
      MTP_Handle->ptp.data_length = 0U;
 800f77e:	f8c2 61b4 	str.w	r6, [r2, #436]	; 0x1b4
      ptp_container.Code = PTP_OC_GetStorageIDs;
 800f782:	f8ad 3004 	strh.w	r3, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800f786:	f8d2 31a8 	ldr.w	r3, [r2, #424]	; 0x1a8
      MTP_Handle->ptp.data_packet_counter = 0U;
 800f78a:	f8c2 61c0 	str.w	r6, [r2, #448]	; 0x1c0
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800f78e:	9302      	str	r3, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800f790:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
      MTP_Handle->ptp.data_packet = 0U;
 800f794:	f8c2 61b8 	str.w	r6, [r2, #440]	; 0x1b8
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800f798:	1c59      	adds	r1, r3, #1
 800f79a:	9303      	str	r3, [sp, #12]
      ptp_container.Nparam = 0U;
 800f79c:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800f7a0:	f8c2 11a4 	str.w	r1, [r2, #420]	; 0x1a4
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800f7a4:	a901      	add	r1, sp, #4
 800f7a6:	f7ff fdbb 	bl	800f320 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f7aa:	f240 2301 	movw	r3, #513	; 0x201
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f7ae:	4632      	mov	r2, r6
 800f7b0:	f505 61b6 	add.w	r1, r5, #1456	; 0x5b0
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f7b4:	f8a7 3d60 	strh.w	r3, [r7, #3424]	; 0xd60
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f7b8:	2305      	movs	r3, #5
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f7ba:	f8d5 05a8 	ldr.w	r0, [r5, #1448]	; 0x5a8
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f7be:	f8c5 35b0 	str.w	r3, [r5, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f7c2:	4633      	mov	r3, r6
 800f7c4:	f7fa f8c7 	bl	8009956 <osMessageQueuePut>
      break;
 800f7c8:	e7c9      	b.n	800f75e <USBH_PTP_GetStorageIds+0x20>
      status = USBH_PTP_Process(phost);
 800f7ca:	f7ff fdf6 	bl	800f3ba <USBH_PTP_Process>
      if (status == USBH_OK)
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	2800      	cmp	r0, #0
 800f7d2:	d1c4      	bne.n	800f75e <USBH_PTP_GetStorageIds+0x20>
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f7d4:	f8d5 354c 	ldr.w	r3, [r5, #1356]	; 0x54c
  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800f7d8:	1d30      	adds	r0, r6, #4
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800f7da:	69d9      	ldr	r1, [r3, #28]
  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800f7dc:	f501 51ec 	add.w	r1, r1, #7552	; 0x1d80
 800f7e0:	3110      	adds	r1, #16
 800f7e2:	f7ff fd7b 	bl	800f2dc <PTP_GetArray32.constprop.0>
 800f7e6:	6030      	str	r0, [r6, #0]
}
 800f7e8:	e7b9      	b.n	800f75e <USBH_PTP_GetStorageIds+0x20>

0800f7ea <USBH_PTP_GetStorageInfo>:
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
  USBH_StatusTypeDef   status = USBH_BUSY;
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f7ea:	f8d0 354c 	ldr.w	r3, [r0, #1356]	; 0x54c
 800f7ee:	69db      	ldr	r3, [r3, #28]
{
 800f7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800f7f2:	f503 5780 	add.w	r7, r3, #4096	; 0x1000
{
 800f7f6:	b08b      	sub	sp, #44	; 0x2c
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	4614      	mov	r4, r2
  switch (MTP_Handle->ptp.req_state)
 800f7fc:	f897 5d61 	ldrb.w	r5, [r7, #3425]	; 0xd61
 800f800:	2d01      	cmp	r5, #1
 800f802:	d005      	beq.n	800f810 <USBH_PTP_GetStorageInfo+0x26>
 800f804:	2d02      	cmp	r5, #2
 800f806:	d038      	beq.n	800f87a <USBH_PTP_GetStorageInfo+0x90>
 800f808:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 800f80a:	4628      	mov	r0, r5
 800f80c:	b00b      	add	sp, #44	; 0x2c
 800f80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f810:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f814:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f818:	2402      	movs	r4, #2
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f81a:	3304      	adds	r3, #4
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800f81c:	f8c2 41ac 	str.w	r4, [r2, #428]	; 0x1ac
      MTP_Handle->ptp.data_length = 0U;
 800f820:	2400      	movs	r4, #0
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800f822:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
      ptp_container.Code = PTP_OC_GetStorageInfo;
 800f826:	f241 0305 	movw	r3, #4101	; 0x1005
      MTP_Handle->ptp.data_length = 0U;
 800f82a:	f8c2 41b4 	str.w	r4, [r2, #436]	; 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800f82e:	f8c2 41c0 	str.w	r4, [r2, #448]	; 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800f832:	f8c2 41b8 	str.w	r4, [r2, #440]	; 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 800f836:	f8ad 3004 	strh.w	r3, [sp, #4]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800f83a:	f8d2 31a8 	ldr.w	r3, [r2, #424]	; 0x1a8
 800f83e:	9302      	str	r3, [sp, #8]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800f840:	f8d2 31a4 	ldr.w	r3, [r2, #420]	; 0x1a4
 800f844:	f103 0c01 	add.w	ip, r3, #1
 800f848:	f8c2 c1a4 	str.w	ip, [r2, #420]	; 0x1a4
      ptp_container.Nparam = 1U;
 800f84c:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
      ptp_container.Param1 = storage_id;
 800f850:	e9cd 3103 	strd	r3, r1, [sp, #12]
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800f854:	a901      	add	r1, sp, #4
 800f856:	f7ff fd63 	bl	800f320 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f85a:	f240 2301 	movw	r3, #513	; 0x201
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f85e:	4622      	mov	r2, r4
 800f860:	f506 61b6 	add.w	r1, r6, #1456	; 0x5b0
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800f864:	f8a7 3d60 	strh.w	r3, [r7, #3424]	; 0xd60
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f868:	2305      	movs	r3, #5
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f86a:	f8d6 05a8 	ldr.w	r0, [r6, #1448]	; 0x5a8
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800f86e:	f8c6 35b0 	str.w	r3, [r6, #1456]	; 0x5b0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800f872:	4623      	mov	r3, r4
 800f874:	f7fa f86f 	bl	8009956 <osMessageQueuePut>
      break;
 800f878:	e7c7      	b.n	800f80a <USBH_PTP_GetStorageInfo+0x20>
      status = USBH_PTP_Process(phost);
 800f87a:	f7ff fd9e 	bl	800f3ba <USBH_PTP_Process>
      if (status == USBH_OK)
 800f87e:	4605      	mov	r5, r0
 800f880:	2800      	cmp	r0, #0
 800f882:	d1c2      	bne.n	800f80a <USBH_PTP_GetStorageInfo+0x20>
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800f884:	f8d6 354c 	ldr.w	r3, [r6, #1356]	; 0x54c
 800f888:	69de      	ldr	r6, [r3, #28]
  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800f88a:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
 800f88e:	f8b3 2d90 	ldrh.w	r2, [r3, #3472]	; 0xd90
 800f892:	8022      	strh	r2, [r4, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800f894:	f8b3 2d92 	ldrh.w	r2, [r3, #3474]	; 0xd92
 800f898:	8062      	strh	r2, [r4, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800f89a:	f8b3 2d94 	ldrh.w	r2, [r3, #3476]	; 0xd94
 800f89e:	80a2      	strh	r2, [r4, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 800f8a0:	f506 52ed 	add.w	r2, r6, #7584	; 0x1da0
 800f8a4:	f852 0c0a 	ldr.w	r0, [r2, #-10]
 800f8a8:	f852 1c06 	ldr.w	r1, [r2, #-6]
 800f8ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800f8b0:	f852 1c02 	ldr.w	r1, [r2, #-2]
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800f8b4:	f104 001c 	add.w	r0, r4, #28
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800f8b8:	f8d2 2002 	ldr.w	r2, [r2, #2]
 800f8bc:	e9c4 1204 	strd	r1, r2, [r4, #16]
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800f8c0:	f506 51ed 	add.w	r1, r6, #7584	; 0x1da0
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800f8c4:	f8d3 3da6 	ldr.w	r3, [r3, #3494]	; 0xda6
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800f8c8:	aa01      	add	r2, sp, #4
 800f8ca:	310a      	adds	r1, #10
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800f8cc:	61a3      	str	r3, [r4, #24]
  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800f8ce:	f7ff fbf5 	bl	800f0bc <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + (len * 2U) + 1U], &len);
 800f8d2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800f8d6:	aa01      	add	r2, sp, #4
 800f8d8:	f204 101b 	addw	r0, r4, #283	; 0x11b
 800f8dc:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800f8e0:	f501 51ed 	add.w	r1, r1, #7584	; 0x1da0
 800f8e4:	310b      	adds	r1, #11
 800f8e6:	f7ff fbe9 	bl	800f0bc <PTP_GetString>
}
 800f8ea:	e78e      	b.n	800f80a <USBH_PTP_GetStorageInfo+0x20>

0800f8ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f8ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f8ee:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800f8f2:	9402      	str	r4, [sp, #8]
 800f8f4:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800f8f8:	9401      	str	r4, [sp, #4]
 800f8fa:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800f8fe:	9400      	str	r4, [sp, #0]
 800f900:	f7f2 fe49 	bl	8002596 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 800f904:	2000      	movs	r0, #0
 800f906:	b004      	add	sp, #16
 800f908:	bd10      	pop	{r4, pc}

0800f90a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f90a:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800f90c:	f7f2 fe56 	bl	80025bc <USBH_LL_ClosePipe>

  return USBH_OK;
}
 800f910:	2000      	movs	r0, #0
 800f912:	bd08      	pop	{r3, pc}

0800f914 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f914:	b530      	push	{r4, r5, lr}
 800f916:	2300      	movs	r3, #0
 800f918:	f200 5454 	addw	r4, r0, #1364	; 0x554
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f91c:	f854 5b04 	ldr.w	r5, [r4], #4
 800f920:	b2da      	uxtb	r2, r3
 800f922:	042d      	lsls	r5, r5, #16
 800f924:	d408      	bmi.n	800f938 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f926:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f92a:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 800f92e:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800f930:	f8c0 1554 	str.w	r1, [r0, #1364]	; 0x554
}
 800f934:	b2d0      	uxtb	r0, r2
 800f936:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800f938:	3301      	adds	r3, #1
 800f93a:	2b10      	cmp	r3, #16
 800f93c:	d1ee      	bne.n	800f91c <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 800f93e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f942:	e7f7      	b.n	800f934 <USBH_AllocPipe+0x20>

0800f944 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 800f944:	290f      	cmp	r1, #15
    phost->Pipes[idx] &= 0x7FFFU;
 800f946:	bf98      	it	ls
 800f948:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
}
 800f94c:	f04f 0000 	mov.w	r0, #0
    phost->Pipes[idx] &= 0x7FFFU;
 800f950:	bf9e      	ittt	ls
 800f952:	f8d1 3554 	ldrls.w	r3, [r1, #1364]	; 0x554
 800f956:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800f95a:	f8c1 3554 	strls.w	r3, [r1, #1364]	; 0x554
}
 800f95e:	4770      	bx	lr

0800f960 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800f960:	8880      	ldrh	r0, [r0, #4]
 800f962:	4770      	bx	lr

0800f964 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	6803      	ldr	r3, [r0, #0]
 800f968:	460c      	mov	r4, r1
 800f96a:	2100      	movs	r1, #0
 800f96c:	4605      	mov	r5, r0
 800f96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f970:	4798      	blx	r3
 800f972:	4606      	mov	r6, r0
 800f974:	682b      	ldr	r3, [r5, #0]
 800f976:	4628      	mov	r0, r5
 800f978:	1ba4      	subs	r4, r4, r6
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	b2a4      	uxth	r4, r4
 800f97e:	4798      	blx	r3
 800f980:	fbb4 f0f0 	udiv	r0, r4, r0
 800f984:	bd70      	pop	{r4, r5, r6, pc}

0800f986 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800f986:	2300      	movs	r3, #0
 800f988:	8083      	strh	r3, [r0, #4]
 800f98a:	4770      	bx	lr

0800f98c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800f98c:	b510      	push	{r4, lr}
 800f98e:	6803      	ldr	r3, [r0, #0]
 800f990:	4604      	mov	r4, r0
 800f992:	8881      	ldrh	r1, [r0, #4]
 800f994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f996:	4798      	blx	r3
 800f998:	88a3      	ldrh	r3, [r4, #4]
 800f99a:	3301      	adds	r3, #1
 800f99c:	80a3      	strh	r3, [r4, #4]
 800f99e:	bd10      	pop	{r4, pc}

0800f9a0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800f9a0:	6803      	ldr	r3, [r0, #0]
 800f9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9a4:	4718      	bx	r3

0800f9a6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800f9a6:	4770      	bx	lr

0800f9a8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800f9a8:	4a02      	ldr	r2, [pc, #8]	; (800f9b4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800f9aa:	6002      	str	r2, [r0, #0]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	8082      	strh	r2, [r0, #4]
 800f9b0:	4770      	bx	lr
 800f9b2:	bf00      	nop
 800f9b4:	08020934 	.word	0x08020934

0800f9b8 <_ZN8touchgfx9Container13getFirstChildEv>:
 800f9b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800f9ba:	4770      	bx	lr

0800f9bc <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800f9bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f9be:	2000      	movs	r0, #0
 800f9c0:	b12b      	cbz	r3, 800f9ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f9c2:	b920      	cbnz	r0, 800f9ce <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800f9c4:	1a5a      	subs	r2, r3, r1
 800f9c6:	699b      	ldr	r3, [r3, #24]
 800f9c8:	4250      	negs	r0, r2
 800f9ca:	4150      	adcs	r0, r2
 800f9cc:	e7f8      	b.n	800f9c0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800f9ce:	4770      	bx	lr

0800f9d0 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	6148      	str	r0, [r1, #20]
 800f9d4:	618b      	str	r3, [r1, #24]
 800f9d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f9d8:	b913      	cbnz	r3, 800f9e0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800f9da:	6281      	str	r1, [r0, #40]	; 0x28
 800f9dc:	4770      	bx	lr
 800f9de:	4613      	mov	r3, r2
 800f9e0:	699a      	ldr	r2, [r3, #24]
 800f9e2:	2a00      	cmp	r2, #0
 800f9e4:	d1fb      	bne.n	800f9de <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800f9e6:	6199      	str	r1, [r3, #24]
 800f9e8:	4770      	bx	lr

0800f9ea <_ZN8touchgfx9Container9removeAllEv>:
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800f9ee:	b123      	cbz	r3, 800f9fa <_ZN8touchgfx9Container9removeAllEv+0x10>
 800f9f0:	6999      	ldr	r1, [r3, #24]
 800f9f2:	6281      	str	r1, [r0, #40]	; 0x28
 800f9f4:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800f9f8:	e7f8      	b.n	800f9ec <_ZN8touchgfx9Container9removeAllEv+0x2>
 800f9fa:	4770      	bx	lr

0800f9fc <_ZN8touchgfx9Container6unlinkEv>:
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	6283      	str	r3, [r0, #40]	; 0x28
 800fa00:	4770      	bx	lr

0800fa02 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800fa02:	2200      	movs	r2, #0
 800fa04:	8002      	strh	r2, [r0, #0]
 800fa06:	8042      	strh	r2, [r0, #2]
 800fa08:	8082      	strh	r2, [r0, #4]
 800fa0a:	80c2      	strh	r2, [r0, #6]
 800fa0c:	4770      	bx	lr

0800fa0e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800fa0e:	b570      	push	{r4, r5, r6, lr}
 800fa10:	460d      	mov	r5, r1
 800fa12:	4616      	mov	r6, r2
 800fa14:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fa16:	b13c      	cbz	r4, 800fa28 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800fa18:	6823      	ldr	r3, [r4, #0]
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	4629      	mov	r1, r5
 800fa20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa22:	4798      	blx	r3
 800fa24:	69a4      	ldr	r4, [r4, #24]
 800fa26:	e7f6      	b.n	800fa16 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800fa28:	bd70      	pop	{r4, r5, r6, pc}

0800fa2a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800fa2a:	b538      	push	{r3, r4, r5, lr}
 800fa2c:	460d      	mov	r5, r1
 800fa2e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fa30:	b134      	cbz	r4, 800fa40 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800fa32:	682b      	ldr	r3, [r5, #0]
 800fa34:	4621      	mov	r1, r4
 800fa36:	4628      	mov	r0, r5
 800fa38:	689b      	ldr	r3, [r3, #8]
 800fa3a:	4798      	blx	r3
 800fa3c:	69a4      	ldr	r4, [r4, #24]
 800fa3e:	e7f7      	b.n	800fa30 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800fa40:	bd38      	pop	{r3, r4, r5, pc}

0800fa42 <_ZNK8touchgfx9Container17invalidateContentEv>:
 800fa42:	b510      	push	{r4, lr}
 800fa44:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fa46:	b12c      	cbz	r4, 800fa54 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 800fa48:	6823      	ldr	r3, [r4, #0]
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	699b      	ldr	r3, [r3, #24]
 800fa4e:	4798      	blx	r3
 800fa50:	69a4      	ldr	r4, [r4, #24]
 800fa52:	e7f8      	b.n	800fa46 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 800fa54:	bd10      	pop	{r4, pc}

0800fa56 <_ZN8touchgfx9ContainerD1Ev>:
 800fa56:	4770      	bx	lr

0800fa58 <_ZN8touchgfx9ContainerD0Ev>:
 800fa58:	b510      	push	{r4, lr}
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	212c      	movs	r1, #44	; 0x2c
 800fa5e:	f00d ffa4 	bl	801d9aa <_ZdlPvj>
 800fa62:	4620      	mov	r0, r4
 800fa64:	bd10      	pop	{r4, pc}

0800fa66 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800fa66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fa68:	b19b      	cbz	r3, 800fa92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fa6a:	428b      	cmp	r3, r1
 800fa6c:	d109      	bne.n	800fa82 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800fa6e:	699a      	ldr	r2, [r3, #24]
 800fa70:	2100      	movs	r1, #0
 800fa72:	6159      	str	r1, [r3, #20]
 800fa74:	6282      	str	r2, [r0, #40]	; 0x28
 800fa76:	b902      	cbnz	r2, 800fa7a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800fa78:	4770      	bx	lr
 800fa7a:	6199      	str	r1, [r3, #24]
 800fa7c:	4770      	bx	lr
 800fa7e:	4613      	mov	r3, r2
 800fa80:	b13a      	cbz	r2, 800fa92 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fa82:	699a      	ldr	r2, [r3, #24]
 800fa84:	428a      	cmp	r2, r1
 800fa86:	d1fa      	bne.n	800fa7e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800fa88:	698a      	ldr	r2, [r1, #24]
 800fa8a:	619a      	str	r2, [r3, #24]
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800fa92:	4770      	bx	lr

0800fa94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800fa94:	b410      	push	{r4}
 800fa96:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800fa98:	4604      	mov	r4, r0
 800fa9a:	b92b      	cbnz	r3, 800faa8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800fa9c:	6803      	ldr	r3, [r0, #0]
 800fa9e:	4611      	mov	r1, r2
 800faa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800faa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800faa6:	4718      	bx	r3
 800faa8:	b941      	cbnz	r1, 800fabc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800faaa:	6193      	str	r3, [r2, #24]
 800faac:	6282      	str	r2, [r0, #40]	; 0x28
 800faae:	6154      	str	r4, [r2, #20]
 800fab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fab4:	4770      	bx	lr
 800fab6:	4603      	mov	r3, r0
 800fab8:	2800      	cmp	r0, #0
 800faba:	d0f9      	beq.n	800fab0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800fabc:	4299      	cmp	r1, r3
 800fabe:	6998      	ldr	r0, [r3, #24]
 800fac0:	d1f9      	bne.n	800fab6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800fac2:	6190      	str	r0, [r2, #24]
 800fac4:	618a      	str	r2, [r1, #24]
 800fac6:	e7f2      	b.n	800faae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800fac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800fac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800facc:	461f      	mov	r7, r3
 800face:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800fad2:	460d      	mov	r5, r1
 800fad4:	4616      	mov	r6, r2
 800fad6:	b103      	cbz	r3, 800fada <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800fad8:	6038      	str	r0, [r7, #0]
 800fada:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fadc:	b314      	cbz	r4, 800fb24 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800fade:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fae2:	b1eb      	cbz	r3, 800fb20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fae4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fae8:	428d      	cmp	r5, r1
 800faea:	db19      	blt.n	800fb20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800faec:	b289      	uxth	r1, r1
 800faee:	8923      	ldrh	r3, [r4, #8]
 800faf0:	440b      	add	r3, r1
 800faf2:	b21b      	sxth	r3, r3
 800faf4:	429d      	cmp	r5, r3
 800faf6:	da13      	bge.n	800fb20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800faf8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800fafc:	4296      	cmp	r6, r2
 800fafe:	db0f      	blt.n	800fb20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fb00:	b292      	uxth	r2, r2
 800fb02:	8963      	ldrh	r3, [r4, #10]
 800fb04:	4413      	add	r3, r2
 800fb06:	b21b      	sxth	r3, r3
 800fb08:	429e      	cmp	r6, r3
 800fb0a:	da09      	bge.n	800fb20 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fb0c:	6823      	ldr	r3, [r4, #0]
 800fb0e:	1ab2      	subs	r2, r6, r2
 800fb10:	1a69      	subs	r1, r5, r1
 800fb12:	4620      	mov	r0, r4
 800fb14:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 800fb18:	b212      	sxth	r2, r2
 800fb1a:	463b      	mov	r3, r7
 800fb1c:	b209      	sxth	r1, r1
 800fb1e:	47c0      	blx	r8
 800fb20:	69a4      	ldr	r4, [r4, #24]
 800fb22:	e7db      	b.n	800fadc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800fb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	4c6d      	ldr	r4, [pc, #436]	; (800fce4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800fb2e:	b0a1      	sub	sp, #132	; 0x84
 800fb30:	4606      	mov	r6, r0
 800fb32:	6824      	ldr	r4, [r4, #0]
 800fb34:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 800fb36:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 800fb3a:	2400      	movs	r4, #0
 800fb3c:	9303      	str	r3, [sp, #12]
 800fb3e:	802c      	strh	r4, [r5, #0]
 800fb40:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800fb42:	802c      	strh	r4, [r5, #0]
 800fb44:	601c      	str	r4, [r3, #0]
 800fb46:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800fb4a:	f7ff ffbd 	bl	800fac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fb4e:	f1b9 0f03 	cmp.w	r9, #3
 800fb52:	f340 80c1 	ble.w	800fcd8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800fb56:	4631      	mov	r1, r6
 800fb58:	a80c      	add	r0, sp, #48	; 0x30
 800fb5a:	f004 fa1d 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fb5e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 800fb62:	9306      	str	r3, [sp, #24]
 800fb64:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 800fb68:	9307      	str	r3, [sp, #28]
 800fb6a:	9b03      	ldr	r3, [sp, #12]
 800fb6c:	f8d3 a000 	ldr.w	sl, [r3]
 800fb70:	f1ba 0f00 	cmp.w	sl, #0
 800fb74:	f000 80b3 	beq.w	800fcde <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800fb78:	4651      	mov	r1, sl
 800fb7a:	a810      	add	r0, sp, #64	; 0x40
 800fb7c:	f004 fa0c 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fb80:	2002      	movs	r0, #2
 800fb82:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 800fb86:	9b01      	ldr	r3, [sp, #4]
 800fb88:	9a06      	ldr	r2, [sp, #24]
 800fb8a:	fb91 f1f0 	sdiv	r1, r1, r0
 800fb8e:	189d      	adds	r5, r3, r2
 800fb90:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 800fb94:	9a07      	ldr	r2, [sp, #28]
 800fb96:	4419      	add	r1, r3
 800fb98:	9b02      	ldr	r3, [sp, #8]
 800fb9a:	4413      	add	r3, r2
 800fb9c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 800fba0:	1a6d      	subs	r5, r5, r1
 800fba2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 800fba6:	fb92 f2f0 	sdiv	r2, r2, r0
 800fbaa:	440a      	add	r2, r1
 800fbac:	1a9b      	subs	r3, r3, r2
 800fbae:	435b      	muls	r3, r3
 800fbb0:	fb05 3505 	mla	r5, r5, r5, r3
 800fbb4:	4f4c      	ldr	r7, [pc, #304]	; (800fce8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800fbb6:	ac10      	add	r4, sp, #64	; 0x40
 800fbb8:	f1b9 0f0c 	cmp.w	r9, #12
 800fbbc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fbbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fbc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbc4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fbc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fbc8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fbcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fbd0:	f04f 0303 	mov.w	r3, #3
 800fbd4:	bfd8      	it	le
 800fbd6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800fbda:	f04f 0400 	mov.w	r4, #0
 800fbde:	f8cd 9000 	str.w	r9, [sp]
 800fbe2:	bfcc      	ite	gt
 800fbe4:	4698      	movgt	r8, r3
 800fbe6:	fb92 f8f3 	sdivle	r8, r2, r3
 800fbea:	1c63      	adds	r3, r4, #1
 800fbec:	aa10      	add	r2, sp, #64	; 0x40
 800fbee:	f004 0401 	and.w	r4, r4, #1
 800fbf2:	f04f 0b00 	mov.w	fp, #0
 800fbf6:	9308      	str	r3, [sp, #32]
 800fbf8:	9b00      	ldr	r3, [sp, #0]
 800fbfa:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800fbfe:	fb93 f3f8 	sdiv	r3, r3, r8
 800fc02:	3404      	adds	r4, #4
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	9304      	str	r3, [sp, #16]
 800fc08:	9a04      	ldr	r2, [sp, #16]
 800fc0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fc0e:	fb13 f302 	smulbb	r3, r3, r2
 800fc12:	9a01      	ldr	r2, [sp, #4]
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	1899      	adds	r1, r3, r2
 800fc18:	9305      	str	r3, [sp, #20]
 800fc1a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fc1e:	b209      	sxth	r1, r1
 800fc20:	4299      	cmp	r1, r3
 800fc22:	db4d      	blt.n	800fcc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fc24:	8932      	ldrh	r2, [r6, #8]
 800fc26:	4413      	add	r3, r2
 800fc28:	b21b      	sxth	r3, r3
 800fc2a:	4299      	cmp	r1, r3
 800fc2c:	da48      	bge.n	800fcc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fc2e:	9b04      	ldr	r3, [sp, #16]
 800fc30:	6827      	ldr	r7, [r4, #0]
 800fc32:	fb17 f703 	smulbb	r7, r7, r3
 800fc36:	9b02      	ldr	r3, [sp, #8]
 800fc38:	b2bf      	uxth	r7, r7
 800fc3a:	18fa      	adds	r2, r7, r3
 800fc3c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fc40:	b212      	sxth	r2, r2
 800fc42:	429a      	cmp	r2, r3
 800fc44:	db3c      	blt.n	800fcc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fc46:	8970      	ldrh	r0, [r6, #10]
 800fc48:	4403      	add	r3, r0
 800fc4a:	b21b      	sxth	r3, r3
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	da37      	bge.n	800fcc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fc50:	2300      	movs	r3, #0
 800fc52:	4630      	mov	r0, r6
 800fc54:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc56:	ab0b      	add	r3, sp, #44	; 0x2c
 800fc58:	f7ff ff36 	bl	800fac8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fc5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fc5e:	b37a      	cbz	r2, 800fcc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fc60:	4552      	cmp	r2, sl
 800fc62:	d02d      	beq.n	800fcc0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fc64:	4611      	mov	r1, r2
 800fc66:	a80e      	add	r0, sp, #56	; 0x38
 800fc68:	9209      	str	r2, [sp, #36]	; 0x24
 800fc6a:	f004 f995 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fc6e:	f04f 0e02 	mov.w	lr, #2
 800fc72:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 800fc76:	9a06      	ldr	r2, [sp, #24]
 800fc78:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 800fc7c:	9b01      	ldr	r3, [sp, #4]
 800fc7e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 800fc82:	4413      	add	r3, r2
 800fc84:	9a07      	ldr	r2, [sp, #28]
 800fc86:	fb91 f1fe 	sdiv	r1, r1, lr
 800fc8a:	fb9c fcfe 	sdiv	ip, ip, lr
 800fc8e:	4401      	add	r1, r0
 800fc90:	1a58      	subs	r0, r3, r1
 800fc92:	9b02      	ldr	r3, [sp, #8]
 800fc94:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 800fc98:	4413      	add	r3, r2
 800fc9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc9c:	448c      	add	ip, r1
 800fc9e:	eba3 030c 	sub.w	r3, r3, ip
 800fca2:	435b      	muls	r3, r3
 800fca4:	fb00 3300 	mla	r3, r0, r0, r3
 800fca8:	42ab      	cmp	r3, r5
 800fcaa:	d208      	bcs.n	800fcbe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800fcac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fcae:	461d      	mov	r5, r3
 800fcb0:	9803      	ldr	r0, [sp, #12]
 800fcb2:	6001      	str	r1, [r0, #0]
 800fcb4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800fcb6:	9805      	ldr	r0, [sp, #20]
 800fcb8:	8008      	strh	r0, [r1, #0]
 800fcba:	992b      	ldr	r1, [sp, #172]	; 0xac
 800fcbc:	800f      	strh	r7, [r1, #0]
 800fcbe:	4692      	mov	sl, r2
 800fcc0:	f10b 0b01 	add.w	fp, fp, #1
 800fcc4:	3408      	adds	r4, #8
 800fcc6:	f1bb 0f04 	cmp.w	fp, #4
 800fcca:	d19d      	bne.n	800fc08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800fccc:	9b00      	ldr	r3, [sp, #0]
 800fcce:	9c08      	ldr	r4, [sp, #32]
 800fcd0:	444b      	add	r3, r9
 800fcd2:	4544      	cmp	r4, r8
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	d188      	bne.n	800fbea <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800fcd8:	b021      	add	sp, #132	; 0x84
 800fcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcde:	f04f 35ff 	mov.w	r5, #4294967295
 800fce2:	e767      	b.n	800fbb4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800fce4:	240074bc 	.word	0x240074bc
 800fce8:	0801ed74 	.word	0x0801ed74

0800fcec <_ZN8touchgfx4RectaNERKS0_>:
 800fcec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fcf0:	f9b1 7000 	ldrsh.w	r7, [r1]
 800fcf4:	888c      	ldrh	r4, [r1, #4]
 800fcf6:	f9b0 9000 	ldrsh.w	r9, [r0]
 800fcfa:	443c      	add	r4, r7
 800fcfc:	b2a4      	uxth	r4, r4
 800fcfe:	fa0f f884 	sxth.w	r8, r4
 800fd02:	45c1      	cmp	r9, r8
 800fd04:	da2f      	bge.n	800fd66 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fd06:	8882      	ldrh	r2, [r0, #4]
 800fd08:	444a      	add	r2, r9
 800fd0a:	b292      	uxth	r2, r2
 800fd0c:	fa0f fe82 	sxth.w	lr, r2
 800fd10:	4577      	cmp	r7, lr
 800fd12:	da28      	bge.n	800fd66 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fd14:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800fd18:	88cb      	ldrh	r3, [r1, #6]
 800fd1a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800fd1e:	442b      	add	r3, r5
 800fd20:	b21b      	sxth	r3, r3
 800fd22:	429e      	cmp	r6, r3
 800fd24:	da1f      	bge.n	800fd66 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fd26:	88c3      	ldrh	r3, [r0, #6]
 800fd28:	4433      	add	r3, r6
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	fa0f fc83 	sxth.w	ip, r3
 800fd30:	4565      	cmp	r5, ip
 800fd32:	da18      	bge.n	800fd66 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800fd34:	454f      	cmp	r7, r9
 800fd36:	bfb8      	it	lt
 800fd38:	464f      	movlt	r7, r9
 800fd3a:	42b5      	cmp	r5, r6
 800fd3c:	bfb8      	it	lt
 800fd3e:	4635      	movlt	r5, r6
 800fd40:	45f0      	cmp	r8, lr
 800fd42:	bfd8      	it	le
 800fd44:	4622      	movle	r2, r4
 800fd46:	1bd2      	subs	r2, r2, r7
 800fd48:	8082      	strh	r2, [r0, #4]
 800fd4a:	884a      	ldrh	r2, [r1, #2]
 800fd4c:	88c9      	ldrh	r1, [r1, #6]
 800fd4e:	8007      	strh	r7, [r0, #0]
 800fd50:	440a      	add	r2, r1
 800fd52:	8045      	strh	r5, [r0, #2]
 800fd54:	b292      	uxth	r2, r2
 800fd56:	b211      	sxth	r1, r2
 800fd58:	458c      	cmp	ip, r1
 800fd5a:	bfa8      	it	ge
 800fd5c:	4613      	movge	r3, r2
 800fd5e:	1b5b      	subs	r3, r3, r5
 800fd60:	80c3      	strh	r3, [r0, #6]
 800fd62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd66:	2300      	movs	r3, #0
 800fd68:	8003      	strh	r3, [r0, #0]
 800fd6a:	8043      	strh	r3, [r0, #2]
 800fd6c:	8083      	strh	r3, [r0, #4]
 800fd6e:	80c3      	strh	r3, [r0, #6]
 800fd70:	e7f7      	b.n	800fd62 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800fd72:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	dd06      	ble.n	800fd88 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800fd7a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	bfcc      	ite	gt
 800fd82:	2000      	movgt	r0, #0
 800fd84:	2001      	movle	r0, #1
 800fd86:	4770      	bx	lr
 800fd88:	2001      	movs	r0, #1
 800fd8a:	4770      	bx	lr

0800fd8c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800fd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd90:	2300      	movs	r3, #0
 800fd92:	4604      	mov	r4, r0
 800fd94:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 800fd96:	8003      	strh	r3, [r0, #0]
 800fd98:	8043      	strh	r3, [r0, #2]
 800fd9a:	8083      	strh	r3, [r0, #4]
 800fd9c:	80c3      	strh	r3, [r0, #6]
 800fd9e:	2d00      	cmp	r5, #0
 800fda0:	d040      	beq.n	800fe24 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800fda2:	1d28      	adds	r0, r5, #4
 800fda4:	f7ff ffe5 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fda8:	b988      	cbnz	r0, 800fdce <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800fdaa:	4620      	mov	r0, r4
 800fdac:	f7ff ffe1 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fdb0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800fdb4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800fdb8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800fdbc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800fdc0:	b138      	cbz	r0, 800fdd2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800fdc2:	8022      	strh	r2, [r4, #0]
 800fdc4:	8063      	strh	r3, [r4, #2]
 800fdc6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800fdca:	f8a4 c006 	strh.w	ip, [r4, #6]
 800fdce:	69ad      	ldr	r5, [r5, #24]
 800fdd0:	e7e5      	b.n	800fd9e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800fdd2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800fdd6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800fdda:	4290      	cmp	r0, r2
 800fddc:	4607      	mov	r7, r0
 800fdde:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800fde2:	460e      	mov	r6, r1
 800fde4:	bfa8      	it	ge
 800fde6:	4617      	movge	r7, r2
 800fde8:	4299      	cmp	r1, r3
 800fdea:	4472      	add	r2, lr
 800fdec:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800fdf0:	bfa8      	it	ge
 800fdf2:	461e      	movge	r6, r3
 800fdf4:	4440      	add	r0, r8
 800fdf6:	4471      	add	r1, lr
 800fdf8:	4463      	add	r3, ip
 800fdfa:	b200      	sxth	r0, r0
 800fdfc:	8027      	strh	r7, [r4, #0]
 800fdfe:	b212      	sxth	r2, r2
 800fe00:	8066      	strh	r6, [r4, #2]
 800fe02:	b209      	sxth	r1, r1
 800fe04:	b21b      	sxth	r3, r3
 800fe06:	4290      	cmp	r0, r2
 800fe08:	bfac      	ite	ge
 800fe0a:	ebc7 0200 	rsbge	r2, r7, r0
 800fe0e:	ebc7 0202 	rsblt	r2, r7, r2
 800fe12:	4299      	cmp	r1, r3
 800fe14:	bfac      	ite	ge
 800fe16:	ebc6 0301 	rsbge	r3, r6, r1
 800fe1a:	ebc6 0303 	rsblt	r3, r6, r3
 800fe1e:	80a2      	strh	r2, [r4, #4]
 800fe20:	80e3      	strh	r3, [r4, #6]
 800fe22:	e7d4      	b.n	800fdce <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800fe24:	4620      	mov	r0, r4
 800fe26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe2a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800fe2a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fe2e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800fe32:	b383      	cbz	r3, 800fe96 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800fe34:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800fe36:	b374      	cbz	r4, 800fe96 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800fe38:	f9b1 5000 	ldrsh.w	r5, [r1]
 800fe3c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800fe40:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800fe44:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800fe48:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800fe4c:	b303      	cbz	r3, 800fe90 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800fe4e:	4668      	mov	r0, sp
 800fe50:	1d21      	adds	r1, r4, #4
 800fe52:	f8ad 5000 	strh.w	r5, [sp]
 800fe56:	f8ad 6002 	strh.w	r6, [sp, #2]
 800fe5a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800fe5e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800fe62:	f7ff ff43 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 800fe66:	4668      	mov	r0, sp
 800fe68:	f7ff ff83 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fe6c:	b980      	cbnz	r0, 800fe90 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800fe6e:	f8bd 3000 	ldrh.w	r3, [sp]
 800fe72:	4669      	mov	r1, sp
 800fe74:	88a2      	ldrh	r2, [r4, #4]
 800fe76:	4620      	mov	r0, r4
 800fe78:	1a9b      	subs	r3, r3, r2
 800fe7a:	88e2      	ldrh	r2, [r4, #6]
 800fe7c:	f8ad 3000 	strh.w	r3, [sp]
 800fe80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fe84:	1a9b      	subs	r3, r3, r2
 800fe86:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fe8a:	6823      	ldr	r3, [r4, #0]
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	4798      	blx	r3
 800fe90:	69a4      	ldr	r4, [r4, #24]
 800fe92:	2c00      	cmp	r4, #0
 800fe94:	d1d8      	bne.n	800fe48 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800fe96:	b002      	add	sp, #8
 800fe98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fe9c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800fe9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe9e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800fea2:	460d      	mov	r5, r1
 800fea4:	4616      	mov	r6, r2
 800fea6:	b323      	cbz	r3, 800fef2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800fea8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800feaa:	b314      	cbz	r4, 800fef2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800feac:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800feb0:	b1eb      	cbz	r3, 800feee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800feb2:	6828      	ldr	r0, [r5, #0]
 800feb4:	466b      	mov	r3, sp
 800feb6:	6869      	ldr	r1, [r5, #4]
 800feb8:	c303      	stmia	r3!, {r0, r1}
 800feba:	4668      	mov	r0, sp
 800febc:	1d21      	adds	r1, r4, #4
 800febe:	f7ff ff15 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 800fec2:	4668      	mov	r0, sp
 800fec4:	f7ff ff55 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 800fec8:	b988      	cbnz	r0, 800feee <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800feca:	f8bd 3000 	ldrh.w	r3, [sp]
 800fece:	4669      	mov	r1, sp
 800fed0:	88a2      	ldrh	r2, [r4, #4]
 800fed2:	4620      	mov	r0, r4
 800fed4:	1a9b      	subs	r3, r3, r2
 800fed6:	88e2      	ldrh	r2, [r4, #6]
 800fed8:	f8ad 3000 	strh.w	r3, [sp]
 800fedc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800fee0:	1a9b      	subs	r3, r3, r2
 800fee2:	4632      	mov	r2, r6
 800fee4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800fee8:	6823      	ldr	r3, [r4, #0]
 800feea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800feec:	4798      	blx	r3
 800feee:	69a4      	ldr	r4, [r4, #24]
 800fef0:	e7db      	b.n	800feaa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800fef2:	b002      	add	sp, #8
 800fef4:	bd70      	pop	{r4, r5, r6, pc}

0800fef6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800fef6:	6803      	ldr	r3, [r0, #0]
 800fef8:	b513      	push	{r0, r1, r4, lr}
 800fefa:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 800fefe:	2300      	movs	r3, #0
 800ff00:	e9cd 3300 	strd	r3, r3, [sp]
 800ff04:	466b      	mov	r3, sp
 800ff06:	47a0      	blx	r4
 800ff08:	b002      	add	sp, #8
 800ff0a:	bd10      	pop	{r4, pc}

0800ff0c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ff12:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ff16:	4770      	bx	lr

0800ff18 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800ff18:	2301      	movs	r3, #1
 800ff1a:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 800ff1e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 800ff22:	4770      	bx	lr

0800ff24 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800ff24:	6843      	ldr	r3, [r0, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	725a      	strb	r2, [r3, #9]
 800ff2a:	6840      	ldr	r0, [r0, #4]
 800ff2c:	6803      	ldr	r3, [r0, #0]
 800ff2e:	691b      	ldr	r3, [r3, #16]
 800ff30:	4718      	bx	r3

0800ff32 <_ZN8touchgfx3HAL8flushDMAEv>:
 800ff32:	6840      	ldr	r0, [r0, #4]
 800ff34:	6803      	ldr	r3, [r0, #0]
 800ff36:	689b      	ldr	r3, [r3, #8]
 800ff38:	4718      	bx	r3

0800ff3a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800ff3a:	b530      	push	{r4, r5, lr}
 800ff3c:	b08b      	sub	sp, #44	; 0x2c
 800ff3e:	6804      	ldr	r4, [r0, #0]
 800ff40:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 800ff44:	9509      	str	r5, [sp, #36]	; 0x24
 800ff46:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 800ff4a:	9508      	str	r5, [sp, #32]
 800ff4c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 800ff50:	9507      	str	r5, [sp, #28]
 800ff52:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 800ff56:	9506      	str	r5, [sp, #24]
 800ff58:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 800ff5c:	9505      	str	r5, [sp, #20]
 800ff5e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 800ff62:	9504      	str	r5, [sp, #16]
 800ff64:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 800ff68:	9503      	str	r5, [sp, #12]
 800ff6a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 800ff6e:	9502      	str	r5, [sp, #8]
 800ff70:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 800ff74:	e9cd 3500 	strd	r3, r5, [sp]
 800ff78:	4613      	mov	r3, r2
 800ff7a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	47a0      	blx	r4
 800ff80:	b00b      	add	sp, #44	; 0x2c
 800ff82:	bd30      	pop	{r4, r5, pc}

0800ff84 <_ZN8touchgfx3HAL10beginFrameEv>:
 800ff84:	4b04      	ldr	r3, [pc, #16]	; (800ff98 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800ff86:	781b      	ldrb	r3, [r3, #0]
 800ff88:	b123      	cbz	r3, 800ff94 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800ff8a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 800ff8e:	f080 0001 	eor.w	r0, r0, #1
 800ff92:	4770      	bx	lr
 800ff94:	2001      	movs	r0, #1
 800ff96:	4770      	bx	lr
 800ff98:	240074ba 	.word	0x240074ba

0800ff9c <_ZN8touchgfx3HAL8endFrameEv>:
 800ff9c:	b510      	push	{r4, lr}
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	6840      	ldr	r0, [r0, #4]
 800ffa2:	6803      	ldr	r3, [r0, #0]
 800ffa4:	689b      	ldr	r3, [r3, #8]
 800ffa6:	4798      	blx	r3
 800ffa8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 800ffac:	b113      	cbz	r3, 800ffb4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 800ffb4:	bd10      	pop	{r4, pc}

0800ffb6 <_ZN8touchgfx3HAL10initializeEv>:
 800ffb6:	b510      	push	{r4, lr}
 800ffb8:	4604      	mov	r4, r0
 800ffba:	f7f1 fd5b 	bl	8001a74 <_ZN8touchgfx10OSWrappers10initializeEv>
 800ffbe:	6860      	ldr	r0, [r4, #4]
 800ffc0:	6803      	ldr	r3, [r0, #0]
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	4798      	blx	r3
 800ffc6:	68e0      	ldr	r0, [r4, #12]
 800ffc8:	6803      	ldr	r3, [r0, #0]
 800ffca:	689b      	ldr	r3, [r3, #8]
 800ffcc:	4798      	blx	r3
 800ffce:	6823      	ldr	r3, [r4, #0]
 800ffd0:	4620      	mov	r0, r4
 800ffd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ffd8:	4718      	bx	r3
	...

0800ffdc <_ZN8touchgfx3HAL4tickEv>:
 800ffdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ffde:	6803      	ldr	r3, [r0, #0]
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	4d5b      	ldr	r5, [pc, #364]	; (8010150 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800ffe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ffe8:	4798      	blx	r3
 800ffea:	2800      	cmp	r0, #0
 800ffec:	f000 8095 	beq.w	801011a <_ZN8touchgfx3HAL4tickEv+0x13e>
 800fff0:	2001      	movs	r0, #1
 800fff2:	2600      	movs	r6, #0
 800fff4:	f7f1 fb5e 	bl	80016b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fff8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 800fffc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8010000:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010004:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8010008:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801000c:	b133      	cbz	r3, 801001c <_ZN8touchgfx3HAL4tickEv+0x40>
 801000e:	6823      	ldr	r3, [r4, #0]
 8010010:	4620      	mov	r0, r4
 8010012:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8010016:	4798      	blx	r3
 8010018:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801001c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8010020:	2601      	movs	r6, #1
 8010022:	6862      	ldr	r2, [r4, #4]
 8010024:	f083 0301 	eor.w	r3, r3, #1
 8010028:	702e      	strb	r6, [r5, #0]
 801002a:	7253      	strb	r3, [r2, #9]
 801002c:	f002 ff80 	bl	8012f30 <_ZN8touchgfx11Application11getInstanceEv>
 8010030:	6803      	ldr	r3, [r0, #0]
 8010032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010034:	4798      	blx	r3
 8010036:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801003a:	b90b      	cbnz	r3, 8010040 <_ZN8touchgfx3HAL4tickEv+0x64>
 801003c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8010040:	f002 ff76 	bl	8012f30 <_ZN8touchgfx11Application11getInstanceEv>
 8010044:	6803      	ldr	r3, [r0, #0]
 8010046:	695b      	ldr	r3, [r3, #20]
 8010048:	4798      	blx	r3
 801004a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801004c:	6803      	ldr	r3, [r0, #0]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	4798      	blx	r3
 8010052:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8010056:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801005a:	3b01      	subs	r3, #1
 801005c:	b2db      	uxtb	r3, r3
 801005e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8010062:	b10a      	cbz	r2, 8010068 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010064:	2b00      	cmp	r3, #0
 8010066:	d1eb      	bne.n	8010040 <_ZN8touchgfx3HAL4tickEv+0x64>
 8010068:	4a3a      	ldr	r2, [pc, #232]	; (8010154 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801006a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801006e:	7813      	ldrb	r3, [r2, #0]
 8010070:	3301      	adds	r3, #1
 8010072:	b25b      	sxtb	r3, r3
 8010074:	4299      	cmp	r1, r3
 8010076:	7013      	strb	r3, [r2, #0]
 8010078:	dc10      	bgt.n	801009c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801007a:	2300      	movs	r3, #0
 801007c:	68e0      	ldr	r0, [r4, #12]
 801007e:	a902      	add	r1, sp, #8
 8010080:	7013      	strb	r3, [r2, #0]
 8010082:	aa03      	add	r2, sp, #12
 8010084:	6803      	ldr	r3, [r0, #0]
 8010086:	68db      	ldr	r3, [r3, #12]
 8010088:	4798      	blx	r3
 801008a:	6823      	ldr	r3, [r4, #0]
 801008c:	2800      	cmp	r0, #0
 801008e:	d050      	beq.n	8010132 <_ZN8touchgfx3HAL4tickEv+0x156>
 8010090:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010094:	4620      	mov	r0, r4
 8010096:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801009a:	4798      	blx	r3
 801009c:	2300      	movs	r3, #0
 801009e:	6960      	ldr	r0, [r4, #20]
 80100a0:	f88d 3007 	strb.w	r3, [sp, #7]
 80100a4:	b158      	cbz	r0, 80100be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80100a6:	6803      	ldr	r3, [r0, #0]
 80100a8:	f10d 0107 	add.w	r1, sp, #7
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	4798      	blx	r3
 80100b0:	b128      	cbz	r0, 80100be <_ZN8touchgfx3HAL4tickEv+0xe2>
 80100b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80100b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80100b8:	6803      	ldr	r3, [r0, #0]
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	4798      	blx	r3
 80100be:	f104 001c 	add.w	r0, r4, #28
 80100c2:	f00d fbbd 	bl	801d840 <_ZN8touchgfx8Gestures4tickEv>
 80100c6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80100ca:	b30b      	cbz	r3, 8010110 <_ZN8touchgfx3HAL4tickEv+0x134>
 80100cc:	6920      	ldr	r0, [r4, #16]
 80100ce:	6803      	ldr	r3, [r0, #0]
 80100d0:	691b      	ldr	r3, [r3, #16]
 80100d2:	4798      	blx	r3
 80100d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80100d6:	4606      	mov	r6, r0
 80100d8:	b903      	cbnz	r3, 80100dc <_ZN8touchgfx3HAL4tickEv+0x100>
 80100da:	6720      	str	r0, [r4, #112]	; 0x70
 80100dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80100de:	4a1e      	ldr	r2, [pc, #120]	; (8010158 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80100e0:	1af3      	subs	r3, r6, r3
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d914      	bls.n	8010110 <_ZN8touchgfx3HAL4tickEv+0x134>
 80100e6:	6920      	ldr	r0, [r4, #16]
 80100e8:	6803      	ldr	r3, [r0, #0]
 80100ea:	699b      	ldr	r3, [r3, #24]
 80100ec:	4798      	blx	r3
 80100ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80100f0:	2264      	movs	r2, #100	; 0x64
 80100f2:	1af3      	subs	r3, r6, r3
 80100f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80100f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80100fc:	2800      	cmp	r0, #0
 80100fe:	dc1d      	bgt.n	801013c <_ZN8touchgfx3HAL4tickEv+0x160>
 8010100:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8010104:	6920      	ldr	r0, [r4, #16]
 8010106:	2100      	movs	r1, #0
 8010108:	6803      	ldr	r3, [r0, #0]
 801010a:	69db      	ldr	r3, [r3, #28]
 801010c:	4798      	blx	r3
 801010e:	6726      	str	r6, [r4, #112]	; 0x70
 8010110:	f002 ff0e 	bl	8012f30 <_ZN8touchgfx11Application11getInstanceEv>
 8010114:	6803      	ldr	r3, [r0, #0]
 8010116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010118:	4798      	blx	r3
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	4620      	mov	r0, r4
 801011e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010122:	4798      	blx	r3
 8010124:	2001      	movs	r0, #1
 8010126:	f7f1 faf7 	bl	8001718 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801012a:	2300      	movs	r3, #0
 801012c:	702b      	strb	r3, [r5, #0]
 801012e:	b004      	add	sp, #16
 8010130:	bd70      	pop	{r4, r5, r6, pc}
 8010132:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010136:	4620      	mov	r0, r4
 8010138:	4798      	blx	r3
 801013a:	e7af      	b.n	801009c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801013c:	2863      	cmp	r0, #99	; 0x63
 801013e:	bfcb      	itete	gt
 8010140:	2300      	movgt	r3, #0
 8010142:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8010146:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801014a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801014e:	e7d9      	b.n	8010104 <_ZN8touchgfx3HAL4tickEv+0x128>
 8010150:	240074c0 	.word	0x240074c0
 8010154:	240074c1 	.word	0x240074c1
 8010158:	05f5e100 	.word	0x05f5e100

0801015c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801015c:	f7f1 bcba 	b.w	8001ad4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010160 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010160:	6581      	str	r1, [r0, #88]	; 0x58
 8010162:	301c      	adds	r0, #28
 8010164:	f00d bb6a 	b.w	801d83c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08010168 <_ZN8touchgfx3HAL5touchEll>:
 8010168:	b530      	push	{r4, r5, lr}
 801016a:	b087      	sub	sp, #28
 801016c:	4604      	mov	r4, r0
 801016e:	a804      	add	r0, sp, #16
 8010170:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8010174:	f002 fc58 	bl	8012a28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8010178:	9b04      	ldr	r3, [sp, #16]
 801017a:	a906      	add	r1, sp, #24
 801017c:	a803      	add	r0, sp, #12
 801017e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010182:	9b05      	ldr	r3, [sp, #20]
 8010184:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8010188:	f002 fca0 	bl	8012acc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801018c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8010190:	f104 001c 	add.w	r0, r4, #28
 8010194:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8010198:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801019c:	b189      	cbz	r1, 80101c2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801019e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	4613      	mov	r3, r2
 80101a6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80101aa:	462a      	mov	r2, r5
 80101ac:	f00d fb56 	bl	801d85c <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80101b0:	b128      	cbz	r0, 80101be <_ZN8touchgfx3HAL5touchEll+0x56>
 80101b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80101b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80101b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80101bc:	6623      	str	r3, [r4, #96]	; 0x60
 80101be:	b007      	add	sp, #28
 80101c0:	bd30      	pop	{r4, r5, pc}
 80101c2:	f00d fb8b 	bl	801d8dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80101c6:	2301      	movs	r3, #1
 80101c8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80101cc:	e7f1      	b.n	80101b2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080101ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80101ce:	b510      	push	{r4, lr}
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d046      	beq.n	8010262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80101d4:	ea81 0002 	eor.w	r0, r1, r2
 80101d8:	07c4      	lsls	r4, r0, #31
 80101da:	d508      	bpl.n	80101ee <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80101dc:	440b      	add	r3, r1
 80101de:	3a01      	subs	r2, #1
 80101e0:	428b      	cmp	r3, r1
 80101e2:	d93e      	bls.n	8010262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80101e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80101e8:	f801 0b01 	strb.w	r0, [r1], #1
 80101ec:	e7f8      	b.n	80101e0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80101ee:	07d0      	lsls	r0, r2, #31
 80101f0:	bf42      	ittt	mi
 80101f2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80101f6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80101fa:	f801 0b01 	strbmi.w	r0, [r1], #1
 80101fe:	2b01      	cmp	r3, #1
 8010200:	d911      	bls.n	8010226 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010202:	ea81 0402 	eor.w	r4, r1, r2
 8010206:	4610      	mov	r0, r2
 8010208:	07a4      	lsls	r4, r4, #30
 801020a:	d022      	beq.n	8010252 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801020c:	f023 0401 	bic.w	r4, r3, #1
 8010210:	440c      	add	r4, r1
 8010212:	428c      	cmp	r4, r1
 8010214:	4602      	mov	r2, r0
 8010216:	d904      	bls.n	8010222 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010218:	8812      	ldrh	r2, [r2, #0]
 801021a:	3002      	adds	r0, #2
 801021c:	f821 2b02 	strh.w	r2, [r1], #2
 8010220:	e7f7      	b.n	8010212 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8010222:	f003 0301 	and.w	r3, r3, #1
 8010226:	f023 0003 	bic.w	r0, r3, #3
 801022a:	4408      	add	r0, r1
 801022c:	4288      	cmp	r0, r1
 801022e:	4614      	mov	r4, r2
 8010230:	d904      	bls.n	801023c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8010232:	6824      	ldr	r4, [r4, #0]
 8010234:	3204      	adds	r2, #4
 8010236:	f841 4b04 	str.w	r4, [r1], #4
 801023a:	e7f7      	b.n	801022c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801023c:	f003 0303 	and.w	r3, r3, #3
 8010240:	3a01      	subs	r2, #1
 8010242:	440b      	add	r3, r1
 8010244:	428b      	cmp	r3, r1
 8010246:	d90c      	bls.n	8010262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010248:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801024c:	f801 0b01 	strb.w	r0, [r1], #1
 8010250:	e7f8      	b.n	8010244 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8010252:	0790      	lsls	r0, r2, #30
 8010254:	d0e7      	beq.n	8010226 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010256:	f832 0b02 	ldrh.w	r0, [r2], #2
 801025a:	3b02      	subs	r3, #2
 801025c:	f821 0b02 	strh.w	r0, [r1], #2
 8010260:	e7e1      	b.n	8010226 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8010262:	2001      	movs	r0, #1
 8010264:	bd10      	pop	{r4, pc}

08010266 <_ZN8touchgfx3HAL7noTouchEv>:
 8010266:	b510      	push	{r4, lr}
 8010268:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801026c:	4604      	mov	r4, r0
 801026e:	b153      	cbz	r3, 8010286 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8010270:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8010274:	2101      	movs	r1, #1
 8010276:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 801027a:	301c      	adds	r0, #28
 801027c:	f00d fb2e 	bl	801d8dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8010280:	2300      	movs	r3, #0
 8010282:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8010286:	bd10      	pop	{r4, pc}

08010288 <_ZN8touchgfx3HAL3lcdEv>:
 8010288:	4b04      	ldr	r3, [pc, #16]	; (801029c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8010290:	b10a      	cbz	r2, 8010296 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8010292:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8010294:	b900      	cbnz	r0, 8010298 <_ZN8touchgfx3HAL3lcdEv+0x10>
 8010296:	6898      	ldr	r0, [r3, #8]
 8010298:	4770      	bx	lr
 801029a:	bf00      	nop
 801029c:	240074bc 	.word	0x240074bc

080102a0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80102a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102a4:	b085      	sub	sp, #20
 80102a6:	4604      	mov	r4, r0
 80102a8:	2000      	movs	r0, #0
 80102aa:	4699      	mov	r9, r3
 80102ac:	ad04      	add	r5, sp, #16
 80102ae:	460f      	mov	r7, r1
 80102b0:	4690      	mov	r8, r2
 80102b2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80102b6:	69a0      	ldr	r0, [r4, #24]
 80102b8:	6806      	ldr	r6, [r0, #0]
 80102ba:	9501      	str	r5, [sp, #4]
 80102bc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80102c0:	9500      	str	r5, [sp, #0]
 80102c2:	6835      	ldr	r5, [r6, #0]
 80102c4:	47a8      	blx	r5
 80102c6:	4d10      	ldr	r5, [pc, #64]	; (8010308 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80102c8:	4606      	mov	r6, r0
 80102ca:	f8a5 9000 	strh.w	r9, [r5]
 80102ce:	f7ff ffdb 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 80102d2:	6803      	ldr	r3, [r0, #0]
 80102d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d6:	4798      	blx	r3
 80102d8:	b128      	cbz	r0, 80102e6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80102da:	2801      	cmp	r0, #1
 80102dc:	d00b      	beq.n	80102f6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80102de:	4630      	mov	r0, r6
 80102e0:	b005      	add	sp, #20
 80102e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102e6:	882b      	ldrh	r3, [r5, #0]
 80102e8:	fb08 7203 	mla	r2, r8, r3, r7
 80102ec:	9b03      	ldr	r3, [sp, #12]
 80102ee:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80102f2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80102f4:	e7f3      	b.n	80102de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80102f6:	882a      	ldrh	r2, [r5, #0]
 80102f8:	9b03      	ldr	r3, [sp, #12]
 80102fa:	fb08 7202 	mla	r2, r8, r2, r7
 80102fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010302:	1a9a      	subs	r2, r3, r2
 8010304:	63e2      	str	r2, [r4, #60]	; 0x3c
 8010306:	e7ea      	b.n	80102de <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010308:	240074b6 	.word	0x240074b6

0801030c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801030e:	b08b      	sub	sp, #44	; 0x2c
 8010310:	4617      	mov	r7, r2
 8010312:	4604      	mov	r4, r0
 8010314:	460e      	mov	r6, r1
 8010316:	461d      	mov	r5, r3
 8010318:	f7ff ffb6 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 801031c:	6803      	ldr	r3, [r0, #0]
 801031e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010320:	4798      	blx	r3
 8010322:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8010326:	9007      	str	r0, [sp, #28]
 8010328:	4631      	mov	r1, r6
 801032a:	6822      	ldr	r2, [r4, #0]
 801032c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010330:	4b0c      	ldr	r3, [pc, #48]	; (8010364 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010332:	4620      	mov	r0, r4
 8010334:	881b      	ldrh	r3, [r3, #0]
 8010336:	9306      	str	r3, [sp, #24]
 8010338:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801033c:	9305      	str	r3, [sp, #20]
 801033e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8010342:	9304      	str	r3, [sp, #16]
 8010344:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010348:	9303      	str	r3, [sp, #12]
 801034a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801034e:	9302      	str	r3, [sp, #8]
 8010350:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010354:	e9cd 5300 	strd	r5, r3, [sp]
 8010358:	463b      	mov	r3, r7
 801035a:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 801035c:	2200      	movs	r2, #0
 801035e:	47a8      	blx	r5
 8010360:	b00b      	add	sp, #44	; 0x2c
 8010362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010364:	240074b6 	.word	0x240074b6

08010368 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801036c:	4698      	mov	r8, r3
 801036e:	6803      	ldr	r3, [r0, #0]
 8010370:	b08b      	sub	sp, #44	; 0x2c
 8010372:	4617      	mov	r7, r2
 8010374:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8010376:	460e      	mov	r6, r1
 8010378:	4b13      	ldr	r3, [pc, #76]	; (80103c8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801037a:	4604      	mov	r4, r0
 801037c:	f8b3 9000 	ldrh.w	r9, [r3]
 8010380:	f7ff ff82 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 8010384:	6803      	ldr	r3, [r0, #0]
 8010386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010388:	4798      	blx	r3
 801038a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801038e:	2200      	movs	r2, #0
 8010390:	4631      	mov	r1, r6
 8010392:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010396:	2302      	movs	r3, #2
 8010398:	4620      	mov	r0, r4
 801039a:	e9cd 9306 	strd	r9, r3, [sp, #24]
 801039e:	2301      	movs	r3, #1
 80103a0:	9305      	str	r3, [sp, #20]
 80103a2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80103a6:	9304      	str	r3, [sp, #16]
 80103a8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80103ac:	9303      	str	r3, [sp, #12]
 80103ae:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80103b2:	9302      	str	r3, [sp, #8]
 80103b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80103b8:	e9cd 8300 	strd	r8, r3, [sp]
 80103bc:	463b      	mov	r3, r7
 80103be:	47a8      	blx	r5
 80103c0:	b00b      	add	sp, #44	; 0x2c
 80103c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103c6:	bf00      	nop
 80103c8:	240074b6 	.word	0x240074b6

080103cc <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80103cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103d0:	4698      	mov	r8, r3
 80103d2:	6803      	ldr	r3, [r0, #0]
 80103d4:	b087      	sub	sp, #28
 80103d6:	460e      	mov	r6, r1
 80103d8:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 80103da:	4617      	mov	r7, r2
 80103dc:	4b0f      	ldr	r3, [pc, #60]	; (801041c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80103de:	4604      	mov	r4, r0
 80103e0:	f8b3 9000 	ldrh.w	r9, [r3]
 80103e4:	f7ff ff50 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 80103e8:	6803      	ldr	r3, [r0, #0]
 80103ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103ec:	4798      	blx	r3
 80103ee:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80103f2:	463a      	mov	r2, r7
 80103f4:	4631      	mov	r1, r6
 80103f6:	f8cd 900c 	str.w	r9, [sp, #12]
 80103fa:	e9cd 0304 	strd	r0, r3, [sp, #16]
 80103fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8010402:	4620      	mov	r0, r4
 8010404:	9302      	str	r3, [sp, #8]
 8010406:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801040a:	9301      	str	r3, [sp, #4]
 801040c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8010410:	9300      	str	r3, [sp, #0]
 8010412:	4643      	mov	r3, r8
 8010414:	47a8      	blx	r5
 8010416:	b007      	add	sp, #28
 8010418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801041c:	240074b6 	.word	0x240074b6

08010420 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8010420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010424:	4604      	mov	r4, r0
 8010426:	b08f      	sub	sp, #60	; 0x3c
 8010428:	4610      	mov	r0, r2
 801042a:	460d      	mov	r5, r1
 801042c:	4691      	mov	r9, r2
 801042e:	461e      	mov	r6, r3
 8010430:	f005 f8e8 	bl	8015604 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010434:	2800      	cmp	r0, #0
 8010436:	f000 809d 	beq.w	8010574 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801043a:	6823      	ldr	r3, [r4, #0]
 801043c:	4620      	mov	r0, r4
 801043e:	f8df b198 	ldr.w	fp, [pc, #408]	; 80105d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8010442:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8010446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010448:	4798      	blx	r3
 801044a:	6823      	ldr	r3, [r4, #0]
 801044c:	4620      	mov	r0, r4
 801044e:	f8df a18c 	ldr.w	sl, [pc, #396]	; 80105dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8010452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010454:	4798      	blx	r3
 8010456:	f8bb 3000 	ldrh.w	r3, [fp]
 801045a:	4f5c      	ldr	r7, [pc, #368]	; (80105cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801045c:	9301      	str	r3, [sp, #4]
 801045e:	f8ba 3000 	ldrh.w	r3, [sl]
 8010462:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8010466:	4640      	mov	r0, r8
 8010468:	9302      	str	r3, [sp, #8]
 801046a:	883b      	ldrh	r3, [r7, #0]
 801046c:	9303      	str	r3, [sp, #12]
 801046e:	4b58      	ldr	r3, [pc, #352]	; (80105d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010470:	881a      	ldrh	r2, [r3, #0]
 8010472:	9305      	str	r3, [sp, #20]
 8010474:	9204      	str	r2, [sp, #16]
 8010476:	f005 fa09 	bl	801588c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801047a:	8038      	strh	r0, [r7, #0]
 801047c:	4640      	mov	r0, r8
 801047e:	f005 fa39 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010482:	9b05      	ldr	r3, [sp, #20]
 8010484:	b280      	uxth	r0, r0
 8010486:	8018      	strh	r0, [r3, #0]
 8010488:	4b52      	ldr	r3, [pc, #328]	; (80105d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d174      	bne.n	801057a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8010490:	883b      	ldrh	r3, [r7, #0]
 8010492:	f8aa 0000 	strh.w	r0, [sl]
 8010496:	f8ab 3000 	strh.w	r3, [fp]
 801049a:	4648      	mov	r0, r9
 801049c:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80104a0:	f005 f8b0 	bl	8015604 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80104a4:	2200      	movs	r2, #0
 80104a6:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80104aa:	4611      	mov	r1, r2
 80104ac:	4628      	mov	r0, r5
 80104ae:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80104b2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80104b6:	f7f2 fae0 	bl	8002a7a <_ZN8touchgfx8Drawable5setXYEss>
 80104ba:	2301      	movs	r3, #1
 80104bc:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80104c0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80104c4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	dd5c      	ble.n	8010586 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80104cc:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	dd58      	ble.n	8010586 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80104d4:	462a      	mov	r2, r5
 80104d6:	ab0a      	add	r3, sp, #40	; 0x28
 80104d8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80104dc:	6851      	ldr	r1, [r2, #4]
 80104de:	c303      	stmia	r3!, {r0, r1}
 80104e0:	4631      	mov	r1, r6
 80104e2:	a80a      	add	r0, sp, #40	; 0x28
 80104e4:	f7ff fc02 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 80104e8:	4b38      	ldr	r3, [pc, #224]	; (80105cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 80104ea:	2100      	movs	r1, #0
 80104ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80104f0:	4b37      	ldr	r3, [pc, #220]	; (80105d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 80104f2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 80104f6:	aa0a      	add	r2, sp, #40	; 0x28
 80104f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80104fc:	910c      	str	r1, [sp, #48]	; 0x30
 80104fe:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8010502:	ab08      	add	r3, sp, #32
 8010504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010508:	e883 0003 	stmia.w	r3, {r0, r1}
 801050c:	4618      	mov	r0, r3
 801050e:	a90c      	add	r1, sp, #48	; 0x30
 8010510:	f7ff fbec 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 8010514:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010516:	2b00      	cmp	r3, #0
 8010518:	d13c      	bne.n	8010594 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801051a:	2000      	movs	r0, #0
 801051c:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8010520:	2600      	movs	r6, #0
 8010522:	696b      	ldr	r3, [r5, #20]
 8010524:	a908      	add	r1, sp, #32
 8010526:	682a      	ldr	r2, [r5, #0]
 8010528:	4628      	mov	r0, r5
 801052a:	9305      	str	r3, [sp, #20]
 801052c:	616e      	str	r6, [r5, #20]
 801052e:	6892      	ldr	r2, [r2, #8]
 8010530:	4790      	blx	r2
 8010532:	9b05      	ldr	r3, [sp, #20]
 8010534:	4652      	mov	r2, sl
 8010536:	4649      	mov	r1, r9
 8010538:	616b      	str	r3, [r5, #20]
 801053a:	4628      	mov	r0, r5
 801053c:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8010540:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8010544:	f7f2 fa99 	bl	8002a7a <_ZN8touchgfx8Drawable5setXYEss>
 8010548:	9a01      	ldr	r2, [sp, #4]
 801054a:	4b23      	ldr	r3, [pc, #140]	; (80105d8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801054c:	4620      	mov	r0, r4
 801054e:	801a      	strh	r2, [r3, #0]
 8010550:	9a02      	ldr	r2, [sp, #8]
 8010552:	4b22      	ldr	r3, [pc, #136]	; (80105dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8010554:	801a      	strh	r2, [r3, #0]
 8010556:	9a03      	ldr	r2, [sp, #12]
 8010558:	4b1c      	ldr	r3, [pc, #112]	; (80105cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801055a:	801a      	strh	r2, [r3, #0]
 801055c:	4b1c      	ldr	r3, [pc, #112]	; (80105d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801055e:	9a04      	ldr	r2, [sp, #16]
 8010560:	801a      	strh	r2, [r3, #0]
 8010562:	6823      	ldr	r3, [r4, #0]
 8010564:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8010568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801056a:	4798      	blx	r3
 801056c:	6823      	ldr	r3, [r4, #0]
 801056e:	4620      	mov	r0, r4
 8010570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010572:	4798      	blx	r3
 8010574:	b00f      	add	sp, #60	; 0x3c
 8010576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057a:	883b      	ldrh	r3, [r7, #0]
 801057c:	f8ab 0000 	strh.w	r0, [fp]
 8010580:	f8aa 3000 	strh.w	r3, [sl]
 8010584:	e789      	b.n	801049a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8010586:	462a      	mov	r2, r5
 8010588:	ab0a      	add	r3, sp, #40	; 0x28
 801058a:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801058e:	6851      	ldr	r1, [r2, #4]
 8010590:	c303      	stmia	r3!, {r0, r1}
 8010592:	e7a9      	b.n	80104e8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8010594:	a807      	add	r0, sp, #28
 8010596:	f005 fa65 	bl	8015a64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801059a:	4606      	mov	r6, r0
 801059c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 801059e:	6803      	ldr	r3, [r0, #0]
 80105a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105a2:	4798      	blx	r3
 80105a4:	4286      	cmp	r6, r0
 80105a6:	d1b8      	bne.n	801051a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80105a8:	f7ff fe6e 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 80105ac:	6803      	ldr	r3, [r0, #0]
 80105ae:	4606      	mov	r6, r0
 80105b0:	a807      	add	r0, sp, #28
 80105b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b4:	9305      	str	r3, [sp, #20]
 80105b6:	f005 fa55 	bl	8015a64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80105ba:	9b05      	ldr	r3, [sp, #20]
 80105bc:	4601      	mov	r1, r0
 80105be:	4630      	mov	r0, r6
 80105c0:	4798      	blx	r3
 80105c2:	f080 0001 	eor.w	r0, r0, #1
 80105c6:	b2c0      	uxtb	r0, r0
 80105c8:	e7a8      	b.n	801051c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80105ca:	bf00      	nop
 80105cc:	240074b0 	.word	0x240074b0
 80105d0:	240074b2 	.word	0x240074b2
 80105d4:	240074b4 	.word	0x240074b4
 80105d8:	240074b6 	.word	0x240074b6
 80105dc:	240074b8 	.word	0x240074b8

080105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 80105e0:	4b07      	ldr	r3, [pc, #28]	; (8010600 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 80105e2:	b510      	push	{r4, lr}
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	4604      	mov	r4, r0
 80105e8:	b13b      	cbz	r3, 80105fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80105ea:	6803      	ldr	r3, [r0, #0]
 80105ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105ee:	4798      	blx	r3
 80105f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80105f2:	4283      	cmp	r3, r0
 80105f4:	d101      	bne.n	80105fa <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 80105f6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80105f8:	bd10      	pop	{r4, pc}
 80105fa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80105fc:	e7fc      	b.n	80105f8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 80105fe:	bf00      	nop
 8010600:	240074ba 	.word	0x240074ba

08010604 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010608:	461d      	mov	r5, r3
 801060a:	b08a      	sub	sp, #40	; 0x28
 801060c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010610:	4690      	mov	r8, r2
 8010612:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8010616:	2400      	movs	r4, #0
 8010618:	4607      	mov	r7, r0
 801061a:	fb06 8505 	mla	r5, r6, r5, r8
 801061e:	9404      	str	r4, [sp, #16]
 8010620:	f88d 4020 	strb.w	r4, [sp, #32]
 8010624:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010628:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801062c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010630:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010634:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010638:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801063c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010640:	f7ff ffce 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010644:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801064e:	a901      	add	r1, sp, #4
 8010650:	9505      	str	r5, [sp, #20]
 8010652:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010656:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 801065a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 801065e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8010662:	6803      	ldr	r3, [r0, #0]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	4798      	blx	r3
 8010668:	b00a      	add	sp, #40	; 0x28
 801066a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801066e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801066e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010672:	b08b      	sub	sp, #44	; 0x2c
 8010674:	2400      	movs	r4, #0
 8010676:	4691      	mov	r9, r2
 8010678:	461d      	mov	r5, r3
 801067a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801067e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010682:	4688      	mov	r8, r1
 8010684:	4607      	mov	r7, r0
 8010686:	9404      	str	r4, [sp, #16]
 8010688:	fb06 9505 	mla	r5, r6, r5, r9
 801068c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010690:	f7ff ffa6 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010694:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010698:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f8ad 3018 	strh.w	r3, [sp, #24]
 80106a2:	a901      	add	r1, sp, #4
 80106a4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80106a8:	9505      	str	r5, [sp, #20]
 80106aa:	f8ad 301a 	strh.w	r3, [sp, #26]
 80106ae:	f8ad 401c 	strh.w	r4, [sp, #28]
 80106b2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80106b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80106ba:	f8ad 4020 	strh.w	r4, [sp, #32]
 80106be:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80106c2:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80106c6:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80106ca:	6803      	ldr	r3, [r0, #0]
 80106cc:	685b      	ldr	r3, [r3, #4]
 80106ce:	4798      	blx	r3
 80106d0:	b00b      	add	sp, #44	; 0x2c
 80106d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080106d8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80106d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106dc:	b08a      	sub	sp, #40	; 0x28
 80106de:	4698      	mov	r8, r3
 80106e0:	2300      	movs	r3, #0
 80106e2:	4606      	mov	r6, r0
 80106e4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80106e8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 80106ec:	2d0b      	cmp	r5, #11
 80106ee:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 80106f2:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 80106f6:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 80106fa:	9304      	str	r3, [sp, #16]
 80106fc:	d137      	bne.n	801076e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 80106fe:	2380      	movs	r3, #128	; 0x80
 8010700:	f88d 0020 	strb.w	r0, [sp, #32]
 8010704:	4630      	mov	r0, r6
 8010706:	9203      	str	r2, [sp, #12]
 8010708:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801070c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8010710:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010714:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010718:	f8ad 301a 	strh.w	r3, [sp, #26]
 801071c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8010720:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010724:	f7ff ff5c 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010728:	2c0b      	cmp	r4, #11
 801072a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801072e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010732:	bf94      	ite	ls
 8010734:	4b19      	ldrls	r3, [pc, #100]	; (801079c <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010736:	2100      	movhi	r1, #0
 8010738:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 801073c:	bf98      	it	ls
 801073e:	5d19      	ldrbls	r1, [r3, r4]
 8010740:	fb02 8307 	mla	r3, r2, r7, r8
 8010744:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8010748:	10c9      	asrs	r1, r1, #3
 801074a:	fb01 0003 	mla	r0, r1, r3, r0
 801074e:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8010752:	a901      	add	r1, sp, #4
 8010754:	9005      	str	r0, [sp, #20]
 8010756:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 801075a:	2300      	movs	r3, #0
 801075c:	6870      	ldr	r0, [r6, #4]
 801075e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010762:	6803      	ldr	r3, [r0, #0]
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	4798      	blx	r3
 8010768:	b00a      	add	sp, #40	; 0x28
 801076a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076e:	2d02      	cmp	r5, #2
 8010770:	d109      	bne.n	8010786 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010772:	28ff      	cmp	r0, #255	; 0xff
 8010774:	d105      	bne.n	8010782 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010776:	f1bc 0f00 	cmp.w	ip, #0
 801077a:	bf14      	ite	ne
 801077c:	2340      	movne	r3, #64	; 0x40
 801077e:	2320      	moveq	r3, #32
 8010780:	e7be      	b.n	8010700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010782:	2340      	movs	r3, #64	; 0x40
 8010784:	e7bc      	b.n	8010700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010786:	28ff      	cmp	r0, #255	; 0xff
 8010788:	d105      	bne.n	8010796 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 801078a:	f1bc 0f00 	cmp.w	ip, #0
 801078e:	bf14      	ite	ne
 8010790:	2304      	movne	r3, #4
 8010792:	2301      	moveq	r3, #1
 8010794:	e7b4      	b.n	8010700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8010796:	2304      	movs	r3, #4
 8010798:	e7b2      	b.n	8010700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801079a:	bf00      	nop
 801079c:	080209f0 	.word	0x080209f0

080107a0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80107a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107a4:	b08b      	sub	sp, #44	; 0x2c
 80107a6:	461d      	mov	r5, r3
 80107a8:	2400      	movs	r4, #0
 80107aa:	4688      	mov	r8, r1
 80107ac:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80107b0:	4693      	mov	fp, r2
 80107b2:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80107b6:	4607      	mov	r7, r0
 80107b8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80107bc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80107c0:	9404      	str	r4, [sp, #16]
 80107c2:	bf14      	ite	ne
 80107c4:	2308      	movne	r3, #8
 80107c6:	2302      	moveq	r3, #2
 80107c8:	fb05 b50a 	mla	r5, r5, sl, fp
 80107cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107d0:	f7ff ff06 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80107d4:	2e0b      	cmp	r6, #11
 80107d6:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80107da:	a901      	add	r1, sp, #4
 80107dc:	bf98      	it	ls
 80107de:	4b13      	ldrls	r3, [pc, #76]	; (801082c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80107e0:	f8ad a01e 	strh.w	sl, [sp, #30]
 80107e4:	bf98      	it	ls
 80107e6:	5d9c      	ldrbls	r4, [r3, r6]
 80107e8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80107ec:	10e4      	asrs	r4, r4, #3
 80107ee:	f8cd 8010 	str.w	r8, [sp, #16]
 80107f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80107f6:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80107fa:	fb04 0405 	mla	r4, r4, r5, r0
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010804:	2300      	movs	r3, #0
 8010806:	9405      	str	r4, [sp, #20]
 8010808:	f8ad 301c 	strh.w	r3, [sp, #28]
 801080c:	f88d 9020 	strb.w	r9, [sp, #32]
 8010810:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8010814:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010818:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 801081c:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8010820:	6803      	ldr	r3, [r0, #0]
 8010822:	685b      	ldr	r3, [r3, #4]
 8010824:	4798      	blx	r3
 8010826:	b00b      	add	sp, #44	; 0x2c
 8010828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082c:	080209f0 	.word	0x080209f0

08010830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010834:	461e      	mov	r6, r3
 8010836:	4b0a      	ldr	r3, [pc, #40]	; (8010860 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010838:	460f      	mov	r7, r1
 801083a:	4690      	mov	r8, r2
 801083c:	881d      	ldrh	r5, [r3, #0]
 801083e:	f7ff fd23 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 8010842:	6803      	ldr	r3, [r0, #0]
 8010844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010846:	4798      	blx	r3
 8010848:	280b      	cmp	r0, #11
 801084a:	bf96      	itet	ls
 801084c:	4b05      	ldrls	r3, [pc, #20]	; (8010864 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801084e:	2400      	movhi	r4, #0
 8010850:	5c1c      	ldrbls	r4, [r3, r0]
 8010852:	fb08 7005 	mla	r0, r8, r5, r7
 8010856:	10e4      	asrs	r4, r4, #3
 8010858:	fb04 6000 	mla	r0, r4, r0, r6
 801085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010860:	240074b6 	.word	0x240074b6
 8010864:	080209f0 	.word	0x080209f0

08010868 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801086a:	b08b      	sub	sp, #44	; 0x2c
 801086c:	461f      	mov	r7, r3
 801086e:	4604      	mov	r4, r0
 8010870:	4616      	mov	r6, r2
 8010872:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8010876:	2500      	movs	r5, #0
 8010878:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801087c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8010880:	9504      	str	r5, [sp, #16]
 8010882:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010886:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801088a:	f8ad 301a 	strh.w	r3, [sp, #26]
 801088e:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8010892:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010896:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 801089a:	f88d 3020 	strb.w	r3, [sp, #32]
 801089e:	f7ff fe9f 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80108a2:	463a      	mov	r2, r7
 80108a4:	4631      	mov	r1, r6
 80108a6:	4603      	mov	r3, r0
 80108a8:	4620      	mov	r0, r4
 80108aa:	f7ff ffc1 	bl	8010830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80108ae:	4b0e      	ldr	r3, [pc, #56]	; (80108e8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80108b0:	9005      	str	r0, [sp, #20]
 80108b2:	881b      	ldrh	r3, [r3, #0]
 80108b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80108b8:	f7ff fce6 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 80108bc:	6803      	ldr	r3, [r0, #0]
 80108be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108c0:	4798      	blx	r3
 80108c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80108c4:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80108c8:	a901      	add	r1, sp, #4
 80108ca:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80108ce:	9304      	str	r3, [sp, #16]
 80108d0:	6860      	ldr	r0, [r4, #4]
 80108d2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80108d6:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80108da:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80108de:	6803      	ldr	r3, [r0, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	4798      	blx	r3
 80108e4:	b00b      	add	sp, #44	; 0x2c
 80108e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80108e8:	240074b6 	.word	0x240074b6

080108ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80108ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ee:	b08d      	sub	sp, #52	; 0x34
 80108f0:	2501      	movs	r5, #1
 80108f2:	4604      	mov	r4, r0
 80108f4:	466b      	mov	r3, sp
 80108f6:	9503      	str	r5, [sp, #12]
 80108f8:	e883 0006 	stmia.w	r3, {r1, r2}
 80108fc:	2300      	movs	r3, #0
 80108fe:	f8bd 6000 	ldrh.w	r6, [sp]
 8010902:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010906:	9306      	str	r3, [sp, #24]
 8010908:	6803      	ldr	r3, [r0, #0]
 801090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801090c:	4798      	blx	r3
 801090e:	463a      	mov	r2, r7
 8010910:	4631      	mov	r1, r6
 8010912:	4603      	mov	r3, r0
 8010914:	4620      	mov	r0, r4
 8010916:	f7ff ff8b 	bl	8010830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801091a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801091c:	9004      	str	r0, [sp, #16]
 801091e:	9307      	str	r3, [sp, #28]
 8010920:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010924:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010928:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801092c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8010930:	4b0e      	ldr	r3, [pc, #56]	; (801096c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010932:	881b      	ldrh	r3, [r3, #0]
 8010934:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8010938:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801093c:	f7ff fca4 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 8010940:	6803      	ldr	r3, [r0, #0]
 8010942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010944:	4798      	blx	r3
 8010946:	23ff      	movs	r3, #255	; 0xff
 8010948:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801094c:	a903      	add	r1, sp, #12
 801094e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8010952:	6860      	ldr	r0, [r4, #4]
 8010954:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8010958:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 801095c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8010960:	6803      	ldr	r3, [r0, #0]
 8010962:	685b      	ldr	r3, [r3, #4]
 8010964:	4798      	blx	r3
 8010966:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010968:	b00d      	add	sp, #52	; 0x34
 801096a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801096c:	240074b6 	.word	0x240074b6

08010970 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010974:	b08c      	sub	sp, #48	; 0x30
 8010976:	461e      	mov	r6, r3
 8010978:	2300      	movs	r3, #0
 801097a:	4604      	mov	r4, r0
 801097c:	466d      	mov	r5, sp
 801097e:	9306      	str	r3, [sp, #24]
 8010980:	6803      	ldr	r3, [r0, #0]
 8010982:	e885 0006 	stmia.w	r5, {r1, r2}
 8010986:	2501      	movs	r5, #1
 8010988:	f8bd 7000 	ldrh.w	r7, [sp]
 801098c:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010990:	9503      	str	r5, [sp, #12]
 8010992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010994:	4798      	blx	r3
 8010996:	4642      	mov	r2, r8
 8010998:	4639      	mov	r1, r7
 801099a:	4603      	mov	r3, r0
 801099c:	4620      	mov	r0, r4
 801099e:	f7ff ff47 	bl	8010830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80109a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80109a6:	9004      	str	r0, [sp, #16]
 80109a8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80109ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80109b0:	9607      	str	r6, [sp, #28]
 80109b2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80109b6:	4b10      	ldr	r3, [pc, #64]	; (80109f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80109be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80109c0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80109c4:	f7ff fc60 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 80109c8:	6803      	ldr	r3, [r0, #0]
 80109ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109cc:	4798      	blx	r3
 80109ce:	23ff      	movs	r3, #255	; 0xff
 80109d0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80109d4:	a903      	add	r1, sp, #12
 80109d6:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80109da:	6860      	ldr	r0, [r4, #4]
 80109dc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80109e0:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80109e4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80109e8:	6803      	ldr	r3, [r0, #0]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	4798      	blx	r3
 80109ee:	4630      	mov	r0, r6
 80109f0:	b00c      	add	sp, #48	; 0x30
 80109f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f6:	bf00      	nop
 80109f8:	240074b6 	.word	0x240074b6

080109fc <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80109fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109fe:	b085      	sub	sp, #20
 8010a00:	4605      	mov	r5, r0
 8010a02:	ac02      	add	r4, sp, #8
 8010a04:	e884 0006 	stmia.w	r4, {r1, r2}
 8010a08:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010a0c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010a10:	f7ff fde6 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010a14:	4631      	mov	r1, r6
 8010a16:	4603      	mov	r3, r0
 8010a18:	463a      	mov	r2, r7
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	f7ff ff08 	bl	8010830 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010a20:	4a05      	ldr	r2, [pc, #20]	; (8010a38 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010a22:	682b      	ldr	r3, [r5, #0]
 8010a24:	8812      	ldrh	r2, [r2, #0]
 8010a26:	9200      	str	r2, [sp, #0]
 8010a28:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010a32:	47b0      	blx	r6
 8010a34:	b005      	add	sp, #20
 8010a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a38:	240074b6 	.word	0x240074b6

08010a3c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010a3c:	b570      	push	{r4, r5, r6, lr}
 8010a3e:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8010a42:	4604      	mov	r4, r0
 8010a44:	b19b      	cbz	r3, 8010a6e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010a46:	2002      	movs	r0, #2
 8010a48:	f7f0 fe98 	bl	800177c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	4620      	mov	r0, r4
 8010a50:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8010a54:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8010a58:	6823      	ldr	r3, [r4, #0]
 8010a5a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8010a5e:	f7ff fdbf 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010a62:	4601      	mov	r1, r0
 8010a64:	4620      	mov	r0, r4
 8010a66:	462b      	mov	r3, r5
 8010a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a6c:	4718      	bx	r3
 8010a6e:	bd70      	pop	{r4, r5, r6, pc}

08010a70 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8010a70:	b570      	push	{r4, r5, r6, lr}
 8010a72:	4605      	mov	r5, r0
 8010a74:	460c      	mov	r4, r1
 8010a76:	2003      	movs	r0, #3
 8010a78:	b149      	cbz	r1, 8010a8e <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8010a7a:	f7f0 fe1b 	bl	80016b4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010a7e:	6928      	ldr	r0, [r5, #16]
 8010a80:	b168      	cbz	r0, 8010a9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010a82:	6803      	ldr	r3, [r0, #0]
 8010a84:	2101      	movs	r1, #1
 8010a86:	695b      	ldr	r3, [r3, #20]
 8010a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010a8c:	4718      	bx	r3
 8010a8e:	f7f0 fe43 	bl	8001718 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010a92:	6928      	ldr	r0, [r5, #16]
 8010a94:	b118      	cbz	r0, 8010a9e <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010a96:	6803      	ldr	r3, [r0, #0]
 8010a98:	4621      	mov	r1, r4
 8010a9a:	695b      	ldr	r3, [r3, #20]
 8010a9c:	e7f4      	b.n	8010a88 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}

08010aa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010aa0:	b538      	push	{r3, r4, r5, lr}
 8010aa2:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8010aa6:	4604      	mov	r4, r0
 8010aa8:	460d      	mov	r5, r1
 8010aaa:	428b      	cmp	r3, r1
 8010aac:	d006      	beq.n	8010abc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010aae:	6803      	ldr	r3, [r0, #0]
 8010ab0:	b929      	cbnz	r1, 8010abe <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010ab2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8010ab6:	4798      	blx	r3
 8010ab8:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8010abc:	bd38      	pop	{r3, r4, r5, pc}
 8010abe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8010ac2:	e7f8      	b.n	8010ab6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010ac4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010ac4:	4b0d      	ldr	r3, [pc, #52]	; (8010afc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010ac6:	b510      	push	{r4, lr}
 8010ac8:	781b      	ldrb	r3, [r3, #0]
 8010aca:	4604      	mov	r4, r0
 8010acc:	b95b      	cbnz	r3, 8010ae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010ace:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8010ad2:	2b02      	cmp	r3, #2
 8010ad4:	d007      	beq.n	8010ae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010ad6:	6840      	ldr	r0, [r0, #4]
 8010ad8:	f000 f912 	bl	8010d00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010adc:	b118      	cbz	r0, 8010ae6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010ade:	6862      	ldr	r2, [r4, #4]
 8010ae0:	7a53      	ldrb	r3, [r2, #9]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d0fc      	beq.n	8010ae0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010ae6:	f7f0 ffed 	bl	8001ac4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010aea:	4620      	mov	r0, r4
 8010aec:	2100      	movs	r1, #0
 8010aee:	f7ff ffd7 	bl	8010aa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010af2:	4620      	mov	r0, r4
 8010af4:	f7ff fd74 	bl	80105e0 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010af8:	bd10      	pop	{r4, pc}
 8010afa:	bf00      	nop
 8010afc:	240074ba 	.word	0x240074ba

08010b00 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010b00:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010b04:	1a13      	subs	r3, r2, r0
 8010b06:	4258      	negs	r0, r3
 8010b08:	4158      	adcs	r0, r3
 8010b0a:	4770      	bx	lr

08010b0c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010b0c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010b10:	1a9b      	subs	r3, r3, r2
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	bfdc      	itt	le
 8010b16:	6882      	ldrle	r2, [r0, #8]
 8010b18:	189b      	addle	r3, r3, r2
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	bfcc      	ite	gt
 8010b1e:	2000      	movgt	r0, #0
 8010b20:	2001      	movle	r0, #1
 8010b22:	4770      	bx	lr

08010b24 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8010b24:	6902      	ldr	r2, [r0, #16]
 8010b26:	6843      	ldr	r3, [r0, #4]
 8010b28:	2024      	movs	r0, #36	; 0x24
 8010b2a:	fb00 3002 	mla	r0, r0, r2, r3
 8010b2e:	4770      	bx	lr

08010b30 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010b30:	6803      	ldr	r3, [r0, #0]
 8010b32:	691b      	ldr	r3, [r3, #16]
 8010b34:	4718      	bx	r3

08010b36 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010b36:	2301      	movs	r3, #1
 8010b38:	b570      	push	{r4, r5, r6, lr}
 8010b3a:	7203      	strb	r3, [r0, #8]
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	6840      	ldr	r0, [r0, #4]
 8010b40:	6803      	ldr	r3, [r0, #0]
 8010b42:	699b      	ldr	r3, [r3, #24]
 8010b44:	4798      	blx	r3
 8010b46:	6803      	ldr	r3, [r0, #0]
 8010b48:	4605      	mov	r5, r0
 8010b4a:	2b40      	cmp	r3, #64	; 0x40
 8010b4c:	d00c      	beq.n	8010b68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010b4e:	d810      	bhi.n	8010b72 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010b50:	2b04      	cmp	r3, #4
 8010b52:	d01d      	beq.n	8010b90 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8010b54:	d804      	bhi.n	8010b60 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8010b56:	2b01      	cmp	r3, #1
 8010b58:	d006      	beq.n	8010b68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010b5a:	2b02      	cmp	r3, #2
 8010b5c:	d02c      	beq.n	8010bb8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8010b5e:	bd70      	pop	{r4, r5, r6, pc}
 8010b60:	2b08      	cmp	r3, #8
 8010b62:	d01d      	beq.n	8010ba0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8010b64:	2b20      	cmp	r3, #32
 8010b66:	d1fa      	bne.n	8010b5e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8010b68:	6823      	ldr	r3, [r4, #0]
 8010b6a:	4620      	mov	r0, r4
 8010b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b6e:	4798      	blx	r3
 8010b70:	e013      	b.n	8010b9a <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b76:	d0f7      	beq.n	8010b68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010b78:	d804      	bhi.n	8010b84 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010b7a:	2b80      	cmp	r3, #128	; 0x80
 8010b7c:	d0f4      	beq.n	8010b68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010b82:	e7f0      	b.n	8010b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b88:	d0ee      	beq.n	8010b68 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010b8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b8e:	e7e5      	b.n	8010b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010b90:	6823      	ldr	r3, [r4, #0]
 8010b92:	7f01      	ldrb	r1, [r0, #28]
 8010b94:	4620      	mov	r0, r4
 8010b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b98:	4798      	blx	r3
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b9e:	e006      	b.n	8010bae <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010ba0:	6823      	ldr	r3, [r4, #0]
 8010ba2:	7f01      	ldrb	r1, [r0, #28]
 8010ba4:	4620      	mov	r0, r4
 8010ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba8:	4798      	blx	r3
 8010baa:	6823      	ldr	r3, [r4, #0]
 8010bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010bae:	4629      	mov	r1, r5
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bb6:	4718      	bx	r3
 8010bb8:	6823      	ldr	r3, [r4, #0]
 8010bba:	4620      	mov	r0, r4
 8010bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bbe:	4798      	blx	r3
 8010bc0:	e7f3      	b.n	8010baa <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08010bc2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010bc2:	4770      	bx	lr

08010bc4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010bc4:	4770      	bx	lr

08010bc6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8010bc6:	4770      	bx	lr

08010bc8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010bc8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8010bcc:	b510      	push	{r4, lr}
 8010bce:	1ad2      	subs	r2, r2, r3
 8010bd0:	2a00      	cmp	r2, #0
 8010bd2:	bfdc      	itt	le
 8010bd4:	6884      	ldrle	r4, [r0, #8]
 8010bd6:	1912      	addle	r2, r2, r4
 8010bd8:	2a01      	cmp	r2, #1
 8010bda:	dd16      	ble.n	8010c0a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8010bdc:	6842      	ldr	r2, [r0, #4]
 8010bde:	2424      	movs	r4, #36	; 0x24
 8010be0:	fb04 2303 	mla	r3, r4, r3, r2
 8010be4:	f101 0220 	add.w	r2, r1, #32
 8010be8:	f851 4b04 	ldr.w	r4, [r1], #4
 8010bec:	4291      	cmp	r1, r2
 8010bee:	f843 4b04 	str.w	r4, [r3], #4
 8010bf2:	d1f9      	bne.n	8010be8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8010bf4:	780a      	ldrb	r2, [r1, #0]
 8010bf6:	701a      	strb	r2, [r3, #0]
 8010bf8:	68c3      	ldr	r3, [r0, #12]
 8010bfa:	6882      	ldr	r2, [r0, #8]
 8010bfc:	f3bf 8f5b 	dmb	ish
 8010c00:	3301      	adds	r3, #1
 8010c02:	429a      	cmp	r2, r3
 8010c04:	bfd8      	it	le
 8010c06:	1a9b      	suble	r3, r3, r2
 8010c08:	60c3      	str	r3, [r0, #12]
 8010c0a:	bd10      	pop	{r4, pc}

08010c0c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8010c0c:	6903      	ldr	r3, [r0, #16]
 8010c0e:	6882      	ldr	r2, [r0, #8]
 8010c10:	f3bf 8f5b 	dmb	ish
 8010c14:	3301      	adds	r3, #1
 8010c16:	429a      	cmp	r2, r3
 8010c18:	bfd8      	it	le
 8010c1a:	1a9b      	suble	r3, r3, r2
 8010c1c:	6103      	str	r3, [r0, #16]
 8010c1e:	4770      	bx	lr

08010c20 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8010c20:	b570      	push	{r4, r5, r6, lr}
 8010c22:	4604      	mov	r4, r0
 8010c24:	460e      	mov	r6, r1
 8010c26:	6860      	ldr	r0, [r4, #4]
 8010c28:	6803      	ldr	r3, [r0, #0]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	4798      	blx	r3
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d1f9      	bne.n	8010c26 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8010c32:	4d0d      	ldr	r5, [pc, #52]	; (8010c68 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8010c34:	6828      	ldr	r0, [r5, #0]
 8010c36:	6803      	ldr	r3, [r0, #0]
 8010c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c3a:	4798      	blx	r3
 8010c3c:	f7f0 ff50 	bl	8001ae0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010c40:	6828      	ldr	r0, [r5, #0]
 8010c42:	2101      	movs	r1, #1
 8010c44:	f7ff ff2c 	bl	8010aa0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010c48:	6860      	ldr	r0, [r4, #4]
 8010c4a:	4631      	mov	r1, r6
 8010c4c:	6803      	ldr	r3, [r0, #0]
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	4798      	blx	r3
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	4620      	mov	r0, r4
 8010c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c58:	4798      	blx	r3
 8010c5a:	6828      	ldr	r0, [r5, #0]
 8010c5c:	6803      	ldr	r3, [r0, #0]
 8010c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c64:	4718      	bx	r3
 8010c66:	bf00      	nop
 8010c68:	240074bc 	.word	0x240074bc

08010c6c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010c6c:	b508      	push	{r3, lr}
 8010c6e:	f7f0 ff29 	bl	8001ac4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010c76:	f7f0 bf2d 	b.w	8001ad4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010c7a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010c7a:	b510      	push	{r4, lr}
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	2114      	movs	r1, #20
 8010c80:	f00c fe93 	bl	801d9aa <_ZdlPvj>
 8010c84:	4620      	mov	r0, r4
 8010c86:	bd10      	pop	{r4, pc}

08010c88 <_ZN8touchgfx13DMA_Interface5startEv>:
 8010c88:	b510      	push	{r4, lr}
 8010c8a:	4604      	mov	r4, r0
 8010c8c:	6840      	ldr	r0, [r0, #4]
 8010c8e:	6803      	ldr	r3, [r0, #0]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4798      	blx	r3
 8010c94:	b948      	cbnz	r0, 8010caa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010c96:	7a63      	ldrb	r3, [r4, #9]
 8010c98:	b13b      	cbz	r3, 8010caa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010c9a:	7a23      	ldrb	r3, [r4, #8]
 8010c9c:	b92b      	cbnz	r3, 8010caa <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8010c9e:	6823      	ldr	r3, [r4, #0]
 8010ca0:	4620      	mov	r0, r4
 8010ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ca8:	4718      	bx	r3
 8010caa:	bd10      	pop	{r4, pc}

08010cac <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010cac:	b570      	push	{r4, r5, r6, lr}
 8010cae:	4604      	mov	r4, r0
 8010cb0:	6840      	ldr	r0, [r0, #4]
 8010cb2:	6803      	ldr	r3, [r0, #0]
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	4798      	blx	r3
 8010cb8:	4605      	mov	r5, r0
 8010cba:	b930      	cbnz	r0, 8010cca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010cbc:	7a23      	ldrb	r3, [r4, #8]
 8010cbe:	b123      	cbz	r3, 8010cca <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010cc0:	6860      	ldr	r0, [r4, #4]
 8010cc2:	6803      	ldr	r3, [r0, #0]
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	4798      	blx	r3
 8010cc8:	7225      	strb	r5, [r4, #8]
 8010cca:	6860      	ldr	r0, [r4, #4]
 8010ccc:	6803      	ldr	r3, [r0, #0]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	4798      	blx	r3
 8010cd2:	b928      	cbnz	r0, 8010ce0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8010cd4:	6823      	ldr	r3, [r4, #0]
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cde:	4718      	bx	r3
 8010ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010ce4:	f7f0 bf04 	b.w	8001af0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08010ce8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8010ce8:	b510      	push	{r4, lr}
 8010cea:	6082      	str	r2, [r0, #8]
 8010cec:	2200      	movs	r2, #0
 8010cee:	4c03      	ldr	r4, [pc, #12]	; (8010cfc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8010cf0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010cf4:	e9c0 4100 	strd	r4, r1, [r0]
 8010cf8:	bd10      	pop	{r4, pc}
 8010cfa:	bf00      	nop
 8010cfc:	08020a04 	.word	0x08020a04

08010d00 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8010d00:	6840      	ldr	r0, [r0, #4]
 8010d02:	6803      	ldr	r3, [r0, #0]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4718      	bx	r3

08010d08 <_ZN8touchgfx8TextArea8setWidthEs>:
 8010d08:	b530      	push	{r4, r5, lr}
 8010d0a:	b085      	sub	sp, #20
 8010d0c:	6803      	ldr	r3, [r0, #0]
 8010d0e:	4604      	mov	r4, r0
 8010d10:	8101      	strh	r1, [r0, #8]
 8010d12:	466d      	mov	r5, sp
 8010d14:	4601      	mov	r1, r0
 8010d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d1a:	343c      	adds	r4, #60	; 0x3c
 8010d1c:	4628      	mov	r0, r5
 8010d1e:	4798      	blx	r3
 8010d20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010d24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010d28:	b005      	add	sp, #20
 8010d2a:	bd30      	pop	{r4, r5, pc}

08010d2c <_ZN8touchgfx8TextArea9setHeightEs>:
 8010d2c:	b530      	push	{r4, r5, lr}
 8010d2e:	b085      	sub	sp, #20
 8010d30:	6803      	ldr	r3, [r0, #0]
 8010d32:	4604      	mov	r4, r0
 8010d34:	8141      	strh	r1, [r0, #10]
 8010d36:	466d      	mov	r5, sp
 8010d38:	4601      	mov	r1, r0
 8010d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010d3e:	343c      	adds	r4, #60	; 0x3c
 8010d40:	4628      	mov	r0, r5
 8010d42:	4798      	blx	r3
 8010d44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010d48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010d4c:	b005      	add	sp, #20
 8010d4e:	bd30      	pop	{r4, r5, pc}

08010d50 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8010d50:	2200      	movs	r2, #0
 8010d52:	8002      	strh	r2, [r0, #0]
 8010d54:	8042      	strh	r2, [r0, #2]
 8010d56:	8082      	strh	r2, [r0, #4]
 8010d58:	80c2      	strh	r2, [r0, #6]
 8010d5a:	4770      	bx	lr

08010d5c <_ZN8touchgfx8TextArea8setAlphaEh>:
 8010d5c:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
 8010d60:	4770      	bx	lr
	...

08010d64 <_ZN8touchgfx8TextArea12setBaselineYEs>:
 8010d64:	b570      	push	{r4, r5, r6, lr}
 8010d66:	6803      	ldr	r3, [r0, #0]
 8010d68:	4604      	mov	r4, r0
 8010d6a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8010d6c:	460d      	mov	r5, r1
 8010d6e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8010d70:	4b08      	ldr	r3, [pc, #32]	; (8010d94 <_ZN8touchgfx8TextArea12setBaselineYEs+0x30>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8010d78:	4b07      	ldr	r3, [pc, #28]	; (8010d98 <_ZN8touchgfx8TextArea12setBaselineYEs+0x34>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010d80:	6803      	ldr	r3, [r0, #0]
 8010d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d84:	4798      	blx	r3
 8010d86:	1a29      	subs	r1, r5, r0
 8010d88:	4633      	mov	r3, r6
 8010d8a:	4620      	mov	r0, r4
 8010d8c:	b209      	sxth	r1, r1
 8010d8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d92:	4718      	bx	r3
 8010d94:	2400750c 	.word	0x2400750c
 8010d98:	24007514 	.word	0x24007514

08010d9c <_ZN8touchgfx8TextArea13setXBaselineYEss>:
 8010d9c:	b570      	push	{r4, r5, r6, lr}
 8010d9e:	6803      	ldr	r3, [r0, #0]
 8010da0:	4604      	mov	r4, r0
 8010da2:	4615      	mov	r5, r2
 8010da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010da6:	4798      	blx	r3
 8010da8:	6823      	ldr	r3, [r4, #0]
 8010daa:	4629      	mov	r1, r5
 8010dac:	4620      	mov	r0, r4
 8010dae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010db4:	4718      	bx	r3

08010db6 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8010db6:	2000      	movs	r0, #0
 8010db8:	4770      	bx	lr

08010dba <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
 8010dba:	2000      	movs	r0, #0
 8010dbc:	4770      	bx	lr
	...

08010dc0 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8010dc0:	4b07      	ldr	r3, [pc, #28]	; (8010de0 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8010dc2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8010dc4:	881b      	ldrh	r3, [r3, #0]
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	bf81      	itttt	hi
 8010dca:	4b06      	ldrhi	r3, [pc, #24]	; (8010de4 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8010dcc:	681b      	ldrhi	r3, [r3, #0]
 8010dce:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8010dd2:	7858      	ldrbhi	r0, [r3, #1]
 8010dd4:	bf8c      	ite	hi
 8010dd6:	f000 0003 	andhi.w	r0, r0, #3
 8010dda:	2000      	movls	r0, #0
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop
 8010de0:	24007510 	.word	0x24007510
 8010de4:	2400750c 	.word	0x2400750c

08010de8 <_ZN8touchgfx8TextAreaD1Ev>:
 8010de8:	4770      	bx	lr
	...

08010dec <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8010dec:	4b11      	ldr	r3, [pc, #68]	; (8010e34 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8010dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8010df4:	4604      	mov	r4, r0
 8010df6:	881b      	ldrh	r3, [r3, #0]
 8010df8:	428b      	cmp	r3, r1
 8010dfa:	d918      	bls.n	8010e2e <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8010dfc:	6803      	ldr	r3, [r0, #0]
 8010dfe:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8010e00:	4b0d      	ldr	r3, [pc, #52]	; (8010e38 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8010e02:	6818      	ldr	r0, [r3, #0]
 8010e04:	f7f2 f858 	bl	8002eb8 <_ZNK8touchgfx5Texts7getTextEt>
 8010e08:	6823      	ldr	r3, [r4, #0]
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e10:	4798      	blx	r3
 8010e12:	6823      	ldr	r3, [r4, #0]
 8010e14:	4607      	mov	r7, r0
 8010e16:	4620      	mov	r0, r4
 8010e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e1c:	4798      	blx	r3
 8010e1e:	463a      	mov	r2, r7
 8010e20:	4603      	mov	r3, r0
 8010e22:	4631      	mov	r1, r6
 8010e24:	4620      	mov	r0, r4
 8010e26:	46ac      	mov	ip, r5
 8010e28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e2c:	4760      	bx	ip
 8010e2e:	2000      	movs	r0, #0
 8010e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e34:	24007510 	.word	0x24007510
 8010e38:	24007518 	.word	0x24007518

08010e3c <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8010e3c:	4b18      	ldr	r3, [pc, #96]	; (8010ea0 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8010e3e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010e42:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8010e44:	4604      	mov	r4, r0
 8010e46:	881b      	ldrh	r3, [r3, #0]
 8010e48:	428b      	cmp	r3, r1
 8010e4a:	d926      	bls.n	8010e9a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8010e4c:	4b15      	ldr	r3, [pc, #84]	; (8010ea4 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8010e54:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8010e58:	4b13      	ldr	r3, [pc, #76]	; (8010ea8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8010e5a:	7855      	ldrb	r5, [r2, #1]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8010e62:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8010e66:	6833      	ldr	r3, [r6, #0]
 8010e68:	69df      	ldr	r7, [r3, #28]
 8010e6a:	4b10      	ldr	r3, [pc, #64]	; (8010eac <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8010e6c:	6818      	ldr	r0, [r3, #0]
 8010e6e:	f7f2 f823 	bl	8002eb8 <_ZNK8touchgfx5Texts7getTextEt>
 8010e72:	6823      	ldr	r3, [r4, #0]
 8010e74:	4680      	mov	r8, r0
 8010e76:	4620      	mov	r0, r4
 8010e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e7a:	4798      	blx	r3
 8010e7c:	6823      	ldr	r3, [r4, #0]
 8010e7e:	4681      	mov	r9, r0
 8010e80:	4620      	mov	r0, r4
 8010e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010e86:	4798      	blx	r3
 8010e88:	464b      	mov	r3, r9
 8010e8a:	9000      	str	r0, [sp, #0]
 8010e8c:	4642      	mov	r2, r8
 8010e8e:	4629      	mov	r1, r5
 8010e90:	4630      	mov	r0, r6
 8010e92:	47b8      	blx	r7
 8010e94:	b003      	add	sp, #12
 8010e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	e7fa      	b.n	8010e94 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8010e9e:	bf00      	nop
 8010ea0:	24007510 	.word	0x24007510
 8010ea4:	2400750c 	.word	0x2400750c
 8010ea8:	24007514 	.word	0x24007514
 8010eac:	24007518 	.word	0x24007518

08010eb0 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8010eb0:	b40e      	push	{r1, r2, r3}
 8010eb2:	4b30      	ldr	r3, [pc, #192]	; (8010f74 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8010eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010eb8:	881a      	ldrh	r2, [r3, #0]
 8010eba:	b09d      	sub	sp, #116	; 0x74
 8010ebc:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d954      	bls.n	8010f6e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8010ec4:	aa26      	add	r2, sp, #152	; 0x98
 8010ec6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8010f78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8010eca:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8010f7c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8010ece:	9202      	str	r2, [sp, #8]
 8010ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8010ed4:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8010ed8:	f8d8 3000 	ldr.w	r3, [r8]
 8010edc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010ee0:	682b      	ldr	r3, [r5, #0]
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ee6:	4798      	blx	r3
 8010ee8:	4606      	mov	r6, r0
 8010eea:	b207      	sxth	r7, r0
 8010eec:	a803      	add	r0, sp, #12
 8010eee:	f003 fc0b 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8010ef2:	682b      	ldr	r3, [r5, #0]
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ef8:	4798      	blx	r3
 8010efa:	682b      	ldr	r3, [r5, #0]
 8010efc:	4682      	mov	sl, r0
 8010efe:	4628      	mov	r0, r5
 8010f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f02:	4798      	blx	r3
 8010f04:	4653      	mov	r3, sl
 8010f06:	9000      	str	r0, [sp, #0]
 8010f08:	a803      	add	r0, sp, #12
 8010f0a:	9a02      	ldr	r2, [sp, #8]
 8010f0c:	9925      	ldr	r1, [sp, #148]	; 0x94
 8010f0e:	f003 fc56 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8010f12:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8010f14:	f8d9 3000 	ldr.w	r3, [r9]
 8010f18:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8010f1c:	8925      	ldrh	r5, [r4, #8]
 8010f1e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8010f22:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8010f26:	eba5 050c 	sub.w	r5, r5, ip
 8010f2a:	784a      	ldrb	r2, [r1, #1]
 8010f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8010f30:	b22d      	sxth	r5, r5
 8010f32:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 8010f36:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8010f3a:	9500      	str	r5, [sp, #0]
 8010f3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8010f40:	a803      	add	r0, sp, #12
 8010f42:	f001 fb06 	bl	8012552 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010f46:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 8010f4a:	b203      	sxth	r3, r0
 8010f4c:	18b9      	adds	r1, r7, r2
 8010f4e:	2900      	cmp	r1, #0
 8010f50:	dd0b      	ble.n	8010f6a <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8010f52:	3b01      	subs	r3, #1
 8010f54:	fb13 f302 	smulbb	r3, r3, r2
 8010f58:	fb16 3300 	smlabb	r3, r6, r0, r3
 8010f5c:	b21f      	sxth	r7, r3
 8010f5e:	4638      	mov	r0, r7
 8010f60:	b01d      	add	sp, #116	; 0x74
 8010f62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f66:	b003      	add	sp, #12
 8010f68:	4770      	bx	lr
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	dcf7      	bgt.n	8010f5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8010f6e:	2700      	movs	r7, #0
 8010f70:	e7f5      	b.n	8010f5e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8010f72:	bf00      	nop
 8010f74:	24007510 	.word	0x24007510
 8010f78:	2400750c 	.word	0x2400750c
 8010f7c:	24007514 	.word	0x24007514

08010f80 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8010f80:	4bbc      	ldr	r3, [pc, #752]	; (8011274 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8010f82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f86:	460c      	mov	r4, r1
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8010f8c:	b0a9      	sub	sp, #164	; 0xa4
 8010f8e:	4681      	mov	r9, r0
 8010f90:	428b      	cmp	r3, r1
 8010f92:	d809      	bhi.n	8010fa8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8010f94:	2300      	movs	r3, #0
 8010f96:	f04f 32ff 	mov.w	r2, #4294967295
 8010f9a:	6083      	str	r3, [r0, #8]
 8010f9c:	e9c0 3200 	strd	r3, r2, [r0]
 8010fa0:	4648      	mov	r0, r9
 8010fa2:	b029      	add	sp, #164	; 0xa4
 8010fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa8:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 801127c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8010fac:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8010fb0:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8011280 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8010fb4:	f8db 3000 	ldr.w	r3, [fp]
 8010fb8:	f8d8 0000 	ldr.w	r0, [r8]
 8010fbc:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8010fc0:	4bad      	ldr	r3, [pc, #692]	; (8011278 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8010fc8:	f7f1 ff76 	bl	8002eb8 <_ZNK8touchgfx5Texts7getTextEt>
 8010fcc:	4607      	mov	r7, r0
 8010fce:	682b      	ldr	r3, [r5, #0]
 8010fd0:	4628      	mov	r0, r5
 8010fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fd4:	4798      	blx	r3
 8010fd6:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 8010fd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fdc:	4430      	add	r0, r6
 8010fde:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8010fe2:	b283      	uxth	r3, r0
 8010fe4:	4650      	mov	r0, sl
 8010fe6:	9302      	str	r3, [sp, #8]
 8010fe8:	2e00      	cmp	r6, #0
 8010fea:	f040 8090 	bne.w	801110e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8010fee:	f003 fb8b 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8010ff2:	682b      	ldr	r3, [r5, #0]
 8010ff4:	4628      	mov	r0, r5
 8010ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ff8:	4798      	blx	r3
 8010ffa:	682b      	ldr	r3, [r5, #0]
 8010ffc:	9005      	str	r0, [sp, #20]
 8010ffe:	4628      	mov	r0, r5
 8011000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011002:	4798      	blx	r3
 8011004:	6823      	ldr	r3, [r4, #0]
 8011006:	4680      	mov	r8, r0
 8011008:	4620      	mov	r0, r4
 801100a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801100c:	4798      	blx	r3
 801100e:	6822      	ldr	r2, [r4, #0]
 8011010:	9004      	str	r0, [sp, #16]
 8011012:	4620      	mov	r0, r4
 8011014:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011018:	4790      	blx	r2
 801101a:	9905      	ldr	r1, [sp, #20]
 801101c:	9b04      	ldr	r3, [sp, #16]
 801101e:	460a      	mov	r2, r1
 8011020:	4639      	mov	r1, r7
 8011022:	4637      	mov	r7, r6
 8011024:	9001      	str	r0, [sp, #4]
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	4650      	mov	r0, sl
 801102a:	4643      	mov	r3, r8
 801102c:	f003 fbdc 	bl	80147e8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8011030:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8011032:	4629      	mov	r1, r5
 8011034:	f8db 3000 	ldr.w	r3, [fp]
 8011038:	4650      	mov	r0, sl
 801103a:	3601      	adds	r6, #1
 801103c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8011040:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011044:	b2b6      	uxth	r6, r6
 8011046:	785b      	ldrb	r3, [r3, #1]
 8011048:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801104c:	f000 ffd2 	bl	8011ff4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8011050:	4287      	cmp	r7, r0
 8011052:	bfb8      	it	lt
 8011054:	b207      	sxthlt	r7, r0
 8011056:	4650      	mov	r0, sl
 8011058:	f003 fb7d 	bl	8014756 <_ZN8touchgfx12TextProvider11endOfStringEv>
 801105c:	2800      	cmp	r0, #0
 801105e:	d0e7      	beq.n	8011030 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8011060:	9b02      	ldr	r3, [sp, #8]
 8011062:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 8011066:	fb13 f606 	smulbb	r6, r3, r6
 801106a:	eba6 0608 	sub.w	r6, r6, r8
 801106e:	b2b6      	uxth	r6, r6
 8011070:	fa0f f886 	sxth.w	r8, r6
 8011074:	f1b8 0f00 	cmp.w	r8, #0
 8011078:	dd06      	ble.n	8011088 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801107a:	682b      	ldr	r3, [r5, #0]
 801107c:	4628      	mov	r0, r5
 801107e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011080:	4798      	blx	r3
 8011082:	4430      	add	r0, r6
 8011084:	fa0f f880 	sxth.w	r8, r0
 8011088:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801108c:	4620      	mov	r0, r4
 801108e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8011092:	6823      	ldr	r3, [r4, #0]
 8011094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011096:	bf0c      	ite	eq
 8011098:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 801109c:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 80110a0:	4798      	blx	r3
 80110a2:	2801      	cmp	r0, #1
 80110a4:	b2ba      	uxth	r2, r7
 80110a6:	f000 80d2 	beq.w	801124e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 80110aa:	2802      	cmp	r0, #2
 80110ac:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80110b0:	f000 80d3 	beq.w	801125a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 80110b4:	b21e      	sxth	r6, r3
 80110b6:	7a29      	ldrb	r1, [r5, #8]
 80110b8:	7a6d      	ldrb	r5, [r5, #9]
 80110ba:	1a76      	subs	r6, r6, r1
 80110bc:	4429      	add	r1, r5
 80110be:	b2b3      	uxth	r3, r6
 80110c0:	440a      	add	r2, r1
 80110c2:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80110c6:	b21f      	sxth	r7, r3
 80110c8:	b292      	uxth	r2, r2
 80110ca:	2902      	cmp	r1, #2
 80110cc:	b216      	sxth	r6, r2
 80110ce:	f000 80c7 	beq.w	8011260 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 80110d2:	2903      	cmp	r1, #3
 80110d4:	f000 80d6 	beq.w	8011284 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 80110d8:	2901      	cmp	r1, #1
 80110da:	f040 80dc 	bne.w	8011296 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 80110de:	8923      	ldrh	r3, [r4, #8]
 80110e0:	4632      	mov	r2, r6
 80110e2:	463d      	mov	r5, r7
 80110e4:	4646      	mov	r6, r8
 80110e6:	eba3 0308 	sub.w	r3, r3, r8
 80110ea:	4690      	mov	r8, r2
 80110ec:	b21f      	sxth	r7, r3
 80110ee:	9b03      	ldr	r3, [sp, #12]
 80110f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80110f2:	6818      	ldr	r0, [r3, #0]
 80110f4:	f7f1 fee0 	bl	8002eb8 <_ZNK8touchgfx5Texts7getTextEt>
 80110f8:	f8a9 7000 	strh.w	r7, [r9]
 80110fc:	f8a9 5002 	strh.w	r5, [r9, #2]
 8011100:	f8a9 6004 	strh.w	r6, [r9, #4]
 8011104:	f8a9 8006 	strh.w	r8, [r9, #6]
 8011108:	f8c9 0008 	str.w	r0, [r9, #8]
 801110c:	e748      	b.n	8010fa0 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 801110e:	f003 fafb 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8011112:	682b      	ldr	r3, [r5, #0]
 8011114:	4628      	mov	r0, r5
 8011116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011118:	4798      	blx	r3
 801111a:	682b      	ldr	r3, [r5, #0]
 801111c:	4606      	mov	r6, r0
 801111e:	4628      	mov	r0, r5
 8011120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011122:	4798      	blx	r3
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	4680      	mov	r8, r0
 8011128:	4620      	mov	r0, r4
 801112a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801112c:	4798      	blx	r3
 801112e:	6822      	ldr	r2, [r4, #0]
 8011130:	9004      	str	r0, [sp, #16]
 8011132:	4620      	mov	r0, r4
 8011134:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8011138:	4790      	blx	r2
 801113a:	9b04      	ldr	r3, [sp, #16]
 801113c:	4632      	mov	r2, r6
 801113e:	9001      	str	r0, [sp, #4]
 8011140:	9300      	str	r3, [sp, #0]
 8011142:	4639      	mov	r1, r7
 8011144:	4643      	mov	r3, r8
 8011146:	4650      	mov	r0, sl
 8011148:	f003 fb4e 	bl	80147e8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 801114c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011150:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8011154:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8011158:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801115c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801115e:	bf0a      	itet	eq
 8011160:	4642      	moveq	r2, r8
 8011162:	461a      	movne	r2, r3
 8011164:	4698      	moveq	r8, r3
 8011166:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801116a:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 801116e:	1ad2      	subs	r2, r2, r3
 8011170:	f8db 3000 	ldr.w	r3, [fp]
 8011174:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8011178:	7859      	ldrb	r1, [r3, #1]
 801117a:	2300      	movs	r3, #0
 801117c:	f8cd a020 	str.w	sl, [sp, #32]
 8011180:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8011184:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011188:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 801118c:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8011190:	950a      	str	r5, [sp, #40]	; 0x28
 8011192:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8011196:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801119a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801119e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80111a2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80111a6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80111aa:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80111ae:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80111b2:	b350      	cbz	r0, 801120a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80111b4:	682b      	ldr	r3, [r5, #0]
 80111b6:	4628      	mov	r0, r5
 80111b8:	695b      	ldr	r3, [r3, #20]
 80111ba:	4798      	blx	r3
 80111bc:	4607      	mov	r7, r0
 80111be:	b320      	cbz	r0, 801120a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80111c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80111c2:	4639      	mov	r1, r7
 80111c4:	6803      	ldr	r3, [r0, #0]
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	4798      	blx	r3
 80111ca:	4606      	mov	r6, r0
 80111cc:	b1e8      	cbz	r0, 801120a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80111ce:	7b43      	ldrb	r3, [r0, #13]
 80111d0:	7a82      	ldrb	r2, [r0, #10]
 80111d2:	005b      	lsls	r3, r3, #1
 80111d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111d8:	4313      	orrs	r3, r2
 80111da:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80111de:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80111e2:	2b04      	cmp	r3, #4
 80111e4:	d111      	bne.n	801120a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80111e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80111e8:	4632      	mov	r2, r6
 80111ea:	4639      	mov	r1, r7
 80111ec:	6803      	ldr	r3, [r0, #0]
 80111ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111f0:	4798      	blx	r3
 80111f2:	7b73      	ldrb	r3, [r6, #13]
 80111f4:	005b      	lsls	r3, r3, #1
 80111f6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80111fa:	7ab3      	ldrb	r3, [r6, #10]
 80111fc:	4313      	orrs	r3, r2
 80111fe:	4418      	add	r0, r3
 8011200:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011204:	4418      	add	r0, r3
 8011206:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801120a:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 801120e:	2600      	movs	r6, #0
 8011210:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 8011214:	4637      	mov	r7, r6
 8011216:	45c3      	cmp	fp, r8
 8011218:	a807      	add	r0, sp, #28
 801121a:	f106 0601 	add.w	r6, r6, #1
 801121e:	bfd4      	ite	le
 8011220:	2100      	movle	r1, #0
 8011222:	2101      	movgt	r1, #1
 8011224:	f001 f8c6 	bl	80123b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8011228:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801122c:	b2b6      	uxth	r6, r6
 801122e:	429f      	cmp	r7, r3
 8011230:	bfb8      	it	lt
 8011232:	b21f      	sxthlt	r7, r3
 8011234:	9b02      	ldr	r3, [sp, #8]
 8011236:	eba8 0803 	sub.w	r8, r8, r3
 801123a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801123e:	fa0f f888 	sxth.w	r8, r8
 8011242:	2b00      	cmp	r3, #0
 8011244:	f43f af0c 	beq.w	8011060 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8011248:	45c2      	cmp	sl, r8
 801124a:	dbe4      	blt.n	8011216 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 801124c:	e708      	b.n	8011060 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801124e:	1bf6      	subs	r6, r6, r7
 8011250:	2702      	movs	r7, #2
 8011252:	fb96 f6f7 	sdiv	r6, r6, r7
 8011256:	b236      	sxth	r6, r6
 8011258:	e72d      	b.n	80110b6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 801125a:	4413      	add	r3, r2
 801125c:	1af6      	subs	r6, r6, r3
 801125e:	e7fa      	b.n	8011256 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8011260:	8925      	ldrh	r5, [r4, #8]
 8011262:	1aad      	subs	r5, r5, r2
 8011264:	1aed      	subs	r5, r5, r3
 8011266:	b22f      	sxth	r7, r5
 8011268:	8965      	ldrh	r5, [r4, #10]
 801126a:	eba5 0508 	sub.w	r5, r5, r8
 801126e:	b22d      	sxth	r5, r5
 8011270:	e73d      	b.n	80110ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8011272:	bf00      	nop
 8011274:	24007510 	.word	0x24007510
 8011278:	24007514 	.word	0x24007514
 801127c:	2400750c 	.word	0x2400750c
 8011280:	24007518 	.word	0x24007518
 8011284:	8965      	ldrh	r5, [r4, #10]
 8011286:	2700      	movs	r7, #0
 8011288:	1aad      	subs	r5, r5, r2
 801128a:	1aed      	subs	r5, r5, r3
 801128c:	4633      	mov	r3, r6
 801128e:	4646      	mov	r6, r8
 8011290:	b22d      	sxth	r5, r5
 8011292:	4698      	mov	r8, r3
 8011294:	e72b      	b.n	80110ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8011296:	2500      	movs	r5, #0
 8011298:	e729      	b.n	80110ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801129a:	bf00      	nop

0801129c <_ZN8touchgfx8TextAreaD0Ev>:
 801129c:	b510      	push	{r4, lr}
 801129e:	4604      	mov	r4, r0
 80112a0:	2148      	movs	r1, #72	; 0x48
 80112a2:	f00c fb82 	bl	801d9aa <_ZdlPvj>
 80112a6:	4620      	mov	r0, r4
 80112a8:	bd10      	pop	{r4, pc}
	...

080112ac <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 80112ac:	b513      	push	{r0, r1, r4, lr}
 80112ae:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80112b2:	4604      	mov	r4, r0
 80112b4:	b1fb      	cbz	r3, 80112f6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80112b6:	4b16      	ldr	r3, [pc, #88]	; (8011310 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 80112b8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80112ba:	881b      	ldrh	r3, [r3, #0]
 80112bc:	428b      	cmp	r3, r1
 80112be:	d91a      	bls.n	80112f6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80112c0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	dd16      	ble.n	80112f6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80112c8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	dd12      	ble.n	80112f6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80112d0:	4b10      	ldr	r3, [pc, #64]	; (8011314 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80112d2:	6818      	ldr	r0, [r3, #0]
 80112d4:	f7f1 fdf0 	bl	8002eb8 <_ZNK8touchgfx5Texts7getTextEt>
 80112d8:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80112dc:	6822      	ldr	r2, [r4, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	db06      	blt.n	80112f0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80112e2:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	db02      	blt.n	80112f0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80112ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80112ec:	4298      	cmp	r0, r3
 80112ee:	d004      	beq.n	80112fa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80112f0:	6953      	ldr	r3, [r2, #20]
 80112f2:	4620      	mov	r0, r4
 80112f4:	4798      	blx	r3
 80112f6:	b002      	add	sp, #8
 80112f8:	bd10      	pop	{r4, pc}
 80112fa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80112fe:	466b      	mov	r3, sp
 8011300:	6912      	ldr	r2, [r2, #16]
 8011302:	c903      	ldmia	r1, {r0, r1}
 8011304:	e883 0003 	stmia.w	r3, {r0, r1}
 8011308:	4619      	mov	r1, r3
 801130a:	4620      	mov	r0, r4
 801130c:	4790      	blx	r2
 801130e:	e7f2      	b.n	80112f6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8011310:	24007510 	.word	0x24007510
 8011314:	24007518 	.word	0x24007518

08011318 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8011318:	4b45      	ldr	r3, [pc, #276]	; (8011430 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801131a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801131e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011320:	b08e      	sub	sp, #56	; 0x38
 8011322:	881b      	ldrh	r3, [r3, #0]
 8011324:	4604      	mov	r4, r0
 8011326:	4293      	cmp	r3, r2
 8011328:	d97e      	bls.n	8011428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801132a:	6808      	ldr	r0, [r1, #0]
 801132c:	ab05      	add	r3, sp, #20
 801132e:	6849      	ldr	r1, [r1, #4]
 8011330:	4d40      	ldr	r5, [pc, #256]	; (8011434 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8011332:	c303      	stmia	r3!, {r0, r1}
 8011334:	4611      	mov	r1, r2
 8011336:	6828      	ldr	r0, [r5, #0]
 8011338:	f7f1 fdbe 	bl	8002eb8 <_ZNK8touchgfx5Texts7getTextEt>
 801133c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8011340:	2b00      	cmp	r3, #0
 8011342:	db11      	blt.n	8011368 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8011344:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8011348:	2b00      	cmp	r3, #0
 801134a:	db0d      	blt.n	8011368 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801134c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801134e:	4298      	cmp	r0, r3
 8011350:	d10a      	bne.n	8011368 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8011352:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8011356:	ab09      	add	r3, sp, #36	; 0x24
 8011358:	e892 0003 	ldmia.w	r2, {r0, r1}
 801135c:	e883 0003 	stmia.w	r3, {r0, r1}
 8011360:	4619      	mov	r1, r3
 8011362:	a805      	add	r0, sp, #20
 8011364:	f7fe fcc2 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 8011368:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801136c:	2b00      	cmp	r3, #0
 801136e:	dd5b      	ble.n	8011428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8011370:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8011374:	2b00      	cmp	r3, #0
 8011376:	dd57      	ble.n	8011428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8011378:	4f2f      	ldr	r7, [pc, #188]	; (8011438 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801137a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8011382:	4b2e      	ldr	r3, [pc, #184]	; (801143c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801138a:	2e00      	cmp	r6, #0
 801138c:	d04c      	beq.n	8011428 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801138e:	6823      	ldr	r3, [r4, #0]
 8011390:	4620      	mov	r0, r4
 8011392:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 8011396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011398:	4798      	blx	r3
 801139a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 80113a2:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80113a6:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 80113aa:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80113ae:	785b      	ldrb	r3, [r3, #1]
 80113b0:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 80113b4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80113b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80113ba:	9609      	str	r6, [sp, #36]	; 0x24
 80113bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80113c0:	4b1f      	ldr	r3, [pc, #124]	; (8011440 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80113c2:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80113cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80113ce:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80113d2:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80113d6:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80113da:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80113de:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80113e2:	b10a      	cbz	r2, 80113e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80113e4:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80113e6:	b906      	cbnz	r6, 80113ea <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80113e8:	689e      	ldr	r6, [r3, #8]
 80113ea:	af07      	add	r7, sp, #28
 80113ec:	4621      	mov	r1, r4
 80113ee:	4638      	mov	r0, r7
 80113f0:	f002 fdd2 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80113f4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80113f6:	6828      	ldr	r0, [r5, #0]
 80113f8:	f7f1 fd5e 	bl	8002eb8 <_ZNK8touchgfx5Texts7getTextEt>
 80113fc:	6823      	ldr	r3, [r4, #0]
 80113fe:	4605      	mov	r5, r0
 8011400:	4620      	mov	r0, r4
 8011402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011404:	4798      	blx	r3
 8011406:	6823      	ldr	r3, [r4, #0]
 8011408:	4680      	mov	r8, r0
 801140a:	4620      	mov	r0, r4
 801140c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011410:	4798      	blx	r3
 8011412:	ab09      	add	r3, sp, #36	; 0x24
 8011414:	9501      	str	r5, [sp, #4]
 8011416:	9300      	str	r3, [sp, #0]
 8011418:	ab05      	add	r3, sp, #20
 801141a:	e9cd 8002 	strd	r8, r0, [sp, #8]
 801141e:	4630      	mov	r0, r6
 8011420:	e897 0006 	ldmia.w	r7, {r1, r2}
 8011424:	f7f1 fcfa 	bl	8002e1c <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8011428:	b00e      	add	sp, #56	; 0x38
 801142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801142e:	bf00      	nop
 8011430:	24007510 	.word	0x24007510
 8011434:	24007518 	.word	0x24007518
 8011438:	2400750c 	.word	0x2400750c
 801143c:	24007514 	.word	0x24007514
 8011440:	240074bc 	.word	0x240074bc

08011444 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 8011444:	b570      	push	{r4, r5, r6, lr}
 8011446:	6803      	ldr	r3, [r0, #0]
 8011448:	4604      	mov	r4, r0
 801144a:	4615      	mov	r5, r2
 801144c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801144e:	4798      	blx	r3
 8011450:	6823      	ldr	r3, [r4, #0]
 8011452:	4629      	mov	r1, r5
 8011454:	4620      	mov	r0, r4
 8011456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801145c:	4718      	bx	r3
	...

08011460 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8011460:	b538      	push	{r3, r4, r5, lr}
 8011462:	4b0e      	ldr	r3, [pc, #56]	; (801149c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8011464:	4604      	mov	r4, r0
 8011466:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	429a      	cmp	r2, r3
 801146c:	d214      	bcs.n	8011498 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801146e:	6803      	ldr	r3, [r0, #0]
 8011470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011472:	4798      	blx	r3
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	4605      	mov	r5, r0
 8011478:	4620      	mov	r0, r4
 801147a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801147c:	4798      	blx	r3
 801147e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8011482:	b22d      	sxth	r5, r5
 8011484:	4601      	mov	r1, r0
 8011486:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801148a:	bf06      	itte	eq
 801148c:	4602      	moveq	r2, r0
 801148e:	4629      	moveq	r1, r5
 8011490:	462a      	movne	r2, r5
 8011492:	4620      	mov	r0, r4
 8011494:	f7ff ffd6 	bl	8011444 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8011498:	bd38      	pop	{r3, r4, r5, pc}
 801149a:	bf00      	nop
 801149c:	24007510 	.word	0x24007510

080114a0 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 80114a0:	b530      	push	{r4, r5, lr}
 80114a2:	888b      	ldrh	r3, [r1, #4]
 80114a4:	b085      	sub	sp, #20
 80114a6:	4604      	mov	r4, r0
 80114a8:	8583      	strh	r3, [r0, #44]	; 0x2c
 80114aa:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80114ae:	b923      	cbnz	r3, 80114ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80114b0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80114b4:	b90b      	cbnz	r3, 80114ba <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 80114b6:	f7ff ffd3 	bl	8011460 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 80114ba:	6823      	ldr	r3, [r4, #0]
 80114bc:	466d      	mov	r5, sp
 80114be:	4621      	mov	r1, r4
 80114c0:	343c      	adds	r4, #60	; 0x3c
 80114c2:	4628      	mov	r0, r5
 80114c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80114c8:	4798      	blx	r3
 80114ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80114ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80114d2:	b005      	add	sp, #20
 80114d4:	bd30      	pop	{r4, r5, pc}

080114d6 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80114d6:	2300      	movs	r3, #0
 80114d8:	8083      	strh	r3, [r0, #4]
 80114da:	80c3      	strh	r3, [r0, #6]
 80114dc:	8003      	strh	r3, [r0, #0]
 80114de:	8043      	strh	r3, [r0, #2]
 80114e0:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 80114e4:	2bff      	cmp	r3, #255	; 0xff
 80114e6:	bf01      	itttt	eq
 80114e8:	890b      	ldrheq	r3, [r1, #8]
 80114ea:	8083      	strheq	r3, [r0, #4]
 80114ec:	894b      	ldrheq	r3, [r1, #10]
 80114ee:	80c3      	strheq	r3, [r0, #6]
 80114f0:	4770      	bx	lr
	...

080114f4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80114f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114f6:	4604      	mov	r4, r0
 80114f8:	466b      	mov	r3, sp
 80114fa:	6808      	ldr	r0, [r1, #0]
 80114fc:	6849      	ldr	r1, [r1, #4]
 80114fe:	c303      	stmia	r3!, {r0, r1}
 8011500:	6823      	ldr	r3, [r4, #0]
 8011502:	4669      	mov	r1, sp
 8011504:	4620      	mov	r0, r4
 8011506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011508:	4798      	blx	r3
 801150a:	4b08      	ldr	r3, [pc, #32]	; (801152c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8011512:	b10a      	cbz	r2, 8011518 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011514:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011516:	b900      	cbnz	r0, 801151a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011518:	6898      	ldr	r0, [r3, #8]
 801151a:	6803      	ldr	r3, [r0, #0]
 801151c:	4669      	mov	r1, sp
 801151e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011520:	6a1d      	ldr	r5, [r3, #32]
 8011522:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8011526:	47a8      	blx	r5
 8011528:	b003      	add	sp, #12
 801152a:	bd30      	pop	{r4, r5, pc}
 801152c:	240074bc 	.word	0x240074bc

08011530 <_ZN8touchgfx3BoxD1Ev>:
 8011530:	4770      	bx	lr

08011532 <_ZN8touchgfx3BoxD0Ev>:
 8011532:	b510      	push	{r4, lr}
 8011534:	4604      	mov	r4, r0
 8011536:	212c      	movs	r1, #44	; 0x2c
 8011538:	f00c fa37 	bl	801d9aa <_ZdlPvj>
 801153c:	4620      	mov	r0, r4
 801153e:	bd10      	pop	{r4, pc}

08011540 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011540:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8011544:	b12a      	cbz	r2, 8011552 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011546:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801154a:	b112      	cbz	r2, 8011552 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801154c:	6803      	ldr	r3, [r0, #0]
 801154e:	695b      	ldr	r3, [r3, #20]
 8011550:	4718      	bx	r3
 8011552:	4770      	bx	lr

08011554 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011554:	b510      	push	{r4, lr}
 8011556:	6803      	ldr	r3, [r0, #0]
 8011558:	460c      	mov	r4, r1
 801155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801155c:	4798      	blx	r3
 801155e:	1b03      	subs	r3, r0, r4
 8011560:	4258      	negs	r0, r3
 8011562:	4158      	adcs	r0, r3
 8011564:	bd10      	pop	{r4, pc}
	...

08011568 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011568:	4b01      	ldr	r3, [pc, #4]	; (8011570 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801156a:	6019      	str	r1, [r3, #0]
 801156c:	4770      	bx	lr
 801156e:	bf00      	nop
 8011570:	240074c4 	.word	0x240074c4

08011574 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011578:	4696      	mov	lr, r2
 801157a:	b097      	sub	sp, #92	; 0x5c
 801157c:	4605      	mov	r5, r0
 801157e:	4614      	mov	r4, r2
 8011580:	460e      	mov	r6, r1
 8011582:	461f      	mov	r7, r3
 8011584:	f10d 0c1c 	add.w	ip, sp, #28
 8011588:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801158c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8011590:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8011594:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011598:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801159c:	f8de 3000 	ldr.w	r3, [lr]
 80115a0:	f104 0e14 	add.w	lr, r4, #20
 80115a4:	f8cc 3000 	str.w	r3, [ip]
 80115a8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80115ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80115b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115b4:	f8de 3000 	ldr.w	r3, [lr]
 80115b8:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80115bc:	f8cc 3000 	str.w	r3, [ip]
 80115c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80115c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80115c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80115cc:	f8de 3000 	ldr.w	r3, [lr]
 80115d0:	4631      	mov	r1, r6
 80115d2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80115d4:	4628      	mov	r0, r5
 80115d6:	f8cc 3000 	str.w	r3, [ip]
 80115da:	682b      	ldr	r3, [r5, #0]
 80115dc:	9201      	str	r2, [sp, #4]
 80115de:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80115e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80115e4:	9200      	str	r2, [sp, #0]
 80115e6:	aa07      	add	r2, sp, #28
 80115e8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80115ec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 80115f0:	463b      	mov	r3, r7
 80115f2:	47d8      	blx	fp
 80115f4:	46a6      	mov	lr, r4
 80115f6:	f10d 0c1c 	add.w	ip, sp, #28
 80115fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80115fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011602:	f8de 3000 	ldr.w	r3, [lr]
 8011606:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801160a:	343c      	adds	r4, #60	; 0x3c
 801160c:	f8cc 3000 	str.w	r3, [ip]
 8011610:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8011614:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011618:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801161c:	f8de 3000 	ldr.w	r3, [lr]
 8011620:	f8cc 3000 	str.w	r3, [ip]
 8011624:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8011628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801162a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801162e:	6823      	ldr	r3, [r4, #0]
 8011630:	4631      	mov	r1, r6
 8011632:	4628      	mov	r0, r5
 8011634:	f8cc 3000 	str.w	r3, [ip]
 8011638:	682b      	ldr	r3, [r5, #0]
 801163a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801163e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011640:	f8cd 8008 	str.w	r8, [sp, #8]
 8011644:	9201      	str	r2, [sp, #4]
 8011646:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011648:	9200      	str	r2, [sp, #0]
 801164a:	aa07      	add	r2, sp, #28
 801164c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801164e:	463b      	mov	r3, r7
 8011650:	47a0      	blx	r4
 8011652:	b017      	add	sp, #92	; 0x5c
 8011654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011658 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165c:	b08d      	sub	sp, #52	; 0x34
 801165e:	4688      	mov	r8, r1
 8011660:	f8d3 c000 	ldr.w	ip, [r3]
 8011664:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011666:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801166a:	680f      	ldr	r7, [r1, #0]
 801166c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8011670:	eba7 070c 	sub.w	r7, r7, ip
 8011674:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8011678:	edd3 6a07 	vldr	s13, [r3, #28]
 801167c:	42bc      	cmp	r4, r7
 801167e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011680:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8011684:	bfa8      	it	ge
 8011686:	463c      	movge	r4, r7
 8011688:	f9b1 9000 	ldrsh.w	r9, [r1]
 801168c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011690:	ee07 4a90 	vmov	s15, r4
 8011694:	eb09 0e0c 	add.w	lr, r9, ip
 8011698:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801169c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80116a0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80116a4:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80116a8:	4571      	cmp	r1, lr
 80116aa:	ee25 4a04 	vmul.f32	s8, s10, s8
 80116ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 80116b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80116b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80116ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80116be:	ee32 1a05 	vadd.f32	s2, s4, s10
 80116c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80116c6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80116ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 80116ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 80116d2:	f340 808c 	ble.w	80117ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80116d6:	eba1 060e 	sub.w	r6, r1, lr
 80116da:	fb96 f5f4 	sdiv	r5, r6, r4
 80116de:	ee07 5a10 	vmov	s14, r5
 80116e2:	2d00      	cmp	r5, #0
 80116e4:	fb04 6615 	mls	r6, r4, r5, r6
 80116e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80116ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 80116f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80116f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80116f8:	dd12      	ble.n	8011720 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80116fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80116fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8011702:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011706:	eef5 6a40 	vcmp.f32	s13, #0.0
 801170a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801170e:	bf14      	ite	ne
 8011710:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011714:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011718:	ee61 1a87 	vmul.f32	s3, s3, s14
 801171c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8011720:	fb05 f204 	mul.w	r2, r5, r4
 8011724:	1abf      	subs	r7, r7, r2
 8011726:	4494      	add	ip, r2
 8011728:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801172c:	4411      	add	r1, r2
 801172e:	eb09 020c 	add.w	r2, r9, ip
 8011732:	b209      	sxth	r1, r1
 8011734:	443a      	add	r2, r7
 8011736:	428a      	cmp	r2, r1
 8011738:	bfc4      	itt	gt
 801173a:	eba1 0209 	subgt.w	r2, r1, r9
 801173e:	eba2 070c 	subgt.w	r7, r2, ip
 8011742:	2f00      	cmp	r7, #0
 8011744:	dd50      	ble.n	80117e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011746:	fb97 f1f4 	sdiv	r1, r7, r4
 801174a:	fb04 7211 	mls	r2, r4, r1, r7
 801174e:	b90a      	cbnz	r2, 8011754 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8011750:	3901      	subs	r1, #1
 8011752:	4622      	mov	r2, r4
 8011754:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011758:	6840      	ldr	r0, [r0, #4]
 801175a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801175e:	44b6      	add	lr, r6
 8011760:	f8d0 a000 	ldr.w	sl, [r0]
 8011764:	2900      	cmp	r1, #0
 8011766:	bfcc      	ite	gt
 8011768:	46a1      	movgt	r9, r4
 801176a:	4691      	movle	r9, r2
 801176c:	900b      	str	r0, [sp, #44]	; 0x2c
 801176e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011770:	fb04 e505 	mla	r5, r4, r5, lr
 8011774:	eef0 6a42 	vmov.f32	s13, s4
 8011778:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801177c:	9008      	str	r0, [sp, #32]
 801177e:	eeb0 7a61 	vmov.f32	s14, s3
 8011782:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011784:	695b      	ldr	r3, [r3, #20]
 8011786:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801178a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801178e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8011792:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011794:	445b      	add	r3, fp
 8011796:	9307      	str	r3, [sp, #28]
 8011798:	ee16 3a90 	vmov	r3, s13
 801179c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80117a0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80117a4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80117a8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80117ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80117b0:	ee17 7a90 	vmov	r7, s15
 80117b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 80117b8:	fb97 f7f4 	sdiv	r7, r7, r4
 80117bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80117c0:	ee17 ca90 	vmov	ip, s15
 80117c4:	fb9c fcf4 	sdiv	ip, ip, r4
 80117c8:	fb0c 3306 	mla	r3, ip, r6, r3
 80117cc:	9302      	str	r3, [sp, #8]
 80117ce:	ee17 3a10 	vmov	r3, s14
 80117d2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80117d6:	fb07 3706 	mla	r7, r7, r6, r3
 80117da:	eba9 0306 	sub.w	r3, r9, r6
 80117de:	e9cd 4700 	strd	r4, r7, [sp]
 80117e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80117e6:	47a0      	blx	r4
 80117e8:	b00d      	add	sp, #52	; 0x34
 80117ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117ee:	2500      	movs	r5, #0
 80117f0:	462e      	mov	r6, r5
 80117f2:	e799      	b.n	8011728 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080117f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80117f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f8:	b0db      	sub	sp, #364	; 0x16c
 80117fa:	461d      	mov	r5, r3
 80117fc:	4614      	mov	r4, r2
 80117fe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8011802:	910f      	str	r1, [sp, #60]	; 0x3c
 8011804:	4629      	mov	r1, r5
 8011806:	930a      	str	r3, [sp, #40]	; 0x28
 8011808:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 801180c:	9009      	str	r0, [sp, #36]	; 0x24
 801180e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011810:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8011814:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 8011818:	9310      	str	r3, [sp, #64]	; 0x40
 801181a:	6803      	ldr	r3, [r0, #0]
 801181c:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 801181e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011822:	47b8      	blx	r7
 8011824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011826:	6058      	str	r0, [r3, #4]
 8011828:	2800      	cmp	r0, #0
 801182a:	f000 83a1 	beq.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801182e:	682b      	ldr	r3, [r5, #0]
 8011830:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8011834:	ed94 7a02 	vldr	s14, [r4, #8]
 8011838:	9314      	str	r3, [sp, #80]	; 0x50
 801183a:	686b      	ldr	r3, [r5, #4]
 801183c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011840:	9315      	str	r3, [sp, #84]	; 0x54
 8011842:	4bc1      	ldr	r3, [pc, #772]	; (8011b48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011844:	7819      	ldrb	r1, [r3, #0]
 8011846:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801184a:	2900      	cmp	r1, #0
 801184c:	bf16      	itet	ne
 801184e:	4619      	movne	r1, r3
 8011850:	4611      	moveq	r1, r2
 8011852:	4613      	movne	r3, r2
 8011854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011858:	9116      	str	r1, [sp, #88]	; 0x58
 801185a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801185e:	f240 8387 	bls.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011862:	ed94 7a07 	vldr	s14, [r4, #28]
 8011866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186e:	f240 837f 	bls.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011872:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8011876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801187e:	f240 8377 	bls.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011882:	6822      	ldr	r2, [r4, #0]
 8011884:	4bb1      	ldr	r3, [pc, #708]	; (8011b4c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8011886:	429a      	cmp	r2, r3
 8011888:	f2c0 8372 	blt.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801188c:	49b0      	ldr	r1, [pc, #704]	; (8011b50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801188e:	6963      	ldr	r3, [r4, #20]
 8011890:	428a      	cmp	r2, r1
 8011892:	f300 836d 	bgt.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011896:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801189a:	48ae      	ldr	r0, [pc, #696]	; (8011b54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801189c:	33ff      	adds	r3, #255	; 0xff
 801189e:	4283      	cmp	r3, r0
 80118a0:	f200 8366 	bhi.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80118a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80118a6:	4dac      	ldr	r5, [pc, #688]	; (8011b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80118a8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80118ac:	33ff      	adds	r3, #255	; 0xff
 80118ae:	42ab      	cmp	r3, r5
 80118b0:	f200 835e 	bhi.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80118b4:	6862      	ldr	r2, [r4, #4]
 80118b6:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 80118ba:	33ff      	adds	r3, #255	; 0xff
 80118bc:	4283      	cmp	r3, r0
 80118be:	f200 8357 	bhi.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80118c2:	69a1      	ldr	r1, [r4, #24]
 80118c4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80118c8:	33ff      	adds	r3, #255	; 0xff
 80118ca:	4283      	cmp	r3, r0
 80118cc:	f200 8350 	bhi.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80118d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80118d2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80118d6:	30ff      	adds	r0, #255	; 0xff
 80118d8:	42a8      	cmp	r0, r5
 80118da:	f200 8349 	bhi.w	8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80118de:	428a      	cmp	r2, r1
 80118e0:	f280 8110 	bge.w	8011b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80118e4:	429a      	cmp	r2, r3
 80118e6:	f300 8119 	bgt.w	8011b1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80118ea:	4299      	cmp	r1, r3
 80118ec:	f280 811d 	bge.w	8011b2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80118f0:	2502      	movs	r5, #2
 80118f2:	2701      	movs	r7, #1
 80118f4:	46a9      	mov	r9, r5
 80118f6:	46b8      	mov	r8, r7
 80118f8:	f04f 0a00 	mov.w	sl, #0
 80118fc:	4621      	mov	r1, r4
 80118fe:	a849      	add	r0, sp, #292	; 0x124
 8011900:	f003 fc4c 	bl	801519c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011904:	4622      	mov	r2, r4
 8011906:	4653      	mov	r3, sl
 8011908:	a949      	add	r1, sp, #292	; 0x124
 801190a:	f8cd 9000 	str.w	r9, [sp]
 801190e:	a819      	add	r0, sp, #100	; 0x64
 8011910:	f003 fd74 	bl	80153fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011914:	4622      	mov	r2, r4
 8011916:	4653      	mov	r3, sl
 8011918:	a949      	add	r1, sp, #292	; 0x124
 801191a:	f8cd 8000 	str.w	r8, [sp]
 801191e:	a829      	add	r0, sp, #164	; 0xa4
 8011920:	f003 fd6c 	bl	80153fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011924:	4643      	mov	r3, r8
 8011926:	4622      	mov	r2, r4
 8011928:	a949      	add	r1, sp, #292	; 0x124
 801192a:	f8cd 9000 	str.w	r9, [sp]
 801192e:	a839      	add	r0, sp, #228	; 0xe4
 8011930:	f003 fd64 	bl	80153fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011934:	42af      	cmp	r7, r5
 8011936:	af12      	add	r7, sp, #72	; 0x48
 8011938:	bfb7      	itett	lt
 801193a:	2300      	movlt	r3, #0
 801193c:	2301      	movge	r3, #1
 801193e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8011940:	ac19      	addlt	r4, sp, #100	; 0x64
 8011942:	bfb1      	iteee	lt
 8011944:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011946:	ad19      	addge	r5, sp, #100	; 0x64
 8011948:	930e      	strge	r3, [sp, #56]	; 0x38
 801194a:	ac29      	addge	r4, sp, #164	; 0xa4
 801194c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801194e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011952:	e887 0003 	stmia.w	r7, {r0, r1}
 8011956:	b928      	cbnz	r0, 8011964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8011958:	4b80      	ldr	r3, [pc, #512]	; (8011b5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801195a:	6818      	ldr	r0, [r3, #0]
 801195c:	6803      	ldr	r3, [r0, #0]
 801195e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011960:	4798      	blx	r3
 8011962:	6038      	str	r0, [r7, #0]
 8011964:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011966:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801196a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801196e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8011970:	930c      	str	r3, [sp, #48]	; 0x30
 8011972:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011974:	6963      	ldr	r3, [r4, #20]
 8011976:	440b      	add	r3, r1
 8011978:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801197c:	4408      	add	r0, r1
 801197e:	b200      	sxth	r0, r0
 8011980:	4283      	cmp	r3, r0
 8011982:	900d      	str	r0, [sp, #52]	; 0x34
 8011984:	f280 80dd 	bge.w	8011b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8011988:	428b      	cmp	r3, r1
 801198a:	da08      	bge.n	801199e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801198c:	2a00      	cmp	r2, #0
 801198e:	dd06      	ble.n	801199e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011990:	1acb      	subs	r3, r1, r3
 8011992:	429a      	cmp	r2, r3
 8011994:	f2c0 80e4 	blt.w	8011b60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8011998:	2b00      	cmp	r3, #0
 801199a:	f300 80e2 	bgt.w	8011b62 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801199e:	6967      	ldr	r7, [r4, #20]
 80119a0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80119a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119a6:	443b      	add	r3, r7
 80119a8:	461f      	mov	r7, r3
 80119aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119ac:	1bdf      	subs	r7, r3, r7
 80119ae:	4297      	cmp	r7, r2
 80119b0:	bfa8      	it	ge
 80119b2:	4617      	movge	r7, r2
 80119b4:	2f00      	cmp	r7, #0
 80119b6:	f340 8166 	ble.w	8011c86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80119ba:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80119bc:	6829      	ldr	r1, [r5, #0]
 80119be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80119c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80119c6:	4411      	add	r1, r2
 80119c8:	6820      	ldr	r0, [r4, #0]
 80119ca:	4299      	cmp	r1, r3
 80119cc:	dd1a      	ble.n	8011a04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80119ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80119d2:	4402      	add	r2, r0
 80119d4:	440b      	add	r3, r1
 80119d6:	b21b      	sxth	r3, r3
 80119d8:	429a      	cmp	r2, r3
 80119da:	dc13      	bgt.n	8011a04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80119dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80119de:	a912      	add	r1, sp, #72	; 0x48
 80119e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	9206      	str	r2, [sp, #24]
 80119e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80119ea:	9500      	str	r5, [sp, #0]
 80119ec:	9205      	str	r2, [sp, #20]
 80119ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80119f4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80119f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80119fa:	aa49      	add	r2, sp, #292	; 0x124
 80119fc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8011a00:	4623      	mov	r3, r4
 8011a02:	47c8      	blx	r9
 8011a04:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011a08:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8011a0c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8011a10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a14:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8011a18:	68a1      	ldr	r1, [r4, #8]
 8011a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a1e:	ed94 6a08 	vldr	s12, [r4, #32]
 8011a22:	edd4 6a07 	vldr	s13, [r4, #28]
 8011a26:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011a2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011a2e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011a32:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011a36:	edc4 6a07 	vstr	s13, [r4, #28]
 8011a3a:	441a      	add	r2, r3
 8011a3c:	6963      	ldr	r3, [r4, #20]
 8011a3e:	3301      	adds	r3, #1
 8011a40:	6022      	str	r2, [r4, #0]
 8011a42:	6163      	str	r3, [r4, #20]
 8011a44:	69a3      	ldr	r3, [r4, #24]
 8011a46:	3b01      	subs	r3, #1
 8011a48:	61a3      	str	r3, [r4, #24]
 8011a4a:	6923      	ldr	r3, [r4, #16]
 8011a4c:	440b      	add	r3, r1
 8011a4e:	68e1      	ldr	r1, [r4, #12]
 8011a50:	428b      	cmp	r3, r1
 8011a52:	6123      	str	r3, [r4, #16]
 8011a54:	db15      	blt.n	8011a82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8011a56:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8011a5a:	3201      	adds	r2, #1
 8011a5c:	1a5b      	subs	r3, r3, r1
 8011a5e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011a62:	6022      	str	r2, [r4, #0]
 8011a64:	6123      	str	r3, [r4, #16]
 8011a66:	edc4 6a07 	vstr	s13, [r4, #28]
 8011a6a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8011a6e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011a72:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011a76:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a7e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011a82:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8011a86:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8011a8a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8011a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a92:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8011a96:	68a9      	ldr	r1, [r5, #8]
 8011a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a9c:	ed95 6a08 	vldr	s12, [r5, #32]
 8011aa0:	edd5 6a07 	vldr	s13, [r5, #28]
 8011aa4:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011aa8:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011aac:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011ab0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ab4:	edc5 6a07 	vstr	s13, [r5, #28]
 8011ab8:	441a      	add	r2, r3
 8011aba:	696b      	ldr	r3, [r5, #20]
 8011abc:	3301      	adds	r3, #1
 8011abe:	602a      	str	r2, [r5, #0]
 8011ac0:	616b      	str	r3, [r5, #20]
 8011ac2:	69ab      	ldr	r3, [r5, #24]
 8011ac4:	3b01      	subs	r3, #1
 8011ac6:	61ab      	str	r3, [r5, #24]
 8011ac8:	692b      	ldr	r3, [r5, #16]
 8011aca:	440b      	add	r3, r1
 8011acc:	68e9      	ldr	r1, [r5, #12]
 8011ace:	428b      	cmp	r3, r1
 8011ad0:	612b      	str	r3, [r5, #16]
 8011ad2:	db15      	blt.n	8011b00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8011ad4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011ad8:	3201      	adds	r2, #1
 8011ada:	1a5b      	subs	r3, r3, r1
 8011adc:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011ae0:	602a      	str	r2, [r5, #0]
 8011ae2:	612b      	str	r3, [r5, #16]
 8011ae4:	edc5 6a07 	vstr	s13, [r5, #28]
 8011ae8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8011aec:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011af0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011af4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8011af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011afc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011b00:	3f01      	subs	r7, #1
 8011b02:	e757      	b.n	80119b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011b04:	4299      	cmp	r1, r3
 8011b06:	dc13      	bgt.n	8011b30 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	da14      	bge.n	8011b36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011b0c:	2502      	movs	r5, #2
 8011b0e:	2703      	movs	r7, #3
 8011b10:	f04f 0800 	mov.w	r8, #0
 8011b14:	46a9      	mov	r9, r5
 8011b16:	f04f 0a01 	mov.w	sl, #1
 8011b1a:	e6ef      	b.n	80118fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011b1c:	2501      	movs	r5, #1
 8011b1e:	2700      	movs	r7, #0
 8011b20:	46a9      	mov	r9, r5
 8011b22:	46b8      	mov	r8, r7
 8011b24:	f04f 0a02 	mov.w	sl, #2
 8011b28:	e6e8      	b.n	80118fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011b2a:	2501      	movs	r5, #1
 8011b2c:	2702      	movs	r7, #2
 8011b2e:	e6e1      	b.n	80118f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8011b30:	2500      	movs	r5, #0
 8011b32:	2701      	movs	r7, #1
 8011b34:	e7f4      	b.n	8011b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8011b36:	2702      	movs	r7, #2
 8011b38:	2503      	movs	r5, #3
 8011b3a:	f04f 0900 	mov.w	r9, #0
 8011b3e:	46b8      	mov	r8, r7
 8011b40:	e7e9      	b.n	8011b16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8011b42:	4613      	mov	r3, r2
 8011b44:	e728      	b.n	8011998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8011b46:	bf00      	nop
 8011b48:	240074b4 	.word	0x240074b4
 8011b4c:	fffd8f01 	.word	0xfffd8f01
 8011b50:	00027100 	.word	0x00027100
 8011b54:	0004e1ff 	.word	0x0004e1ff
 8011b58:	0004e1fe 	.word	0x0004e1fe
 8011b5c:	240074bc 	.word	0x240074bc
 8011b60:	4613      	mov	r3, r2
 8011b62:	992b      	ldr	r1, [sp, #172]	; 0xac
 8011b64:	469e      	mov	lr, r3
 8011b66:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8011b68:	469c      	mov	ip, r3
 8011b6a:	9111      	str	r1, [sp, #68]	; 0x44
 8011b6c:	f04f 0900 	mov.w	r9, #0
 8011b70:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8011b74:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8011b78:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8011b7c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8011b80:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8011b84:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8011b88:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8011b8c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8011b90:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8011b94:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8011b98:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8011b9c:	f1bc 0f00 	cmp.w	ip, #0
 8011ba0:	d147      	bne.n	8011c32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011ba2:	eb03 0c07 	add.w	ip, r3, r7
 8011ba6:	1ad7      	subs	r7, r2, r3
 8011ba8:	f1b9 0f00 	cmp.w	r9, #0
 8011bac:	d009      	beq.n	8011bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011bae:	9029      	str	r0, [sp, #164]	; 0xa4
 8011bb0:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8011bb4:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8011bb8:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8011bbc:	912d      	str	r1, [sp, #180]	; 0xb4
 8011bbe:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8011bc2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011bc4:	f04f 0800 	mov.w	r8, #0
 8011bc8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011bcc:	9111      	str	r1, [sp, #68]	; 0x44
 8011bce:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011bd2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011bd6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8011bda:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8011bde:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011be2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011be6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8011bea:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8011bee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011bf2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011bf6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8011bfa:	f1be 0f00 	cmp.w	lr, #0
 8011bfe:	d031      	beq.n	8011c64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011c00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011c02:	4450      	add	r0, sl
 8011c04:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011c08:	4431      	add	r1, r6
 8011c0a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011c0e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011c12:	4549      	cmp	r1, r9
 8011c14:	db08      	blt.n	8011c28 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8011c16:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011c1a:	3001      	adds	r0, #1
 8011c1c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011c20:	eba1 0109 	sub.w	r1, r1, r9
 8011c24:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011c28:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011c2c:	f04f 0801 	mov.w	r8, #1
 8011c30:	e7e3      	b.n	8011bfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8011c32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011c34:	4450      	add	r0, sl
 8011c36:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011c3a:	4431      	add	r1, r6
 8011c3c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011c40:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011c44:	4541      	cmp	r1, r8
 8011c46:	db08      	blt.n	8011c5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8011c48:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011c4c:	3001      	adds	r0, #1
 8011c4e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011c52:	eba1 0108 	sub.w	r1, r1, r8
 8011c56:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011c5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011c5e:	f04f 0901 	mov.w	r9, #1
 8011c62:	e79b      	b.n	8011b9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011c64:	449c      	add	ip, r3
 8011c66:	1aff      	subs	r7, r7, r3
 8011c68:	f1b8 0f00 	cmp.w	r8, #0
 8011c6c:	d009      	beq.n	8011c82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8011c6e:	9019      	str	r0, [sp, #100]	; 0x64
 8011c70:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011c74:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8011c78:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8011c7c:	911d      	str	r1, [sp, #116]	; 0x74
 8011c7e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011c82:	1ad2      	subs	r2, r2, r3
 8011c84:	e68b      	b.n	801199e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011c86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c88:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	f000 80d1 	beq.w	8011e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011c90:	ad19      	add	r5, sp, #100	; 0x64
 8011c92:	ac39      	add	r4, sp, #228	; 0xe4
 8011c94:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011c96:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011c9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011c9e:	930c      	str	r3, [sp, #48]	; 0x30
 8011ca0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ca2:	6963      	ldr	r3, [r4, #20]
 8011ca4:	440b      	add	r3, r1
 8011ca6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011caa:	4408      	add	r0, r1
 8011cac:	b200      	sxth	r0, r0
 8011cae:	4283      	cmp	r3, r0
 8011cb0:	900d      	str	r0, [sp, #52]	; 0x34
 8011cb2:	f280 80c1 	bge.w	8011e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8011cb6:	428b      	cmp	r3, r1
 8011cb8:	da08      	bge.n	8011ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011cba:	2a00      	cmp	r2, #0
 8011cbc:	dd06      	ble.n	8011ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011cbe:	1acb      	subs	r3, r1, r3
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	f2c0 80bb 	blt.w	8011e3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f300 80b9 	bgt.w	8011e3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8011ccc:	6967      	ldr	r7, [r4, #20]
 8011cce:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8011cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cd4:	443b      	add	r3, r7
 8011cd6:	461f      	mov	r7, r3
 8011cd8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011cda:	1bdf      	subs	r7, r3, r7
 8011cdc:	4297      	cmp	r7, r2
 8011cde:	bfa8      	it	ge
 8011ce0:	4617      	movge	r7, r2
 8011ce2:	2f00      	cmp	r7, #0
 8011ce4:	f340 813c 	ble.w	8011f60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8011ce8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8011cea:	6829      	ldr	r1, [r5, #0]
 8011cec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cf0:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011cf4:	4411      	add	r1, r2
 8011cf6:	6820      	ldr	r0, [r4, #0]
 8011cf8:	4299      	cmp	r1, r3
 8011cfa:	dd1a      	ble.n	8011d32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011cfc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011d00:	4402      	add	r2, r0
 8011d02:	440b      	add	r3, r1
 8011d04:	b21b      	sxth	r3, r3
 8011d06:	429a      	cmp	r2, r3
 8011d08:	dc13      	bgt.n	8011d32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011d0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011d0c:	a912      	add	r1, sp, #72	; 0x48
 8011d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	9206      	str	r2, [sp, #24]
 8011d16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011d18:	9500      	str	r5, [sp, #0]
 8011d1a:	9205      	str	r2, [sp, #20]
 8011d1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d1e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011d22:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8011d24:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011d28:	aa49      	add	r2, sp, #292	; 0x124
 8011d2a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8011d2e:	4623      	mov	r3, r4
 8011d30:	47c8      	blx	r9
 8011d32:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8011d36:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8011d3a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8011d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011d42:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8011d46:	68a1      	ldr	r1, [r4, #8]
 8011d48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011d4c:	ed94 6a08 	vldr	s12, [r4, #32]
 8011d50:	edd4 6a07 	vldr	s13, [r4, #28]
 8011d54:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011d58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011d5c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011d60:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011d64:	edc4 6a07 	vstr	s13, [r4, #28]
 8011d68:	441a      	add	r2, r3
 8011d6a:	6963      	ldr	r3, [r4, #20]
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	6022      	str	r2, [r4, #0]
 8011d70:	6163      	str	r3, [r4, #20]
 8011d72:	69a3      	ldr	r3, [r4, #24]
 8011d74:	3b01      	subs	r3, #1
 8011d76:	61a3      	str	r3, [r4, #24]
 8011d78:	6923      	ldr	r3, [r4, #16]
 8011d7a:	440b      	add	r3, r1
 8011d7c:	68e1      	ldr	r1, [r4, #12]
 8011d7e:	428b      	cmp	r3, r1
 8011d80:	6123      	str	r3, [r4, #16]
 8011d82:	db15      	blt.n	8011db0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8011d84:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8011d88:	3201      	adds	r2, #1
 8011d8a:	1a5b      	subs	r3, r3, r1
 8011d8c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011d90:	6022      	str	r2, [r4, #0]
 8011d92:	6123      	str	r3, [r4, #16]
 8011d94:	edc4 6a07 	vstr	s13, [r4, #28]
 8011d98:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8011d9c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011da0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8011da4:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011dac:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8011db0:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8011db4:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8011db8:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8011dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011dc0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8011dc4:	68a9      	ldr	r1, [r5, #8]
 8011dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011dca:	ed95 6a08 	vldr	s12, [r5, #32]
 8011dce:	edd5 6a07 	vldr	s13, [r5, #28]
 8011dd2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011dd6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011dda:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011dde:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011de2:	edc5 6a07 	vstr	s13, [r5, #28]
 8011de6:	441a      	add	r2, r3
 8011de8:	696b      	ldr	r3, [r5, #20]
 8011dea:	3301      	adds	r3, #1
 8011dec:	602a      	str	r2, [r5, #0]
 8011dee:	616b      	str	r3, [r5, #20]
 8011df0:	69ab      	ldr	r3, [r5, #24]
 8011df2:	3b01      	subs	r3, #1
 8011df4:	61ab      	str	r3, [r5, #24]
 8011df6:	692b      	ldr	r3, [r5, #16]
 8011df8:	440b      	add	r3, r1
 8011dfa:	68e9      	ldr	r1, [r5, #12]
 8011dfc:	428b      	cmp	r3, r1
 8011dfe:	612b      	str	r3, [r5, #16]
 8011e00:	db15      	blt.n	8011e2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011e02:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8011e06:	3201      	adds	r2, #1
 8011e08:	1a5b      	subs	r3, r3, r1
 8011e0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011e0e:	602a      	str	r2, [r5, #0]
 8011e10:	612b      	str	r3, [r5, #16]
 8011e12:	edc5 6a07 	vstr	s13, [r5, #28]
 8011e16:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8011e1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011e1e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8011e22:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8011e26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011e2a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8011e2e:	3f01      	subs	r7, #1
 8011e30:	e757      	b.n	8011ce2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8011e32:	ad39      	add	r5, sp, #228	; 0xe4
 8011e34:	ac19      	add	r4, sp, #100	; 0x64
 8011e36:	e72d      	b.n	8011c94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8011e38:	4613      	mov	r3, r2
 8011e3a:	e744      	b.n	8011cc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011e3c:	4613      	mov	r3, r2
 8011e3e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8011e40:	469e      	mov	lr, r3
 8011e42:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8011e46:	461f      	mov	r7, r3
 8011e48:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8011e4c:	f04f 0900 	mov.w	r9, #0
 8011e50:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8011e54:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8011e58:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8011e5c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8011e60:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8011e64:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8011e66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8011e6a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8011e6e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8011e72:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8011e76:	960e      	str	r6, [sp, #56]	; 0x38
 8011e78:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8011e7c:	2f00      	cmp	r7, #0
 8011e7e:	d146      	bne.n	8011f0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011e80:	449c      	add	ip, r3
 8011e82:	1ad7      	subs	r7, r2, r3
 8011e84:	f1b9 0f00 	cmp.w	r9, #0
 8011e88:	d009      	beq.n	8011e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8011e8a:	9039      	str	r0, [sp, #228]	; 0xe4
 8011e8c:	913d      	str	r1, [sp, #244]	; 0xf4
 8011e8e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8011e92:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8011e96:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8011e9a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8011e9e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8011ea0:	f04f 0800 	mov.w	r8, #0
 8011ea4:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8011ea8:	910e      	str	r1, [sp, #56]	; 0x38
 8011eaa:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8011eae:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8011eb2:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8011eb6:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8011eba:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8011ebe:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8011ec2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8011ec6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8011eca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8011ece:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8011ed2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8011ed6:	f1be 0f00 	cmp.w	lr, #0
 8011eda:	d030      	beq.n	8011f3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011edc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011ede:	4450      	add	r0, sl
 8011ee0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011ee4:	4431      	add	r1, r6
 8011ee6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011eea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011eee:	4549      	cmp	r1, r9
 8011ef0:	db08      	blt.n	8011f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011ef2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011ef6:	3001      	adds	r0, #1
 8011ef8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011efc:	eba1 0109 	sub.w	r1, r1, r9
 8011f00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011f04:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011f08:	f04f 0801 	mov.w	r8, #1
 8011f0c:	e7e3      	b.n	8011ed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011f0e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011f10:	4450      	add	r0, sl
 8011f12:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011f16:	4431      	add	r1, r6
 8011f18:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011f1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011f20:	4541      	cmp	r1, r8
 8011f22:	db08      	blt.n	8011f36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011f24:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011f28:	3001      	adds	r0, #1
 8011f2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011f2e:	eba1 0108 	sub.w	r1, r1, r8
 8011f32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011f36:	3f01      	subs	r7, #1
 8011f38:	f04f 0901 	mov.w	r9, #1
 8011f3c:	e79e      	b.n	8011e7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8011f3e:	449c      	add	ip, r3
 8011f40:	1aff      	subs	r7, r7, r3
 8011f42:	f1b8 0f00 	cmp.w	r8, #0
 8011f46:	d009      	beq.n	8011f5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011f48:	9019      	str	r0, [sp, #100]	; 0x64
 8011f4a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8011f4e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8011f52:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8011f56:	911d      	str	r1, [sp, #116]	; 0x74
 8011f58:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8011f5c:	1ad2      	subs	r2, r2, r3
 8011f5e:	e6b5      	b.n	8011ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	b923      	cbnz	r3, 8011f70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011f66:	4b04      	ldr	r3, [pc, #16]	; (8011f78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011f68:	6818      	ldr	r0, [r3, #0]
 8011f6a:	6803      	ldr	r3, [r0, #0]
 8011f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f6e:	4798      	blx	r3
 8011f70:	b05b      	add	sp, #364	; 0x16c
 8011f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f76:	bf00      	nop
 8011f78:	240074bc 	.word	0x240074bc

08011f7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 8011f7c:	b570      	push	{r4, r5, r6, lr}
 8011f7e:	4604      	mov	r4, r0
 8011f80:	2500      	movs	r5, #0
 8011f82:	9804      	ldr	r0, [sp, #16]
 8011f84:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8011f88:	8025      	strh	r5, [r4, #0]
 8011f8a:	6061      	str	r1, [r4, #4]
 8011f8c:	7223      	strb	r3, [r4, #8]
 8011f8e:	7266      	strb	r6, [r4, #9]
 8011f90:	60e0      	str	r0, [r4, #12]
 8011f92:	8222      	strh	r2, [r4, #16]
 8011f94:	8265      	strh	r5, [r4, #18]
 8011f96:	82a5      	strh	r5, [r4, #20]
 8011f98:	82e5      	strh	r5, [r4, #22]
 8011f9a:	8325      	strh	r5, [r4, #24]
 8011f9c:	8365      	strh	r5, [r4, #26]
 8011f9e:	83a5      	strh	r5, [r4, #28]
 8011fa0:	77a5      	strb	r5, [r4, #30]
 8011fa2:	b32e      	cbz	r6, 8011ff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8011fa4:	6803      	ldr	r3, [r0, #0]
 8011fa6:	695b      	ldr	r3, [r3, #20]
 8011fa8:	4798      	blx	r3
 8011faa:	4606      	mov	r6, r0
 8011fac:	b300      	cbz	r0, 8011ff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8011fae:	68e0      	ldr	r0, [r4, #12]
 8011fb0:	4631      	mov	r1, r6
 8011fb2:	6803      	ldr	r3, [r0, #0]
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	4798      	blx	r3
 8011fb8:	4605      	mov	r5, r0
 8011fba:	b1c8      	cbz	r0, 8011ff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8011fbc:	7b43      	ldrb	r3, [r0, #13]
 8011fbe:	7a82      	ldrb	r2, [r0, #10]
 8011fc0:	005b      	lsls	r3, r3, #1
 8011fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	83a3      	strh	r3, [r4, #28]
 8011fca:	7a63      	ldrb	r3, [r4, #9]
 8011fcc:	2b04      	cmp	r3, #4
 8011fce:	d10f      	bne.n	8011ff0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8011fd0:	68e0      	ldr	r0, [r4, #12]
 8011fd2:	462a      	mov	r2, r5
 8011fd4:	4631      	mov	r1, r6
 8011fd6:	6803      	ldr	r3, [r0, #0]
 8011fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fda:	4798      	blx	r3
 8011fdc:	7b6b      	ldrb	r3, [r5, #13]
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8011fe4:	7aab      	ldrb	r3, [r5, #10]
 8011fe6:	4313      	orrs	r3, r2
 8011fe8:	4418      	add	r0, r3
 8011fea:	8ba3      	ldrh	r3, [r4, #28]
 8011fec:	4418      	add	r0, r3
 8011fee:	83a0      	strh	r0, [r4, #28]
 8011ff0:	4620      	mov	r0, r4
 8011ff2:	bd70      	pop	{r4, r5, r6, pc}

08011ff4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8011ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff8:	2400      	movs	r4, #0
 8011ffa:	b085      	sub	sp, #20
 8011ffc:	4681      	mov	r9, r0
 8011ffe:	4688      	mov	r8, r1
 8012000:	4692      	mov	sl, r2
 8012002:	469b      	mov	fp, r3
 8012004:	4627      	mov	r7, r4
 8012006:	4625      	mov	r5, r4
 8012008:	4626      	mov	r6, r4
 801200a:	4554      	cmp	r4, sl
 801200c:	da2a      	bge.n	8012064 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801200e:	2300      	movs	r3, #0
 8012010:	9303      	str	r3, [sp, #12]
 8012012:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012016:	429d      	cmp	r5, r3
 8012018:	d004      	beq.n	8012024 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801201a:	f242 030b 	movw	r3, #8203	; 0x200b
 801201e:	429d      	cmp	r5, r3
 8012020:	bf18      	it	ne
 8012022:	462f      	movne	r7, r5
 8012024:	ab03      	add	r3, sp, #12
 8012026:	4642      	mov	r2, r8
 8012028:	4659      	mov	r1, fp
 801202a:	4648      	mov	r0, r9
 801202c:	f002 fecc 	bl	8014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012030:	4605      	mov	r5, r0
 8012032:	b1b8      	cbz	r0, 8012064 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012034:	280a      	cmp	r0, #10
 8012036:	d015      	beq.n	8012064 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8012038:	9a03      	ldr	r2, [sp, #12]
 801203a:	b18a      	cbz	r2, 8012060 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801203c:	7b50      	ldrb	r0, [r2, #13]
 801203e:	4639      	mov	r1, r7
 8012040:	7a93      	ldrb	r3, [r2, #10]
 8012042:	0040      	lsls	r0, r0, #1
 8012044:	8895      	ldrh	r5, [r2, #4]
 8012046:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801204a:	4303      	orrs	r3, r0
 801204c:	4640      	mov	r0, r8
 801204e:	9301      	str	r3, [sp, #4]
 8012050:	f8d8 3000 	ldr.w	r3, [r8]
 8012054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012056:	4798      	blx	r3
 8012058:	9b01      	ldr	r3, [sp, #4]
 801205a:	4418      	add	r0, r3
 801205c:	4406      	add	r6, r0
 801205e:	b2b6      	uxth	r6, r6
 8012060:	3401      	adds	r4, #1
 8012062:	e7d2      	b.n	801200a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8012064:	4630      	mov	r0, r6
 8012066:	b005      	add	sp, #20
 8012068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801206c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801206c:	2a02      	cmp	r2, #2
 801206e:	b530      	push	{r4, r5, lr}
 8012070:	d011      	beq.n	8012096 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8012072:	2a03      	cmp	r2, #3
 8012074:	d01c      	beq.n	80120b0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8012076:	2a01      	cmp	r2, #1
 8012078:	d10c      	bne.n	8012094 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801207a:	888b      	ldrh	r3, [r1, #4]
 801207c:	8801      	ldrh	r1, [r0, #0]
 801207e:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012082:	1a5b      	subs	r3, r3, r1
 8012084:	8844      	ldrh	r4, [r0, #2]
 8012086:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801208a:	1a9b      	subs	r3, r3, r2
 801208c:	8004      	strh	r4, [r0, #0]
 801208e:	8081      	strh	r1, [r0, #4]
 8012090:	8043      	strh	r3, [r0, #2]
 8012092:	80c2      	strh	r2, [r0, #6]
 8012094:	bd30      	pop	{r4, r5, pc}
 8012096:	88cb      	ldrh	r3, [r1, #6]
 8012098:	8842      	ldrh	r2, [r0, #2]
 801209a:	1a9b      	subs	r3, r3, r2
 801209c:	88c2      	ldrh	r2, [r0, #6]
 801209e:	1a9b      	subs	r3, r3, r2
 80120a0:	888a      	ldrh	r2, [r1, #4]
 80120a2:	8801      	ldrh	r1, [r0, #0]
 80120a4:	8043      	strh	r3, [r0, #2]
 80120a6:	1a52      	subs	r2, r2, r1
 80120a8:	8881      	ldrh	r1, [r0, #4]
 80120aa:	1a52      	subs	r2, r2, r1
 80120ac:	8002      	strh	r2, [r0, #0]
 80120ae:	e7f1      	b.n	8012094 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80120b0:	88cb      	ldrh	r3, [r1, #6]
 80120b2:	8841      	ldrh	r1, [r0, #2]
 80120b4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80120b8:	1a5b      	subs	r3, r3, r1
 80120ba:	f9b0 5000 	ldrsh.w	r5, [r0]
 80120be:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 80120c2:	1a9b      	subs	r3, r3, r2
 80120c4:	8045      	strh	r5, [r0, #2]
 80120c6:	8082      	strh	r2, [r0, #4]
 80120c8:	8003      	strh	r3, [r0, #0]
 80120ca:	80c4      	strh	r4, [r0, #6]
 80120cc:	e7e2      	b.n	8012094 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

080120ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 80120ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d2:	b09f      	sub	sp, #124	; 0x7c
 80120d4:	9116      	str	r1, [sp, #88]	; 0x58
 80120d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80120d8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80120da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80120dc:	8809      	ldrh	r1, [r1, #0]
 80120de:	889b      	ldrh	r3, [r3, #4]
 80120e0:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 80120e4:	440b      	add	r3, r1
 80120e6:	9212      	str	r2, [sp, #72]	; 0x48
 80120e8:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 80120ec:	b21b      	sxth	r3, r3
 80120ee:	9011      	str	r0, [sp, #68]	; 0x44
 80120f0:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 80120f4:	9310      	str	r3, [sp, #64]	; 0x40
 80120f6:	f8d8 3000 	ldr.w	r3, [r8]
 80120fa:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 80120fe:	7a59      	ldrb	r1, [r3, #9]
 8012100:	7a1b      	ldrb	r3, [r3, #8]
 8012102:	9114      	str	r1, [sp, #80]	; 0x50
 8012104:	9315      	str	r3, [sp, #84]	; 0x54
 8012106:	2a00      	cmp	r2, #0
 8012108:	d06a      	beq.n	80121e0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801210a:	f898 3010 	ldrb.w	r3, [r8, #16]
 801210e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8012110:	2b04      	cmp	r3, #4
 8012112:	bf14      	ite	ne
 8012114:	2301      	movne	r3, #1
 8012116:	2302      	moveq	r3, #2
 8012118:	4413      	add	r3, r2
 801211a:	f04f 0900 	mov.w	r9, #0
 801211e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012120:	464c      	mov	r4, r9
 8012122:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012126:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801212a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801212e:	4293      	cmp	r3, r2
 8012130:	f280 808f 	bge.w	8012252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8012134:	2300      	movs	r3, #0
 8012136:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801213a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801213e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012142:	429c      	cmp	r4, r3
 8012144:	d006      	beq.n	8012154 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 8012146:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012148:	f242 020b 	movw	r2, #8203	; 0x200b
 801214c:	4294      	cmp	r4, r2
 801214e:	bf18      	it	ne
 8012150:	4623      	movne	r3, r4
 8012152:	930d      	str	r3, [sp, #52]	; 0x34
 8012154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012156:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8012158:	f8d8 2000 	ldr.w	r2, [r8]
 801215c:	428b      	cmp	r3, r1
 801215e:	db41      	blt.n	80121e4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8012160:	6813      	ldr	r3, [r2, #0]
 8012162:	4610      	mov	r0, r2
 8012164:	695b      	ldr	r3, [r3, #20]
 8012166:	4798      	blx	r3
 8012168:	4604      	mov	r4, r0
 801216a:	f8d8 0000 	ldr.w	r0, [r8]
 801216e:	aa1d      	add	r2, sp, #116	; 0x74
 8012170:	4621      	mov	r1, r4
 8012172:	6803      	ldr	r3, [r0, #0]
 8012174:	689e      	ldr	r6, [r3, #8]
 8012176:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801217a:	47b0      	blx	r6
 801217c:	901c      	str	r0, [sp, #112]	; 0x70
 801217e:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8012182:	429c      	cmp	r4, r3
 8012184:	f000 80ea 	beq.w	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8012188:	f242 030b 	movw	r3, #8203	; 0x200b
 801218c:	429c      	cmp	r4, r3
 801218e:	f000 80e5 	beq.w	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8012192:	2c00      	cmp	r4, #0
 8012194:	f000 80f7 	beq.w	8012386 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8012198:	2c0a      	cmp	r4, #10
 801219a:	d060      	beq.n	801225e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801219c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801219e:	b36a      	cbz	r2, 80121fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80121a0:	8894      	ldrh	r4, [r2, #4]
 80121a2:	f1bb 0f00 	cmp.w	fp, #0
 80121a6:	d03b      	beq.n	8012220 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80121a8:	f892 900d 	ldrb.w	r9, [r2, #13]
 80121ac:	f1bb 0f01 	cmp.w	fp, #1
 80121b0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80121b4:	f409 7380 	and.w	r3, r9, #256	; 0x100
 80121b8:	f892 900a 	ldrb.w	r9, [r2, #10]
 80121bc:	ea49 0903 	orr.w	r9, r9, r3
 80121c0:	d134      	bne.n	801222c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 80121c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80121c4:	eba5 0509 	sub.w	r5, r5, r9
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d14f      	bne.n	801226c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 80121cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80121ce:	eb09 0305 	add.w	r3, r9, r5
 80121d2:	4413      	add	r3, r2
 80121d4:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80121d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80121da:	4293      	cmp	r3, r2
 80121dc:	da51      	bge.n	8012282 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80121de:	e038      	b.n	8012252 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 80121e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80121e2:	e79a      	b.n	801211a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 80121e4:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80121e8:	4659      	mov	r1, fp
 80121ea:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80121ec:	9301      	str	r3, [sp, #4]
 80121ee:	ab1d      	add	r3, sp, #116	; 0x74
 80121f0:	9300      	str	r3, [sp, #0]
 80121f2:	ab1c      	add	r3, sp, #112	; 0x70
 80121f4:	f002 fe31 	bl	8014e5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 80121f8:	4604      	mov	r4, r0
 80121fa:	e7c0      	b.n	801217e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 80121fc:	f8d8 0000 	ldr.w	r0, [r8]
 8012200:	6803      	ldr	r3, [r0, #0]
 8012202:	691b      	ldr	r3, [r3, #16]
 8012204:	4798      	blx	r3
 8012206:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801220a:	4298      	cmp	r0, r3
 801220c:	f000 80a6 	beq.w	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8012210:	f242 030b 	movw	r3, #8203	; 0x200b
 8012214:	4298      	cmp	r0, r3
 8012216:	f000 80a1 	beq.w	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801221a:	f1bb 0f00 	cmp.w	fp, #0
 801221e:	d100      	bne.n	8012222 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8012220:	444d      	add	r5, r9
 8012222:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012224:	2a00      	cmp	r2, #0
 8012226:	d1bf      	bne.n	80121a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8012228:	4691      	mov	r9, r2
 801222a:	e097      	b.n	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801222c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801222e:	2b00      	cmp	r3, #0
 8012230:	f000 80ab 	beq.w	801238a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8012234:	f1bb 0f00 	cmp.w	fp, #0
 8012238:	d118      	bne.n	801226c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801223a:	f8d8 0000 	ldr.w	r0, [r8]
 801223e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012240:	6803      	ldr	r3, [r0, #0]
 8012242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012244:	4798      	blx	r3
 8012246:	4405      	add	r5, r0
 8012248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801224a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801224c:	1aeb      	subs	r3, r5, r3
 801224e:	4293      	cmp	r3, r2
 8012250:	dd17      	ble.n	8012282 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8012252:	2c00      	cmp	r4, #0
 8012254:	f000 8097 	beq.w	8012386 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8012258:	2c0a      	cmp	r4, #10
 801225a:	f040 8085 	bne.w	8012368 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801225e:	240a      	movs	r4, #10
 8012260:	fab4 f084 	clz	r0, r4
 8012264:	0940      	lsrs	r0, r0, #5
 8012266:	b01f      	add	sp, #124	; 0x7c
 8012268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226c:	f8d8 0000 	ldr.w	r0, [r8]
 8012270:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012272:	6803      	ldr	r3, [r0, #0]
 8012274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012276:	4798      	blx	r3
 8012278:	f1bb 0f01 	cmp.w	fp, #1
 801227c:	eba5 0500 	sub.w	r5, r5, r0
 8012280:	d0a4      	beq.n	80121cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8012282:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012284:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8012286:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801228a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801228e:	7b43      	ldrb	r3, [r0, #13]
 8012290:	4429      	add	r1, r5
 8012292:	015b      	lsls	r3, r3, #5
 8012294:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8012298:	7983      	ldrb	r3, [r0, #6]
 801229a:	4313      	orrs	r3, r2
 801229c:	440b      	add	r3, r1
 801229e:	42b3      	cmp	r3, r6
 80122a0:	db5c      	blt.n	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80122a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80122a4:	4299      	cmp	r1, r3
 80122a6:	da59      	bge.n	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80122a8:	f8d8 0000 	ldr.w	r0, [r8]
 80122ac:	42ae      	cmp	r6, r5
 80122ae:	6803      	ldr	r3, [r0, #0]
 80122b0:	bfcc      	ite	gt
 80122b2:	1b76      	subgt	r6, r6, r5
 80122b4:	2600      	movle	r6, #0
 80122b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b8:	bfc8      	it	gt
 80122ba:	b2b6      	uxthgt	r6, r6
 80122bc:	4798      	blx	r3
 80122be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80122c0:	7b5a      	ldrb	r2, [r3, #13]
 80122c2:	00d1      	lsls	r1, r2, #3
 80122c4:	f401 7780 	and.w	r7, r1, #256	; 0x100
 80122c8:	7a19      	ldrb	r1, [r3, #8]
 80122ca:	4339      	orrs	r1, r7
 80122cc:	0657      	lsls	r7, r2, #25
 80122ce:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80122d0:	bf48      	it	mi
 80122d2:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 80122d6:	4407      	add	r7, r0
 80122d8:	bf48      	it	mi
 80122da:	b209      	sxthmi	r1, r1
 80122dc:	1a7f      	subs	r7, r7, r1
 80122de:	9929      	ldr	r1, [sp, #164]	; 0xa4
 80122e0:	b2bf      	uxth	r7, r7
 80122e2:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 80122e6:	fa0f fa87 	sxth.w	sl, r7
 80122ea:	4551      	cmp	r1, sl
 80122ec:	dd3a      	ble.n	8012364 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 80122ee:	0112      	lsls	r2, r2, #4
 80122f0:	79d8      	ldrb	r0, [r3, #7]
 80122f2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80122f6:	4302      	orrs	r2, r0
 80122f8:	4492      	add	sl, r2
 80122fa:	4551      	cmp	r1, sl
 80122fc:	dc2e      	bgt.n	801235c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80122fe:	1bcf      	subs	r7, r1, r7
 8012300:	468a      	mov	sl, r1
 8012302:	b2bf      	uxth	r7, r7
 8012304:	9319      	str	r3, [sp, #100]	; 0x64
 8012306:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012308:	f8d8 0000 	ldr.w	r0, [r8]
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	6801      	ldr	r1, [r0, #0]
 8012310:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012312:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012314:	9313      	str	r3, [sp, #76]	; 0x4c
 8012316:	9218      	str	r2, [sp, #96]	; 0x60
 8012318:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801231a:	4788      	blx	r1
 801231c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012320:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012322:	910b      	str	r1, [sp, #44]	; 0x2c
 8012324:	f898 100e 	ldrb.w	r1, [r8, #14]
 8012328:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801232a:	910a      	str	r1, [sp, #40]	; 0x28
 801232c:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8012330:	9109      	str	r1, [sp, #36]	; 0x24
 8012332:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012336:	9305      	str	r3, [sp, #20]
 8012338:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801233a:	9206      	str	r2, [sp, #24]
 801233c:	e9cd a601 	strd	sl, r6, [sp, #4]
 8012340:	442e      	add	r6, r5
 8012342:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8012346:	b236      	sxth	r6, r6
 8012348:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801234a:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801234e:	9600      	str	r6, [sp, #0]
 8012350:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012352:	681a      	ldr	r2, [r3, #0]
 8012354:	9811      	ldr	r0, [sp, #68]	; 0x44
 8012356:	685b      	ldr	r3, [r3, #4]
 8012358:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801235a:	47b0      	blx	r6
 801235c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801235e:	3301      	adds	r3, #1
 8012360:	930e      	str	r3, [sp, #56]	; 0x38
 8012362:	e6e2      	b.n	801212a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 8012364:	2700      	movs	r7, #0
 8012366:	e7cd      	b.n	8012304 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 8012368:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801236a:	3501      	adds	r5, #1
 801236c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801236e:	429d      	cmp	r5, r3
 8012370:	f6bf af76 	bge.w	8012260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 8012374:	4659      	mov	r1, fp
 8012376:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8012378:	f7f0 fd0c 	bl	8002d94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801237c:	4604      	mov	r4, r0
 801237e:	b110      	cbz	r0, 8012386 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 8012380:	280a      	cmp	r0, #10
 8012382:	d1f2      	bne.n	801236a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 8012384:	e76b      	b.n	801225e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 8012386:	2400      	movs	r4, #0
 8012388:	e76a      	b.n	8012260 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801238a:	f1bb 0f00 	cmp.w	fp, #0
 801238e:	f43f af5b 	beq.w	8012248 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 8012392:	e776      	b.n	8012282 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

08012394 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 8012394:	b530      	push	{r4, r5, lr}
 8012396:	8a44      	ldrh	r4, [r0, #18]
 8012398:	8ac5      	ldrh	r5, [r0, #22]
 801239a:	82c3      	strh	r3, [r0, #22]
 801239c:	442c      	add	r4, r5
 801239e:	1ae4      	subs	r4, r4, r3
 80123a0:	8b03      	ldrh	r3, [r0, #24]
 80123a2:	8244      	strh	r4, [r0, #18]
 80123a4:	8a84      	ldrh	r4, [r0, #20]
 80123a6:	4422      	add	r2, r4
 80123a8:	440c      	add	r4, r1
 80123aa:	1a59      	subs	r1, r3, r1
 80123ac:	8342      	strh	r2, [r0, #26]
 80123ae:	8284      	strh	r4, [r0, #20]
 80123b0:	8301      	strh	r1, [r0, #24]
 80123b2:	bd30      	pop	{r4, r5, pc}

080123b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 80123b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b8:	7a43      	ldrb	r3, [r0, #9]
 80123ba:	b087      	sub	sp, #28
 80123bc:	4604      	mov	r4, r0
 80123be:	460f      	mov	r7, r1
 80123c0:	1eda      	subs	r2, r3, #3
 80123c2:	b2d2      	uxtb	r2, r2
 80123c4:	2900      	cmp	r1, #0
 80123c6:	d036      	beq.n	8012436 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 80123c8:	2a01      	cmp	r2, #1
 80123ca:	d932      	bls.n	8012432 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 80123cc:	1e58      	subs	r0, r3, #1
 80123ce:	f1d0 0b00 	rsbs	fp, r0, #0
 80123d2:	eb4b 0b00 	adc.w	fp, fp, r0
 80123d6:	1e99      	subs	r1, r3, #2
 80123d8:	424b      	negs	r3, r1
 80123da:	414b      	adcs	r3, r1
 80123dc:	9303      	str	r3, [sp, #12]
 80123de:	2300      	movs	r3, #0
 80123e0:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80123e4:	2500      	movs	r5, #0
 80123e6:	f242 0a0b 	movw	sl, #8203	; 0x200b
 80123ea:	46a9      	mov	r9, r5
 80123ec:	8265      	strh	r5, [r4, #18]
 80123ee:	82a5      	strh	r5, [r4, #20]
 80123f0:	2300      	movs	r3, #0
 80123f2:	9305      	str	r3, [sp, #20]
 80123f4:	8823      	ldrh	r3, [r4, #0]
 80123f6:	2b20      	cmp	r3, #32
 80123f8:	d02b      	beq.n	8012452 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 80123fa:	eba3 020a 	sub.w	r2, r3, sl
 80123fe:	4256      	negs	r6, r2
 8012400:	4156      	adcs	r6, r2
 8012402:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8012406:	4293      	cmp	r3, r2
 8012408:	d004      	beq.n	8012414 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801240a:	4553      	cmp	r3, sl
 801240c:	bf16      	itet	ne
 801240e:	4699      	movne	r9, r3
 8012410:	2601      	moveq	r6, #1
 8012412:	2600      	movne	r6, #0
 8012414:	ab05      	add	r3, sp, #20
 8012416:	68e2      	ldr	r2, [r4, #12]
 8012418:	7a21      	ldrb	r1, [r4, #8]
 801241a:	6860      	ldr	r0, [r4, #4]
 801241c:	f002 fcd4 	bl	8014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8012420:	8020      	strh	r0, [r4, #0]
 8012422:	b9c8      	cbnz	r0, 8012458 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8012424:	8b22      	ldrh	r2, [r4, #24]
 8012426:	2300      	movs	r3, #0
 8012428:	4611      	mov	r1, r2
 801242a:	4620      	mov	r0, r4
 801242c:	f7ff ffb2 	bl	8012394 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012430:	e066      	b.n	8012500 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8012432:	468b      	mov	fp, r1
 8012434:	e7cf      	b.n	80123d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 8012436:	3b01      	subs	r3, #1
 8012438:	2a01      	cmp	r2, #1
 801243a:	9103      	str	r1, [sp, #12]
 801243c:	468b      	mov	fp, r1
 801243e:	bf8c      	ite	hi
 8012440:	2200      	movhi	r2, #0
 8012442:	2201      	movls	r2, #1
 8012444:	2b01      	cmp	r3, #1
 8012446:	9202      	str	r2, [sp, #8]
 8012448:	bf8c      	ite	hi
 801244a:	2300      	movhi	r3, #0
 801244c:	2301      	movls	r3, #1
 801244e:	9301      	str	r3, [sp, #4]
 8012450:	e7c8      	b.n	80123e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 8012452:	4699      	mov	r9, r3
 8012454:	2601      	movs	r6, #1
 8012456:	e7dd      	b.n	8012414 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 8012458:	8ae3      	ldrh	r3, [r4, #22]
 801245a:	280a      	cmp	r0, #10
 801245c:	f103 0301 	add.w	r3, r3, #1
 8012460:	82e3      	strh	r3, [r4, #22]
 8012462:	d0df      	beq.n	8012424 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 8012464:	9a05      	ldr	r2, [sp, #20]
 8012466:	bb42      	cbnz	r2, 80124ba <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 8012468:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801246c:	4298      	cmp	r0, r3
 801246e:	d001      	beq.n	8012474 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8012470:	4550      	cmp	r0, sl
 8012472:	d1bd      	bne.n	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012474:	8823      	ldrh	r3, [r4, #0]
 8012476:	8b21      	ldrh	r1, [r4, #24]
 8012478:	2b20      	cmp	r3, #32
 801247a:	d001      	beq.n	8012480 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801247c:	4553      	cmp	r3, sl
 801247e:	d131      	bne.n	80124e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 8012480:	2e00      	cmp	r6, #0
 8012482:	bf0a      	itet	eq
 8012484:	460d      	moveq	r5, r1
 8012486:	4630      	movne	r0, r6
 8012488:	2001      	moveq	r0, #1
 801248a:	440a      	add	r2, r1
 801248c:	8aa3      	ldrh	r3, [r4, #20]
 801248e:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8012492:	b292      	uxth	r2, r2
 8012494:	8322      	strh	r2, [r4, #24]
 8012496:	4413      	add	r3, r2
 8012498:	2f00      	cmp	r7, #0
 801249a:	d03a      	beq.n	8012512 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801249c:	f1bb 0f00 	cmp.w	fp, #0
 80124a0:	d102      	bne.n	80124a8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80124a2:	9903      	ldr	r1, [sp, #12]
 80124a4:	b301      	cbz	r1, 80124e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80124a6:	b1f8      	cbz	r0, 80124e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80124a8:	8ba1      	ldrh	r1, [r4, #28]
 80124aa:	4419      	add	r1, r3
 80124ac:	458c      	cmp	ip, r1
 80124ae:	da2a      	bge.n	8012506 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80124b0:	8a61      	ldrh	r1, [r4, #18]
 80124b2:	b341      	cbz	r1, 8012506 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 80124b4:	4563      	cmp	r3, ip
 80124b6:	dd9b      	ble.n	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80124b8:	e01c      	b.n	80124f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 80124ba:	8893      	ldrh	r3, [r2, #4]
 80124bc:	4649      	mov	r1, r9
 80124be:	8023      	strh	r3, [r4, #0]
 80124c0:	f892 800d 	ldrb.w	r8, [r2, #13]
 80124c4:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80124c8:	f408 7080 	and.w	r0, r8, #256	; 0x100
 80124cc:	f892 800a 	ldrb.w	r8, [r2, #10]
 80124d0:	ea48 0800 	orr.w	r8, r8, r0
 80124d4:	68e0      	ldr	r0, [r4, #12]
 80124d6:	6803      	ldr	r3, [r0, #0]
 80124d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124da:	4798      	blx	r3
 80124dc:	eb08 0200 	add.w	r2, r8, r0
 80124e0:	b292      	uxth	r2, r2
 80124e2:	e7c7      	b.n	8012474 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80124e4:	2000      	movs	r0, #0
 80124e6:	e7d0      	b.n	801248a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 80124e8:	4563      	cmp	r3, ip
 80124ea:	dd81      	ble.n	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80124ec:	8a63      	ldrh	r3, [r4, #18]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	f43f af7e 	beq.w	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80124f4:	2301      	movs	r3, #1
 80124f6:	8ba2      	ldrh	r2, [r4, #28]
 80124f8:	77a3      	strb	r3, [r4, #30]
 80124fa:	8b63      	ldrh	r3, [r4, #26]
 80124fc:	4413      	add	r3, r2
 80124fe:	8363      	strh	r3, [r4, #26]
 8012500:	b007      	add	sp, #28
 8012502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012506:	2300      	movs	r3, #0
 8012508:	4611      	mov	r1, r2
 801250a:	4620      	mov	r0, r4
 801250c:	f7ff ff42 	bl	8012394 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8012510:	e76e      	b.n	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012512:	4563      	cmp	r3, ip
 8012514:	dd14      	ble.n	8012540 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 8012516:	9b02      	ldr	r3, [sp, #8]
 8012518:	b113      	cbz	r3, 8012520 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801251a:	2301      	movs	r3, #1
 801251c:	460a      	mov	r2, r1
 801251e:	e783      	b.n	8012428 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8012520:	9b01      	ldr	r3, [sp, #4]
 8012522:	2b00      	cmp	r3, #0
 8012524:	f43f af64 	beq.w	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012528:	2800      	cmp	r0, #0
 801252a:	f47f af61 	bne.w	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801252e:	b116      	cbz	r6, 8012536 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8012530:	2301      	movs	r3, #1
 8012532:	462a      	mov	r2, r5
 8012534:	e779      	b.n	801242a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 8012536:	8a63      	ldrh	r3, [r4, #18]
 8012538:	2b00      	cmp	r3, #0
 801253a:	f43f af59 	beq.w	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801253e:	e7df      	b.n	8012500 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8012540:	2800      	cmp	r0, #0
 8012542:	f47f af55 	bne.w	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8012546:	2e00      	cmp	r6, #0
 8012548:	f43f af52 	beq.w	80123f0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801254c:	2301      	movs	r3, #1
 801254e:	462a      	mov	r2, r5
 8012550:	e7db      	b.n	801250a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

08012552 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 8012552:	b530      	push	{r4, r5, lr}
 8012554:	4605      	mov	r5, r0
 8012556:	b08b      	sub	sp, #44	; 0x2c
 8012558:	b191      	cbz	r1, 8012580 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801255a:	2401      	movs	r4, #1
 801255c:	e9cd 3100 	strd	r3, r1, [sp]
 8012560:	4613      	mov	r3, r2
 8012562:	4601      	mov	r1, r0
 8012564:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8012568:	a802      	add	r0, sp, #8
 801256a:	f7ff fd07 	bl	8011f7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801256e:	2100      	movs	r1, #0
 8012570:	a802      	add	r0, sp, #8
 8012572:	f7ff ff1f 	bl	80123b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012576:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801257a:	b163      	cbz	r3, 8012596 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801257c:	3401      	adds	r4, #1
 801257e:	e7f6      	b.n	801256e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 8012580:	2401      	movs	r4, #1
 8012582:	f002 fced 	bl	8014f60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012586:	280a      	cmp	r0, #10
 8012588:	4628      	mov	r0, r5
 801258a:	bf08      	it	eq
 801258c:	3401      	addeq	r4, #1
 801258e:	f002 fce7 	bl	8014f60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8012592:	2800      	cmp	r0, #0
 8012594:	d1f7      	bne.n	8012586 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8012596:	b2a0      	uxth	r0, r4
 8012598:	b00b      	add	sp, #44	; 0x2c
 801259a:	bd30      	pop	{r4, r5, pc}

0801259c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a0:	b0e5      	sub	sp, #404	; 0x194
 80125a2:	4689      	mov	r9, r1
 80125a4:	461c      	mov	r4, r3
 80125a6:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80125aa:	900a      	str	r0, [sp, #40]	; 0x28
 80125ac:	f1ba 0f00 	cmp.w	sl, #0
 80125b0:	f000 80b4 	beq.w	801271c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	f000 80b0 	beq.w	801271c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80125bc:	7ba3      	ldrb	r3, [r4, #14]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f000 80ac 	beq.w	801271c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80125c4:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 80125c8:	6810      	ldr	r0, [r2, #0]
 80125ca:	6851      	ldr	r1, [r2, #4]
 80125cc:	2500      	movs	r5, #0
 80125ce:	4643      	mov	r3, r8
 80125d0:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 80125d4:	950f      	str	r5, [sp, #60]	; 0x3c
 80125d6:	af19      	add	r7, sp, #100	; 0x64
 80125d8:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80125dc:	79a2      	ldrb	r2, [r4, #6]
 80125de:	c303      	stmia	r3!, {r0, r1}
 80125e0:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 80125e4:	a90f      	add	r1, sp, #60	; 0x3c
 80125e6:	4640      	mov	r0, r8
 80125e8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80125ec:	f7ff fd3e 	bl	801206c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80125f0:	a90f      	add	r1, sp, #60	; 0x3c
 80125f2:	79a2      	ldrb	r2, [r4, #6]
 80125f4:	4608      	mov	r0, r1
 80125f6:	f7ff fd39 	bl	801206c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80125fa:	4638      	mov	r0, r7
 80125fc:	f002 f884 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8012600:	6820      	ldr	r0, [r4, #0]
 8012602:	6803      	ldr	r3, [r0, #0]
 8012604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012606:	4798      	blx	r3
 8012608:	4606      	mov	r6, r0
 801260a:	6820      	ldr	r0, [r4, #0]
 801260c:	6803      	ldr	r3, [r0, #0]
 801260e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012610:	4798      	blx	r3
 8012612:	4633      	mov	r3, r6
 8012614:	9000      	str	r0, [sp, #0]
 8012616:	4651      	mov	r1, sl
 8012618:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801261a:	4638      	mov	r0, r7
 801261c:	f002 f8cf 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012620:	7923      	ldrb	r3, [r4, #4]
 8012622:	6820      	ldr	r0, [r4, #0]
 8012624:	9308      	str	r3, [sp, #32]
 8012626:	6803      	ldr	r3, [r0, #0]
 8012628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801262a:	4798      	blx	r3
 801262c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012630:	181e      	adds	r6, r3, r0
 8012632:	42ae      	cmp	r6, r5
 8012634:	dd06      	ble.n	8012644 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 8012636:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801263a:	4282      	cmp	r2, r0
 801263c:	bfa4      	itt	ge
 801263e:	189d      	addge	r5, r3, r2
 8012640:	fb95 f5f6 	sdivge	r5, r5, r6
 8012644:	a832      	add	r0, sp, #200	; 0xc8
 8012646:	f002 f85f 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 801264a:	7c23      	ldrb	r3, [r4, #16]
 801264c:	b17b      	cbz	r3, 801266e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801264e:	6820      	ldr	r0, [r4, #0]
 8012650:	6803      	ldr	r3, [r0, #0]
 8012652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012654:	4798      	blx	r3
 8012656:	4683      	mov	fp, r0
 8012658:	6820      	ldr	r0, [r4, #0]
 801265a:	6803      	ldr	r3, [r0, #0]
 801265c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801265e:	4798      	blx	r3
 8012660:	465b      	mov	r3, fp
 8012662:	9000      	str	r0, [sp, #0]
 8012664:	4651      	mov	r1, sl
 8012666:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 8012668:	a832      	add	r0, sp, #200	; 0xc8
 801266a:	f002 f8a8 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801266e:	7be1      	ldrb	r1, [r4, #15]
 8012670:	a811      	add	r0, sp, #68	; 0x44
 8012672:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8012676:	7963      	ldrb	r3, [r4, #5]
 8012678:	1a52      	subs	r2, r2, r1
 801267a:	7c21      	ldrb	r1, [r4, #16]
 801267c:	9101      	str	r1, [sp, #4]
 801267e:	b292      	uxth	r2, r2
 8012680:	6821      	ldr	r1, [r4, #0]
 8012682:	9100      	str	r1, [sp, #0]
 8012684:	a932      	add	r1, sp, #200	; 0xc8
 8012686:	f7ff fc79 	bl	8011f7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801268a:	7c23      	ldrb	r3, [r4, #16]
 801268c:	b9bb      	cbnz	r3, 80126be <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801268e:	fa1f fa86 	uxth.w	sl, r6
 8012692:	2d00      	cmp	r5, #0
 8012694:	dd45      	ble.n	8012722 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8012696:	4638      	mov	r0, r7
 8012698:	f002 fc62 	bl	8014f60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801269c:	2800      	cmp	r0, #0
 801269e:	d03d      	beq.n	801271c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80126a0:	280a      	cmp	r0, #10
 80126a2:	d1f6      	bne.n	8012692 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80126a4:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80126a8:	3d01      	subs	r5, #1
 80126aa:	4453      	add	r3, sl
 80126ac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80126b0:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 80126b4:	eba3 030a 	sub.w	r3, r3, sl
 80126b8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80126bc:	e7e9      	b.n	8012692 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80126be:	0073      	lsls	r3, r6, #1
 80126c0:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80126c4:	fa1f fa86 	uxth.w	sl, r6
 80126c8:	9309      	str	r3, [sp, #36]	; 0x24
 80126ca:	2d00      	cmp	r5, #0
 80126cc:	dd29      	ble.n	8012722 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80126ce:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80126d2:	a811      	add	r0, sp, #68	; 0x44
 80126d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126d6:	428b      	cmp	r3, r1
 80126d8:	bfd4      	ite	le
 80126da:	2100      	movle	r1, #0
 80126dc:	2101      	movgt	r1, #1
 80126de:	f7ff fe69 	bl	80123b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80126e2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80126e6:	3b01      	subs	r3, #1
 80126e8:	b29b      	uxth	r3, r3
 80126ea:	455b      	cmp	r3, fp
 80126ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80126ee:	d005      	beq.n	80126fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 80126f0:	7961      	ldrb	r1, [r4, #5]
 80126f2:	4638      	mov	r0, r7
 80126f4:	f7f0 fb4e 	bl	8002d94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80126f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126fa:	e7f4      	b.n	80126e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 80126fc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8012700:	3d01      	subs	r5, #1
 8012702:	4453      	add	r3, sl
 8012704:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8012708:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801270c:	eba3 030a 	sub.w	r3, r3, sl
 8012710:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8012714:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1d6      	bne.n	80126ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801271c:	b065      	add	sp, #404	; 0x194
 801271e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012722:	0075      	lsls	r5, r6, #1
 8012724:	f04f 0a00 	mov.w	sl, #0
 8012728:	7c23      	ldrb	r3, [r4, #16]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d066      	beq.n	80127fc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801272e:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012732:	a811      	add	r0, sp, #68	; 0x44
 8012734:	428d      	cmp	r5, r1
 8012736:	bfd4      	ite	le
 8012738:	2100      	movle	r1, #0
 801273a:	2101      	movgt	r1, #1
 801273c:	f7ff fe3a 	bl	80123b4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8012740:	9b08      	ldr	r3, [sp, #32]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d055      	beq.n	80127f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012746:	f894 b010 	ldrb.w	fp, [r4, #16]
 801274a:	2264      	movs	r2, #100	; 0x64
 801274c:	4639      	mov	r1, r7
 801274e:	a84b      	add	r0, sp, #300	; 0x12c
 8012750:	f00b fad2 	bl	801dcf8 <memcpy>
 8012754:	f1bb 0f00 	cmp.w	fp, #0
 8012758:	d058      	beq.n	801280c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801275a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801275e:	7922      	ldrb	r2, [r4, #4]
 8012760:	2a01      	cmp	r2, #1
 8012762:	d13c      	bne.n	80127de <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 8012764:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 8012768:	1ac0      	subs	r0, r0, r3
 801276a:	2302      	movs	r3, #2
 801276c:	fb90 f0f3 	sdiv	r0, r0, r3
 8012770:	b200      	sxth	r0, r0
 8012772:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8012776:	4418      	add	r0, r3
 8012778:	7c23      	ldrb	r3, [r4, #16]
 801277a:	b200      	sxth	r0, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d03a      	beq.n	80127f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 8012780:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 8012784:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 8012788:	9000      	str	r0, [sp, #0]
 801278a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801278e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8012790:	e9cd 2105 	strd	r2, r1, [sp, #20]
 8012794:	e9cd a703 	strd	sl, r7, [sp, #12]
 8012798:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801279c:	464a      	mov	r2, r9
 801279e:	2100      	movs	r1, #0
 80127a0:	f7ff fc95 	bl	80120ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d1b9      	bne.n	801271c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80127a8:	b2b2      	uxth	r2, r6
 80127aa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80127ae:	4611      	mov	r1, r2
 80127b0:	4413      	add	r3, r2
 80127b2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80127b6:	b21b      	sxth	r3, r3
 80127b8:	1a52      	subs	r2, r2, r1
 80127ba:	7c21      	ldrb	r1, [r4, #16]
 80127bc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80127c0:	b212      	sxth	r2, r2
 80127c2:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 80127c6:	b109      	cbz	r1, 80127cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 80127c8:	42b2      	cmp	r2, r6
 80127ca:	dba7      	blt.n	801271c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80127cc:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 80127d0:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 80127d4:	440a      	add	r2, r1
 80127d6:	b212      	sxth	r2, r2
 80127d8:	4293      	cmp	r3, r2
 80127da:	dda5      	ble.n	8012728 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 80127dc:	e79e      	b.n	801271c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80127de:	2a02      	cmp	r2, #2
 80127e0:	d105      	bne.n	80127ee <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80127e2:	7be2      	ldrb	r2, [r4, #15]
 80127e4:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 80127e8:	1a80      	subs	r0, r0, r2
 80127ea:	1ac0      	subs	r0, r0, r3
 80127ec:	e7c0      	b.n	8012770 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 80127ee:	2000      	movs	r0, #0
 80127f0:	e7bf      	b.n	8012772 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80127f2:	7be0      	ldrb	r0, [r4, #15]
 80127f4:	e7bd      	b.n	8012772 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 80127f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80127fa:	e7c3      	b.n	8012784 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 80127fc:	9b08      	ldr	r3, [sp, #32]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d0f7      	beq.n	80127f2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8012802:	2264      	movs	r2, #100	; 0x64
 8012804:	4639      	mov	r1, r7
 8012806:	a84b      	add	r0, sp, #300	; 0x12c
 8012808:	f00b fa76 	bl	801dcf8 <memcpy>
 801280c:	2300      	movs	r3, #0
 801280e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012812:	6821      	ldr	r1, [r4, #0]
 8012814:	a84b      	add	r0, sp, #300	; 0x12c
 8012816:	f7ff fbed 	bl	8011ff4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801281a:	b203      	sxth	r3, r0
 801281c:	e79f      	b.n	801275e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801281e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801281e:	2b03      	cmp	r3, #3
 8012820:	d818      	bhi.n	8012854 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8012822:	e8df f003 	tbb	[pc, r3]
 8012826:	0602      	.short	0x0602
 8012828:	130d      	.short	0x130d
 801282a:	f9b0 2000 	ldrsh.w	r2, [r0]
 801282e:	1850      	adds	r0, r2, r1
 8012830:	4770      	bx	lr
 8012832:	8803      	ldrh	r3, [r0, #0]
 8012834:	8880      	ldrh	r0, [r0, #4]
 8012836:	4418      	add	r0, r3
 8012838:	b200      	sxth	r0, r0
 801283a:	1a80      	subs	r0, r0, r2
 801283c:	3801      	subs	r0, #1
 801283e:	4770      	bx	lr
 8012840:	8803      	ldrh	r3, [r0, #0]
 8012842:	8880      	ldrh	r0, [r0, #4]
 8012844:	4418      	add	r0, r3
 8012846:	b200      	sxth	r0, r0
 8012848:	1a40      	subs	r0, r0, r1
 801284a:	e7f7      	b.n	801283c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801284c:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012850:	4410      	add	r0, r2
 8012852:	4770      	bx	lr
 8012854:	2000      	movs	r0, #0
 8012856:	4770      	bx	lr

08012858 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012858:	2b03      	cmp	r3, #3
 801285a:	d817      	bhi.n	801288c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801285c:	e8df f003 	tbb	[pc, r3]
 8012860:	10090602 	.word	0x10090602
 8012864:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012868:	1850      	adds	r0, r2, r1
 801286a:	4770      	bx	lr
 801286c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012870:	e7fa      	b.n	8012868 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8012872:	8843      	ldrh	r3, [r0, #2]
 8012874:	88c0      	ldrh	r0, [r0, #6]
 8012876:	4418      	add	r0, r3
 8012878:	b200      	sxth	r0, r0
 801287a:	1a80      	subs	r0, r0, r2
 801287c:	3801      	subs	r0, #1
 801287e:	4770      	bx	lr
 8012880:	8843      	ldrh	r3, [r0, #2]
 8012882:	88c0      	ldrh	r0, [r0, #6]
 8012884:	4418      	add	r0, r3
 8012886:	b200      	sxth	r0, r0
 8012888:	1a40      	subs	r0, r0, r1
 801288a:	e7f7      	b.n	801287c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801288c:	2000      	movs	r0, #0
 801288e:	4770      	bx	lr

08012890 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012890:	4b01      	ldr	r3, [pc, #4]	; (8012898 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012892:	2200      	movs	r2, #0
 8012894:	601a      	str	r2, [r3, #0]
 8012896:	4770      	bx	lr
 8012898:	240074c4 	.word	0x240074c4

0801289c <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801289c:	4603      	mov	r3, r0
 801289e:	b1c8      	cbz	r0, 80128d4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80128a0:	0c02      	lsrs	r2, r0, #16
 80128a2:	0412      	lsls	r2, r2, #16
 80128a4:	b9a2      	cbnz	r2, 80128d0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80128a6:	0403      	lsls	r3, r0, #16
 80128a8:	2010      	movs	r0, #16
 80128aa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80128ae:	bf04      	itt	eq
 80128b0:	021b      	lsleq	r3, r3, #8
 80128b2:	3008      	addeq	r0, #8
 80128b4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80128b8:	bf04      	itt	eq
 80128ba:	011b      	lsleq	r3, r3, #4
 80128bc:	3004      	addeq	r0, #4
 80128be:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80128c2:	bf04      	itt	eq
 80128c4:	009b      	lsleq	r3, r3, #2
 80128c6:	3002      	addeq	r0, #2
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	db04      	blt.n	80128d6 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 80128cc:	3001      	adds	r0, #1
 80128ce:	4770      	bx	lr
 80128d0:	2000      	movs	r0, #0
 80128d2:	e7ea      	b.n	80128aa <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80128d4:	2020      	movs	r0, #32
 80128d6:	4770      	bx	lr

080128d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80128d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128dc:	b087      	sub	sp, #28
 80128de:	4681      	mov	r9, r0
 80128e0:	4698      	mov	r8, r3
 80128e2:	4610      	mov	r0, r2
 80128e4:	460d      	mov	r5, r1
 80128e6:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80128ea:	b981      	cbnz	r1, 801290e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80128ec:	b14b      	cbz	r3, 8012902 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80128ee:	460b      	mov	r3, r1
 80128f0:	464a      	mov	r2, r9
 80128f2:	4641      	mov	r1, r8
 80128f4:	e9cd 4700 	strd	r4, r7, [sp]
 80128f8:	f7ff ffee 	bl	80128d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80128fc:	b007      	add	sp, #28
 80128fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012902:	f04f 33ff 	mov.w	r3, #4294967295
 8012906:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801290a:	603b      	str	r3, [r7, #0]
 801290c:	e7f6      	b.n	80128fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801290e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8012912:	d107      	bne.n	8012924 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8012914:	fb09 f602 	mul.w	r6, r9, r2
 8012918:	fbb6 f0f4 	udiv	r0, r6, r4
 801291c:	fb04 6610 	mls	r6, r4, r0, r6
 8012920:	603e      	str	r6, [r7, #0]
 8012922:	e7eb      	b.n	80128fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8012924:	2601      	movs	r6, #1
 8012926:	fa09 fb01 	lsl.w	fp, r9, r1
 801292a:	408e      	lsls	r6, r1
 801292c:	fbbb f3f4 	udiv	r3, fp, r4
 8012930:	3e01      	subs	r6, #1
 8012932:	9302      	str	r3, [sp, #8]
 8012934:	fb0a f303 	mul.w	r3, sl, r3
 8012938:	4016      	ands	r6, r2
 801293a:	9303      	str	r3, [sp, #12]
 801293c:	4630      	mov	r0, r6
 801293e:	f7ff ffad 	bl	801289c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012942:	464a      	mov	r2, r9
 8012944:	460b      	mov	r3, r1
 8012946:	4601      	mov	r1, r0
 8012948:	4630      	mov	r0, r6
 801294a:	e9cd 4700 	strd	r4, r7, [sp]
 801294e:	f7ff ffc3 	bl	80128d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012952:	9b02      	ldr	r3, [sp, #8]
 8012954:	4606      	mov	r6, r0
 8012956:	eb05 0108 	add.w	r1, r5, r8
 801295a:	fb04 bb13 	mls	fp, r4, r3, fp
 801295e:	4658      	mov	r0, fp
 8012960:	f7ff ff9c 	bl	801289c <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012964:	ab05      	add	r3, sp, #20
 8012966:	465a      	mov	r2, fp
 8012968:	e9cd 4300 	strd	r4, r3, [sp]
 801296c:	4603      	mov	r3, r0
 801296e:	4650      	mov	r0, sl
 8012970:	f7ff ffb2 	bl	80128d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012974:	6839      	ldr	r1, [r7, #0]
 8012976:	9a05      	ldr	r2, [sp, #20]
 8012978:	9b03      	ldr	r3, [sp, #12]
 801297a:	4411      	add	r1, r2
 801297c:	fbb1 f2f4 	udiv	r2, r1, r4
 8012980:	18d3      	adds	r3, r2, r3
 8012982:	fb04 1412 	mls	r4, r4, r2, r1
 8012986:	441e      	add	r6, r3
 8012988:	603c      	str	r4, [r7, #0]
 801298a:	4430      	add	r0, r6
 801298c:	e7b6      	b.n	80128fc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801298e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801298e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012992:	b085      	sub	sp, #20
 8012994:	f1b0 0900 	subs.w	r9, r0, #0
 8012998:	461d      	mov	r5, r3
 801299a:	4617      	mov	r7, r2
 801299c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801299e:	bfbb      	ittet	lt
 80129a0:	f1c9 0900 	rsblt	r9, r9, #0
 80129a4:	f04f 36ff 	movlt.w	r6, #4294967295
 80129a8:	2601      	movge	r6, #1
 80129aa:	6823      	ldrlt	r3, [r4, #0]
 80129ac:	bfbc      	itt	lt
 80129ae:	425b      	neglt	r3, r3
 80129b0:	6023      	strlt	r3, [r4, #0]
 80129b2:	2a00      	cmp	r2, #0
 80129b4:	da04      	bge.n	80129c0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 80129b6:	6823      	ldr	r3, [r4, #0]
 80129b8:	4257      	negs	r7, r2
 80129ba:	4276      	negs	r6, r6
 80129bc:	425b      	negs	r3, r3
 80129be:	6023      	str	r3, [r4, #0]
 80129c0:	2d00      	cmp	r5, #0
 80129c2:	4638      	mov	r0, r7
 80129c4:	bfba      	itte	lt
 80129c6:	426d      	neglt	r5, r5
 80129c8:	f04f 38ff 	movlt.w	r8, #4294967295
 80129cc:	f04f 0801 	movge.w	r8, #1
 80129d0:	f7ff ff64 	bl	801289c <_ZN8touchgfx16TouchCalibration4clzuEm>
 80129d4:	ab03      	add	r3, sp, #12
 80129d6:	463a      	mov	r2, r7
 80129d8:	e9cd 5300 	strd	r5, r3, [sp]
 80129dc:	4603      	mov	r3, r0
 80129de:	4648      	mov	r0, r9
 80129e0:	f7ff ff7a 	bl	80128d8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80129e4:	6823      	ldr	r3, [r4, #0]
 80129e6:	9a03      	ldr	r2, [sp, #12]
 80129e8:	4546      	cmp	r6, r8
 80129ea:	441a      	add	r2, r3
 80129ec:	fb92 f3f5 	sdiv	r3, r2, r5
 80129f0:	4418      	add	r0, r3
 80129f2:	fb05 2313 	mls	r3, r5, r3, r2
 80129f6:	bf18      	it	ne
 80129f8:	4240      	negne	r0, r0
 80129fa:	1c72      	adds	r2, r6, #1
 80129fc:	6023      	str	r3, [r4, #0]
 80129fe:	d105      	bne.n	8012a0c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	f1c3 0200 	rsb	r2, r3, #0
 8012a06:	db0b      	blt.n	8012a20 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8012a08:	6022      	str	r2, [r4, #0]
 8012a0a:	e006      	b.n	8012a1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012a0c:	2e01      	cmp	r6, #1
 8012a0e:	d104      	bne.n	8012a1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	da02      	bge.n	8012a1a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8012a14:	442b      	add	r3, r5
 8012a16:	3801      	subs	r0, #1
 8012a18:	6023      	str	r3, [r4, #0]
 8012a1a:	b005      	add	sp, #20
 8012a1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012a20:	3801      	subs	r0, #1
 8012a22:	1b52      	subs	r2, r2, r5
 8012a24:	e7f0      	b.n	8012a08 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08012a28 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8012a28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012a2c:	4c1c      	ldr	r4, [pc, #112]	; (8012aa0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8012a2e:	4605      	mov	r5, r0
 8012a30:	6807      	ldr	r7, [r0, #0]
 8012a32:	69a3      	ldr	r3, [r4, #24]
 8012a34:	b92b      	cbnz	r3, 8012a42 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8012a36:	6840      	ldr	r0, [r0, #4]
 8012a38:	e9c5 7000 	strd	r7, r0, [r5]
 8012a3c:	b004      	add	sp, #16
 8012a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a42:	f04f 0802 	mov.w	r8, #2
 8012a46:	68a2      	ldr	r2, [r4, #8]
 8012a48:	ae04      	add	r6, sp, #16
 8012a4a:	6820      	ldr	r0, [r4, #0]
 8012a4c:	fb93 f1f8 	sdiv	r1, r3, r8
 8012a50:	440a      	add	r2, r1
 8012a52:	69e1      	ldr	r1, [r4, #28]
 8012a54:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012a58:	463a      	mov	r2, r7
 8012a5a:	9600      	str	r6, [sp, #0]
 8012a5c:	f7ff ff97 	bl	801298e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012a60:	69a3      	ldr	r3, [r4, #24]
 8012a62:	4607      	mov	r7, r0
 8012a64:	686a      	ldr	r2, [r5, #4]
 8012a66:	6a21      	ldr	r1, [r4, #32]
 8012a68:	9600      	str	r6, [sp, #0]
 8012a6a:	6860      	ldr	r0, [r4, #4]
 8012a6c:	f7ff ff8f 	bl	801298e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012a70:	69a3      	ldr	r3, [r4, #24]
 8012a72:	6962      	ldr	r2, [r4, #20]
 8012a74:	4407      	add	r7, r0
 8012a76:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012a78:	9600      	str	r6, [sp, #0]
 8012a7a:	68e0      	ldr	r0, [r4, #12]
 8012a7c:	fb93 f8f8 	sdiv	r8, r3, r8
 8012a80:	4442      	add	r2, r8
 8012a82:	9203      	str	r2, [sp, #12]
 8012a84:	682a      	ldr	r2, [r5, #0]
 8012a86:	f7ff ff82 	bl	801298e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012a8a:	4680      	mov	r8, r0
 8012a8c:	9600      	str	r6, [sp, #0]
 8012a8e:	69a3      	ldr	r3, [r4, #24]
 8012a90:	686a      	ldr	r2, [r5, #4]
 8012a92:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012a94:	6920      	ldr	r0, [r4, #16]
 8012a96:	f7ff ff7a 	bl	801298e <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012a9a:	4440      	add	r0, r8
 8012a9c:	e7cc      	b.n	8012a38 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012a9e:	bf00      	nop
 8012aa0:	240074c8 	.word	0x240074c8

08012aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8012aa4:	4b07      	ldr	r3, [pc, #28]	; (8012ac4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d109      	bne.n	8012ac0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012aac:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012ab0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012ab4:	8003      	strh	r3, [r0, #0]
 8012ab6:	4b04      	ldr	r3, [pc, #16]	; (8012ac8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	3b01      	subs	r3, #1
 8012abc:	1a9b      	subs	r3, r3, r2
 8012abe:	800b      	strh	r3, [r1, #0]
 8012ac0:	4770      	bx	lr
 8012ac2:	bf00      	nop
 8012ac4:	240074b4 	.word	0x240074b4
 8012ac8:	240074b0 	.word	0x240074b0

08012acc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012acc:	4b07      	ldr	r3, [pc, #28]	; (8012aec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012ace:	b510      	push	{r4, lr}
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d108      	bne.n	8012ae8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8012ad6:	4b06      	ldr	r3, [pc, #24]	; (8012af0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8012ad8:	880c      	ldrh	r4, [r1, #0]
 8012ada:	881b      	ldrh	r3, [r3, #0]
 8012adc:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	1b1b      	subs	r3, r3, r4
 8012ae4:	8003      	strh	r3, [r0, #0]
 8012ae6:	800a      	strh	r2, [r1, #0]
 8012ae8:	bd10      	pop	{r4, pc}
 8012aea:	bf00      	nop
 8012aec:	240074b4 	.word	0x240074b4
 8012af0:	240074b0 	.word	0x240074b0

08012af4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8012af4:	4b0a      	ldr	r3, [pc, #40]	; (8012b20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8012af6:	b510      	push	{r4, lr}
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	2b01      	cmp	r3, #1
 8012afc:	d10e      	bne.n	8012b1c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8012afe:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8012b02:	8843      	ldrh	r3, [r0, #2]
 8012b04:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012b08:	18ca      	adds	r2, r1, r3
 8012b0a:	4b06      	ldr	r3, [pc, #24]	; (8012b24 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8012b0c:	8044      	strh	r4, [r0, #2]
 8012b0e:	881b      	ldrh	r3, [r3, #0]
 8012b10:	1a9b      	subs	r3, r3, r2
 8012b12:	8003      	strh	r3, [r0, #0]
 8012b14:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012b18:	8081      	strh	r1, [r0, #4]
 8012b1a:	80c3      	strh	r3, [r0, #6]
 8012b1c:	bd10      	pop	{r4, pc}
 8012b1e:	bf00      	nop
 8012b20:	240074b4 	.word	0x240074b4
 8012b24:	240074b0 	.word	0x240074b0

08012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8012b28:	4b08      	ldr	r3, [pc, #32]	; (8012b4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d10c      	bne.n	8012b4a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8012b30:	8803      	ldrh	r3, [r0, #0]
 8012b32:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8012b36:	8842      	ldrh	r2, [r0, #2]
 8012b38:	8002      	strh	r2, [r0, #0]
 8012b3a:	185a      	adds	r2, r3, r1
 8012b3c:	4b04      	ldr	r3, [pc, #16]	; (8012b50 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8012b3e:	881b      	ldrh	r3, [r3, #0]
 8012b40:	1a9b      	subs	r3, r3, r2
 8012b42:	8043      	strh	r3, [r0, #2]
 8012b44:	88c3      	ldrh	r3, [r0, #6]
 8012b46:	80c1      	strh	r1, [r0, #6]
 8012b48:	8083      	strh	r3, [r0, #4]
 8012b4a:	4770      	bx	lr
 8012b4c:	240074b4 	.word	0x240074b4
 8012b50:	240074b0 	.word	0x240074b0

08012b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8012b54:	4b07      	ldr	r3, [pc, #28]	; (8012b74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8012b56:	b510      	push	{r4, lr}
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	2b01      	cmp	r3, #1
 8012b5c:	d108      	bne.n	8012b70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8012b5e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012b62:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012b66:	8003      	strh	r3, [r0, #0]
 8012b68:	8893      	ldrh	r3, [r2, #4]
 8012b6a:	3b01      	subs	r3, #1
 8012b6c:	1b1b      	subs	r3, r3, r4
 8012b6e:	800b      	strh	r3, [r1, #0]
 8012b70:	bd10      	pop	{r4, pc}
 8012b72:	bf00      	nop
 8012b74:	240074b4 	.word	0x240074b4

08012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012b78:	4b0a      	ldr	r3, [pc, #40]	; (8012ba4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012b7a:	460a      	mov	r2, r1
 8012b7c:	b510      	push	{r4, lr}
 8012b7e:	781b      	ldrb	r3, [r3, #0]
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d10d      	bne.n	8012ba0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8012b84:	8881      	ldrh	r1, [r0, #4]
 8012b86:	8803      	ldrh	r3, [r0, #0]
 8012b88:	440b      	add	r3, r1
 8012b8a:	4601      	mov	r1, r0
 8012b8c:	3b01      	subs	r3, #1
 8012b8e:	f821 3b02 	strh.w	r3, [r1], #2
 8012b92:	f7ff ffdf 	bl	8012b54 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8012b96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012b9a:	88c2      	ldrh	r2, [r0, #6]
 8012b9c:	80c3      	strh	r3, [r0, #6]
 8012b9e:	8082      	strh	r2, [r0, #4]
 8012ba0:	bd10      	pop	{r4, pc}
 8012ba2:	bf00      	nop
 8012ba4:	240074b4 	.word	0x240074b4

08012ba8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012ba8:	b570      	push	{r4, r5, r6, lr}
 8012baa:	2300      	movs	r3, #0
 8012bac:	4c0a      	ldr	r4, [pc, #40]	; (8012bd8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8012bae:	4605      	mov	r5, r0
 8012bb0:	460e      	mov	r6, r1
 8012bb2:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8012bb6:	6820      	ldr	r0, [r4, #0]
 8012bb8:	b110      	cbz	r0, 8012bc0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8012bba:	6803      	ldr	r3, [r0, #0]
 8012bbc:	695b      	ldr	r3, [r3, #20]
 8012bbe:	4798      	blx	r3
 8012bc0:	6026      	str	r6, [r4, #0]
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	6833      	ldr	r3, [r6, #0]
 8012bc6:	68db      	ldr	r3, [r3, #12]
 8012bc8:	4798      	blx	r3
 8012bca:	682b      	ldr	r3, [r5, #0]
 8012bcc:	4628      	mov	r0, r5
 8012bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012bd4:	4718      	bx	r3
 8012bd6:	bf00      	nop
 8012bd8:	240074f8 	.word	0x240074f8

08012bdc <_ZN8touchgfx11Application13requestRedrawEv>:
 8012bdc:	4b06      	ldr	r3, [pc, #24]	; (8012bf8 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8012bde:	2100      	movs	r1, #0
 8012be0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012be4:	4b05      	ldr	r3, [pc, #20]	; (8012bfc <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8012be6:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8012bea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bee:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8012bf2:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8012bf6:	4770      	bx	lr
 8012bf8:	240074b0 	.word	0x240074b0
 8012bfc:	240074b2 	.word	0x240074b2

08012c00 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012c00:	4b03      	ldr	r3, [pc, #12]	; (8012c10 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012c02:	6818      	ldr	r0, [r3, #0]
 8012c04:	b110      	cbz	r0, 8012c0c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8012c06:	6803      	ldr	r3, [r0, #0]
 8012c08:	699b      	ldr	r3, [r3, #24]
 8012c0a:	4718      	bx	r3
 8012c0c:	4770      	bx	lr
 8012c0e:	bf00      	nop
 8012c10:	240074f8 	.word	0x240074f8

08012c14 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012c14:	4770      	bx	lr
	...

08012c18 <_ZN8touchgfx11Application4drawEv>:
 8012c18:	4b09      	ldr	r3, [pc, #36]	; (8012c40 <_ZN8touchgfx11Application4drawEv+0x28>)
 8012c1a:	b507      	push	{r0, r1, r2, lr}
 8012c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c20:	2100      	movs	r1, #0
 8012c22:	4b08      	ldr	r3, [pc, #32]	; (8012c44 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012c24:	9100      	str	r1, [sp, #0]
 8012c26:	4669      	mov	r1, sp
 8012c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c2c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012c30:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012c34:	6803      	ldr	r3, [r0, #0]
 8012c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c38:	4798      	blx	r3
 8012c3a:	b003      	add	sp, #12
 8012c3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012c40:	240074b0 	.word	0x240074b0
 8012c44:	240074b2 	.word	0x240074b2

08012c48 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012c48:	4b03      	ldr	r3, [pc, #12]	; (8012c58 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8012c4a:	6818      	ldr	r0, [r3, #0]
 8012c4c:	b110      	cbz	r0, 8012c54 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012c4e:	6803      	ldr	r3, [r0, #0]
 8012c50:	69db      	ldr	r3, [r3, #28]
 8012c52:	4718      	bx	r3
 8012c54:	4770      	bx	lr
 8012c56:	bf00      	nop
 8012c58:	240074f8 	.word	0x240074f8

08012c5c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8012c5c:	4b03      	ldr	r3, [pc, #12]	; (8012c6c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8012c5e:	6818      	ldr	r0, [r3, #0]
 8012c60:	b110      	cbz	r0, 8012c68 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8012c62:	6803      	ldr	r3, [r0, #0]
 8012c64:	6a1b      	ldr	r3, [r3, #32]
 8012c66:	4718      	bx	r3
 8012c68:	4770      	bx	lr
 8012c6a:	bf00      	nop
 8012c6c:	240074f8 	.word	0x240074f8

08012c70 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8012c70:	2300      	movs	r3, #0
 8012c72:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8012c76:	4770      	bx	lr

08012c78 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8012c78:	4b03      	ldr	r3, [pc, #12]	; (8012c88 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8012c7a:	6818      	ldr	r0, [r3, #0]
 8012c7c:	b110      	cbz	r0, 8012c84 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8012c7e:	6803      	ldr	r3, [r0, #0]
 8012c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c82:	4718      	bx	r3
 8012c84:	4770      	bx	lr
 8012c86:	bf00      	nop
 8012c88:	240074f8 	.word	0x240074f8

08012c8c <_ZN8touchgfx11Application15handleTickEventEv>:
 8012c8c:	b570      	push	{r4, r5, r6, lr}
 8012c8e:	4d32      	ldr	r5, [pc, #200]	; (8012d58 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8012c90:	4604      	mov	r4, r0
 8012c92:	6828      	ldr	r0, [r5, #0]
 8012c94:	b140      	cbz	r0, 8012ca8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012c96:	7a03      	ldrb	r3, [r0, #8]
 8012c98:	b933      	cbnz	r3, 8012ca8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012c9a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8012c9e:	6803      	ldr	r3, [r0, #0]
 8012ca0:	689b      	ldr	r3, [r3, #8]
 8012ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ca6:	4718      	bx	r3
 8012ca8:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8012cac:	b97b      	cbnz	r3, 8012cce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012cae:	b170      	cbz	r0, 8012cce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012cb0:	7a03      	ldrb	r3, [r0, #8]
 8012cb2:	b163      	cbz	r3, 8012cce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012cb4:	4b29      	ldr	r3, [pc, #164]	; (8012d5c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8012cb6:	6818      	ldr	r0, [r3, #0]
 8012cb8:	b110      	cbz	r0, 8012cc0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012cba:	6803      	ldr	r3, [r0, #0]
 8012cbc:	691b      	ldr	r3, [r3, #16]
 8012cbe:	4798      	blx	r3
 8012cc0:	6828      	ldr	r0, [r5, #0]
 8012cc2:	6803      	ldr	r3, [r0, #0]
 8012cc4:	68db      	ldr	r3, [r3, #12]
 8012cc6:	4798      	blx	r3
 8012cc8:	2301      	movs	r3, #1
 8012cca:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8012cce:	2500      	movs	r5, #0
 8012cd0:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8012cd4:	42a8      	cmp	r0, r5
 8012cd6:	dd0c      	ble.n	8012cf2 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8012cd8:	1963      	adds	r3, r4, r5
 8012cda:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8012cde:	b132      	cbz	r2, 8012cee <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8012ce0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8012ce4:	4413      	add	r3, r2
 8012ce6:	6858      	ldr	r0, [r3, #4]
 8012ce8:	6803      	ldr	r3, [r0, #0]
 8012cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012cec:	4798      	blx	r3
 8012cee:	3501      	adds	r5, #1
 8012cf0:	e7ee      	b.n	8012cd0 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	4298      	cmp	r0, r3
 8012cf8:	d015      	beq.n	8012d26 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8012cfa:	18e1      	adds	r1, r4, r3
 8012cfc:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8012d00:	b16d      	cbz	r5, 8012d1e <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d00a      	beq.n	8012d1c <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8012d06:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8012d0a:	4431      	add	r1, r6
 8012d0c:	684e      	ldr	r6, [r1, #4]
 8012d0e:	b291      	uxth	r1, r2
 8012d10:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8012d14:	604e      	str	r6, [r1, #4]
 8012d16:	18a1      	adds	r1, r4, r2
 8012d18:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8012d1c:	3201      	adds	r2, #1
 8012d1e:	3301      	adds	r3, #1
 8012d20:	e7e9      	b.n	8012cf6 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8012d22:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8012d26:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8012d2a:	4295      	cmp	r5, r2
 8012d2c:	dd0d      	ble.n	8012d4a <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8012d2e:	1e6b      	subs	r3, r5, #1
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8012d36:	4618      	mov	r0, r3
 8012d38:	3104      	adds	r1, #4
 8012d3a:	4285      	cmp	r5, r0
 8012d3c:	ddf1      	ble.n	8012d22 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8012d3e:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8012d42:	3001      	adds	r0, #1
 8012d44:	f841 6c04 	str.w	r6, [r1, #-4]
 8012d48:	e7f7      	b.n	8012d3a <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8012d4a:	4b04      	ldr	r3, [pc, #16]	; (8012d5c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8012d4c:	6818      	ldr	r0, [r3, #0]
 8012d4e:	b110      	cbz	r0, 8012d56 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8012d50:	6803      	ldr	r3, [r0, #0]
 8012d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d54:	e7a5      	b.n	8012ca2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8012d56:	bd70      	pop	{r4, r5, r6, pc}
 8012d58:	240074fc 	.word	0x240074fc
 8012d5c:	240074f8 	.word	0x240074f8

08012d60 <_ZN8touchgfx11ApplicationD1Ev>:
 8012d60:	4770      	bx	lr

08012d62 <_ZN8touchgfx11ApplicationD0Ev>:
 8012d62:	b510      	push	{r4, lr}
 8012d64:	4604      	mov	r4, r0
 8012d66:	f44f 719c 	mov.w	r1, #312	; 0x138
 8012d6a:	f00a fe1e 	bl	801d9aa <_ZdlPvj>
 8012d6e:	4620      	mov	r0, r4
 8012d70:	bd10      	pop	{r4, pc}

08012d72 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8012d72:	b510      	push	{r4, lr}
 8012d74:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012d78:	888a      	ldrh	r2, [r1, #4]
 8012d7a:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012d7e:	4422      	add	r2, r4
 8012d80:	b212      	sxth	r2, r2
 8012d82:	4293      	cmp	r3, r2
 8012d84:	da15      	bge.n	8012db2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012d86:	8882      	ldrh	r2, [r0, #4]
 8012d88:	4413      	add	r3, r2
 8012d8a:	b21b      	sxth	r3, r3
 8012d8c:	429c      	cmp	r4, r3
 8012d8e:	da10      	bge.n	8012db2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012d90:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012d94:	88c9      	ldrh	r1, [r1, #6]
 8012d96:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012d9a:	4419      	add	r1, r3
 8012d9c:	b209      	sxth	r1, r1
 8012d9e:	428a      	cmp	r2, r1
 8012da0:	da07      	bge.n	8012db2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012da2:	88c0      	ldrh	r0, [r0, #6]
 8012da4:	4410      	add	r0, r2
 8012da6:	b200      	sxth	r0, r0
 8012da8:	4283      	cmp	r3, r0
 8012daa:	bfac      	ite	ge
 8012dac:	2000      	movge	r0, #0
 8012dae:	2001      	movlt	r0, #1
 8012db0:	bd10      	pop	{r4, pc}
 8012db2:	2000      	movs	r0, #0
 8012db4:	e7fc      	b.n	8012db0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012db6 <_ZN8touchgfx4Rect10restrictToEss>:
 8012db6:	f9b0 3000 	ldrsh.w	r3, [r0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	b510      	push	{r4, lr}
 8012dbe:	da04      	bge.n	8012dca <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8012dc0:	8884      	ldrh	r4, [r0, #4]
 8012dc2:	4423      	add	r3, r4
 8012dc4:	8083      	strh	r3, [r0, #4]
 8012dc6:	2300      	movs	r3, #0
 8012dc8:	8003      	strh	r3, [r0, #0]
 8012dca:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012dce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012dd2:	1b09      	subs	r1, r1, r4
 8012dd4:	428b      	cmp	r3, r1
 8012dd6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8012dda:	bfc8      	it	gt
 8012ddc:	8081      	strhgt	r1, [r0, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	da04      	bge.n	8012dec <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8012de2:	88c1      	ldrh	r1, [r0, #6]
 8012de4:	440b      	add	r3, r1
 8012de6:	80c3      	strh	r3, [r0, #6]
 8012de8:	2300      	movs	r3, #0
 8012dea:	8043      	strh	r3, [r0, #2]
 8012dec:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012df0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012df4:	1a52      	subs	r2, r2, r1
 8012df6:	4293      	cmp	r3, r2
 8012df8:	bfc8      	it	gt
 8012dfa:	80c2      	strhgt	r2, [r0, #6]
 8012dfc:	bd10      	pop	{r4, pc}
	...

08012e00 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8012e00:	4b10      	ldr	r3, [pc, #64]	; (8012e44 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8012e02:	b510      	push	{r4, lr}
 8012e04:	460c      	mov	r4, r1
 8012e06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e0a:	4b0f      	ldr	r3, [pc, #60]	; (8012e48 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8012e0c:	4620      	mov	r0, r4
 8012e0e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012e12:	f7ff ffd0 	bl	8012db6 <_ZN8touchgfx4Rect10restrictToEss>
 8012e16:	4b0d      	ldr	r3, [pc, #52]	; (8012e4c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8012e18:	6818      	ldr	r0, [r3, #0]
 8012e1a:	b190      	cbz	r0, 8012e42 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8012e1c:	6803      	ldr	r3, [r0, #0]
 8012e1e:	4621      	mov	r1, r4
 8012e20:	689b      	ldr	r3, [r3, #8]
 8012e22:	4798      	blx	r3
 8012e24:	4b0a      	ldr	r3, [pc, #40]	; (8012e50 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8012e26:	6818      	ldr	r0, [r3, #0]
 8012e28:	b118      	cbz	r0, 8012e32 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8012e2a:	6803      	ldr	r3, [r0, #0]
 8012e2c:	4621      	mov	r1, r4
 8012e2e:	689b      	ldr	r3, [r3, #8]
 8012e30:	4798      	blx	r3
 8012e32:	4b08      	ldr	r3, [pc, #32]	; (8012e54 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8012e34:	4621      	mov	r1, r4
 8012e36:	6818      	ldr	r0, [r3, #0]
 8012e38:	6803      	ldr	r3, [r0, #0]
 8012e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e3e:	69db      	ldr	r3, [r3, #28]
 8012e40:	4718      	bx	r3
 8012e42:	bd10      	pop	{r4, pc}
 8012e44:	240074b2 	.word	0x240074b2
 8012e48:	240074b0 	.word	0x240074b0
 8012e4c:	240074f8 	.word	0x240074f8
 8012e50:	240074f4 	.word	0x240074f4
 8012e54:	240074bc 	.word	0x240074bc

08012e58 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8012e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012e5a:	4606      	mov	r6, r0
 8012e5c:	4608      	mov	r0, r1
 8012e5e:	460f      	mov	r7, r1
 8012e60:	f7fc ff87 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e64:	b9e8      	cbnz	r0, 8012ea2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012e66:	f9b7 5000 	ldrsh.w	r5, [r7]
 8012e6a:	f9b6 4000 	ldrsh.w	r4, [r6]
 8012e6e:	42a5      	cmp	r5, r4
 8012e70:	db17      	blt.n	8012ea2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012e72:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012e76:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	db11      	blt.n	8012ea2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012e7e:	88b9      	ldrh	r1, [r7, #4]
 8012e80:	440d      	add	r5, r1
 8012e82:	88b1      	ldrh	r1, [r6, #4]
 8012e84:	440c      	add	r4, r1
 8012e86:	b22d      	sxth	r5, r5
 8012e88:	b224      	sxth	r4, r4
 8012e8a:	42a5      	cmp	r5, r4
 8012e8c:	dc09      	bgt.n	8012ea2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012e8e:	88f8      	ldrh	r0, [r7, #6]
 8012e90:	4410      	add	r0, r2
 8012e92:	88f2      	ldrh	r2, [r6, #6]
 8012e94:	4413      	add	r3, r2
 8012e96:	b200      	sxth	r0, r0
 8012e98:	b21b      	sxth	r3, r3
 8012e9a:	4298      	cmp	r0, r3
 8012e9c:	bfcc      	ite	gt
 8012e9e:	2000      	movgt	r0, #0
 8012ea0:	2001      	movle	r0, #1
 8012ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ea4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea6:	4604      	mov	r4, r0
 8012ea8:	4608      	mov	r0, r1
 8012eaa:	460d      	mov	r5, r1
 8012eac:	f7fc ff61 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012eb0:	b978      	cbnz	r0, 8012ed2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012eb2:	4620      	mov	r0, r4
 8012eb4:	f7fc ff5d 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012eb8:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012ebc:	b150      	cbz	r0, 8012ed4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012ebe:	8026      	strh	r6, [r4, #0]
 8012ec0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012ec4:	8063      	strh	r3, [r4, #2]
 8012ec6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8012eca:	80a3      	strh	r3, [r4, #4]
 8012ecc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012ed0:	80e3      	strh	r3, [r4, #6]
 8012ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012ed4:	f9b4 1000 	ldrsh.w	r1, [r4]
 8012ed8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012edc:	42b1      	cmp	r1, r6
 8012ede:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012ee2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8012ee6:	460f      	mov	r7, r1
 8012ee8:	88ed      	ldrh	r5, [r5, #6]
 8012eea:	bfa8      	it	ge
 8012eec:	4637      	movge	r7, r6
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	4466      	add	r6, ip
 8012ef4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012ef8:	bfa8      	it	ge
 8012efa:	4610      	movge	r0, r2
 8012efc:	442a      	add	r2, r5
 8012efe:	88e5      	ldrh	r5, [r4, #6]
 8012f00:	4461      	add	r1, ip
 8012f02:	b236      	sxth	r6, r6
 8012f04:	8027      	strh	r7, [r4, #0]
 8012f06:	442b      	add	r3, r5
 8012f08:	b209      	sxth	r1, r1
 8012f0a:	b212      	sxth	r2, r2
 8012f0c:	8060      	strh	r0, [r4, #2]
 8012f0e:	b21b      	sxth	r3, r3
 8012f10:	428e      	cmp	r6, r1
 8012f12:	bfac      	ite	ge
 8012f14:	ebc7 0106 	rsbge	r1, r7, r6
 8012f18:	ebc7 0101 	rsblt	r1, r7, r1
 8012f1c:	429a      	cmp	r2, r3
 8012f1e:	bfac      	ite	ge
 8012f20:	ebc0 0202 	rsbge	r2, r0, r2
 8012f24:	ebc0 0203 	rsblt	r2, r0, r3
 8012f28:	80a1      	strh	r1, [r4, #4]
 8012f2a:	80e2      	strh	r2, [r4, #6]
 8012f2c:	e7d1      	b.n	8012ed2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08012f30 <_ZN8touchgfx11Application11getInstanceEv>:
 8012f30:	4b01      	ldr	r3, [pc, #4]	; (8012f38 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012f32:	6818      	ldr	r0, [r3, #0]
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop
 8012f38:	24007508 	.word	0x24007508

08012f3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 8012f42:	30a8      	adds	r0, #168	; 0xa8
 8012f44:	f820 3c24 	strh.w	r3, [r0, #-36]
 8012f48:	f802 3b01 	strb.w	r3, [r2], #1
 8012f4c:	4282      	cmp	r2, r0
 8012f4e:	d1fb      	bne.n	8012f48 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 8012f50:	4770      	bx	lr

08012f52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012f52:	4603      	mov	r3, r0
 8012f54:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8012f58:	2200      	movs	r2, #0
 8012f5a:	801a      	strh	r2, [r3, #0]
 8012f5c:	3308      	adds	r3, #8
 8012f5e:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012f62:	f823 2c04 	strh.w	r2, [r3, #-4]
 8012f66:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012f6a:	428b      	cmp	r3, r1
 8012f6c:	d1f5      	bne.n	8012f5a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012f6e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8012f72:	4770      	bx	lr

08012f74 <_ZN8touchgfx11ApplicationC1Ev>:
 8012f74:	b570      	push	{r4, r5, r6, lr}
 8012f76:	4b19      	ldr	r3, [pc, #100]	; (8012fdc <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 8012f78:	2500      	movs	r5, #0
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	30a8      	adds	r0, #168	; 0xa8
 8012f7e:	f840 3ca8 	str.w	r3, [r0, #-168]
 8012f82:	f820 5c24 	strh.w	r5, [r0, #-36]
 8012f86:	f7ff ffe4 	bl	8012f52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012f8a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8012f8e:	f7ff ffe0 	bl	8012f52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012f92:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 8012f96:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 8012f9a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8012f9e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8012fa2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 8012fa6:	490e      	ldr	r1, [pc, #56]	; (8012fe0 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 8012fa8:	480e      	ldr	r0, [pc, #56]	; (8012fe4 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 8012faa:	f00a fbf5 	bl	801d798 <CRC_Lock>
 8012fae:	4e0e      	ldr	r6, [pc, #56]	; (8012fe8 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 8012fb0:	4b0e      	ldr	r3, [pc, #56]	; (8012fec <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012fb2:	b158      	cbz	r0, 8012fcc <_ZN8touchgfx11ApplicationC1Ev+0x58>
 8012fb4:	801d      	strh	r5, [r3, #0]
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	4a0d      	ldr	r2, [pc, #52]	; (8012ff0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8012fba:	4620      	mov	r0, r4
 8012fbc:	6013      	str	r3, [r2, #0]
 8012fbe:	4a0d      	ldr	r2, [pc, #52]	; (8012ff4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012fc0:	6033      	str	r3, [r6, #0]
 8012fc2:	6013      	str	r3, [r2, #0]
 8012fc4:	f7ff ffba 	bl	8012f3c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 8012fc8:	4620      	mov	r0, r4
 8012fca:	bd70      	pop	{r4, r5, r6, pc}
 8012fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012fd0:	2002      	movs	r0, #2
 8012fd2:	801a      	strh	r2, [r3, #0]
 8012fd4:	6030      	str	r0, [r6, #0]
 8012fd6:	f001 fa1d 	bl	8014414 <_ZN8touchgfx6Screen4drawEv>
 8012fda:	e7ec      	b.n	8012fb6 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8012fdc:	08020b20 	.word	0x08020b20
 8012fe0:	b5e8b5cd 	.word	0xb5e8b5cd
 8012fe4:	f407a5c2 	.word	0xf407a5c2
 8012fe8:	240074f8 	.word	0x240074f8
 8012fec:	240000f0 	.word	0x240000f0
 8012ff0:	24007508 	.word	0x24007508
 8012ff4:	240074fc 	.word	0x240074fc

08012ff8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012ff8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	428b      	cmp	r3, r1
 8013002:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8013006:	b510      	push	{r4, lr}
 8013008:	d908      	bls.n	801301c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801300a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801300e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8013018:	685a      	ldr	r2, [r3, #4]
 801301a:	6062      	str	r2, [r4, #4]
 801301c:	bd10      	pop	{r4, pc}
	...

08013020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013024:	b08f      	sub	sp, #60	; 0x3c
 8013026:	4b94      	ldr	r3, [pc, #592]	; (8013278 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8013028:	4683      	mov	fp, r0
 801302a:	ac0a      	add	r4, sp, #40	; 0x28
 801302c:	e884 0006 	stmia.w	r4, {r1, r2}
 8013030:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013034:	4620      	mov	r0, r4
 8013036:	4b91      	ldr	r3, [pc, #580]	; (801327c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8013038:	f9b3 1000 	ldrsh.w	r1, [r3]
 801303c:	f7ff febb 	bl	8012db6 <_ZN8touchgfx4Rect10restrictToEss>
 8013040:	4620      	mov	r0, r4
 8013042:	f7fc fe96 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013046:	2800      	cmp	r0, #0
 8013048:	d16a      	bne.n	8013120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801304a:	9403      	str	r4, [sp, #12]
 801304c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 8013050:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8013054:	2400      	movs	r4, #0
 8013056:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801305a:	9301      	str	r3, [sp, #4]
 801305c:	36a0      	adds	r6, #160	; 0xa0
 801305e:	42a5      	cmp	r5, r4
 8013060:	d00d      	beq.n	801307e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 8013062:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8013066:	9803      	ldr	r0, [sp, #12]
 8013068:	f7ff fef6 	bl	8012e58 <_ZNK8touchgfx4Rect8includesERKS0_>
 801306c:	b128      	cbz	r0, 801307a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801306e:	1e69      	subs	r1, r5, #1
 8013070:	9801      	ldr	r0, [sp, #4]
 8013072:	1b09      	subs	r1, r1, r4
 8013074:	b289      	uxth	r1, r1
 8013076:	f7ff ffbf 	bl	8012ff8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801307a:	3401      	adds	r4, #1
 801307c:	e7ef      	b.n	801305e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801307e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 8013082:	1e7b      	subs	r3, r7, #1
 8013084:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 8013088:	9704      	str	r7, [sp, #16]
 801308a:	9302      	str	r3, [sp, #8]
 801308c:	2400      	movs	r4, #0
 801308e:	4655      	mov	r5, sl
 8013090:	9705      	str	r7, [sp, #20]
 8013092:	4626      	mov	r6, r4
 8013094:	9b05      	ldr	r3, [sp, #20]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d078      	beq.n	801318c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801309a:	9903      	ldr	r1, [sp, #12]
 801309c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80130a0:	f7ff fe67 	bl	8012d72 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80130a4:	b360      	cbz	r0, 8013100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80130a6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80130aa:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80130ae:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80130b2:	45e6      	cmp	lr, ip
 80130b4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80130b8:	db35      	blt.n	8013126 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80130ba:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80130be:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80130c2:	4472      	add	r2, lr
 80130c4:	4463      	add	r3, ip
 80130c6:	b212      	sxth	r2, r2
 80130c8:	b21b      	sxth	r3, r3
 80130ca:	429a      	cmp	r2, r3
 80130cc:	dc2b      	bgt.n	8013126 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80130ce:	fa1f f288 	uxth.w	r2, r8
 80130d2:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 80130d6:	45c1      	cmp	r9, r8
 80130d8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80130dc:	4413      	add	r3, r2
 80130de:	fa1f fc89 	uxth.w	ip, r9
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	fa0f fe83 	sxth.w	lr, r3
 80130e8:	db0f      	blt.n	801310a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80130ea:	eba3 030c 	sub.w	r3, r3, ip
 80130ee:	1ac9      	subs	r1, r1, r3
 80130f0:	b209      	sxth	r1, r1
 80130f2:	2900      	cmp	r1, #0
 80130f4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80130f8:	dd12      	ble.n	8013120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80130fa:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80130fe:	4604      	mov	r4, r0
 8013100:	9b05      	ldr	r3, [sp, #20]
 8013102:	3d08      	subs	r5, #8
 8013104:	3b01      	subs	r3, #1
 8013106:	9305      	str	r3, [sp, #20]
 8013108:	e7c4      	b.n	8013094 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801310a:	4461      	add	r1, ip
 801310c:	b209      	sxth	r1, r1
 801310e:	4571      	cmp	r1, lr
 8013110:	dc3a      	bgt.n	8013188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013112:	eba2 020c 	sub.w	r2, r2, ip
 8013116:	b212      	sxth	r2, r2
 8013118:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801311c:	2a00      	cmp	r2, #0
 801311e:	dcee      	bgt.n	80130fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013120:	b00f      	add	sp, #60	; 0x3c
 8013122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013126:	45c1      	cmp	r9, r8
 8013128:	db2e      	blt.n	8013188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801312a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801312e:	4499      	add	r9, r3
 8013130:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8013134:	4498      	add	r8, r3
 8013136:	fa0f f989 	sxth.w	r9, r9
 801313a:	fa0f f888 	sxth.w	r8, r8
 801313e:	45c1      	cmp	r9, r8
 8013140:	dc22      	bgt.n	8013188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013142:	fa1f f28c 	uxth.w	r2, ip
 8013146:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801314a:	45e6      	cmp	lr, ip
 801314c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013150:	4413      	add	r3, r2
 8013152:	fa1f f88e 	uxth.w	r8, lr
 8013156:	b29b      	uxth	r3, r3
 8013158:	fa0f f983 	sxth.w	r9, r3
 801315c:	db0a      	blt.n	8013174 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801315e:	eba3 0308 	sub.w	r3, r3, r8
 8013162:	1ac9      	subs	r1, r1, r3
 8013164:	b209      	sxth	r1, r1
 8013166:	2900      	cmp	r1, #0
 8013168:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801316c:	ddd8      	ble.n	8013120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801316e:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8013172:	e7c4      	b.n	80130fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013174:	4441      	add	r1, r8
 8013176:	b209      	sxth	r1, r1
 8013178:	4549      	cmp	r1, r9
 801317a:	dc05      	bgt.n	8013188 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801317c:	eba2 0208 	sub.w	r2, r2, r8
 8013180:	b212      	sxth	r2, r2
 8013182:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013186:	e7c9      	b.n	801311c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8013188:	4606      	mov	r6, r0
 801318a:	e7b9      	b.n	8013100 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801318c:	2c00      	cmp	r4, #0
 801318e:	f47f af7d 	bne.w	801308c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 8013192:	2e00      	cmp	r6, #0
 8013194:	f000 81e1 	beq.w	801355a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8013198:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801319c:	4655      	mov	r5, sl
 801319e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80131a2:	b2b9      	uxth	r1, r7
 80131a4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80131a8:	b2b3      	uxth	r3, r6
 80131aa:	9105      	str	r1, [sp, #20]
 80131ac:	9805      	ldr	r0, [sp, #20]
 80131ae:	441a      	add	r2, r3
 80131b0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80131b4:	b292      	uxth	r2, r2
 80131b6:	4401      	add	r1, r0
 80131b8:	fa0f f882 	sxth.w	r8, r2
 80131bc:	b289      	uxth	r1, r1
 80131be:	9106      	str	r1, [sp, #24]
 80131c0:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 80131c4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80131c8:	9b04      	ldr	r3, [sp, #16]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d058      	beq.n	8013280 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80131ce:	9903      	ldr	r1, [sp, #12]
 80131d0:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80131d4:	f7ff fdcd 	bl	8012d72 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80131d8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80131dc:	b1d8      	cbz	r0, 8013216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80131de:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 80131e2:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 80131e6:	4576      	cmp	r6, lr
 80131e8:	dc26      	bgt.n	8013238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80131ea:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 80131ee:	44f4      	add	ip, lr
 80131f0:	fa0f fc8c 	sxth.w	ip, ip
 80131f4:	45e0      	cmp	r8, ip
 80131f6:	db1f      	blt.n	8013238 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 80131f8:	428f      	cmp	r7, r1
 80131fa:	fa1f fc81 	uxth.w	ip, r1
 80131fe:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 8013202:	dc0f      	bgt.n	8013224 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8013204:	9806      	ldr	r0, [sp, #24]
 8013206:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801320a:	eba0 0c0c 	sub.w	ip, r0, ip
 801320e:	eba1 010c 	sub.w	r1, r1, ip
 8013212:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8013216:	4620      	mov	r0, r4
 8013218:	9904      	ldr	r1, [sp, #16]
 801321a:	3d08      	subs	r5, #8
 801321c:	4604      	mov	r4, r0
 801321e:	3901      	subs	r1, #1
 8013220:	9104      	str	r1, [sp, #16]
 8013222:	e7cf      	b.n	80131c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8013224:	4461      	add	r1, ip
 8013226:	b209      	sxth	r1, r1
 8013228:	4549      	cmp	r1, r9
 801322a:	dcf5      	bgt.n	8013218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801322c:	9905      	ldr	r1, [sp, #20]
 801322e:	eba1 0c0c 	sub.w	ip, r1, ip
 8013232:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8013236:	e7ee      	b.n	8013216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8013238:	428f      	cmp	r7, r1
 801323a:	dced      	bgt.n	8013218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801323c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 8013240:	4461      	add	r1, ip
 8013242:	b209      	sxth	r1, r1
 8013244:	4589      	cmp	r9, r1
 8013246:	dbe7      	blt.n	8013218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8013248:	4576      	cmp	r6, lr
 801324a:	fa1f fc8e 	uxth.w	ip, lr
 801324e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 8013252:	dc08      	bgt.n	8013266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8013254:	eba2 0c0c 	sub.w	ip, r2, ip
 8013258:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801325c:	eba1 010c 	sub.w	r1, r1, ip
 8013260:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8013264:	e7d7      	b.n	8013216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8013266:	4461      	add	r1, ip
 8013268:	b209      	sxth	r1, r1
 801326a:	4588      	cmp	r8, r1
 801326c:	dbd4      	blt.n	8013218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801326e:	eba3 0c0c 	sub.w	ip, r3, ip
 8013272:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 8013276:	e7ce      	b.n	8013216 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8013278:	240074b2 	.word	0x240074b2
 801327c:	240074b0 	.word	0x240074b0
 8013280:	2c00      	cmp	r4, #0
 8013282:	f000 816a 	beq.w	801355a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 8013286:	9b02      	ldr	r3, [sp, #8]
 8013288:	3301      	adds	r3, #1
 801328a:	f000 8166 	beq.w	801355a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801328e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 8013292:	9803      	ldr	r0, [sp, #12]
 8013294:	4621      	mov	r1, r4
 8013296:	f7ff fddf 	bl	8012e58 <_ZNK8touchgfx4Rect8includesERKS0_>
 801329a:	b120      	cbz	r0, 80132a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801329c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80132a0:	9801      	ldr	r0, [sp, #4]
 80132a2:	f7ff fea9 	bl	8012ff8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80132a6:	9903      	ldr	r1, [sp, #12]
 80132a8:	4620      	mov	r0, r4
 80132aa:	f7ff fd62 	bl	8012d72 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80132ae:	2800      	cmp	r0, #0
 80132b0:	f000 809b 	beq.w	80133ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80132b4:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 80132b8:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 80132bc:	b281      	uxth	r1, r0
 80132be:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80132c2:	9309      	str	r3, [sp, #36]	; 0x24
 80132c4:	eb01 0c03 	add.w	ip, r1, r3
 80132c8:	b2ab      	uxth	r3, r5
 80132ca:	4285      	cmp	r5, r0
 80132cc:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80132d0:	fa1f f98c 	uxth.w	r9, ip
 80132d4:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 80132d8:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 80132dc:	eb03 040c 	add.w	r4, r3, ip
 80132e0:	b2a4      	uxth	r4, r4
 80132e2:	9405      	str	r4, [sp, #20]
 80132e4:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 80132e8:	9404      	str	r4, [sp, #16]
 80132ea:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 80132ee:	f340 809a 	ble.w	8013426 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 80132f2:	1a5b      	subs	r3, r3, r1
 80132f4:	4596      	cmp	lr, r2
 80132f6:	fa0f f589 	sxth.w	r5, r9
 80132fa:	b29b      	uxth	r3, r3
 80132fc:	b21e      	sxth	r6, r3
 80132fe:	dd2e      	ble.n	801335e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 8013300:	9f02      	ldr	r7, [sp, #8]
 8013302:	fa1f fe8e 	uxth.w	lr, lr
 8013306:	b292      	uxth	r2, r2
 8013308:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801330c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013310:	9f04      	ldr	r7, [sp, #16]
 8013312:	ebae 0102 	sub.w	r1, lr, r2
 8013316:	4486      	add	lr, r0
 8013318:	1b7f      	subs	r7, r7, r5
 801331a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801331e:	b289      	uxth	r1, r1
 8013320:	442a      	add	r2, r5
 8013322:	fa0f fe8e 	sxth.w	lr, lr
 8013326:	b20c      	sxth	r4, r1
 8013328:	b212      	sxth	r2, r2
 801332a:	4367      	muls	r7, r4
 801332c:	ebae 0202 	sub.w	r2, lr, r2
 8013330:	4372      	muls	r2, r6
 8013332:	4297      	cmp	r7, r2
 8013334:	db09      	blt.n	801334a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8013336:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801333a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801333e:	449c      	add	ip, r3
 8013340:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013344:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013348:	e680      	b.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801334a:	4401      	add	r1, r0
 801334c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 8013350:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8013354:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013358:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801335c:	e676      	b.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801335e:	9f04      	ldr	r7, [sp, #16]
 8013360:	42bd      	cmp	r5, r7
 8013362:	da27      	bge.n	80133b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8013364:	9902      	ldr	r1, [sp, #8]
 8013366:	1b7f      	subs	r7, r7, r5
 8013368:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801336c:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 8013370:	eb04 010e 	add.w	r1, r4, lr
 8013374:	fa1f f881 	uxth.w	r8, r1
 8013378:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801337c:	4411      	add	r1, r2
 801337e:	fa0f f988 	sxth.w	r9, r8
 8013382:	eba2 020e 	sub.w	r2, r2, lr
 8013386:	eba1 0108 	sub.w	r1, r1, r8
 801338a:	4372      	muls	r2, r6
 801338c:	b289      	uxth	r1, r1
 801338e:	fa0f f881 	sxth.w	r8, r1
 8013392:	fb08 f707 	mul.w	r7, r8, r7
 8013396:	42ba      	cmp	r2, r7
 8013398:	dc06      	bgt.n	80133a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801339a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801339e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 80133a2:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 80133a6:	e7ca      	b.n	801333e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80133a8:	4421      	add	r1, r4
 80133aa:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 80133ae:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80133b2:	e64b      	b.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80133b4:	9d05      	ldr	r5, [sp, #20]
 80133b6:	2c06      	cmp	r4, #6
 80133b8:	eba9 0505 	sub.w	r5, r9, r5
 80133bc:	b2ad      	uxth	r5, r5
 80133be:	fa0f fe85 	sxth.w	lr, r5
 80133c2:	d818      	bhi.n	80133f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80133c4:	9b04      	ldr	r3, [sp, #16]
 80133c6:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80133ca:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80133ce:	1c63      	adds	r3, r4, #1
 80133d0:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 80133d4:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 80133d8:	9b01      	ldr	r3, [sp, #4]
 80133da:	9d01      	ldr	r5, [sp, #4]
 80133dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80133e0:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 80133e4:	805a      	strh	r2, [r3, #2]
 80133e6:	809e      	strh	r6, [r3, #4]
 80133e8:	80d9      	strh	r1, [r3, #6]
 80133ea:	9b02      	ldr	r3, [sp, #8]
 80133ec:	f1aa 0a08 	sub.w	sl, sl, #8
 80133f0:	3b01      	subs	r3, #1
 80133f2:	9302      	str	r3, [sp, #8]
 80133f4:	e747      	b.n	8013286 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 80133f6:	9a02      	ldr	r2, [sp, #8]
 80133f8:	45b6      	cmp	lr, r6
 80133fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80133fe:	db0d      	blt.n	801341c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 8013400:	449c      	add	ip, r3
 8013402:	445a      	add	r2, fp
 8013404:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8013408:	fa1f fc8c 	uxth.w	ip, ip
 801340c:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 8013410:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013414:	448c      	add	ip, r1
 8013416:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801341a:	e617      	b.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801341c:	445a      	add	r2, fp
 801341e:	44ac      	add	ip, r5
 8013420:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8013424:	e78e      	b.n	8013344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8013426:	fa1f f18e 	uxth.w	r1, lr
 801342a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801342e:	b293      	uxth	r3, r2
 8013430:	4596      	cmp	lr, r2
 8013432:	eb01 0806 	add.w	r8, r1, r6
 8013436:	9306      	str	r3, [sp, #24]
 8013438:	fa1f f888 	uxth.w	r8, r8
 801343c:	9f06      	ldr	r7, [sp, #24]
 801343e:	fa0f f388 	sxth.w	r3, r8
 8013442:	9307      	str	r3, [sp, #28]
 8013444:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8013448:	443b      	add	r3, r7
 801344a:	b29b      	uxth	r3, r3
 801344c:	9308      	str	r3, [sp, #32]
 801344e:	da25      	bge.n	801349c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 8013450:	9905      	ldr	r1, [sp, #20]
 8013452:	eba3 0308 	sub.w	r3, r3, r8
 8013456:	eba2 020e 	sub.w	r2, r2, lr
 801345a:	1b40      	subs	r0, r0, r5
 801345c:	eba9 0401 	sub.w	r4, r9, r1
 8013460:	b29b      	uxth	r3, r3
 8013462:	b2a4      	uxth	r4, r4
 8013464:	b219      	sxth	r1, r3
 8013466:	fa0f f984 	sxth.w	r9, r4
 801346a:	4348      	muls	r0, r1
 801346c:	fb09 f202 	mul.w	r2, r9, r2
 8013470:	4282      	cmp	r2, r0
 8013472:	9a02      	ldr	r2, [sp, #8]
 8013474:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013478:	445a      	add	r2, fp
 801347a:	dc06      	bgt.n	801348a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801347c:	9b07      	ldr	r3, [sp, #28]
 801347e:	44a4      	add	ip, r4
 8013480:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 8013484:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 8013488:	e75c      	b.n	8013344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801348a:	9904      	ldr	r1, [sp, #16]
 801348c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 8013490:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 8013494:	4433      	add	r3, r6
 8013496:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801349a:	e5d7      	b.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801349c:	9f06      	ldr	r7, [sp, #24]
 801349e:	9b04      	ldr	r3, [sp, #16]
 80134a0:	1bc9      	subs	r1, r1, r7
 80134a2:	fa0f f789 	sxth.w	r7, r9
 80134a6:	b289      	uxth	r1, r1
 80134a8:	429f      	cmp	r7, r3
 80134aa:	fa0f fe81 	sxth.w	lr, r1
 80134ae:	dd22      	ble.n	80134f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 80134b0:	9a05      	ldr	r2, [sp, #20]
 80134b2:	1b40      	subs	r0, r0, r5
 80134b4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80134b8:	eba9 0202 	sub.w	r2, r9, r2
 80134bc:	9d07      	ldr	r5, [sp, #28]
 80134be:	fb0e f000 	mul.w	r0, lr, r0
 80134c2:	b292      	uxth	r2, r2
 80134c4:	eba5 0a03 	sub.w	sl, r5, r3
 80134c8:	9b02      	ldr	r3, [sp, #8]
 80134ca:	b214      	sxth	r4, r2
 80134cc:	00db      	lsls	r3, r3, #3
 80134ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80134d2:	445b      	add	r3, fp
 80134d4:	4550      	cmp	r0, sl
 80134d6:	db03      	blt.n	80134e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 80134d8:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 80134dc:	4494      	add	ip, r2
 80134de:	e731      	b.n	8013344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80134e0:	9a04      	ldr	r2, [sp, #16]
 80134e2:	4431      	add	r1, r6
 80134e4:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 80134e8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80134ec:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80134f0:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80134f4:	e75b      	b.n	80133ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 80134f6:	9b08      	ldr	r3, [sp, #32]
 80134f8:	2c06      	cmp	r4, #6
 80134fa:	eba3 0308 	sub.w	r3, r3, r8
 80134fe:	b29b      	uxth	r3, r3
 8013500:	b21d      	sxth	r5, r3
 8013502:	d813      	bhi.n	801352c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8013504:	9b07      	ldr	r3, [sp, #28]
 8013506:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801350a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801350e:	1c63      	adds	r3, r4, #1
 8013510:	9901      	ldr	r1, [sp, #4]
 8013512:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8013516:	9b01      	ldr	r3, [sp, #4]
 8013518:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801351c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013520:	805a      	strh	r2, [r3, #2]
 8013522:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013524:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013528:	809a      	strh	r2, [r3, #4]
 801352a:	e75e      	b.n	80133ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801352c:	9802      	ldr	r0, [sp, #8]
 801352e:	4575      	cmp	r5, lr
 8013530:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8013534:	db0d      	blt.n	8013552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8013536:	4431      	add	r1, r6
 8013538:	9b06      	ldr	r3, [sp, #24]
 801353a:	4458      	add	r0, fp
 801353c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013540:	b289      	uxth	r1, r1
 8013542:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8013546:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801354a:	4419      	add	r1, r3
 801354c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 8013550:	e57c      	b.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013552:	4458      	add	r0, fp
 8013554:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8013558:	e79c      	b.n	8013494 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801355a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801355e:	2e07      	cmp	r6, #7
 8013560:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013564:	d812      	bhi.n	801358c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8013566:	1c75      	adds	r5, r6, #1
 8013568:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801356c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8013570:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 8013574:	9d01      	ldr	r5, [sp, #4]
 8013576:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801357a:	442c      	add	r4, r5
 801357c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8013580:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013584:	8061      	strh	r1, [r4, #2]
 8013586:	80a2      	strh	r2, [r4, #4]
 8013588:	80e3      	strh	r3, [r4, #6]
 801358a:	e5c9      	b.n	8013120 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801358c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8013590:	3e01      	subs	r6, #1
 8013592:	445c      	add	r4, fp
 8013594:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013598:	f04f 37ff 	mov.w	r7, #4294967295
 801359c:	2500      	movs	r5, #0
 801359e:	9305      	str	r3, [sp, #20]
 80135a0:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 80135a4:	1e72      	subs	r2, r6, #1
 80135a6:	9302      	str	r3, [sp, #8]
 80135a8:	4691      	mov	r9, r2
 80135aa:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 80135ae:	9304      	str	r3, [sp, #16]
 80135b0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 80135b4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80135b8:	6818      	ldr	r0, [r3, #0]
 80135ba:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80135be:	9207      	str	r2, [sp, #28]
 80135c0:	bf16      	itet	ne
 80135c2:	9905      	ldrne	r1, [sp, #20]
 80135c4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80135c8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80135cc:	9306      	str	r3, [sp, #24]
 80135ce:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80135d2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 80135d6:	fb18 f801 	smulbb	r8, r8, r1
 80135da:	6859      	ldr	r1, [r3, #4]
 80135dc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80135e0:	4671      	mov	r1, lr
 80135e2:	a80c      	add	r0, sp, #48	; 0x30
 80135e4:	f7ff fc5e 	bl	8012ea4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80135e8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 80135ec:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80135f0:	f04f 0c08 	mov.w	ip, #8
 80135f4:	9b04      	ldr	r3, [sp, #16]
 80135f6:	9a02      	ldr	r2, [sp, #8]
 80135f8:	fb10 f001 	smulbb	r0, r0, r1
 80135fc:	fb02 8803 	mla	r8, r2, r3, r8
 8013600:	eba0 0108 	sub.w	r1, r0, r8
 8013604:	fb90 f0fc 	sdiv	r0, r0, ip
 8013608:	4288      	cmp	r0, r1
 801360a:	dc20      	bgt.n	801364e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801360c:	4551      	cmp	r1, sl
 801360e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013612:	da03      	bge.n	801361c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8013614:	b1d9      	cbz	r1, 801364e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8013616:	468a      	mov	sl, r1
 8013618:	464f      	mov	r7, r9
 801361a:	4635      	mov	r5, r6
 801361c:	f109 39ff 	add.w	r9, r9, #4294967295
 8013620:	f119 0f02 	cmn.w	r9, #2
 8013624:	d1c6      	bne.n	80135b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013626:	4616      	mov	r6, r2
 8013628:	3201      	adds	r2, #1
 801362a:	f1a4 0408 	sub.w	r4, r4, #8
 801362e:	d1b7      	bne.n	80135a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 8013630:	9b01      	ldr	r3, [sp, #4]
 8013632:	b2ac      	uxth	r4, r5
 8013634:	00ed      	lsls	r5, r5, #3
 8013636:	1958      	adds	r0, r3, r5
 8013638:	1c7b      	adds	r3, r7, #1
 801363a:	d10b      	bne.n	8013654 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801363c:	4601      	mov	r1, r0
 801363e:	9803      	ldr	r0, [sp, #12]
 8013640:	f7ff fc30 	bl	8012ea4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013644:	4621      	mov	r1, r4
 8013646:	9801      	ldr	r0, [sp, #4]
 8013648:	f7ff fcd6 	bl	8012ff8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801364c:	e4fe      	b.n	801304c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801364e:	464f      	mov	r7, r9
 8013650:	4635      	mov	r5, r6
 8013652:	e7ed      	b.n	8013630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8013654:	9b01      	ldr	r3, [sp, #4]
 8013656:	00ff      	lsls	r7, r7, #3
 8013658:	445d      	add	r5, fp
 801365a:	19d9      	adds	r1, r3, r7
 801365c:	445f      	add	r7, fp
 801365e:	f7ff fc21 	bl	8012ea4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013662:	9b03      	ldr	r3, [sp, #12]
 8013664:	cb03      	ldmia	r3!, {r0, r1}
 8013666:	9b03      	ldr	r3, [sp, #12]
 8013668:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801366c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8013670:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 8013674:	6869      	ldr	r1, [r5, #4]
 8013676:	c303      	stmia	r3!, {r0, r1}
 8013678:	e7e4      	b.n	8013644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801367a:	bf00      	nop

0801367c <_ZN8touchgfx11Application10invalidateEv>:
 801367c:	4b09      	ldr	r3, [pc, #36]	; (80136a4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801367e:	b082      	sub	sp, #8
 8013680:	2100      	movs	r1, #0
 8013682:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013686:	4b08      	ldr	r3, [pc, #32]	; (80136a8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013688:	9100      	str	r1, [sp, #0]
 801368a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801368e:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013692:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013696:	ab02      	add	r3, sp, #8
 8013698:	e913 0006 	ldmdb	r3, {r1, r2}
 801369c:	b002      	add	sp, #8
 801369e:	f7ff bcbf 	b.w	8013020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80136a2:	bf00      	nop
 80136a4:	240074b0 	.word	0x240074b0
 80136a8:	240074b2 	.word	0x240074b2

080136ac <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80136ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b0:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80136b4:	b09b      	sub	sp, #108	; 0x6c
 80136b6:	4604      	mov	r4, r0
 80136b8:	4630      	mov	r0, r6
 80136ba:	f7fc fb5a 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 80136be:	4605      	mov	r5, r0
 80136c0:	b940      	cbnz	r0, 80136d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80136c2:	4620      	mov	r0, r4
 80136c4:	e896 0006 	ldmia.w	r6, {r1, r2}
 80136c8:	f7ff fcaa 	bl	8013020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80136cc:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80136d0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 80136d4:	4bc8      	ldr	r3, [pc, #800]	; (80139f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d03e      	beq.n	801375a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80136dc:	4dc7      	ldr	r5, [pc, #796]	; (80139fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 80136de:	4628      	mov	r0, r5
 80136e0:	f7fc fb47 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 80136e4:	4606      	mov	r6, r0
 80136e6:	2800      	cmp	r0, #0
 80136e8:	d137      	bne.n	801375a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 80136ea:	4628      	mov	r0, r5
 80136ec:	f7ff fa02 	bl	8012af4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 80136f0:	6829      	ldr	r1, [r5, #0]
 80136f2:	686a      	ldr	r2, [r5, #4]
 80136f4:	4620      	mov	r0, r4
 80136f6:	f7ff fc93 	bl	8013020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80136fa:	802e      	strh	r6, [r5, #0]
 80136fc:	806e      	strh	r6, [r5, #2]
 80136fe:	80ae      	strh	r6, [r5, #4]
 8013700:	80ee      	strh	r6, [r5, #6]
 8013702:	ae09      	add	r6, sp, #36	; 0x24
 8013704:	4630      	mov	r0, r6
 8013706:	f7ff fc24 	bl	8012f52 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801370a:	4abd      	ldr	r2, [pc, #756]	; (8013a00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801370c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 8013710:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8013714:	8815      	ldrh	r5, [r2, #0]
 8013716:	9202      	str	r2, [sp, #8]
 8013718:	462b      	mov	r3, r5
 801371a:	429f      	cmp	r7, r3
 801371c:	d924      	bls.n	8013768 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801371e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8013722:	2907      	cmp	r1, #7
 8013724:	d816      	bhi.n	8013754 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8013726:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801372a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801372e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8013732:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8013736:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801373a:	1c4a      	adds	r2, r1, #1
 801373c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8013740:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8013744:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8013748:	f8a2 9002 	strh.w	r9, [r2, #2]
 801374c:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013750:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013754:	3301      	adds	r3, #1
 8013756:	b29b      	uxth	r3, r3
 8013758:	e7df      	b.n	801371a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801375a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801375e:	2b00      	cmp	r3, #0
 8013760:	d1cf      	bne.n	8013702 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8013762:	b01b      	add	sp, #108	; 0x6c
 8013764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013768:	462f      	mov	r7, r5
 801376a:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801376e:	42bb      	cmp	r3, r7
 8013770:	d90b      	bls.n	801378a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8013772:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 8013776:	3701      	adds	r7, #1
 8013778:	4620      	mov	r0, r4
 801377a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801377e:	b2bf      	uxth	r7, r7
 8013780:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 8013784:	f7ff fc4c 	bl	8013020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013788:	e7ef      	b.n	801376a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801378a:	4a9e      	ldr	r2, [pc, #632]	; (8013a04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801378c:	6813      	ldr	r3, [r2, #0]
 801378e:	4690      	mov	r8, r2
 8013790:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013794:	2b01      	cmp	r3, #1
 8013796:	f040 80e4 	bne.w	8013962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801379a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801379e:	4629      	mov	r1, r5
 80137a0:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80137a4:	2500      	movs	r5, #0
 80137a6:	33aa      	adds	r3, #170	; 0xaa
 80137a8:	428f      	cmp	r7, r1
 80137aa:	f103 0308 	add.w	r3, r3, #8
 80137ae:	dd0a      	ble.n	80137c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80137b0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80137b4:	3101      	adds	r1, #1
 80137b6:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80137ba:	4402      	add	r2, r0
 80137bc:	b212      	sxth	r2, r2
 80137be:	4295      	cmp	r5, r2
 80137c0:	bfb8      	it	lt
 80137c2:	4615      	movlt	r5, r2
 80137c4:	e7f0      	b.n	80137a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80137c6:	4b90      	ldr	r3, [pc, #576]	; (8013a08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80137c8:	f8df b238 	ldr.w	fp, [pc, #568]	; 8013a04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80137cc:	881b      	ldrh	r3, [r3, #0]
 80137ce:	46d8      	mov	r8, fp
 80137d0:	2b0f      	cmp	r3, #15
 80137d2:	bf8c      	ite	hi
 80137d4:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80137d8:	f04f 0a01 	movls.w	sl, #1
 80137dc:	2300      	movs	r3, #0
 80137de:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80137e2:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80137e6:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80137ea:	4438      	add	r0, r7
 80137ec:	b207      	sxth	r7, r0
 80137ee:	f8db 0000 	ldr.w	r0, [fp]
 80137f2:	42bd      	cmp	r5, r7
 80137f4:	6803      	ldr	r3, [r0, #0]
 80137f6:	f340 8084 	ble.w	8013902 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 80137fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80137fe:	4798      	blx	r3
 8013800:	eb07 030a 	add.w	r3, r7, sl
 8013804:	4298      	cmp	r0, r3
 8013806:	da07      	bge.n	8013818 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8013808:	4285      	cmp	r5, r0
 801380a:	dd05      	ble.n	8013818 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801380c:	4287      	cmp	r7, r0
 801380e:	dd6d      	ble.n	80138ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013810:	2f00      	cmp	r7, #0
 8013812:	dd6b      	ble.n	80138ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013814:	4628      	mov	r0, r5
 8013816:	e004      	b.n	8013822 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8013818:	4287      	cmp	r7, r0
 801381a:	dcfb      	bgt.n	8013814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801381c:	42a8      	cmp	r0, r5
 801381e:	bfa8      	it	ge
 8013820:	4628      	movge	r0, r5
 8013822:	4b7a      	ldr	r3, [pc, #488]	; (8013a0c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8013824:	1bc0      	subs	r0, r0, r7
 8013826:	2200      	movs	r2, #0
 8013828:	f8ad 7016 	strh.w	r7, [sp, #22]
 801382c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013830:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013834:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013838:	9b02      	ldr	r3, [sp, #8]
 801383a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801383e:	881f      	ldrh	r7, [r3, #0]
 8013840:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013844:	42bb      	cmp	r3, r7
 8013846:	d9cc      	bls.n	80137e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8013848:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801384c:	ab07      	add	r3, sp, #28
 801384e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8013852:	6851      	ldr	r1, [r2, #4]
 8013854:	c303      	stmia	r3!, {r0, r1}
 8013856:	a905      	add	r1, sp, #20
 8013858:	a807      	add	r0, sp, #28
 801385a:	f7ff fa8a 	bl	8012d72 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801385e:	2800      	cmp	r0, #0
 8013860:	d04c      	beq.n	80138fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8013862:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013866:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801386a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801386e:	4686      	mov	lr, r0
 8013870:	4290      	cmp	r0, r2
 8013872:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8013876:	4448      	add	r0, r9
 8013878:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801387c:	bfb8      	it	lt
 801387e:	4696      	movlt	lr, r2
 8013880:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013884:	444a      	add	r2, r9
 8013886:	b280      	uxth	r0, r0
 8013888:	4299      	cmp	r1, r3
 801388a:	468c      	mov	ip, r1
 801388c:	b292      	uxth	r2, r2
 801388e:	9303      	str	r3, [sp, #12]
 8013890:	bfb8      	it	lt
 8013892:	469c      	movlt	ip, r3
 8013894:	b203      	sxth	r3, r0
 8013896:	fa0f f982 	sxth.w	r9, r2
 801389a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801389e:	f8ad c01e 	strh.w	ip, [sp, #30]
 80138a2:	454b      	cmp	r3, r9
 80138a4:	bfb8      	it	lt
 80138a6:	4602      	movlt	r2, r0
 80138a8:	9b03      	ldr	r3, [sp, #12]
 80138aa:	eba2 020e 	sub.w	r2, r2, lr
 80138ae:	f8ad 2020 	strh.w	r2, [sp, #32]
 80138b2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80138b6:	4411      	add	r1, r2
 80138b8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80138bc:	4413      	add	r3, r2
 80138be:	b289      	uxth	r1, r1
 80138c0:	b29b      	uxth	r3, r3
 80138c2:	b208      	sxth	r0, r1
 80138c4:	b21a      	sxth	r2, r3
 80138c6:	4290      	cmp	r0, r2
 80138c8:	bfb8      	it	lt
 80138ca:	460b      	movlt	r3, r1
 80138cc:	eba3 030c 	sub.w	r3, r3, ip
 80138d0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80138d4:	a807      	add	r0, sp, #28
 80138d6:	f7fc fa4c 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 80138da:	b920      	cbnz	r0, 80138e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 80138dc:	6823      	ldr	r3, [r4, #0]
 80138de:	a907      	add	r1, sp, #28
 80138e0:	4620      	mov	r0, r4
 80138e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138e4:	4798      	blx	r3
 80138e6:	3701      	adds	r7, #1
 80138e8:	b2bf      	uxth	r7, r7
 80138ea:	e7a9      	b.n	8013840 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 80138ec:	f8d8 0000 	ldr.w	r0, [r8]
 80138f0:	2101      	movs	r1, #1
 80138f2:	6803      	ldr	r3, [r0, #0]
 80138f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80138f8:	4798      	blx	r3
 80138fa:	e772      	b.n	80137e2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 80138fc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013900:	e7e8      	b.n	80138d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8013902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013904:	4798      	blx	r3
 8013906:	4b42      	ldr	r3, [pc, #264]	; (8013a10 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	f43f af29 	beq.w	8013762 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8013910:	2300      	movs	r3, #0
 8013912:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8013916:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801391a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801391e:	9b02      	ldr	r3, [sp, #8]
 8013920:	881b      	ldrh	r3, [r3, #0]
 8013922:	429d      	cmp	r5, r3
 8013924:	f67f af1d 	bls.w	8013762 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8013928:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801392c:	2907      	cmp	r1, #7
 801392e:	d815      	bhi.n	801395c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8013930:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8013934:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8013938:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801393c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8013940:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8013944:	1c4a      	adds	r2, r1, #1
 8013946:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801394a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801394e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8013952:	f8a2 e002 	strh.w	lr, [r2, #2]
 8013956:	f8a2 c004 	strh.w	ip, [r2, #4]
 801395a:	80d7      	strh	r7, [r2, #6]
 801395c:	3301      	adds	r3, #1
 801395e:	b29b      	uxth	r3, r3
 8013960:	e7df      	b.n	8013922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8013962:	2b02      	cmp	r3, #2
 8013964:	f040 8135 	bne.w	8013bd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8013968:	4b2a      	ldr	r3, [pc, #168]	; (8013a14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801396a:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	2b01      	cmp	r3, #1
 8013972:	f000 809c 	beq.w	8013aae <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8013976:	9b02      	ldr	r3, [sp, #8]
 8013978:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801397c:	f8b3 b000 	ldrh.w	fp, [r3]
 8013980:	f10b 0b01 	add.w	fp, fp, #1
 8013984:	fa1f fb8b 	uxth.w	fp, fp
 8013988:	2a00      	cmp	r2, #0
 801398a:	d0bc      	beq.n	8013906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801398c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8013990:	4659      	mov	r1, fp
 8013992:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8013996:	f04f 0800 	mov.w	r8, #0
 801399a:	441d      	add	r5, r3
 801399c:	b22d      	sxth	r5, r5
 801399e:	b28b      	uxth	r3, r1
 80139a0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 80139a4:	429a      	cmp	r2, r3
 80139a6:	f240 80c0 	bls.w	8013b2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 80139aa:	4427      	add	r7, r4
 80139ac:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80139b0:	4608      	mov	r0, r1
 80139b2:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 80139b6:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 80139ba:	4563      	cmp	r3, ip
 80139bc:	f340 80a2 	ble.w	8013b04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80139c0:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 80139c4:	4465      	add	r5, ip
 80139c6:	b22d      	sxth	r5, r5
 80139c8:	429d      	cmp	r5, r3
 80139ca:	bfa8      	it	ge
 80139cc:	461d      	movge	r5, r3
 80139ce:	3101      	adds	r1, #1
 80139d0:	4680      	mov	r8, r0
 80139d2:	e7e4      	b.n	801399e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 80139d4:	d10b      	bne.n	80139ee <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 80139d6:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 80139da:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 80139de:	458c      	cmp	ip, r1
 80139e0:	bfb4      	ite	lt
 80139e2:	469c      	movlt	ip, r3
 80139e4:	46bc      	movge	ip, r7
 80139e6:	4572      	cmp	r2, lr
 80139e8:	bfb8      	it	lt
 80139ea:	4672      	movlt	r2, lr
 80139ec:	e087      	b.n	8013afe <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80139ee:	428a      	cmp	r2, r1
 80139f0:	46bc      	mov	ip, r7
 80139f2:	bfb8      	it	lt
 80139f4:	460a      	movlt	r2, r1
 80139f6:	e082      	b.n	8013afe <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 80139f8:	240074f4 	.word	0x240074f4
 80139fc:	24007500 	.word	0x24007500
 8013a00:	240000f0 	.word	0x240000f0
 8013a04:	240074bc 	.word	0x240074bc
 8013a08:	240074b2 	.word	0x240074b2
 8013a0c:	240074b0 	.word	0x240074b0
 8013a10:	240074ba 	.word	0x240074ba
 8013a14:	240074b4 	.word	0x240074b4
 8013a18:	1961      	adds	r1, r4, r5
 8013a1a:	ab07      	add	r3, sp, #28
 8013a1c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8013a20:	6849      	ldr	r1, [r1, #4]
 8013a22:	c303      	stmia	r3!, {r0, r1}
 8013a24:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013a28:	a807      	add	r0, sp, #28
 8013a2a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013a2e:	2b13      	cmp	r3, #19
 8013a30:	440b      	add	r3, r1
 8013a32:	bfd8      	it	le
 8013a34:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8013a38:	1a9b      	subs	r3, r3, r2
 8013a3a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013a3e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013a42:	f7ff f871 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013a46:	a807      	add	r0, sp, #28
 8013a48:	f7fc f993 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013a4c:	bb78      	cbnz	r0, 8013aae <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8013a4e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8013a52:	4425      	add	r5, r4
 8013a54:	f8d8 0000 	ldr.w	r0, [r8]
 8013a58:	f1bc 0f14 	cmp.w	ip, #20
 8013a5c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013a60:	f8d0 e000 	ldr.w	lr, [r0]
 8013a64:	bfa8      	it	ge
 8013a66:	f04f 0c14 	movge.w	ip, #20
 8013a6a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013a6e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013a72:	fa1f fc8c 	uxth.w	ip, ip
 8013a76:	f8cd c000 	str.w	ip, [sp]
 8013a7a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8013a7e:	47d0      	blx	sl
 8013a80:	4682      	mov	sl, r0
 8013a82:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013a86:	a807      	add	r0, sp, #28
 8013a88:	f7ff f834 	bl	8012af4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013a8c:	6823      	ldr	r3, [r4, #0]
 8013a8e:	4620      	mov	r0, r4
 8013a90:	a907      	add	r1, sp, #28
 8013a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a94:	4798      	blx	r3
 8013a96:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8013a9a:	eba0 000a 	sub.w	r0, r0, sl
 8013a9e:	b200      	sxth	r0, r0
 8013aa0:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8013aa4:	b918      	cbnz	r0, 8013aae <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8013aa6:	b2b9      	uxth	r1, r7
 8013aa8:	4648      	mov	r0, r9
 8013aaa:	f7ff faa5 	bl	8012ff8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013aae:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8013ab2:	f1bb 0f00 	cmp.w	fp, #0
 8013ab6:	f43f af26 	beq.w	8013906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013aba:	9b02      	ldr	r3, [sp, #8]
 8013abc:	2700      	movs	r7, #0
 8013abe:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8013ac2:	881b      	ldrh	r3, [r3, #0]
 8013ac4:	3301      	adds	r3, #1
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	b299      	uxth	r1, r3
 8013aca:	00fd      	lsls	r5, r7, #3
 8013acc:	458b      	cmp	fp, r1
 8013ace:	d9a3      	bls.n	8013a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8013ad0:	4425      	add	r5, r4
 8013ad2:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8013ad6:	469c      	mov	ip, r3
 8013ad8:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8013adc:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8013ae0:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8013ae4:	4408      	add	r0, r1
 8013ae6:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8013aea:	4471      	add	r1, lr
 8013aec:	b200      	sxth	r0, r0
 8013aee:	b209      	sxth	r1, r1
 8013af0:	4288      	cmp	r0, r1
 8013af2:	f6bf af6f 	bge.w	80139d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8013af6:	4586      	cmp	lr, r0
 8013af8:	4672      	mov	r2, lr
 8013afa:	bfb8      	it	lt
 8013afc:	4602      	movlt	r2, r0
 8013afe:	3301      	adds	r3, #1
 8013b00:	4667      	mov	r7, ip
 8013b02:	e7e1      	b.n	8013ac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8013b04:	d10c      	bne.n	8013b20 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8013b06:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8013b0a:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8013b0e:	4287      	cmp	r7, r0
 8013b10:	bfb4      	ite	lt
 8013b12:	4608      	movlt	r0, r1
 8013b14:	4640      	movge	r0, r8
 8013b16:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8013b1a:	443b      	add	r3, r7
 8013b1c:	b21b      	sxth	r3, r3
 8013b1e:	e753      	b.n	80139c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8013b20:	4565      	cmp	r5, ip
 8013b22:	4640      	mov	r0, r8
 8013b24:	bfa8      	it	ge
 8013b26:	4665      	movge	r5, ip
 8013b28:	e751      	b.n	80139ce <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8013b2a:	eb09 0007 	add.w	r0, r9, r7
 8013b2e:	4427      	add	r7, r4
 8013b30:	9203      	str	r2, [sp, #12]
 8013b32:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8013b36:	f1ba 0f13 	cmp.w	sl, #19
 8013b3a:	bfde      	ittt	le
 8013b3c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8013b40:	4455      	addle	r5, sl
 8013b42:	b22d      	sxthle	r5, r5
 8013b44:	f7fc f915 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013b48:	9a03      	ldr	r2, [sp, #12]
 8013b4a:	2800      	cmp	r0, #0
 8013b4c:	f47f af1c 	bne.w	8013988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8013b50:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8013b54:	fa1f fa8a 	uxth.w	sl, sl
 8013b58:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013b5c:	1aad      	subs	r5, r5, r2
 8013b5e:	4829      	ldr	r0, [pc, #164]	; (8013c04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8013b60:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8013b64:	2d14      	cmp	r5, #20
 8013b66:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8013b6a:	6800      	ldr	r0, [r0, #0]
 8013b6c:	bfa8      	it	ge
 8013b6e:	2514      	movge	r5, #20
 8013b70:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013b74:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013b78:	b289      	uxth	r1, r1
 8013b7a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013b7e:	b2ad      	uxth	r5, r5
 8013b80:	f8d0 c000 	ldr.w	ip, [r0]
 8013b84:	b292      	uxth	r2, r2
 8013b86:	4555      	cmp	r5, sl
 8013b88:	bf94      	ite	ls
 8013b8a:	9500      	strls	r5, [sp, #0]
 8013b8c:	f8cd a000 	strhi.w	sl, [sp]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8013b96:	47a8      	blx	r5
 8013b98:	6823      	ldr	r3, [r4, #0]
 8013b9a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8013b9e:	a907      	add	r1, sp, #28
 8013ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	4798      	blx	r3
 8013ba6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013baa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8013bae:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8013bb2:	1a5b      	subs	r3, r3, r1
 8013bb4:	440a      	add	r2, r1
 8013bb6:	b21b      	sxth	r3, r3
 8013bb8:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8013bbc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	f47f aed8 	bne.w	8013976 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8013bc6:	fa1f f188 	uxth.w	r1, r8
 8013bca:	4648      	mov	r0, r9
 8013bcc:	f7ff fa14 	bl	8012ff8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013bd0:	e6d1      	b.n	8013976 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8013bd2:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8013bd6:	42ab      	cmp	r3, r5
 8013bd8:	f67f ae95 	bls.w	8013906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013bdc:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8013be0:	ab07      	add	r3, sp, #28
 8013be2:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8013be6:	6851      	ldr	r1, [r2, #4]
 8013be8:	c303      	stmia	r3!, {r0, r1}
 8013bea:	a807      	add	r0, sp, #28
 8013bec:	f7fc f8c1 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013bf0:	b920      	cbnz	r0, 8013bfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8013bf2:	6823      	ldr	r3, [r4, #0]
 8013bf4:	a907      	add	r1, sp, #28
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bfa:	4798      	blx	r3
 8013bfc:	3501      	adds	r5, #1
 8013bfe:	b2ad      	uxth	r5, r5
 8013c00:	e7e7      	b.n	8013bd2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8013c02:	bf00      	nop
 8013c04:	240074bc 	.word	0x240074bc

08013c08 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013c08:	4b03      	ldr	r3, [pc, #12]	; (8013c18 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	801a      	strh	r2, [r3, #0]
 8013c0e:	805a      	strh	r2, [r3, #2]
 8013c10:	809a      	strh	r2, [r3, #4]
 8013c12:	80da      	strh	r2, [r3, #6]
 8013c14:	4770      	bx	lr
 8013c16:	bf00      	nop
 8013c18:	24007500 	.word	0x24007500

08013c1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8013c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c20:	b09d      	sub	sp, #116	; 0x74
 8013c22:	4606      	mov	r6, r0
 8013c24:	4614      	mov	r4, r2
 8013c26:	468a      	mov	sl, r1
 8013c28:	a803      	add	r0, sp, #12
 8013c2a:	461d      	mov	r5, r3
 8013c2c:	f000 fd6c 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8013c30:	6833      	ldr	r3, [r6, #0]
 8013c32:	4630      	mov	r0, r6
 8013c34:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8013c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c3a:	4798      	blx	r3
 8013c3c:	6833      	ldr	r3, [r6, #0]
 8013c3e:	4607      	mov	r7, r0
 8013c40:	4630      	mov	r0, r6
 8013c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013c44:	4798      	blx	r3
 8013c46:	462a      	mov	r2, r5
 8013c48:	2500      	movs	r5, #0
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	9000      	str	r0, [sp, #0]
 8013c4e:	463b      	mov	r3, r7
 8013c50:	462c      	mov	r4, r5
 8013c52:	46a9      	mov	r9, r5
 8013c54:	46a8      	mov	r8, r5
 8013c56:	a803      	add	r0, sp, #12
 8013c58:	f000 fdb1 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	9302      	str	r3, [sp, #8]
 8013c60:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8013c64:	429c      	cmp	r4, r3
 8013c66:	d002      	beq.n	8013c6e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013c68:	455c      	cmp	r4, fp
 8013c6a:	bf18      	it	ne
 8013c6c:	4625      	movne	r5, r4
 8013c6e:	ab02      	add	r3, sp, #8
 8013c70:	4632      	mov	r2, r6
 8013c72:	4651      	mov	r1, sl
 8013c74:	a803      	add	r0, sp, #12
 8013c76:	f001 f8a7 	bl	8014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	b108      	cbz	r0, 8013c82 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8013c7e:	280a      	cmp	r0, #10
 8013c80:	d10a      	bne.n	8013c98 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8013c82:	45c1      	cmp	r9, r8
 8013c84:	bf38      	it	cc
 8013c86:	46c1      	movcc	r9, r8
 8013c88:	f04f 0800 	mov.w	r8, #0
 8013c8c:	2c00      	cmp	r4, #0
 8013c8e:	d1e5      	bne.n	8013c5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013c90:	4648      	mov	r0, r9
 8013c92:	b01d      	add	sp, #116	; 0x74
 8013c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c98:	9a02      	ldr	r2, [sp, #8]
 8013c9a:	2a00      	cmp	r2, #0
 8013c9c:	d0de      	beq.n	8013c5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013c9e:	7b57      	ldrb	r7, [r2, #13]
 8013ca0:	4629      	mov	r1, r5
 8013ca2:	6833      	ldr	r3, [r6, #0]
 8013ca4:	007f      	lsls	r7, r7, #1
 8013ca6:	8894      	ldrh	r4, [r2, #4]
 8013ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013caa:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8013cae:	7a97      	ldrb	r7, [r2, #10]
 8013cb0:	4307      	orrs	r7, r0
 8013cb2:	4630      	mov	r0, r6
 8013cb4:	4798      	blx	r3
 8013cb6:	4438      	add	r0, r7
 8013cb8:	4480      	add	r8, r0
 8013cba:	fa1f f888 	uxth.w	r8, r8
 8013cbe:	e7e5      	b.n	8013c8c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08013cc0 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8013cc0:	b508      	push	{r3, lr}
 8013cc2:	6803      	ldr	r3, [r0, #0]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	4798      	blx	r3
 8013cc8:	b128      	cbz	r0, 8013cd6 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013cca:	7b43      	ldrb	r3, [r0, #13]
 8013ccc:	7a80      	ldrb	r0, [r0, #10]
 8013cce:	005b      	lsls	r3, r3, #1
 8013cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cd4:	4318      	orrs	r0, r3
 8013cd6:	bd08      	pop	{r3, pc}

08013cd8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013cd8:	b40e      	push	{r1, r2, r3}
 8013cda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cdc:	b09e      	sub	sp, #120	; 0x78
 8013cde:	4605      	mov	r5, r0
 8013ce0:	ab23      	add	r3, sp, #140	; 0x8c
 8013ce2:	a805      	add	r0, sp, #20
 8013ce4:	f853 4b04 	ldr.w	r4, [r3], #4
 8013ce8:	9303      	str	r3, [sp, #12]
 8013cea:	f000 fd0d 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8013cee:	682b      	ldr	r3, [r5, #0]
 8013cf0:	4628      	mov	r0, r5
 8013cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cf4:	4798      	blx	r3
 8013cf6:	682b      	ldr	r3, [r5, #0]
 8013cf8:	4606      	mov	r6, r0
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013cfe:	4798      	blx	r3
 8013d00:	4633      	mov	r3, r6
 8013d02:	4621      	mov	r1, r4
 8013d04:	ae1e      	add	r6, sp, #120	; 0x78
 8013d06:	2400      	movs	r4, #0
 8013d08:	9000      	str	r0, [sp, #0]
 8013d0a:	9a03      	ldr	r2, [sp, #12]
 8013d0c:	a805      	add	r0, sp, #20
 8013d0e:	f000 fd56 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013d12:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013d16:	462a      	mov	r2, r5
 8013d18:	4633      	mov	r3, r6
 8013d1a:	4621      	mov	r1, r4
 8013d1c:	a805      	add	r0, sp, #20
 8013d1e:	f001 f853 	bl	8014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013d22:	b300      	cbz	r0, 8013d66 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8013d24:	280a      	cmp	r0, #10
 8013d26:	d01a      	beq.n	8013d5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013d28:	9f04      	ldr	r7, [sp, #16]
 8013d2a:	b1c7      	cbz	r7, 8013d5e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8013d2c:	7b78      	ldrb	r0, [r7, #13]
 8013d2e:	7a3b      	ldrb	r3, [r7, #8]
 8013d30:	00c1      	lsls	r1, r0, #3
 8013d32:	88aa      	ldrh	r2, [r5, #4]
 8013d34:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8013d38:	4319      	orrs	r1, r3
 8013d3a:	0643      	lsls	r3, r0, #25
 8013d3c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8013d40:	bf48      	it	mi
 8013d42:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8013d46:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8013d4a:	bf48      	it	mi
 8013d4c:	b219      	sxthmi	r1, r3
 8013d4e:	79fb      	ldrb	r3, [r7, #7]
 8013d50:	4303      	orrs	r3, r0
 8013d52:	4413      	add	r3, r2
 8013d54:	1a5b      	subs	r3, r3, r1
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	42a3      	cmp	r3, r4
 8013d5a:	bfc8      	it	gt
 8013d5c:	b21c      	sxthgt	r4, r3
 8013d5e:	4633      	mov	r3, r6
 8013d60:	462a      	mov	r2, r5
 8013d62:	2100      	movs	r1, #0
 8013d64:	e7da      	b.n	8013d1c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8013d66:	b2a0      	uxth	r0, r4
 8013d68:	b01e      	add	sp, #120	; 0x78
 8013d6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013d6e:	b003      	add	sp, #12
 8013d70:	4770      	bx	lr

08013d72 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013d72:	b40e      	push	{r1, r2, r3}
 8013d74:	b570      	push	{r4, r5, r6, lr}
 8013d76:	b09d      	sub	sp, #116	; 0x74
 8013d78:	4604      	mov	r4, r0
 8013d7a:	ab21      	add	r3, sp, #132	; 0x84
 8013d7c:	a803      	add	r0, sp, #12
 8013d7e:	f853 5b04 	ldr.w	r5, [r3], #4
 8013d82:	9302      	str	r3, [sp, #8]
 8013d84:	f000 fcc0 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8013d88:	6823      	ldr	r3, [r4, #0]
 8013d8a:	4620      	mov	r0, r4
 8013d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d8e:	4798      	blx	r3
 8013d90:	6823      	ldr	r3, [r4, #0]
 8013d92:	4606      	mov	r6, r0
 8013d94:	4620      	mov	r0, r4
 8013d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013d98:	2401      	movs	r4, #1
 8013d9a:	4798      	blx	r3
 8013d9c:	4633      	mov	r3, r6
 8013d9e:	9000      	str	r0, [sp, #0]
 8013da0:	4629      	mov	r1, r5
 8013da2:	9a02      	ldr	r2, [sp, #8]
 8013da4:	a803      	add	r0, sp, #12
 8013da6:	f000 fd0a 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013daa:	a803      	add	r0, sp, #12
 8013dac:	f001 f8d8 	bl	8014f60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013db0:	b2a3      	uxth	r3, r4
 8013db2:	b138      	cbz	r0, 8013dc4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8013db4:	280a      	cmp	r0, #10
 8013db6:	a803      	add	r0, sp, #12
 8013db8:	bf04      	itt	eq
 8013dba:	3301      	addeq	r3, #1
 8013dbc:	b21c      	sxtheq	r4, r3
 8013dbe:	f001 f8cf 	bl	8014f60 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013dc2:	e7f5      	b.n	8013db0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	b01d      	add	sp, #116	; 0x74
 8013dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dcc:	b003      	add	sp, #12
 8013dce:	4770      	bx	lr

08013dd0 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013dd0:	b40e      	push	{r1, r2, r3}
 8013dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dd4:	b09e      	sub	sp, #120	; 0x78
 8013dd6:	4604      	mov	r4, r0
 8013dd8:	ab23      	add	r3, sp, #140	; 0x8c
 8013dda:	a805      	add	r0, sp, #20
 8013ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8013de0:	9303      	str	r3, [sp, #12]
 8013de2:	f000 fc91 	bl	8014708 <_ZN8touchgfx12TextProviderC1Ev>
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	4620      	mov	r0, r4
 8013dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dec:	4798      	blx	r3
 8013dee:	6823      	ldr	r3, [r4, #0]
 8013df0:	4606      	mov	r6, r0
 8013df2:	4620      	mov	r0, r4
 8013df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013df6:	4798      	blx	r3
 8013df8:	4633      	mov	r3, r6
 8013dfa:	4629      	mov	r1, r5
 8013dfc:	9000      	str	r0, [sp, #0]
 8013dfe:	9a03      	ldr	r2, [sp, #12]
 8013e00:	a805      	add	r0, sp, #20
 8013e02:	f000 fcdc 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013e06:	ad1e      	add	r5, sp, #120	; 0x78
 8013e08:	2100      	movs	r1, #0
 8013e0a:	26ff      	movs	r6, #255	; 0xff
 8013e0c:	4622      	mov	r2, r4
 8013e0e:	a805      	add	r0, sp, #20
 8013e10:	f845 1d68 	str.w	r1, [r5, #-104]!
 8013e14:	462b      	mov	r3, r5
 8013e16:	f000 ffd7 	bl	8014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013e1a:	b1d8      	cbz	r0, 8013e54 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8013e1c:	280a      	cmp	r0, #10
 8013e1e:	d012      	beq.n	8013e46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8013e20:	9804      	ldr	r0, [sp, #16]
 8013e22:	b180      	cbz	r0, 8013e46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8013e24:	7b47      	ldrb	r7, [r0, #13]
 8013e26:	7922      	ldrb	r2, [r4, #4]
 8013e28:	00fb      	lsls	r3, r7, #3
 8013e2a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8013e2e:	7a03      	ldrb	r3, [r0, #8]
 8013e30:	430b      	orrs	r3, r1
 8013e32:	0679      	lsls	r1, r7, #25
 8013e34:	bf44      	itt	mi
 8013e36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8013e3a:	b21b      	sxthmi	r3, r3
 8013e3c:	1ad3      	subs	r3, r2, r3
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	429e      	cmp	r6, r3
 8013e42:	bf28      	it	cs
 8013e44:	461e      	movcs	r6, r3
 8013e46:	462b      	mov	r3, r5
 8013e48:	4622      	mov	r2, r4
 8013e4a:	2100      	movs	r1, #0
 8013e4c:	a805      	add	r0, sp, #20
 8013e4e:	f000 ffbb 	bl	8014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013e52:	e7e2      	b.n	8013e1a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8013e54:	4630      	mov	r0, r6
 8013e56:	b01e      	add	sp, #120	; 0x78
 8013e58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013e5c:	b003      	add	sp, #12
 8013e5e:	4770      	bx	lr

08013e60 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8013e60:	b513      	push	{r0, r1, r4, lr}
 8013e62:	6803      	ldr	r3, [r0, #0]
 8013e64:	2400      	movs	r4, #0
 8013e66:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013e6a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013e6e:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013e72:	4669      	mov	r1, sp
 8013e74:	691b      	ldr	r3, [r3, #16]
 8013e76:	9400      	str	r4, [sp, #0]
 8013e78:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013e7c:	4798      	blx	r3
 8013e7e:	b002      	add	sp, #8
 8013e80:	bd10      	pop	{r4, pc}

08013e82 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013e82:	b538      	push	{r3, r4, r5, lr}
 8013e84:	680b      	ldr	r3, [r1, #0]
 8013e86:	460c      	mov	r4, r1
 8013e88:	4605      	mov	r5, r0
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	4798      	blx	r3
 8013e8e:	6823      	ldr	r3, [r4, #0]
 8013e90:	4620      	mov	r0, r4
 8013e92:	4629      	mov	r1, r5
 8013e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e96:	4798      	blx	r3
 8013e98:	4628      	mov	r0, r5
 8013e9a:	bd38      	pop	{r3, r4, r5, pc}

08013e9c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013e9c:	b410      	push	{r4}
 8013e9e:	880a      	ldrh	r2, [r1, #0]
 8013ea0:	8884      	ldrh	r4, [r0, #4]
 8013ea2:	4422      	add	r2, r4
 8013ea4:	800a      	strh	r2, [r1, #0]
 8013ea6:	884a      	ldrh	r2, [r1, #2]
 8013ea8:	88c4      	ldrh	r4, [r0, #6]
 8013eaa:	4422      	add	r2, r4
 8013eac:	804a      	strh	r2, [r1, #2]
 8013eae:	6940      	ldr	r0, [r0, #20]
 8013eb0:	b120      	cbz	r0, 8013ebc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013eb2:	6803      	ldr	r3, [r0, #0]
 8013eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013eba:	4718      	bx	r3
 8013ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013ec0:	4770      	bx	lr

08013ec2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013ec2:	b570      	push	{r4, r5, r6, lr}
 8013ec4:	8882      	ldrh	r2, [r0, #4]
 8013ec6:	460c      	mov	r4, r1
 8013ec8:	880b      	ldrh	r3, [r1, #0]
 8013eca:	4605      	mov	r5, r0
 8013ecc:	4413      	add	r3, r2
 8013ece:	800b      	strh	r3, [r1, #0]
 8013ed0:	884b      	ldrh	r3, [r1, #2]
 8013ed2:	88c2      	ldrh	r2, [r0, #6]
 8013ed4:	4413      	add	r3, r2
 8013ed6:	804b      	strh	r3, [r1, #2]
 8013ed8:	1d01      	adds	r1, r0, #4
 8013eda:	4620      	mov	r0, r4
 8013edc:	f7fb ff06 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 8013ee0:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	dd0b      	ble.n	8013f00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013ee8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	dd07      	ble.n	8013f00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013ef0:	6968      	ldr	r0, [r5, #20]
 8013ef2:	b128      	cbz	r0, 8013f00 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013ef4:	6803      	ldr	r3, [r0, #0]
 8013ef6:	4621      	mov	r1, r4
 8013ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013efe:	4718      	bx	r3
 8013f00:	bd70      	pop	{r4, r5, r6, pc}
	...

08013f04 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013f04:	b570      	push	{r4, r5, r6, lr}
 8013f06:	8882      	ldrh	r2, [r0, #4]
 8013f08:	460c      	mov	r4, r1
 8013f0a:	880b      	ldrh	r3, [r1, #0]
 8013f0c:	4605      	mov	r5, r0
 8013f0e:	4413      	add	r3, r2
 8013f10:	800b      	strh	r3, [r1, #0]
 8013f12:	884b      	ldrh	r3, [r1, #2]
 8013f14:	88c2      	ldrh	r2, [r0, #6]
 8013f16:	4413      	add	r3, r2
 8013f18:	804b      	strh	r3, [r1, #2]
 8013f1a:	1d01      	adds	r1, r0, #4
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	f7fb fee5 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 8013f22:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	dd18      	ble.n	8013f5c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013f2a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	dd14      	ble.n	8013f5c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013f32:	6968      	ldr	r0, [r5, #20]
 8013f34:	b128      	cbz	r0, 8013f42 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8013f36:	6803      	ldr	r3, [r0, #0]
 8013f38:	4621      	mov	r1, r4
 8013f3a:	691b      	ldr	r3, [r3, #16]
 8013f3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f40:	4718      	bx	r3
 8013f42:	4b07      	ldr	r3, [pc, #28]	; (8013f60 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	3304      	adds	r3, #4
 8013f48:	429d      	cmp	r5, r3
 8013f4a:	d107      	bne.n	8013f5c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8013f4c:	f7fe fff0 	bl	8012f30 <_ZN8touchgfx11Application11getInstanceEv>
 8013f50:	6821      	ldr	r1, [r4, #0]
 8013f52:	6862      	ldr	r2, [r4, #4]
 8013f54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f58:	f7ff b862 	b.w	8013020 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013f5c:	bd70      	pop	{r4, r5, r6, pc}
 8013f5e:	bf00      	nop
 8013f60:	240074f8 	.word	0x240074f8

08013f64 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8013f64:	b570      	push	{r4, r5, r6, lr}
 8013f66:	4604      	mov	r4, r0
 8013f68:	4616      	mov	r6, r2
 8013f6a:	460d      	mov	r5, r1
 8013f6c:	b901      	cbnz	r1, 8013f70 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013f6e:	b192      	cbz	r2, 8013f96 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013f70:	6823      	ldr	r3, [r4, #0]
 8013f72:	4620      	mov	r0, r4
 8013f74:	699b      	ldr	r3, [r3, #24]
 8013f76:	4798      	blx	r3
 8013f78:	88e2      	ldrh	r2, [r4, #6]
 8013f7a:	88a1      	ldrh	r1, [r4, #4]
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	4432      	add	r2, r6
 8013f80:	4429      	add	r1, r5
 8013f82:	b212      	sxth	r2, r2
 8013f84:	b209      	sxth	r1, r1
 8013f86:	f7ee fd78 	bl	8002a7a <_ZN8touchgfx8Drawable5setXYEss>
 8013f8a:	6823      	ldr	r3, [r4, #0]
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	699b      	ldr	r3, [r3, #24]
 8013f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013f94:	4718      	bx	r3
 8013f96:	bd70      	pop	{r4, r5, r6, pc}

08013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013f98:	b510      	push	{r4, lr}
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	4608      	mov	r0, r1
 8013fa0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013fa4:	8023      	strh	r3, [r4, #0]
 8013fa6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013faa:	8063      	strh	r3, [r4, #2]
 8013fac:	6803      	ldr	r3, [r0, #0]
 8013fae:	80a1      	strh	r1, [r4, #4]
 8013fb0:	4621      	mov	r1, r4
 8013fb2:	80e2      	strh	r2, [r4, #6]
 8013fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fb6:	4798      	blx	r3
 8013fb8:	4620      	mov	r0, r4
 8013fba:	bd10      	pop	{r4, pc}

08013fbc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 8013fbc:	b530      	push	{r4, r5, lr}
 8013fbe:	8083      	strh	r3, [r0, #4]
 8013fc0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013fc4:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8013fc8:	7183      	strb	r3, [r0, #6]
 8013fca:	79c3      	ldrb	r3, [r0, #7]
 8013fcc:	6101      	str	r1, [r0, #16]
 8013fce:	f365 0306 	bfi	r3, r5, #0, #7
 8013fd2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8013fd6:	8282      	strh	r2, [r0, #20]
 8013fd8:	f365 13c7 	bfi	r3, r5, #7, #1
 8013fdc:	71c3      	strb	r3, [r0, #7]
 8013fde:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8013fe2:	7203      	strb	r3, [r0, #8]
 8013fe4:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8013fe8:	7243      	strb	r3, [r0, #9]
 8013fea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013fee:	8143      	strh	r3, [r0, #10]
 8013ff0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8013ff4:	8183      	strh	r3, [r0, #12]
 8013ff6:	4b01      	ldr	r3, [pc, #4]	; (8013ffc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8013ff8:	6003      	str	r3, [r0, #0]
 8013ffa:	bd30      	pop	{r4, r5, pc}
 8013ffc:	08020b6c 	.word	0x08020b6c

08014000 <_ZNK8touchgfx9ConstFont4findEt>:
 8014000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014002:	6904      	ldr	r4, [r0, #16]
 8014004:	b3bc      	cbz	r4, 8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014006:	88a3      	ldrh	r3, [r4, #4]
 8014008:	8a82      	ldrh	r2, [r0, #20]
 801400a:	1acb      	subs	r3, r1, r3
 801400c:	f102 32ff 	add.w	r2, r2, #4294967295
 8014010:	d431      	bmi.n	8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014012:	4293      	cmp	r3, r2
 8014014:	dd0c      	ble.n	8014030 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8014016:	230e      	movs	r3, #14
 8014018:	fb03 4302 	mla	r3, r3, r2, r4
 801401c:	889b      	ldrh	r3, [r3, #4]
 801401e:	1a5b      	subs	r3, r3, r1
 8014020:	1ad3      	subs	r3, r2, r3
 8014022:	429a      	cmp	r2, r3
 8014024:	db27      	blt.n	8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014026:	2b00      	cmp	r3, #0
 8014028:	bfbc      	itt	lt
 801402a:	2302      	movlt	r3, #2
 801402c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8014030:	2500      	movs	r5, #0
 8014032:	260e      	movs	r6, #14
 8014034:	4295      	cmp	r5, r2
 8014036:	dc1e      	bgt.n	8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014038:	fb06 4003 	mla	r0, r6, r3, r4
 801403c:	8887      	ldrh	r7, [r0, #4]
 801403e:	42b9      	cmp	r1, r7
 8014040:	d01a      	beq.n	8014078 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8014042:	d20d      	bcs.n	8014060 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8014044:	1e5a      	subs	r2, r3, #1
 8014046:	4295      	cmp	r5, r2
 8014048:	dc15      	bgt.n	8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801404a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801404e:	1a5b      	subs	r3, r3, r1
 8014050:	1ad3      	subs	r3, r2, r3
 8014052:	429a      	cmp	r2, r3
 8014054:	db0f      	blt.n	8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014056:	429d      	cmp	r5, r3
 8014058:	ddec      	ble.n	8014034 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801405a:	1953      	adds	r3, r2, r5
 801405c:	105b      	asrs	r3, r3, #1
 801405e:	e7e9      	b.n	8014034 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014060:	1c5d      	adds	r5, r3, #1
 8014062:	42aa      	cmp	r2, r5
 8014064:	db07      	blt.n	8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014066:	8a43      	ldrh	r3, [r0, #18]
 8014068:	1acb      	subs	r3, r1, r3
 801406a:	442b      	add	r3, r5
 801406c:	429d      	cmp	r5, r3
 801406e:	dc02      	bgt.n	8014076 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014070:	429a      	cmp	r2, r3
 8014072:	dadf      	bge.n	8014034 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014074:	e7f1      	b.n	801405a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014076:	2000      	movs	r0, #0
 8014078:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801407a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801407a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801407c:	4604      	mov	r4, r0
 801407e:	4617      	mov	r7, r2
 8014080:	461e      	mov	r6, r3
 8014082:	b911      	cbnz	r1, 801408a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014084:	2500      	movs	r5, #0
 8014086:	4628      	mov	r0, r5
 8014088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801408a:	290a      	cmp	r1, #10
 801408c:	d0fa      	beq.n	8014084 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801408e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 8014092:	4291      	cmp	r1, r2
 8014094:	d0f6      	beq.n	8014084 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014096:	f242 020b 	movw	r2, #8203	; 0x200b
 801409a:	4291      	cmp	r1, r2
 801409c:	d0f2      	beq.n	8014084 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801409e:	f7ff ffaf 	bl	8014000 <_ZNK8touchgfx9ConstFont4findEt>
 80140a2:	4605      	mov	r5, r0
 80140a4:	b950      	cbnz	r0, 80140bc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80140a6:	6823      	ldr	r3, [r4, #0]
 80140a8:	4620      	mov	r0, r4
 80140aa:	691b      	ldr	r3, [r3, #16]
 80140ac:	4798      	blx	r3
 80140ae:	4601      	mov	r1, r0
 80140b0:	4620      	mov	r0, r4
 80140b2:	f7ff ffa5 	bl	8014000 <_ZNK8touchgfx9ConstFont4findEt>
 80140b6:	4605      	mov	r5, r0
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d0e3      	beq.n	8014084 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80140bc:	6823      	ldr	r3, [r4, #0]
 80140be:	4629      	mov	r1, r5
 80140c0:	4620      	mov	r0, r4
 80140c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80140c4:	4798      	blx	r3
 80140c6:	6038      	str	r0, [r7, #0]
 80140c8:	6823      	ldr	r3, [r4, #0]
 80140ca:	4620      	mov	r0, r4
 80140cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80140ce:	4798      	blx	r3
 80140d0:	7030      	strb	r0, [r6, #0]
 80140d2:	e7d8      	b.n	8014086 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080140d4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80140d4:	2000      	movs	r0, #0
 80140d6:	4770      	bx	lr

080140d8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80140d8:	2001      	movs	r0, #1
 80140da:	4770      	bx	lr

080140dc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80140dc:	2002      	movs	r0, #2
 80140de:	4770      	bx	lr

080140e0 <_ZN8touchgfx6ScreenD1Ev>:
 80140e0:	4770      	bx	lr

080140e2 <_ZN8touchgfx12GestureEventD1Ev>:
 80140e2:	4770      	bx	lr

080140e4 <_ZN8touchgfx9DragEventD1Ev>:
 80140e4:	4770      	bx	lr

080140e6 <_ZN8touchgfx10ClickEventD1Ev>:
 80140e6:	4770      	bx	lr

080140e8 <_ZN8touchgfx10ClickEventD0Ev>:
 80140e8:	b510      	push	{r4, lr}
 80140ea:	4604      	mov	r4, r0
 80140ec:	210c      	movs	r1, #12
 80140ee:	f009 fc5c 	bl	801d9aa <_ZdlPvj>
 80140f2:	4620      	mov	r0, r4
 80140f4:	bd10      	pop	{r4, pc}

080140f6 <_ZN8touchgfx9DragEventD0Ev>:
 80140f6:	b510      	push	{r4, lr}
 80140f8:	4604      	mov	r4, r0
 80140fa:	2110      	movs	r1, #16
 80140fc:	f009 fc55 	bl	801d9aa <_ZdlPvj>
 8014100:	4620      	mov	r0, r4
 8014102:	bd10      	pop	{r4, pc}

08014104 <_ZN8touchgfx12GestureEventD0Ev>:
 8014104:	b510      	push	{r4, lr}
 8014106:	4604      	mov	r4, r0
 8014108:	210c      	movs	r1, #12
 801410a:	f009 fc4e 	bl	801d9aa <_ZdlPvj>
 801410e:	4620      	mov	r0, r4
 8014110:	bd10      	pop	{r4, pc}

08014112 <_ZN8touchgfx6ScreenD0Ev>:
 8014112:	b510      	push	{r4, lr}
 8014114:	4604      	mov	r4, r0
 8014116:	213c      	movs	r1, #60	; 0x3c
 8014118:	f009 fc47 	bl	801d9aa <_ZdlPvj>
 801411c:	4620      	mov	r0, r4
 801411e:	bd10      	pop	{r4, pc}

08014120 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8014120:	b530      	push	{r4, r5, lr}
 8014122:	460d      	mov	r5, r1
 8014124:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014126:	b087      	sub	sp, #28
 8014128:	4604      	mov	r4, r0
 801412a:	b301      	cbz	r1, 801416e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801412c:	a801      	add	r0, sp, #4
 801412e:	f7ff ff33 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014132:	892a      	ldrh	r2, [r5, #8]
 8014134:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014138:	7928      	ldrb	r0, [r5, #4]
 801413a:	1ad2      	subs	r2, r2, r3
 801413c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801413e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014142:	441a      	add	r2, r3
 8014144:	896b      	ldrh	r3, [r5, #10]
 8014146:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801414a:	f88d 0010 	strb.w	r0, [sp, #16]
 801414e:	1b5b      	subs	r3, r3, r5
 8014150:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8014152:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014154:	442b      	add	r3, r5
 8014156:	4d07      	ldr	r5, [pc, #28]	; (8014174 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014158:	f8ad 1012 	strh.w	r1, [sp, #18]
 801415c:	a903      	add	r1, sp, #12
 801415e:	9503      	str	r5, [sp, #12]
 8014160:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014164:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014168:	6803      	ldr	r3, [r0, #0]
 801416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801416c:	4798      	blx	r3
 801416e:	b007      	add	sp, #28
 8014170:	bd30      	pop	{r4, r5, pc}
 8014172:	bf00      	nop
 8014174:	08020bec 	.word	0x08020bec

08014178 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801417c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801417e:	b08a      	sub	sp, #40	; 0x28
 8014180:	4604      	mov	r4, r0
 8014182:	460d      	mov	r5, r1
 8014184:	b113      	cbz	r3, 801418c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8014186:	790b      	ldrb	r3, [r1, #4]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d044      	beq.n	8014216 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801418c:	f104 0804 	add.w	r8, r4, #4
 8014190:	a803      	add	r0, sp, #12
 8014192:	4641      	mov	r1, r8
 8014194:	f7ff ff00 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014198:	792b      	ldrb	r3, [r5, #4]
 801419a:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801419e:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80141a2:	b983      	cbnz	r3, 80141c6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80141a4:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80141a8:	892a      	ldrh	r2, [r5, #8]
 80141aa:	88e9      	ldrh	r1, [r5, #6]
 80141ac:	4640      	mov	r0, r8
 80141ae:	1b92      	subs	r2, r2, r6
 80141b0:	9301      	str	r3, [sp, #4]
 80141b2:	1bc9      	subs	r1, r1, r7
 80141b4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80141b8:	b212      	sxth	r2, r2
 80141ba:	9300      	str	r3, [sp, #0]
 80141bc:	b209      	sxth	r1, r1
 80141be:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80141c2:	f7fb fcb1 	bl	800fb28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80141c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80141c8:	b329      	cbz	r1, 8014216 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80141ca:	a805      	add	r0, sp, #20
 80141cc:	f7ff fee4 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80141d0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80141d4:	792b      	ldrb	r3, [r5, #4]
 80141d6:	a907      	add	r1, sp, #28
 80141d8:	1abf      	subs	r7, r7, r2
 80141da:	88ea      	ldrh	r2, [r5, #6]
 80141dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80141de:	4417      	add	r7, r2
 80141e0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80141e2:	f88d 3020 	strb.w	r3, [sp, #32]
 80141e6:	4417      	add	r7, r2
 80141e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80141ec:	1ab6      	subs	r6, r6, r2
 80141ee:	892a      	ldrh	r2, [r5, #8]
 80141f0:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80141f4:	4416      	add	r6, r2
 80141f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80141f8:	4416      	add	r6, r2
 80141fa:	4a08      	ldr	r2, [pc, #32]	; (801421c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 80141fc:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8014200:	2600      	movs	r6, #0
 8014202:	9207      	str	r2, [sp, #28]
 8014204:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8014208:	6803      	ldr	r3, [r0, #0]
 801420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801420c:	4798      	blx	r3
 801420e:	792b      	ldrb	r3, [r5, #4]
 8014210:	b10b      	cbz	r3, 8014216 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014212:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8014216:	b00a      	add	sp, #40	; 0x28
 8014218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801421c:	08020bc4 	.word	0x08020bc4

08014220 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8014220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014224:	460c      	mov	r4, r1
 8014226:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014228:	b088      	sub	sp, #32
 801422a:	4605      	mov	r5, r0
 801422c:	2900      	cmp	r1, #0
 801422e:	d06d      	beq.n	801430c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8014230:	4668      	mov	r0, sp
 8014232:	f7ff feb1 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014236:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8014238:	88e3      	ldrh	r3, [r4, #6]
 801423a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801423e:	440b      	add	r3, r1
 8014240:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014244:	b21b      	sxth	r3, r3
 8014246:	4543      	cmp	r3, r8
 8014248:	db31      	blt.n	80142ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801424a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801424e:	44c4      	add	ip, r8
 8014250:	fa0f fc8c 	sxth.w	ip, ip
 8014254:	4563      	cmp	r3, ip
 8014256:	da2a      	bge.n	80142ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014258:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801425a:	8926      	ldrh	r6, [r4, #8]
 801425c:	4416      	add	r6, r2
 801425e:	b236      	sxth	r6, r6
 8014260:	42be      	cmp	r6, r7
 8014262:	db24      	blt.n	80142ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014264:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014268:	4438      	add	r0, r7
 801426a:	b200      	sxth	r0, r0
 801426c:	4286      	cmp	r6, r0
 801426e:	da1e      	bge.n	80142ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014270:	8963      	ldrh	r3, [r4, #10]
 8014272:	4419      	add	r1, r3
 8014274:	b209      	sxth	r1, r1
 8014276:	4541      	cmp	r1, r8
 8014278:	db08      	blt.n	801428c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801427a:	4561      	cmp	r1, ip
 801427c:	da06      	bge.n	801428c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	441a      	add	r2, r3
 8014282:	b212      	sxth	r2, r2
 8014284:	42ba      	cmp	r2, r7
 8014286:	db01      	blt.n	801428c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014288:	4282      	cmp	r2, r0
 801428a:	db10      	blt.n	80142ae <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801428c:	4b21      	ldr	r3, [pc, #132]	; (8014314 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801428e:	a904      	add	r1, sp, #16
 8014290:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014292:	9304      	str	r3, [sp, #16]
 8014294:	2302      	movs	r3, #2
 8014296:	f88d 3014 	strb.w	r3, [sp, #20]
 801429a:	2300      	movs	r3, #0
 801429c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80142a0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80142a4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80142a8:	6803      	ldr	r3, [r0, #0]
 80142aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142ac:	4798      	blx	r3
 80142ae:	1d29      	adds	r1, r5, #4
 80142b0:	a802      	add	r0, sp, #8
 80142b2:	f7ff fe71 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80142b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80142ba:	88e0      	ldrh	r0, [r4, #6]
 80142bc:	eba3 0808 	sub.w	r8, r3, r8
 80142c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80142c4:	7921      	ldrb	r1, [r4, #4]
 80142c6:	fa1f f888 	uxth.w	r8, r8
 80142ca:	1bdf      	subs	r7, r3, r7
 80142cc:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80142d0:	b2bb      	uxth	r3, r7
 80142d2:	4440      	add	r0, r8
 80142d4:	8922      	ldrh	r2, [r4, #8]
 80142d6:	8967      	ldrh	r7, [r4, #10]
 80142d8:	4460      	add	r0, ip
 80142da:	89a4      	ldrh	r4, [r4, #12]
 80142dc:	441a      	add	r2, r3
 80142de:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80142e0:	44b8      	add	r8, r7
 80142e2:	4423      	add	r3, r4
 80142e4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80142e8:	4432      	add	r2, r6
 80142ea:	44e0      	add	r8, ip
 80142ec:	4433      	add	r3, r6
 80142ee:	4c0a      	ldr	r4, [pc, #40]	; (8014318 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80142f0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80142f2:	f88d 1014 	strb.w	r1, [sp, #20]
 80142f6:	a904      	add	r1, sp, #16
 80142f8:	9404      	str	r4, [sp, #16]
 80142fa:	f8ad 2018 	strh.w	r2, [sp, #24]
 80142fe:	f8ad 801a 	strh.w	r8, [sp, #26]
 8014302:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014306:	6803      	ldr	r3, [r0, #0]
 8014308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801430a:	4798      	blx	r3
 801430c:	b008      	add	sp, #32
 801430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014312:	bf00      	nop
 8014314:	08020bc4 	.word	0x08020bc4
 8014318:	08020bd8 	.word	0x08020bd8

0801431c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801431c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801431e:	4604      	mov	r4, r0
 8014320:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014324:	3201      	adds	r2, #1
 8014326:	d112      	bne.n	801434e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014328:	2500      	movs	r5, #0
 801432a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801432e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014332:	6803      	ldr	r3, [r0, #0]
 8014334:	9500      	str	r5, [sp, #0]
 8014336:	466d      	mov	r5, sp
 8014338:	f8ad 1004 	strh.w	r1, [sp, #4]
 801433c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014340:	4629      	mov	r1, r5
 8014342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014344:	4798      	blx	r3
 8014346:	e895 0003 	ldmia.w	r5, {r0, r1}
 801434a:	e884 0003 	stmia.w	r4, {r0, r1}
 801434e:	4620      	mov	r0, r4
 8014350:	b003      	add	sp, #12
 8014352:	bd30      	pop	{r4, r5, pc}

08014354 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014354:	b513      	push	{r0, r1, r4, lr}
 8014356:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801435a:	4604      	mov	r4, r0
 801435c:	3301      	adds	r3, #1
 801435e:	d109      	bne.n	8014374 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014360:	4601      	mov	r1, r0
 8014362:	4668      	mov	r0, sp
 8014364:	f7ff fe18 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014368:	f8bd 3000 	ldrh.w	r3, [sp]
 801436c:	8423      	strh	r3, [r4, #32]
 801436e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014372:	8463      	strh	r3, [r4, #34]	; 0x22
 8014374:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014378:	b002      	add	sp, #8
 801437a:	bd10      	pop	{r4, pc}

0801437c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801437c:	b513      	push	{r0, r1, r4, lr}
 801437e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8014382:	4604      	mov	r4, r0
 8014384:	3301      	adds	r3, #1
 8014386:	d109      	bne.n	801439c <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014388:	4601      	mov	r1, r0
 801438a:	4668      	mov	r0, sp
 801438c:	f7ff fe04 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014390:	f8bd 3000 	ldrh.w	r3, [sp]
 8014394:	8423      	strh	r3, [r4, #32]
 8014396:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801439a:	8463      	strh	r3, [r4, #34]	; 0x22
 801439c:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80143a0:	b002      	add	sp, #8
 80143a2:	bd10      	pop	{r4, pc}

080143a4 <_ZN8touchgfx6ScreenC1Ev>:
 80143a4:	b570      	push	{r4, r5, r6, lr}
 80143a6:	4b17      	ldr	r3, [pc, #92]	; (8014404 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80143a8:	4605      	mov	r5, r0
 80143aa:	4a17      	ldr	r2, [pc, #92]	; (8014408 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80143ac:	2101      	movs	r1, #1
 80143ae:	f845 3b04 	str.w	r3, [r5], #4
 80143b2:	2300      	movs	r3, #0
 80143b4:	6042      	str	r2, [r0, #4]
 80143b6:	4604      	mov	r4, r0
 80143b8:	8103      	strh	r3, [r0, #8]
 80143ba:	8143      	strh	r3, [r0, #10]
 80143bc:	8183      	strh	r3, [r0, #12]
 80143be:	81c3      	strh	r3, [r0, #14]
 80143c0:	8203      	strh	r3, [r0, #16]
 80143c2:	8243      	strh	r3, [r0, #18]
 80143c4:	8283      	strh	r3, [r0, #20]
 80143c6:	82c3      	strh	r3, [r0, #22]
 80143c8:	6203      	str	r3, [r0, #32]
 80143ca:	8483      	strh	r3, [r0, #36]	; 0x24
 80143cc:	84c3      	strh	r3, [r0, #38]	; 0x26
 80143ce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80143d2:	6343      	str	r3, [r0, #52]	; 0x34
 80143d4:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80143d8:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80143dc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80143e0:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 80143e4:	4b09      	ldr	r3, [pc, #36]	; (801440c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80143e6:	4628      	mov	r0, r5
 80143e8:	f9b3 6000 	ldrsh.w	r6, [r3]
 80143ec:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80143ee:	4a08      	ldr	r2, [pc, #32]	; (8014410 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80143f0:	f9b2 1000 	ldrsh.w	r1, [r2]
 80143f4:	4798      	blx	r3
 80143f6:	6863      	ldr	r3, [r4, #4]
 80143f8:	4628      	mov	r0, r5
 80143fa:	4631      	mov	r1, r6
 80143fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80143fe:	4798      	blx	r3
 8014400:	4620      	mov	r0, r4
 8014402:	bd70      	pop	{r4, r5, r6, pc}
 8014404:	08020c00 	.word	0x08020c00
 8014408:	08020968 	.word	0x08020968
 801440c:	240074b2 	.word	0x240074b2
 8014410:	240074b0 	.word	0x240074b0

08014414 <_ZN8touchgfx6Screen4drawEv>:
 8014414:	4b09      	ldr	r3, [pc, #36]	; (801443c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014416:	b507      	push	{r0, r1, r2, lr}
 8014418:	f9b3 2000 	ldrsh.w	r2, [r3]
 801441c:	2100      	movs	r1, #0
 801441e:	4b08      	ldr	r3, [pc, #32]	; (8014440 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014420:	9100      	str	r1, [sp, #0]
 8014422:	4669      	mov	r1, sp
 8014424:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014428:	f8ad 2004 	strh.w	r2, [sp, #4]
 801442c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014430:	6803      	ldr	r3, [r0, #0]
 8014432:	689b      	ldr	r3, [r3, #8]
 8014434:	4798      	blx	r3
 8014436:	b003      	add	sp, #12
 8014438:	f85d fb04 	ldr.w	pc, [sp], #4
 801443c:	240074b0 	.word	0x240074b0
 8014440:	240074b2 	.word	0x240074b2

08014444 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014448:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801444c:	b089      	sub	sp, #36	; 0x24
 801444e:	4680      	mov	r8, r0
 8014450:	460c      	mov	r4, r1
 8014452:	2b00      	cmp	r3, #0
 8014454:	4615      	mov	r5, r2
 8014456:	dd0e      	ble.n	8014476 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014458:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801445c:	2b00      	cmp	r3, #0
 801445e:	dd0a      	ble.n	8014476 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014460:	4628      	mov	r0, r5
 8014462:	f7ff ff5b 	bl	801431c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014466:	4621      	mov	r1, r4
 8014468:	f7fe fc83 	bl	8012d72 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801446c:	69eb      	ldr	r3, [r5, #28]
 801446e:	b928      	cbnz	r0, 801447c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014470:	461d      	mov	r5, r3
 8014472:	2b00      	cmp	r3, #0
 8014474:	d1f4      	bne.n	8014460 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014476:	b009      	add	sp, #36	; 0x24
 8014478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801447c:	ae04      	add	r6, sp, #16
 801447e:	2b00      	cmp	r3, #0
 8014480:	f000 80b5 	beq.w	80145ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014484:	682b      	ldr	r3, [r5, #0]
 8014486:	4629      	mov	r1, r5
 8014488:	a802      	add	r0, sp, #8
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	4798      	blx	r3
 801448e:	4628      	mov	r0, r5
 8014490:	f7ff ff60 	bl	8014354 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014494:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014498:	4407      	add	r7, r0
 801449a:	4628      	mov	r0, r5
 801449c:	f7ff ff6e 	bl	801437c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80144a0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80144a4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80144a8:	b23f      	sxth	r7, r7
 80144aa:	4418      	add	r0, r3
 80144ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80144b0:	4621      	mov	r1, r4
 80144b2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80144b6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80144ba:	4630      	mov	r0, r6
 80144bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80144c0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80144c4:	f7fb fc12 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 80144c8:	4628      	mov	r0, r5
 80144ca:	f7ff ff27 	bl	801431c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80144ce:	ab06      	add	r3, sp, #24
 80144d0:	4602      	mov	r2, r0
 80144d2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80144d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80144da:	4611      	mov	r1, r2
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fb fc05 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 80144e2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80144e6:	f9b4 1000 	ldrsh.w	r1, [r4]
 80144ea:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80144ee:	4299      	cmp	r1, r3
 80144f0:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80144f4:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80144f8:	d10b      	bne.n	8014512 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80144fa:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80144fe:	4552      	cmp	r2, sl
 8014500:	d107      	bne.n	8014512 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014502:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014506:	455a      	cmp	r2, fp
 8014508:	d103      	bne.n	8014512 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801450a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801450e:	454a      	cmp	r2, r9
 8014510:	d06d      	beq.n	80145ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014512:	f1bb 0f00 	cmp.w	fp, #0
 8014516:	dd65      	ble.n	80145e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014518:	f1b9 0f00 	cmp.w	r9, #0
 801451c:	dd62      	ble.n	80145e4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801451e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014522:	fa1f f08a 	uxth.w	r0, sl
 8014526:	4552      	cmp	r2, sl
 8014528:	9000      	str	r0, [sp, #0]
 801452a:	da12      	bge.n	8014552 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801452c:	9301      	str	r3, [sp, #4]
 801452e:	9b00      	ldr	r3, [sp, #0]
 8014530:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014534:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014538:	1a9a      	subs	r2, r3, r2
 801453a:	f8ad 1010 	strh.w	r1, [sp, #16]
 801453e:	4631      	mov	r1, r6
 8014540:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014544:	4640      	mov	r0, r8
 8014546:	f8ad 2016 	strh.w	r2, [sp, #22]
 801454a:	69ea      	ldr	r2, [r5, #28]
 801454c:	f7ff ff7a 	bl	8014444 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014550:	9b01      	ldr	r3, [sp, #4]
 8014552:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014556:	b29f      	uxth	r7, r3
 8014558:	429a      	cmp	r2, r3
 801455a:	da0d      	bge.n	8014578 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801455c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014560:	1aba      	subs	r2, r7, r2
 8014562:	f8ad a012 	strh.w	sl, [sp, #18]
 8014566:	4631      	mov	r1, r6
 8014568:	f8ad 2014 	strh.w	r2, [sp, #20]
 801456c:	4640      	mov	r0, r8
 801456e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014572:	69ea      	ldr	r2, [r5, #28]
 8014574:	f7ff ff66 	bl	8014444 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014578:	8822      	ldrh	r2, [r4, #0]
 801457a:	445f      	add	r7, fp
 801457c:	88a3      	ldrh	r3, [r4, #4]
 801457e:	b2bf      	uxth	r7, r7
 8014580:	4413      	add	r3, r2
 8014582:	b23a      	sxth	r2, r7
 8014584:	b29b      	uxth	r3, r3
 8014586:	b219      	sxth	r1, r3
 8014588:	4291      	cmp	r1, r2
 801458a:	dd0d      	ble.n	80145a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801458c:	1bdb      	subs	r3, r3, r7
 801458e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014592:	f8ad a012 	strh.w	sl, [sp, #18]
 8014596:	4631      	mov	r1, r6
 8014598:	f8ad 3014 	strh.w	r3, [sp, #20]
 801459c:	4640      	mov	r0, r8
 801459e:	f8ad 9016 	strh.w	r9, [sp, #22]
 80145a2:	69ea      	ldr	r2, [r5, #28]
 80145a4:	f7ff ff4e 	bl	8014444 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80145a8:	88e2      	ldrh	r2, [r4, #6]
 80145aa:	8863      	ldrh	r3, [r4, #2]
 80145ac:	4413      	add	r3, r2
 80145ae:	9a00      	ldr	r2, [sp, #0]
 80145b0:	444a      	add	r2, r9
 80145b2:	b29b      	uxth	r3, r3
 80145b4:	fa1f f982 	uxth.w	r9, r2
 80145b8:	b219      	sxth	r1, r3
 80145ba:	fa0f f289 	sxth.w	r2, r9
 80145be:	428a      	cmp	r2, r1
 80145c0:	da15      	bge.n	80145ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80145c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80145c6:	eba3 0309 	sub.w	r3, r3, r9
 80145ca:	f9b4 0000 	ldrsh.w	r0, [r4]
 80145ce:	f8ad 1014 	strh.w	r1, [sp, #20]
 80145d2:	4631      	mov	r1, r6
 80145d4:	f8ad 0010 	strh.w	r0, [sp, #16]
 80145d8:	f8ad 2012 	strh.w	r2, [sp, #18]
 80145dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80145e0:	69ea      	ldr	r2, [r5, #28]
 80145e2:	e001      	b.n	80145e8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80145e4:	69ea      	ldr	r2, [r5, #28]
 80145e6:	4621      	mov	r1, r4
 80145e8:	4640      	mov	r0, r8
 80145ea:	f7ff ff2b 	bl	8014444 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80145ee:	4628      	mov	r0, r5
 80145f0:	f7ff fe94 	bl	801431c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80145f4:	6861      	ldr	r1, [r4, #4]
 80145f6:	4602      	mov	r2, r0
 80145f8:	4633      	mov	r3, r6
 80145fa:	6820      	ldr	r0, [r4, #0]
 80145fc:	c303      	stmia	r3!, {r0, r1}
 80145fe:	4611      	mov	r1, r2
 8014600:	4630      	mov	r0, r6
 8014602:	f7fb fb73 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 8014606:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801460a:	2b00      	cmp	r3, #0
 801460c:	f77f af33 	ble.w	8014476 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014610:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014614:	2b00      	cmp	r3, #0
 8014616:	f77f af2e 	ble.w	8014476 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801461a:	4628      	mov	r0, r5
 801461c:	f7ff fe9a 	bl	8014354 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014620:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014624:	1a18      	subs	r0, r3, r0
 8014626:	f8ad 0010 	strh.w	r0, [sp, #16]
 801462a:	4628      	mov	r0, r5
 801462c:	f7ff fea6 	bl	801437c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014630:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014634:	4631      	mov	r1, r6
 8014636:	1a18      	subs	r0, r3, r0
 8014638:	f8ad 0012 	strh.w	r0, [sp, #18]
 801463c:	4628      	mov	r0, r5
 801463e:	682b      	ldr	r3, [r5, #0]
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	4798      	blx	r3
 8014644:	e717      	b.n	8014476 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014646 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014646:	b570      	push	{r4, r5, r6, lr}
 8014648:	1d06      	adds	r6, r0, #4
 801464a:	b086      	sub	sp, #24
 801464c:	460c      	mov	r4, r1
 801464e:	2300      	movs	r3, #0
 8014650:	4631      	mov	r1, r6
 8014652:	4605      	mov	r5, r0
 8014654:	a802      	add	r0, sp, #8
 8014656:	9301      	str	r3, [sp, #4]
 8014658:	f7ff fc9e 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801465c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014660:	8822      	ldrh	r2, [r4, #0]
 8014662:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014666:	1ad2      	subs	r2, r2, r3
 8014668:	8863      	ldrh	r3, [r4, #2]
 801466a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801466e:	1a5b      	subs	r3, r3, r1
 8014670:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014674:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014678:	aa01      	add	r2, sp, #4
 801467a:	f8ad 0014 	strh.w	r0, [sp, #20]
 801467e:	4630      	mov	r0, r6
 8014680:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014684:	a904      	add	r1, sp, #16
 8014686:	f8ad 3012 	strh.w	r3, [sp, #18]
 801468a:	f7fb fc07 	bl	800fe9c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801468e:	9a01      	ldr	r2, [sp, #4]
 8014690:	b11a      	cbz	r2, 801469a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014692:	4621      	mov	r1, r4
 8014694:	4628      	mov	r0, r5
 8014696:	f7ff fed5 	bl	8014444 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801469a:	b006      	add	sp, #24
 801469c:	bd70      	pop	{r4, r5, r6, pc}

0801469e <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801469e:	4602      	mov	r2, r0
 80146a0:	b530      	push	{r4, r5, lr}
 80146a2:	4604      	mov	r4, r0
 80146a4:	b085      	sub	sp, #20
 80146a6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80146aa:	460d      	mov	r5, r1
 80146ac:	466b      	mov	r3, sp
 80146ae:	6851      	ldr	r1, [r2, #4]
 80146b0:	c303      	stmia	r3!, {r0, r1}
 80146b2:	4629      	mov	r1, r5
 80146b4:	4668      	mov	r0, sp
 80146b6:	f7fb fb19 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 80146ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80146be:	b12b      	cbz	r3, 80146cc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80146c0:	4669      	mov	r1, sp
 80146c2:	4620      	mov	r0, r4
 80146c4:	f7ff ffbf 	bl	8014646 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80146c8:	b005      	add	sp, #20
 80146ca:	bd30      	pop	{r4, r5, pc}
 80146cc:	3404      	adds	r4, #4
 80146ce:	a802      	add	r0, sp, #8
 80146d0:	4621      	mov	r1, r4
 80146d2:	f7ff fc61 	bl	8013f98 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80146d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80146da:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80146de:	4669      	mov	r1, sp
 80146e0:	4620      	mov	r0, r4
 80146e2:	1a9b      	subs	r3, r3, r2
 80146e4:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80146e8:	f8ad 3000 	strh.w	r3, [sp]
 80146ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80146f0:	1a9b      	subs	r3, r3, r2
 80146f2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80146f6:	f7fb fb98 	bl	800fe2a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80146fa:	e7e5      	b.n	80146c8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080146fc <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80146fc:	460b      	mov	r3, r1
 80146fe:	680a      	ldr	r2, [r1, #0]
 8014700:	1d01      	adds	r1, r0, #4
 8014702:	6992      	ldr	r2, [r2, #24]
 8014704:	4618      	mov	r0, r3
 8014706:	4710      	bx	r2

08014708 <_ZN8touchgfx12TextProviderC1Ev>:
 8014708:	b538      	push	{r3, r4, r5, lr}
 801470a:	2500      	movs	r5, #0
 801470c:	2302      	movs	r3, #2
 801470e:	4604      	mov	r4, r0
 8014710:	220e      	movs	r2, #14
 8014712:	7403      	strb	r3, [r0, #16]
 8014714:	4629      	mov	r1, r5
 8014716:	6145      	str	r5, [r0, #20]
 8014718:	7605      	strb	r5, [r0, #24]
 801471a:	83c5      	strh	r5, [r0, #30]
 801471c:	8405      	strh	r5, [r0, #32]
 801471e:	86c5      	strh	r5, [r0, #54]	; 0x36
 8014720:	8705      	strh	r5, [r0, #56]	; 0x38
 8014722:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8014724:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8014728:	e9c0 5500 	strd	r5, r5, [r0]
 801472c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8014730:	304c      	adds	r0, #76	; 0x4c
 8014732:	f009 faef 	bl	801dd14 <memset>
 8014736:	2301      	movs	r3, #1
 8014738:	4620      	mov	r0, r4
 801473a:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801473e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014742:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8014746:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801474a:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801474e:	f7ee fb63 	bl	8002e18 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014752:	4620      	mov	r0, r4
 8014754:	bd38      	pop	{r3, r4, r5, pc}

08014756 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8014756:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014758:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801475c:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801475e:	fab0 f080 	clz	r0, r0
 8014762:	0940      	lsrs	r0, r0, #5
 8014764:	4770      	bx	lr

08014766 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014766:	b530      	push	{r4, r5, lr}
 8014768:	2500      	movs	r5, #0
 801476a:	2401      	movs	r4, #1
 801476c:	6843      	ldr	r3, [r0, #4]
 801476e:	b913      	cbnz	r3, 8014776 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014770:	6803      	ldr	r3, [r0, #0]
 8014772:	b313      	cbz	r3, 80147ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014774:	6043      	str	r3, [r0, #4]
 8014776:	7e03      	ldrb	r3, [r0, #24]
 8014778:	b143      	cbz	r3, 801478c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801477a:	6943      	ldr	r3, [r0, #20]
 801477c:	b12b      	cbz	r3, 801478a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801477e:	881a      	ldrh	r2, [r3, #0]
 8014780:	b11a      	cbz	r2, 801478a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014782:	1c9a      	adds	r2, r3, #2
 8014784:	6142      	str	r2, [r0, #20]
 8014786:	8818      	ldrh	r0, [r3, #0]
 8014788:	bd30      	pop	{r4, r5, pc}
 801478a:	7605      	strb	r5, [r0, #24]
 801478c:	6843      	ldr	r3, [r0, #4]
 801478e:	8819      	ldrh	r1, [r3, #0]
 8014790:	b199      	cbz	r1, 80147ba <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014792:	1c9a      	adds	r2, r3, #2
 8014794:	2902      	cmp	r1, #2
 8014796:	6042      	str	r2, [r0, #4]
 8014798:	d1f5      	bne.n	8014786 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801479a:	7c03      	ldrb	r3, [r0, #16]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d8e5      	bhi.n	801476c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80147a0:	1c5a      	adds	r2, r3, #1
 80147a2:	3302      	adds	r3, #2
 80147a4:	7402      	strb	r2, [r0, #16]
 80147a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80147aa:	6143      	str	r3, [r0, #20]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d0dd      	beq.n	801476c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80147b0:	881b      	ldrh	r3, [r3, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d0da      	beq.n	801476c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80147b6:	7604      	strb	r4, [r0, #24]
 80147b8:	e7d8      	b.n	801476c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80147ba:	2000      	movs	r0, #0
 80147bc:	e7e4      	b.n	8014788 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80147be:	6001      	str	r1, [r0, #0]
 80147c0:	2100      	movs	r1, #0
 80147c2:	b430      	push	{r4, r5}
 80147c4:	6041      	str	r1, [r0, #4]
 80147c6:	6815      	ldr	r5, [r2, #0]
 80147c8:	6085      	str	r5, [r0, #8]
 80147ca:	6852      	ldr	r2, [r2, #4]
 80147cc:	6443      	str	r3, [r0, #68]	; 0x44
 80147ce:	9b02      	ldr	r3, [sp, #8]
 80147d0:	60c2      	str	r2, [r0, #12]
 80147d2:	7401      	strb	r1, [r0, #16]
 80147d4:	6141      	str	r1, [r0, #20]
 80147d6:	7601      	strb	r1, [r0, #24]
 80147d8:	8701      	strh	r1, [r0, #56]	; 0x38
 80147da:	8401      	strh	r1, [r0, #32]
 80147dc:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80147e0:	6483      	str	r3, [r0, #72]	; 0x48
 80147e2:	bc30      	pop	{r4, r5}
 80147e4:	f7ee bb18 	b.w	8002e18 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080147e8 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 80147e8:	b408      	push	{r3}
 80147ea:	b510      	push	{r4, lr}
 80147ec:	b085      	sub	sp, #20
 80147ee:	ac07      	add	r4, sp, #28
 80147f0:	f854 3b04 	ldr.w	r3, [r4], #4
 80147f4:	9300      	str	r3, [sp, #0]
 80147f6:	4613      	mov	r3, r2
 80147f8:	4622      	mov	r2, r4
 80147fa:	9403      	str	r4, [sp, #12]
 80147fc:	f7ff ffdf 	bl	80147be <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014800:	b005      	add	sp, #20
 8014802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014806:	b001      	add	sp, #4
 8014808:	4770      	bx	lr

0801480a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801480a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801480c:	4605      	mov	r5, r0
 801480e:	4608      	mov	r0, r1
 8014810:	b1f1      	cbz	r1, 8014850 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8014812:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8014816:	460b      	mov	r3, r1
 8014818:	f101 0708 	add.w	r7, r1, #8
 801481c:	4622      	mov	r2, r4
 801481e:	6818      	ldr	r0, [r3, #0]
 8014820:	3308      	adds	r3, #8
 8014822:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014826:	4626      	mov	r6, r4
 8014828:	42bb      	cmp	r3, r7
 801482a:	c603      	stmia	r6!, {r0, r1}
 801482c:	4634      	mov	r4, r6
 801482e:	d1f6      	bne.n	801481e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8014830:	6818      	ldr	r0, [r3, #0]
 8014832:	6030      	str	r0, [r6, #0]
 8014834:	4610      	mov	r0, r2
 8014836:	889b      	ldrh	r3, [r3, #4]
 8014838:	80b3      	strh	r3, [r6, #4]
 801483a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801483e:	015b      	lsls	r3, r3, #5
 8014840:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014844:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8014848:	430b      	orrs	r3, r1
 801484a:	425b      	negs	r3, r3
 801484c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8014850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014852 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8014852:	b538      	push	{r3, r4, r5, lr}
 8014854:	460c      	mov	r4, r1
 8014856:	6811      	ldr	r1, [r2, #0]
 8014858:	4610      	mov	r0, r2
 801485a:	68cd      	ldr	r5, [r1, #12]
 801485c:	4619      	mov	r1, r3
 801485e:	47a8      	blx	r5
 8014860:	2800      	cmp	r0, #0
 8014862:	bf08      	it	eq
 8014864:	4620      	moveq	r0, r4
 8014866:	bd38      	pop	{r3, r4, r5, pc}

08014868 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801486a:	4604      	mov	r4, r0
 801486c:	4615      	mov	r5, r2
 801486e:	4608      	mov	r0, r1
 8014870:	b93a      	cbnz	r2, 8014882 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8014872:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8014876:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801487a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801487e:	4628      	mov	r0, r5
 8014880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014882:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8014886:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801488a:	8893      	ldrh	r3, [r2, #4]
 801488c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8014890:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8014894:	79ee      	ldrb	r6, [r5, #7]
 8014896:	4316      	orrs	r6, r2
 8014898:	19da      	adds	r2, r3, r7
 801489a:	b291      	uxth	r1, r2
 801489c:	b2b7      	uxth	r7, r6
 801489e:	291d      	cmp	r1, #29
 80148a0:	d87b      	bhi.n	801499a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80148a2:	2201      	movs	r2, #1
 80148a4:	10f6      	asrs	r6, r6, #3
 80148a6:	408a      	lsls	r2, r1
 80148a8:	4974      	ldr	r1, [pc, #464]	; (8014a7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 80148aa:	420a      	tst	r2, r1
 80148ac:	d12e      	bne.n	801490c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 80148ae:	f412 7f60 	tst.w	r2, #896	; 0x380
 80148b2:	d072      	beq.n	801499a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80148b4:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80148b8:	462b      	mov	r3, r5
 80148ba:	f105 0e08 	add.w	lr, r5, #8
 80148be:	4615      	mov	r5, r2
 80148c0:	6818      	ldr	r0, [r3, #0]
 80148c2:	3308      	adds	r3, #8
 80148c4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80148c8:	4694      	mov	ip, r2
 80148ca:	4573      	cmp	r3, lr
 80148cc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80148d0:	4662      	mov	r2, ip
 80148d2:	d1f5      	bne.n	80148c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80148d4:	6818      	ldr	r0, [r3, #0]
 80148d6:	f8cc 0000 	str.w	r0, [ip]
 80148da:	889b      	ldrh	r3, [r3, #4]
 80148dc:	f8ac 3004 	strh.w	r3, [ip, #4]
 80148e0:	b2b3      	uxth	r3, r6
 80148e2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80148e6:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80148ea:	1aca      	subs	r2, r1, r3
 80148ec:	1bcf      	subs	r7, r1, r7
 80148ee:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80148f2:	b292      	uxth	r2, r2
 80148f4:	1afb      	subs	r3, r7, r3
 80148f6:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80148fa:	10d2      	asrs	r2, r2, #3
 80148fc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8014900:	4302      	orrs	r2, r0
 8014902:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8014906:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801490a:	e7b8      	b.n	801487e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801490c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801490e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014912:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8014914:	f640 6333 	movw	r3, #3635	; 0xe33
 8014918:	4299      	cmp	r1, r3
 801491a:	d110      	bne.n	801493e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801491c:	6803      	ldr	r3, [r0, #0]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	4798      	blx	r3
 8014922:	7b41      	ldrb	r1, [r0, #13]
 8014924:	00cb      	lsls	r3, r1, #3
 8014926:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801492a:	7a03      	ldrb	r3, [r0, #8]
 801492c:	0648      	lsls	r0, r1, #25
 801492e:	ea43 0302 	orr.w	r3, r3, r2
 8014932:	bf44      	itt	mi
 8014934:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014938:	b21b      	sxthmi	r3, r3
 801493a:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801493e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8014942:	462a      	mov	r2, r5
 8014944:	f105 0c08 	add.w	ip, r5, #8
 8014948:	443b      	add	r3, r7
 801494a:	4433      	add	r3, r6
 801494c:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8014950:	b29b      	uxth	r3, r3
 8014952:	4635      	mov	r5, r6
 8014954:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014958:	6810      	ldr	r0, [r2, #0]
 801495a:	3208      	adds	r2, #8
 801495c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8014960:	4637      	mov	r7, r6
 8014962:	4562      	cmp	r2, ip
 8014964:	c703      	stmia	r7!, {r0, r1}
 8014966:	463e      	mov	r6, r7
 8014968:	d1f6      	bne.n	8014958 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801496a:	6810      	ldr	r0, [r2, #0]
 801496c:	6038      	str	r0, [r7, #0]
 801496e:	8892      	ldrh	r2, [r2, #4]
 8014970:	80ba      	strh	r2, [r7, #4]
 8014972:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014976:	10db      	asrs	r3, r3, #3
 8014978:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801497c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014980:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014984:	4313      	orrs	r3, r2
 8014986:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801498a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801498e:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8014992:	1a9b      	subs	r3, r3, r2
 8014994:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8014998:	e771      	b.n	801487e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801499a:	f023 0204 	bic.w	r2, r3, #4
 801499e:	f640 611b 	movw	r1, #3611	; 0xe1b
 80149a2:	428a      	cmp	r2, r1
 80149a4:	d003      	beq.n	80149ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 80149a6:	f640 621d 	movw	r2, #3613	; 0xe1d
 80149aa:	4293      	cmp	r3, r2
 80149ac:	d120      	bne.n	80149f0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 80149ae:	3b01      	subs	r3, #1
 80149b0:	4602      	mov	r2, r0
 80149b2:	4629      	mov	r1, r5
 80149b4:	4620      	mov	r0, r4
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	f7ff ff4b 	bl	8014852 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80149bc:	7b41      	ldrb	r1, [r0, #13]
 80149be:	00cb      	lsls	r3, r1, #3
 80149c0:	0649      	lsls	r1, r1, #25
 80149c2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80149c6:	7a03      	ldrb	r3, [r0, #8]
 80149c8:	ea43 0302 	orr.w	r3, r3, r2
 80149cc:	bf44      	itt	mi
 80149ce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80149d2:	b21b      	sxthmi	r3, r3
 80149d4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80149d8:	7b6b      	ldrb	r3, [r5, #13]
 80149da:	7aaa      	ldrb	r2, [r5, #10]
 80149dc:	005b      	lsls	r3, r3, #1
 80149de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149e2:	4313      	orrs	r3, r2
 80149e4:	115a      	asrs	r2, r3, #5
 80149e6:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80149ea:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80149ee:	e035      	b.n	8014a5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 80149f0:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80149f4:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80149f8:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80149fc:	7a2a      	ldrb	r2, [r5, #8]
 80149fe:	ea42 0201 	orr.w	r2, r2, r1
 8014a02:	f640 6109 	movw	r1, #3593	; 0xe09
 8014a06:	bf1c      	itt	ne
 8014a08:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8014a0c:	b212      	sxthne	r2, r2
 8014a0e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8014a12:	f023 0210 	bic.w	r2, r3, #16
 8014a16:	428a      	cmp	r2, r1
 8014a18:	d003      	beq.n	8014a22 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8014a1a:	f640 6213 	movw	r2, #3603	; 0xe13
 8014a1e:	4293      	cmp	r3, r2
 8014a20:	d129      	bne.n	8014a76 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8014a22:	7b6e      	ldrb	r6, [r5, #13]
 8014a24:	4629      	mov	r1, r5
 8014a26:	0076      	lsls	r6, r6, #1
 8014a28:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8014a2c:	7aae      	ldrb	r6, [r5, #10]
 8014a2e:	4316      	orrs	r6, r2
 8014a30:	f640 6213 	movw	r2, #3603	; 0xe13
 8014a34:	4293      	cmp	r3, r2
 8014a36:	4602      	mov	r2, r0
 8014a38:	4620      	mov	r0, r4
 8014a3a:	bf16      	itet	ne
 8014a3c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014a40:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8014a44:	b29b      	uxthne	r3, r3
 8014a46:	f7ff ff04 	bl	8014852 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014a4a:	7b43      	ldrb	r3, [r0, #13]
 8014a4c:	7a82      	ldrb	r2, [r0, #10]
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a54:	4313      	orrs	r3, r2
 8014a56:	1af6      	subs	r6, r6, r3
 8014a58:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8014a5c:	7b69      	ldrb	r1, [r5, #13]
 8014a5e:	00cb      	lsls	r3, r1, #3
 8014a60:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014a64:	7a2b      	ldrb	r3, [r5, #8]
 8014a66:	4313      	orrs	r3, r2
 8014a68:	064a      	lsls	r2, r1, #25
 8014a6a:	bf44      	itt	mi
 8014a6c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014a70:	b21b      	sxthmi	r3, r3
 8014a72:	1bdb      	subs	r3, r3, r7
 8014a74:	e747      	b.n	8014906 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8014a76:	2300      	movs	r3, #0
 8014a78:	e7b7      	b.n	80149ea <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8014a7a:	bf00      	nop
 8014a7c:	3fc00079 	.word	0x3fc00079

08014a80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014a84:	4604      	mov	r4, r0
 8014a86:	b942      	cbnz	r2, 8014a9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8014a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a8c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8014a90:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8014a94:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8014a98:	e047      	b.n	8014b2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014a9a:	7b51      	ldrb	r1, [r2, #13]
 8014a9c:	8893      	ldrh	r3, [r2, #4]
 8014a9e:	010d      	lsls	r5, r1, #4
 8014aa0:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8014aa4:	79d5      	ldrb	r5, [r2, #7]
 8014aa6:	4305      	orrs	r5, r0
 8014aa8:	2d04      	cmp	r5, #4
 8014aaa:	bfcc      	ite	gt
 8014aac:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8014ab0:	f04f 0e01 	movle.w	lr, #1
 8014ab4:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8014ab8:	f200 80ab 	bhi.w	8014c12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8014abc:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8014ac0:	4283      	cmp	r3, r0
 8014ac2:	d216      	bcs.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014ac4:	f240 605b 	movw	r0, #1627	; 0x65b
 8014ac8:	4283      	cmp	r3, r0
 8014aca:	d859      	bhi.n	8014b80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8014acc:	f240 6057 	movw	r0, #1623	; 0x657
 8014ad0:	4283      	cmp	r3, r0
 8014ad2:	d20e      	bcs.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014ad4:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8014ad8:	d24a      	bcs.n	8014b70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8014ada:	f240 604e 	movw	r0, #1614	; 0x64e
 8014ade:	4283      	cmp	r3, r0
 8014ae0:	d207      	bcs.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014ae2:	f240 601a 	movw	r0, #1562	; 0x61a
 8014ae6:	4283      	cmp	r3, r0
 8014ae8:	d02a      	beq.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014aea:	d821      	bhi.n	8014b30 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8014aec:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8014af0:	d35b      	bcc.n	8014baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014af2:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8014af6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014afa:	f040 80d0 	bne.w	8014c9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014afe:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8014b02:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014b06:	f040 80ca 	bne.w	8014c9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014b0a:	00cb      	lsls	r3, r1, #3
 8014b0c:	0649      	lsls	r1, r1, #25
 8014b0e:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014b12:	7a13      	ldrb	r3, [r2, #8]
 8014b14:	ea43 0300 	orr.w	r3, r3, r0
 8014b18:	bf44      	itt	mi
 8014b1a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014b1e:	b21b      	sxthmi	r3, r3
 8014b20:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014b24:	1b5d      	subs	r5, r3, r5
 8014b26:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014b2a:	4610      	mov	r0, r2
 8014b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b30:	f240 604b 	movw	r0, #1611	; 0x64b
 8014b34:	4283      	cmp	r3, r0
 8014b36:	d338      	bcc.n	8014baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014b38:	f240 604c 	movw	r0, #1612	; 0x64c
 8014b3c:	4283      	cmp	r3, r0
 8014b3e:	d9d8      	bls.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014b40:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8014b44:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8014b48:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014b4c:	f040 80f3 	bne.w	8014d36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014b50:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014b54:	f040 80ef 	bne.w	8014d36 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014b58:	00cb      	lsls	r3, r1, #3
 8014b5a:	064e      	lsls	r6, r1, #25
 8014b5c:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014b60:	7a13      	ldrb	r3, [r2, #8]
 8014b62:	ea43 0300 	orr.w	r3, r3, r0
 8014b66:	bf44      	itt	mi
 8014b68:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014b6c:	b21b      	sxthmi	r3, r3
 8014b6e:	e7d9      	b.n	8014b24 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8014b70:	f240 6054 	movw	r0, #1620	; 0x654
 8014b74:	4283      	cmp	r3, r0
 8014b76:	d8e3      	bhi.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014b78:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8014b7c:	d9e0      	bls.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014b7e:	e7b8      	b.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014b80:	f240 6074 	movw	r0, #1652	; 0x674
 8014b84:	4283      	cmp	r3, r0
 8014b86:	d0b4      	beq.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014b88:	d82d      	bhi.n	8014be6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8014b8a:	f240 605e 	movw	r0, #1630	; 0x65e
 8014b8e:	4283      	cmp	r3, r0
 8014b90:	d804      	bhi.n	8014b9c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8014b92:	f240 605d 	movw	r0, #1629	; 0x65d
 8014b96:	4283      	cmp	r3, r0
 8014b98:	d3d2      	bcc.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014b9a:	e7aa      	b.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014b9c:	f240 605f 	movw	r0, #1631	; 0x65f
 8014ba0:	4283      	cmp	r3, r0
 8014ba2:	d0cd      	beq.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014ba4:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8014ba8:	d0a3      	beq.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014baa:	00cb      	lsls	r3, r1, #3
 8014bac:	0649      	lsls	r1, r1, #25
 8014bae:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8014bb2:	7a13      	ldrb	r3, [r2, #8]
 8014bb4:	ea43 0300 	orr.w	r3, r3, r0
 8014bb8:	bf44      	itt	mi
 8014bba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014bbe:	b21b      	sxthmi	r3, r3
 8014bc0:	1b5d      	subs	r5, r3, r5
 8014bc2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014bc6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014bca:	7b53      	ldrb	r3, [r2, #13]
 8014bcc:	015b      	lsls	r3, r3, #5
 8014bce:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014bd2:	7993      	ldrb	r3, [r2, #6]
 8014bd4:	430b      	orrs	r3, r1
 8014bd6:	2105      	movs	r1, #5
 8014bd8:	005b      	lsls	r3, r3, #1
 8014bda:	fb93 f3f1 	sdiv	r3, r3, r1
 8014bde:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8014be2:	440b      	add	r3, r1
 8014be4:	e756      	b.n	8014a94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8014be6:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8014bea:	4283      	cmp	r3, r0
 8014bec:	d809      	bhi.n	8014c02 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8014bee:	f240 60df 	movw	r0, #1759	; 0x6df
 8014bf2:	4283      	cmp	r3, r0
 8014bf4:	f4bf af7d 	bcs.w	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014bf8:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8014bfc:	2b05      	cmp	r3, #5
 8014bfe:	d8d4      	bhi.n	8014baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014c00:	e777      	b.n	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c02:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8014c06:	4283      	cmp	r3, r0
 8014c08:	d09a      	beq.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014c0a:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8014c0e:	4283      	cmp	r3, r0
 8014c10:	e7ca      	b.n	8014ba8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014c12:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8014c16:	d22b      	bcs.n	8014c70 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014c18:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8014c1c:	4283      	cmp	r3, r0
 8014c1e:	d28f      	bcs.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014c20:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8014c24:	4283      	cmp	r3, r0
 8014c26:	d816      	bhi.n	8014c56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014c28:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8014c2c:	4283      	cmp	r3, r0
 8014c2e:	f4bf af60 	bcs.w	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c32:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8014c36:	4283      	cmp	r3, r0
 8014c38:	d80a      	bhi.n	8014c50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014c3a:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8014c3e:	4283      	cmp	r3, r0
 8014c40:	f4bf af57 	bcs.w	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c44:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8014c48:	4283      	cmp	r3, r0
 8014c4a:	f43f af79 	beq.w	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014c4e:	e7ac      	b.n	8014baa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014c50:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8014c54:	e7f8      	b.n	8014c48 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8014c56:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8014c5a:	4283      	cmp	r3, r0
 8014c5c:	d802      	bhi.n	8014c64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014c5e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8014c62:	e798      	b.n	8014b96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8014c64:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8014c68:	4283      	cmp	r3, r0
 8014c6a:	f47f af42 	bne.w	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c6e:	e767      	b.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014c70:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8014c74:	4283      	cmp	r3, r0
 8014c76:	f43f af63 	beq.w	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014c7a:	d802      	bhi.n	8014c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014c7c:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8014c80:	e7f2      	b.n	8014c68 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8014c82:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8014c86:	4283      	cmp	r3, r0
 8014c88:	d805      	bhi.n	8014c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014c8a:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8014c8e:	4283      	cmp	r3, r0
 8014c90:	f4ff af2f 	bcc.w	8014af2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014c94:	e754      	b.n	8014b40 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014c96:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8014c9a:	4283      	cmp	r3, r0
 8014c9c:	e7af      	b.n	8014bfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014c9e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8014ca2:	4617      	mov	r7, r2
 8014ca4:	f102 0808 	add.w	r8, r2, #8
 8014ca8:	4666      	mov	r6, ip
 8014caa:	6838      	ldr	r0, [r7, #0]
 8014cac:	3708      	adds	r7, #8
 8014cae:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014cb2:	46e6      	mov	lr, ip
 8014cb4:	4547      	cmp	r7, r8
 8014cb6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014cba:	46f4      	mov	ip, lr
 8014cbc:	d1f5      	bne.n	8014caa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014cbe:	6838      	ldr	r0, [r7, #0]
 8014cc0:	f8ce 0000 	str.w	r0, [lr]
 8014cc4:	88b9      	ldrh	r1, [r7, #4]
 8014cc6:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014cca:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8014cce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014cd2:	d009      	beq.n	8014ce8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8014cd4:	7b51      	ldrb	r1, [r2, #13]
 8014cd6:	7992      	ldrb	r2, [r2, #6]
 8014cd8:	0149      	lsls	r1, r1, #5
 8014cda:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014cde:	4311      	orrs	r1, r2
 8014ce0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014ce4:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014ce8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014cec:	b2ad      	uxth	r5, r5
 8014cee:	d00d      	beq.n	8014d0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8014cf0:	442b      	add	r3, r5
 8014cf2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014cf6:	b29b      	uxth	r3, r3
 8014cf8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014cfc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014d00:	10db      	asrs	r3, r3, #3
 8014d02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014d06:	4313      	orrs	r3, r2
 8014d08:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014d0c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8014d10:	00cb      	lsls	r3, r1, #3
 8014d12:	064f      	lsls	r7, r1, #25
 8014d14:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014d18:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8014d1c:	ea43 0302 	orr.w	r3, r3, r2
 8014d20:	bf44      	itt	mi
 8014d22:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014d26:	b21b      	sxthmi	r3, r3
 8014d28:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8014d2c:	1b5b      	subs	r3, r3, r5
 8014d2e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8014d32:	4632      	mov	r2, r6
 8014d34:	e6f9      	b.n	8014b2a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014d36:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8014d3a:	4617      	mov	r7, r2
 8014d3c:	f102 0908 	add.w	r9, r2, #8
 8014d40:	4666      	mov	r6, ip
 8014d42:	6838      	ldr	r0, [r7, #0]
 8014d44:	3708      	adds	r7, #8
 8014d46:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014d4a:	46e0      	mov	r8, ip
 8014d4c:	454f      	cmp	r7, r9
 8014d4e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014d52:	46c4      	mov	ip, r8
 8014d54:	d1f5      	bne.n	8014d42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8014d56:	6838      	ldr	r0, [r7, #0]
 8014d58:	f8c8 0000 	str.w	r0, [r8]
 8014d5c:	88b9      	ldrh	r1, [r7, #4]
 8014d5e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014d62:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8014d66:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8014d6a:	d009      	beq.n	8014d80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8014d6c:	7b51      	ldrb	r1, [r2, #13]
 8014d6e:	7992      	ldrb	r2, [r2, #6]
 8014d70:	0149      	lsls	r1, r1, #5
 8014d72:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8014d76:	4311      	orrs	r1, r2
 8014d78:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014d7c:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8014d80:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014d84:	d00e      	beq.n	8014da4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8014d86:	eba3 030e 	sub.w	r3, r3, lr
 8014d8a:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8014d8e:	b29b      	uxth	r3, r3
 8014d90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8014d94:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8014d98:	10db      	asrs	r3, r3, #3
 8014d9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014d9e:	4313      	orrs	r3, r2
 8014da0:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8014da4:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8014da8:	00cb      	lsls	r3, r1, #3
 8014daa:	0648      	lsls	r0, r1, #25
 8014dac:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8014db0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8014db4:	ea43 0302 	orr.w	r3, r3, r2
 8014db8:	bf44      	itt	mi
 8014dba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014dbe:	b21b      	sxthmi	r3, r3
 8014dc0:	1b5d      	subs	r5, r3, r5
 8014dc2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8014dc6:	e7b4      	b.n	8014d32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08014dc8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dcc:	461e      	mov	r6, r3
 8014dce:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014dd0:	4604      	mov	r4, r0
 8014dd2:	4617      	mov	r7, r2
 8014dd4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014dd8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014ddc:	f7ed ffda 	bl	8002d94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014de0:	4605      	mov	r5, r0
 8014de2:	b918      	cbnz	r0, 8014dec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8014de4:	6030      	str	r0, [r6, #0]
 8014de6:	4628      	mov	r0, r5
 8014de8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	4601      	mov	r1, r0
 8014df0:	4638      	mov	r0, r7
 8014df2:	68db      	ldr	r3, [r3, #12]
 8014df4:	4798      	blx	r3
 8014df6:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014dfa:	4602      	mov	r2, r0
 8014dfc:	6030      	str	r0, [r6, #0]
 8014dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014e02:	d213      	bcs.n	8014e2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014e04:	4643      	mov	r3, r8
 8014e06:	4639      	mov	r1, r7
 8014e08:	4620      	mov	r0, r4
 8014e0a:	f7ff fe39 	bl	8014a80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014e0e:	6030      	str	r0, [r6, #0]
 8014e10:	6833      	ldr	r3, [r6, #0]
 8014e12:	b143      	cbz	r3, 8014e26 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8014e14:	7b5a      	ldrb	r2, [r3, #13]
 8014e16:	7a9b      	ldrb	r3, [r3, #10]
 8014e18:	0052      	lsls	r2, r2, #1
 8014e1a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014e1e:	4313      	orrs	r3, r2
 8014e20:	bf0c      	ite	eq
 8014e22:	2301      	moveq	r3, #1
 8014e24:	2300      	movne	r3, #0
 8014e26:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8014e2a:	e7dc      	b.n	8014de6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8014e2c:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	2b7f      	cmp	r3, #127	; 0x7f
 8014e34:	d804      	bhi.n	8014e40 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8014e36:	4639      	mov	r1, r7
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f7ff fd15 	bl	8014868 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014e3e:	e7e6      	b.n	8014e0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014e40:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d0e3      	beq.n	8014e10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014e48:	f640 1302 	movw	r3, #2306	; 0x902
 8014e4c:	429d      	cmp	r5, r3
 8014e4e:	d1df      	bne.n	8014e10 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014e50:	4601      	mov	r1, r0
 8014e52:	4620      	mov	r0, r4
 8014e54:	f7ff fcd9 	bl	801480a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014e58:	e7d9      	b.n	8014e0e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08014e5a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 8014e5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e5e:	461e      	mov	r6, r3
 8014e60:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014e62:	4604      	mov	r4, r0
 8014e64:	4617      	mov	r7, r2
 8014e66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014e6a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8014e6e:	f7ed ff91 	bl	8002d94 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014e72:	4605      	mov	r5, r0
 8014e74:	b918      	cbnz	r0, 8014e7e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 8014e76:	6030      	str	r0, [r6, #0]
 8014e78:	4628      	mov	r0, r5
 8014e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	4601      	mov	r1, r0
 8014e82:	4638      	mov	r0, r7
 8014e84:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8014e88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e8c:	47c8      	blx	r9
 8014e8e:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8014e92:	4602      	mov	r2, r0
 8014e94:	6030      	str	r0, [r6, #0]
 8014e96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8014e9a:	d213      	bcs.n	8014ec4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8014e9c:	4643      	mov	r3, r8
 8014e9e:	4639      	mov	r1, r7
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	f7ff fded 	bl	8014a80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014ea6:	6030      	str	r0, [r6, #0]
 8014ea8:	6833      	ldr	r3, [r6, #0]
 8014eaa:	b143      	cbz	r3, 8014ebe <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8014eac:	7b5a      	ldrb	r2, [r3, #13]
 8014eae:	7a9b      	ldrb	r3, [r3, #10]
 8014eb0:	0052      	lsls	r2, r2, #1
 8014eb2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8014eb6:	4313      	orrs	r3, r2
 8014eb8:	bf0c      	ite	eq
 8014eba:	2301      	moveq	r3, #1
 8014ebc:	2300      	movne	r3, #0
 8014ebe:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8014ec2:	e7d9      	b.n	8014e78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8014ec4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8014ec8:	b29b      	uxth	r3, r3
 8014eca:	2b7f      	cmp	r3, #127	; 0x7f
 8014ecc:	d804      	bhi.n	8014ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 8014ece:	4639      	mov	r1, r7
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f7ff fcc9 	bl	8014868 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014ed6:	e7e6      	b.n	8014ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8014ed8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d0e3      	beq.n	8014ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8014ee0:	f640 1302 	movw	r3, #2306	; 0x902
 8014ee4:	429d      	cmp	r5, r3
 8014ee6:	d1df      	bne.n	8014ea8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8014ee8:	4601      	mov	r1, r0
 8014eea:	4620      	mov	r0, r4
 8014eec:	f7ff fc8d 	bl	801480a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014ef0:	e7d9      	b.n	8014ea6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

08014ef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014ef2:	b510      	push	{r4, lr}
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8014efa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014efc:	b1e1      	cbz	r1, 8014f38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014efe:	2b0a      	cmp	r3, #10
 8014f00:	d02d      	beq.n	8014f5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014f02:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8014f04:	3901      	subs	r1, #1
 8014f06:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014f0a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8014f0c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8014f10:	1c51      	adds	r1, r2, #1
 8014f12:	b289      	uxth	r1, r1
 8014f14:	2901      	cmp	r1, #1
 8014f16:	bf8a      	itet	hi
 8014f18:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014f1c:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8014f1e:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8014f20:	1c5a      	adds	r2, r3, #1
 8014f22:	8722      	strh	r2, [r4, #56]	; 0x38
 8014f24:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014f26:	4413      	add	r3, r2
 8014f28:	b29b      	uxth	r3, r3
 8014f2a:	2b09      	cmp	r3, #9
 8014f2c:	bf88      	it	hi
 8014f2e:	3b0a      	subhi	r3, #10
 8014f30:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014f34:	8458      	strh	r0, [r3, #34]	; 0x22
 8014f36:	e7de      	b.n	8014ef6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014f38:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014f3a:	2b0a      	cmp	r3, #10
 8014f3c:	d00f      	beq.n	8014f5e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014f3e:	4620      	mov	r0, r4
 8014f40:	f7ff fc11 	bl	8014766 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014f44:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8014f46:	1c5a      	adds	r2, r3, #1
 8014f48:	8722      	strh	r2, [r4, #56]	; 0x38
 8014f4a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014f4c:	4413      	add	r3, r2
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	2b09      	cmp	r3, #9
 8014f52:	bf88      	it	hi
 8014f54:	3b0a      	subhi	r3, #10
 8014f56:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014f5a:	8458      	strh	r0, [r3, #34]	; 0x22
 8014f5c:	e7ec      	b.n	8014f38 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014f5e:	bd10      	pop	{r4, pc}

08014f60 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014f60:	b538      	push	{r3, r4, r5, lr}
 8014f62:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8014f64:	4604      	mov	r4, r0
 8014f66:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014f6a:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8014f6c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8014f6e:	3a01      	subs	r2, #1
 8014f70:	8702      	strh	r2, [r0, #56]	; 0x38
 8014f72:	1c5a      	adds	r2, r3, #1
 8014f74:	b292      	uxth	r2, r2
 8014f76:	2a09      	cmp	r2, #9
 8014f78:	bf8a      	itet	hi
 8014f7a:	3b09      	subhi	r3, #9
 8014f7c:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8014f7e:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8014f80:	f7ff ffb7 	bl	8014ef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014f84:	8c23      	ldrh	r3, [r4, #32]
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	bf9c      	itt	ls
 8014f8a:	3301      	addls	r3, #1
 8014f8c:	8423      	strhls	r3, [r4, #32]
 8014f8e:	8be3      	ldrh	r3, [r4, #30]
 8014f90:	b90b      	cbnz	r3, 8014f96 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8014f92:	2302      	movs	r3, #2
 8014f94:	83e3      	strh	r3, [r4, #30]
 8014f96:	8be3      	ldrh	r3, [r4, #30]
 8014f98:	4628      	mov	r0, r5
 8014f9a:	3b01      	subs	r3, #1
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	83e3      	strh	r3, [r4, #30]
 8014fa0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014fa4:	8365      	strh	r5, [r4, #26]
 8014fa6:	bd38      	pop	{r3, r4, r5, pc}

08014fa8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014fa8:	428a      	cmp	r2, r1
 8014faa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fae:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8014fb0:	d932      	bls.n	8015018 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8014fb2:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8014fb4:	1a54      	subs	r4, r2, r1
 8014fb6:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 8014fba:	19ee      	adds	r6, r5, r7
 8014fbc:	fa1f fe84 	uxth.w	lr, r4
 8014fc0:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8014fc4:	3e01      	subs	r6, #1
 8014fc6:	b2b4      	uxth	r4, r6
 8014fc8:	eba4 090e 	sub.w	r9, r4, lr
 8014fcc:	fa1f f989 	uxth.w	r9, r9
 8014fd0:	2c09      	cmp	r4, #9
 8014fd2:	4626      	mov	r6, r4
 8014fd4:	bf88      	it	hi
 8014fd6:	f1a4 060a 	subhi.w	r6, r4, #10
 8014fda:	f1bc 0f00 	cmp.w	ip, #0
 8014fde:	f104 34ff 	add.w	r4, r4, #4294967295
 8014fe2:	bf08      	it	eq
 8014fe4:	f04f 0c02 	moveq.w	ip, #2
 8014fe8:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014fec:	b2a4      	uxth	r4, r4
 8014fee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014ff2:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8014ff6:	454c      	cmp	r4, r9
 8014ff8:	fa1f fc8c 	uxth.w	ip, ip
 8014ffc:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8015000:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8015004:	d1e4      	bne.n	8014fd0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015006:	eba5 050e 	sub.w	r5, r5, lr
 801500a:	eb0e 0408 	add.w	r4, lr, r8
 801500e:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8015012:	8705      	strh	r5, [r0, #56]	; 0x38
 8015014:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8015018:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801501a:	250a      	movs	r5, #10
 801501c:	1a64      	subs	r4, r4, r1
 801501e:	4439      	add	r1, r7
 8015020:	b289      	uxth	r1, r1
 8015022:	8704      	strh	r4, [r0, #56]	; 0x38
 8015024:	2909      	cmp	r1, #9
 8015026:	bf88      	it	hi
 8015028:	390a      	subhi	r1, #10
 801502a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801502c:	b18a      	cbz	r2, 8015052 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801502e:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8015030:	3a01      	subs	r2, #1
 8015032:	3101      	adds	r1, #1
 8015034:	b292      	uxth	r2, r2
 8015036:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801503a:	8701      	strh	r1, [r0, #56]	; 0x38
 801503c:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801503e:	b901      	cbnz	r1, 8015042 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8015040:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015042:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015044:	3901      	subs	r1, #1
 8015046:	b289      	uxth	r1, r1
 8015048:	86c1      	strh	r1, [r0, #54]	; 0x36
 801504a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801504e:	844c      	strh	r4, [r1, #34]	; 0x22
 8015050:	e7ec      	b.n	801502c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8015052:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015056:	f7ff bf4c 	b.w	8014ef2 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801505a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801505a:	b570      	push	{r4, r5, r6, lr}
 801505c:	2500      	movs	r5, #0
 801505e:	4295      	cmp	r5, r2
 8015060:	d011      	beq.n	8015086 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8015062:	8bc4      	ldrh	r4, [r0, #30]
 8015064:	f831 6b02 	ldrh.w	r6, [r1], #2
 8015068:	4414      	add	r4, r2
 801506a:	3c01      	subs	r4, #1
 801506c:	1b64      	subs	r4, r4, r5
 801506e:	b2a4      	uxth	r4, r4
 8015070:	2c01      	cmp	r4, #1
 8015072:	bf88      	it	hi
 8015074:	3c02      	subhi	r4, #2
 8015076:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801507a:	8b64      	ldrh	r4, [r4, #26]
 801507c:	42b4      	cmp	r4, r6
 801507e:	d117      	bne.n	80150b0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8015080:	3501      	adds	r5, #1
 8015082:	b2ad      	uxth	r5, r5
 8015084:	e7eb      	b.n	801505e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015086:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801508a:	2400      	movs	r4, #0
 801508c:	4413      	add	r3, r2
 801508e:	b2a2      	uxth	r2, r4
 8015090:	429a      	cmp	r2, r3
 8015092:	da0f      	bge.n	80150b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015094:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 8015096:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801509a:	3401      	adds	r4, #1
 801509c:	4432      	add	r2, r6
 801509e:	b292      	uxth	r2, r2
 80150a0:	2a09      	cmp	r2, #9
 80150a2:	bf88      	it	hi
 80150a4:	3a0a      	subhi	r2, #10
 80150a6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80150aa:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80150ac:	42aa      	cmp	r2, r5
 80150ae:	d0ee      	beq.n	801508e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80150b0:	2000      	movs	r0, #0
 80150b2:	bd70      	pop	{r4, r5, r6, pc}
 80150b4:	2001      	movs	r0, #1
 80150b6:	e7fc      	b.n	80150b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080150b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80150b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150bc:	4605      	mov	r5, r0
 80150be:	4616      	mov	r6, r2
 80150c0:	1c8c      	adds	r4, r1, #2
 80150c2:	8809      	ldrh	r1, [r1, #0]
 80150c4:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80150c8:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80150cc:	42b3      	cmp	r3, r6
 80150ce:	d124      	bne.n	801511a <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 80150d0:	f3c1 2903 	ubfx	r9, r1, #8, #4
 80150d4:	f3c1 1803 	ubfx	r8, r1, #4, #4
 80150d8:	f001 070f 	and.w	r7, r1, #15
 80150dc:	4652      	mov	r2, sl
 80150de:	f8cd 8000 	str.w	r8, [sp]
 80150e2:	464b      	mov	r3, r9
 80150e4:	4621      	mov	r1, r4
 80150e6:	4628      	mov	r0, r5
 80150e8:	f7ff ffb7 	bl	801505a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 80150ec:	4683      	mov	fp, r0
 80150ee:	b168      	cbz	r0, 801510c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 80150f0:	eb0a 0109 	add.w	r1, sl, r9
 80150f4:	463a      	mov	r2, r7
 80150f6:	4628      	mov	r0, r5
 80150f8:	4441      	add	r1, r8
 80150fa:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 80150fe:	4649      	mov	r1, r9
 8015100:	f7ff ff52 	bl	8014fa8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015104:	4658      	mov	r0, fp
 8015106:	b003      	add	sp, #12
 8015108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801510c:	eb07 010a 	add.w	r1, r7, sl
 8015110:	4449      	add	r1, r9
 8015112:	4441      	add	r1, r8
 8015114:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015118:	e7d2      	b.n	80150c0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801511a:	f04f 0b00 	mov.w	fp, #0
 801511e:	e7f1      	b.n	8015104 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015120 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015120:	b570      	push	{r4, r5, r6, lr}
 8015122:	8810      	ldrh	r0, [r2, #0]
 8015124:	4298      	cmp	r0, r3
 8015126:	d817      	bhi.n	8015158 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015128:	1e48      	subs	r0, r1, #1
 801512a:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801512e:	4298      	cmp	r0, r3
 8015130:	d312      	bcc.n	8015158 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015132:	2400      	movs	r4, #0
 8015134:	428c      	cmp	r4, r1
 8015136:	d20f      	bcs.n	8015158 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015138:	1860      	adds	r0, r4, r1
 801513a:	1040      	asrs	r0, r0, #1
 801513c:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8015140:	0085      	lsls	r5, r0, #2
 8015142:	42b3      	cmp	r3, r6
 8015144:	d902      	bls.n	801514c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8015146:	3001      	adds	r0, #1
 8015148:	b284      	uxth	r4, r0
 801514a:	e7f3      	b.n	8015134 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801514c:	d201      	bcs.n	8015152 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801514e:	b281      	uxth	r1, r0
 8015150:	e7f0      	b.n	8015134 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015152:	442a      	add	r2, r5
 8015154:	8850      	ldrh	r0, [r2, #2]
 8015156:	bd70      	pop	{r4, r5, r6, pc}
 8015158:	2000      	movs	r0, #0
 801515a:	e7fc      	b.n	8015156 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801515c <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801515c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015160:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8015162:	4604      	mov	r4, r0
 8015164:	260b      	movs	r6, #11
 8015166:	886f      	ldrh	r7, [r5, #2]
 8015168:	087f      	lsrs	r7, r7, #1
 801516a:	3e01      	subs	r6, #1
 801516c:	d013      	beq.n	8015196 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801516e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8015170:	462a      	mov	r2, r5
 8015172:	4639      	mov	r1, r7
 8015174:	4620      	mov	r0, r4
 8015176:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801517a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801517e:	4643      	mov	r3, r8
 8015180:	f7ff ffce 	bl	8015120 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015184:	b138      	cbz	r0, 8015196 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015186:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801518a:	4642      	mov	r2, r8
 801518c:	4620      	mov	r0, r4
 801518e:	f7ff ff93 	bl	80150b8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015192:	2800      	cmp	r0, #0
 8015194:	d1e9      	bne.n	801516a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801519c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801519c:	b570      	push	{r4, r5, r6, lr}
 801519e:	694a      	ldr	r2, [r1, #20]
 80151a0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80151a2:	684b      	ldr	r3, [r1, #4]
 80151a4:	1b54      	subs	r4, r2, r5
 80151a6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80151a8:	f000 8106 	beq.w	80153b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 80151ac:	1b9b      	subs	r3, r3, r6
 80151ae:	d003      	beq.n	80151b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80151b0:	4363      	muls	r3, r4
 80151b2:	2210      	movs	r2, #16
 80151b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80151b8:	680c      	ldr	r4, [r1, #0]
 80151ba:	698a      	ldr	r2, [r1, #24]
 80151bc:	1b65      	subs	r5, r4, r5
 80151be:	f000 80fd 	beq.w	80153bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 80151c2:	1b92      	subs	r2, r2, r6
 80151c4:	d003      	beq.n	80151ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80151c6:	436a      	muls	r2, r5
 80151c8:	2410      	movs	r4, #16
 80151ca:	fb92 f2f4 	sdiv	r2, r2, r4
 80151ce:	1a9b      	subs	r3, r3, r2
 80151d0:	ed9f 4a89 	vldr	s8, [pc, #548]	; 80153f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 80151d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80151d8:	460a      	mov	r2, r1
 80151da:	ee07 3a90 	vmov	s15, r3
 80151de:	f100 040c 	add.w	r4, r0, #12
 80151e2:	4603      	mov	r3, r0
 80151e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80151ec:	ee87 3a27 	vdiv.f32	s6, s14, s15
 80151f0:	eeb1 6a43 	vneg.f32	s12, s6
 80151f4:	edd2 7a02 	vldr	s15, [r2, #8]
 80151f8:	3214      	adds	r2, #20
 80151fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80151fe:	ece3 6a01 	vstmia	r3!, {s13}
 8015202:	429c      	cmp	r4, r3
 8015204:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015208:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801520c:	edc3 7a02 	vstr	s15, [r3, #8]
 8015210:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015214:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015218:	edc3 7a05 	vstr	s15, [r3, #20]
 801521c:	d1ea      	bne.n	80151f4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801521e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015220:	698b      	ldr	r3, [r1, #24]
 8015222:	edd0 4a02 	vldr	s9, [r0, #8]
 8015226:	1a9b      	subs	r3, r3, r2
 8015228:	edd0 3a00 	vldr	s7, [r0]
 801522c:	edd0 6a01 	vldr	s13, [r0, #4]
 8015230:	ee07 3a90 	vmov	s15, r3
 8015234:	684b      	ldr	r3, [r1, #4]
 8015236:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801523a:	ed90 5a05 	vldr	s10, [r0, #20]
 801523e:	1a9b      	subs	r3, r3, r2
 8015240:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015244:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8015248:	ed90 2a03 	vldr	s4, [r0, #12]
 801524c:	ee07 3a10 	vmov	s14, r3
 8015250:	edd0 5a04 	vldr	s11, [r0, #16]
 8015254:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015258:	ed90 1a07 	vldr	s2, [r0, #28]
 801525c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015260:	edd0 2a06 	vldr	s5, [r0, #24]
 8015264:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8015268:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801526c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015270:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015274:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015278:	ee67 7a83 	vmul.f32	s15, s15, s6
 801527c:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8015280:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015282:	694a      	ldr	r2, [r1, #20]
 8015284:	1b13      	subs	r3, r2, r4
 8015286:	ee07 3a10 	vmov	s14, r3
 801528a:	680b      	ldr	r3, [r1, #0]
 801528c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015290:	1b1b      	subs	r3, r3, r4
 8015292:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015296:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801529a:	ee07 3a10 	vmov	s14, r3
 801529e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152a2:	ee27 7a04 	vmul.f32	s14, s14, s8
 80152a6:	eee6 4a87 	vfma.f32	s9, s13, s14
 80152aa:	ee64 4a86 	vmul.f32	s9, s9, s12
 80152ae:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 80152b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80152b4:	698b      	ldr	r3, [r1, #24]
 80152b6:	1a9b      	subs	r3, r3, r2
 80152b8:	ee06 3a90 	vmov	s13, r3
 80152bc:	684b      	ldr	r3, [r1, #4]
 80152be:	1a9b      	subs	r3, r3, r2
 80152c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80152c4:	ee07 3a10 	vmov	s14, r3
 80152c8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80152cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152d0:	ee65 6a66 	vnmul.f32	s13, s10, s13
 80152d4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80152d8:	eee5 6a87 	vfma.f32	s13, s11, s14
 80152dc:	ee66 6a83 	vmul.f32	s13, s13, s6
 80152e0:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 80152e4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80152e6:	694a      	ldr	r2, [r1, #20]
 80152e8:	1b13      	subs	r3, r2, r4
 80152ea:	ee07 3a10 	vmov	s14, r3
 80152ee:	680b      	ldr	r3, [r1, #0]
 80152f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152f4:	1b1b      	subs	r3, r3, r4
 80152f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80152fa:	ee25 5a47 	vnmul.f32	s10, s10, s14
 80152fe:	ee07 3a10 	vmov	s14, r3
 8015302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015306:	ee27 7a04 	vmul.f32	s14, s14, s8
 801530a:	eea5 5a87 	vfma.f32	s10, s11, s14
 801530e:	edd0 5a08 	vldr	s11, [r0, #32]
 8015312:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015316:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801531a:	ee25 5a06 	vmul.f32	s10, s10, s12
 801531e:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8015322:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015324:	698b      	ldr	r3, [r1, #24]
 8015326:	1a9b      	subs	r3, r3, r2
 8015328:	ee07 3a10 	vmov	s14, r3
 801532c:	684b      	ldr	r3, [r1, #4]
 801532e:	1a9b      	subs	r3, r3, r2
 8015330:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015334:	ee01 3a90 	vmov	s3, r3
 8015338:	ee27 7a04 	vmul.f32	s14, s14, s8
 801533c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015340:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8015344:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015348:	eea1 7a21 	vfma.f32	s14, s2, s3
 801534c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015350:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015354:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015356:	694a      	ldr	r2, [r1, #20]
 8015358:	1b13      	subs	r3, r2, r4
 801535a:	ee03 3a10 	vmov	s6, r3
 801535e:	680b      	ldr	r3, [r1, #0]
 8015360:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015364:	1b1b      	subs	r3, r3, r4
 8015366:	ee23 3a04 	vmul.f32	s6, s6, s8
 801536a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801536e:	ee03 3a10 	vmov	s6, r3
 8015372:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015376:	ee23 4a04 	vmul.f32	s8, s6, s8
 801537a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801537e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015382:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015386:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801538a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801538e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015396:	dd13      	ble.n	80153c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801539c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80153a0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80153a2:	eee3 7a87 	vfma.f32	s15, s7, s14
 80153a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80153aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ae:	dd15      	ble.n	80153dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 80153b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80153b4:	6403      	str	r3, [r0, #64]	; 0x40
 80153b6:	bd70      	pop	{r4, r5, r6, pc}
 80153b8:	4623      	mov	r3, r4
 80153ba:	e6fd      	b.n	80151b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80153bc:	462a      	mov	r2, r5
 80153be:	e706      	b.n	80151ce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80153c0:	d502      	bpl.n	80153c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 80153c2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80153c6:	e7e9      	b.n	801539c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 80153c8:	ee22 2a64 	vnmul.f32	s4, s4, s9
 80153cc:	eea3 2a85 	vfma.f32	s4, s7, s10
 80153d0:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 80153d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d8:	dade      	bge.n	8015398 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 80153da:	e7f2      	b.n	80153c2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 80153dc:	d502      	bpl.n	80153e4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 80153de:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80153e2:	e7e7      	b.n	80153b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 80153e4:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 80153e8:	eee3 4a86 	vfma.f32	s9, s7, s12
 80153ec:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 80153f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153f4:	dadc      	bge.n	80153b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 80153f6:	e7f2      	b.n	80153de <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 80153f8:	3d800000 	.word	0x3d800000

080153fc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 80153fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015400:	2714      	movs	r7, #20
 8015402:	435f      	muls	r7, r3
 8015404:	eb02 0c07 	add.w	ip, r2, r7
 8015408:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801540c:	f115 0e0f 	adds.w	lr, r5, #15
 8015410:	f100 80a2 	bmi.w	8015558 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015414:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015418:	9c08      	ldr	r4, [sp, #32]
 801541a:	2614      	movs	r6, #20
 801541c:	f8c0 e014 	str.w	lr, [r0, #20]
 8015420:	4366      	muls	r6, r4
 8015422:	eb02 0806 	add.w	r8, r2, r6
 8015426:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801542a:	f115 040f 	adds.w	r4, r5, #15
 801542e:	f100 809f 	bmi.w	8015570 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8015432:	1124      	asrs	r4, r4, #4
 8015434:	eba4 040e 	sub.w	r4, r4, lr
 8015438:	6184      	str	r4, [r0, #24]
 801543a:	2c00      	cmp	r4, #0
 801543c:	f000 808a 	beq.w	8015554 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8015440:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8015444:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015448:	5995      	ldr	r5, [r2, r6]
 801544a:	eba4 0809 	sub.w	r8, r4, r9
 801544e:	59d4      	ldr	r4, [r2, r7]
 8015450:	eba5 0a04 	sub.w	sl, r5, r4
 8015454:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8015458:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801545c:	fb0e fe05 	mul.w	lr, lr, r5
 8015460:	fb0a ee19 	mls	lr, sl, r9, lr
 8015464:	fb08 e404 	mla	r4, r8, r4, lr
 8015468:	3c01      	subs	r4, #1
 801546a:	19a4      	adds	r4, r4, r6
 801546c:	f100 808c 	bmi.w	8015588 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8015470:	fb94 fef6 	sdiv	lr, r4, r6
 8015474:	fb06 441e 	mls	r4, r6, lr, r4
 8015478:	f8c0 e000 	str.w	lr, [r0]
 801547c:	6104      	str	r4, [r0, #16]
 801547e:	2d00      	cmp	r5, #0
 8015480:	f2c0 8095 	blt.w	80155ae <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8015484:	fb95 f4f6 	sdiv	r4, r5, r6
 8015488:	fb06 5514 	mls	r5, r6, r4, r5
 801548c:	6044      	str	r4, [r0, #4]
 801548e:	6085      	str	r5, [r0, #8]
 8015490:	60c6      	str	r6, [r0, #12]
 8015492:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015496:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801549a:	6945      	ldr	r5, [r0, #20]
 801549c:	59d2      	ldr	r2, [r2, r7]
 801549e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80154a2:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80155d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80154a6:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80154aa:	ee07 4a10 	vmov	s14, r4
 80154ae:	6804      	ldr	r4, [r0, #0]
 80154b0:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 80154b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80154b8:	ee07 2a90 	vmov	s15, r2
 80154bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80154c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80154c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80154c8:	edd3 6a00 	vldr	s13, [r3]
 80154cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 80154d0:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80154d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80154d8:	edc0 6a07 	vstr	s13, [r0, #28]
 80154dc:	edd0 6a01 	vldr	s13, [r0, #4]
 80154e0:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 80154e4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80154e8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80154ec:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80154f0:	ed80 6a08 	vstr	s12, [r0, #32]
 80154f4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80154f6:	6242      	str	r2, [r0, #36]	; 0x24
 80154f8:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80154fc:	ed93 6a03 	vldr	s12, [r3, #12]
 8015500:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015504:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015508:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801550c:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8015510:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015514:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8015518:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801551c:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8015520:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015522:	6302      	str	r2, [r0, #48]	; 0x30
 8015524:	ed93 6a06 	vldr	s12, [r3, #24]
 8015528:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801552c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015530:	eeb0 7a46 	vmov.f32	s14, s12
 8015534:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8015538:	eea6 7a27 	vfma.f32	s14, s12, s15
 801553c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015540:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8015544:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8015548:	eee6 7a87 	vfma.f32	s15, s13, s14
 801554c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8015550:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8015552:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015558:	2410      	movs	r4, #16
 801555a:	f1c5 0501 	rsb	r5, r5, #1
 801555e:	fb9e fef4 	sdiv	lr, lr, r4
 8015562:	f015 050f 	ands.w	r5, r5, #15
 8015566:	bf18      	it	ne
 8015568:	2501      	movne	r5, #1
 801556a:	ebae 0e05 	sub.w	lr, lr, r5
 801556e:	e753      	b.n	8015418 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8015570:	f04f 0910 	mov.w	r9, #16
 8015574:	f1c5 0501 	rsb	r5, r5, #1
 8015578:	fb94 f4f9 	sdiv	r4, r4, r9
 801557c:	f015 050f 	ands.w	r5, r5, #15
 8015580:	bf18      	it	ne
 8015582:	2501      	movne	r5, #1
 8015584:	1b64      	subs	r4, r4, r5
 8015586:	e755      	b.n	8015434 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015588:	4264      	negs	r4, r4
 801558a:	fb94 fef6 	sdiv	lr, r4, r6
 801558e:	f1ce 0800 	rsb	r8, lr, #0
 8015592:	fb06 441e 	mls	r4, r6, lr, r4
 8015596:	f8c0 8000 	str.w	r8, [r0]
 801559a:	6104      	str	r4, [r0, #16]
 801559c:	2c00      	cmp	r4, #0
 801559e:	f43f af6e 	beq.w	801547e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80155a2:	ea6f 0e0e 	mvn.w	lr, lr
 80155a6:	1b34      	subs	r4, r6, r4
 80155a8:	f8c0 e000 	str.w	lr, [r0]
 80155ac:	e766      	b.n	801547c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 80155ae:	426d      	negs	r5, r5
 80155b0:	fb95 f4f6 	sdiv	r4, r5, r6
 80155b4:	f1c4 0e00 	rsb	lr, r4, #0
 80155b8:	fb06 5514 	mls	r5, r6, r4, r5
 80155bc:	f8c0 e004 	str.w	lr, [r0, #4]
 80155c0:	6085      	str	r5, [r0, #8]
 80155c2:	2d00      	cmp	r5, #0
 80155c4:	f43f af64 	beq.w	8015490 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 80155c8:	43e4      	mvns	r4, r4
 80155ca:	1b75      	subs	r5, r6, r5
 80155cc:	6044      	str	r4, [r0, #4]
 80155ce:	e75e      	b.n	801548e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 80155d0:	3d800000 	.word	0x3d800000

080155d4 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80155d4:	4b01      	ldr	r3, [pc, #4]	; (80155dc <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80155d6:	6018      	str	r0, [r3, #0]
 80155d8:	4770      	bx	lr
 80155da:	bf00      	nop
 80155dc:	2400751c 	.word	0x2400751c

080155e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 80155e0:	4b06      	ldr	r3, [pc, #24]	; (80155fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 80155e2:	881a      	ldrh	r2, [r3, #0]
 80155e4:	4282      	cmp	r2, r0
 80155e6:	d807      	bhi.n	80155f8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 80155e8:	4b05      	ldr	r3, [pc, #20]	; (8015600 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 80155ea:	881b      	ldrh	r3, [r3, #0]
 80155ec:	4413      	add	r3, r2
 80155ee:	4298      	cmp	r0, r3
 80155f0:	bfac      	ite	ge
 80155f2:	2000      	movge	r0, #0
 80155f4:	2001      	movlt	r0, #1
 80155f6:	4770      	bx	lr
 80155f8:	2000      	movs	r0, #0
 80155fa:	4770      	bx	lr
 80155fc:	2400753c 	.word	0x2400753c
 8015600:	24007540 	.word	0x24007540

08015604 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015604:	b508      	push	{r3, lr}
 8015606:	4601      	mov	r1, r0
 8015608:	f7ff ffea 	bl	80155e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801560c:	b118      	cbz	r0, 8015616 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801560e:	4b02      	ldr	r3, [pc, #8]	; (8015618 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015616:	bd08      	pop	{r3, pc}
 8015618:	24007520 	.word	0x24007520

0801561c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801561c:	b538      	push	{r3, r4, r5, lr}
 801561e:	4604      	mov	r4, r0
 8015620:	f7ff ffde 	bl	80155e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015624:	b188      	cbz	r0, 801564a <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 8015626:	4b09      	ldr	r3, [pc, #36]	; (801564c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 8015628:	881a      	ldrh	r2, [r3, #0]
 801562a:	4b09      	ldr	r3, [pc, #36]	; (8015650 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801562c:	1aa4      	subs	r4, r4, r2
 801562e:	220e      	movs	r2, #14
 8015630:	681d      	ldr	r5, [r3, #0]
 8015632:	4362      	muls	r2, r4
 8015634:	18ac      	adds	r4, r5, r2
 8015636:	7b23      	ldrb	r3, [r4, #12]
 8015638:	f013 0320 	ands.w	r3, r3, #32
 801563c:	bf17      	itett	ne
 801563e:	680b      	ldrne	r3, [r1, #0]
 8015640:	4618      	moveq	r0, r3
 8015642:	50ab      	strne	r3, [r5, r2]
 8015644:	684b      	ldrne	r3, [r1, #4]
 8015646:	bf18      	it	ne
 8015648:	6063      	strne	r3, [r4, #4]
 801564a:	bd38      	pop	{r3, r4, r5, pc}
 801564c:	2400753c 	.word	0x2400753c
 8015650:	24007524 	.word	0x24007524

08015654 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 8015654:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8015658:	4606      	mov	r6, r0
 801565a:	460c      	mov	r4, r1
 801565c:	f7ff ffc0 	bl	80155e0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015660:	b918      	cbnz	r0, 801566a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 8015662:	2000      	movs	r0, #0
 8015664:	b002      	add	sp, #8
 8015666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801566a:	4608      	mov	r0, r1
 801566c:	f7fa fb81 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015670:	2800      	cmp	r0, #0
 8015672:	d1f6      	bne.n	8015662 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015674:	4b3f      	ldr	r3, [pc, #252]	; (8015774 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8015676:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8015778 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801567a:	881d      	ldrh	r5, [r3, #0]
 801567c:	f8d9 a000 	ldr.w	sl, [r9]
 8015680:	46c8      	mov	r8, r9
 8015682:	1b73      	subs	r3, r6, r5
 8015684:	250e      	movs	r5, #14
 8015686:	435d      	muls	r5, r3
 8015688:	eb0a 0705 	add.w	r7, sl, r5
 801568c:	7b3b      	ldrb	r3, [r7, #12]
 801568e:	f013 0f20 	tst.w	r3, #32
 8015692:	d0e6      	beq.n	8015662 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015694:	4621      	mov	r1, r4
 8015696:	4638      	mov	r0, r7
 8015698:	f7fd fbde 	bl	8012e58 <_ZNK8touchgfx4Rect8includesERKS0_>
 801569c:	2800      	cmp	r0, #0
 801569e:	d1e1      	bne.n	8015664 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80156a0:	4639      	mov	r1, r7
 80156a2:	4620      	mov	r0, r4
 80156a4:	f7fd fbd8 	bl	8012e58 <_ZNK8touchgfx4Rect8includesERKS0_>
 80156a8:	b108      	cbz	r0, 80156ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 80156aa:	4621      	mov	r1, r4
 80156ac:	e020      	b.n	80156f0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 80156ae:	f9b4 2000 	ldrsh.w	r2, [r4]
 80156b2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d11e      	bne.n	80156f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80156ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80156be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d118      	bne.n	80156f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80156c6:	6820      	ldr	r0, [r4, #0]
 80156c8:	466b      	mov	r3, sp
 80156ca:	6861      	ldr	r1, [r4, #4]
 80156cc:	c303      	stmia	r3!, {r0, r1}
 80156ce:	4639      	mov	r1, r7
 80156d0:	4668      	mov	r0, sp
 80156d2:	f7fd fbe7 	bl	8012ea4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80156d6:	f8d9 3000 	ldr.w	r3, [r9]
 80156da:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80156de:	442b      	add	r3, r5
 80156e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80156e4:	4413      	add	r3, r2
 80156e6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80156ea:	4293      	cmp	r3, r2
 80156ec:	dc04      	bgt.n	80156f8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80156ee:	4669      	mov	r1, sp
 80156f0:	4630      	mov	r0, r6
 80156f2:	f7ff ff93 	bl	801561c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80156f6:	e7b5      	b.n	8015664 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80156f8:	f8d8 3000 	ldr.w	r3, [r8]
 80156fc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015700:	442b      	add	r3, r5
 8015702:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015706:	4291      	cmp	r1, r2
 8015708:	d119      	bne.n	801573e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801570a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801570e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015712:	4291      	cmp	r1, r2
 8015714:	d113      	bne.n	801573e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8015716:	6820      	ldr	r0, [r4, #0]
 8015718:	466a      	mov	r2, sp
 801571a:	6861      	ldr	r1, [r4, #4]
 801571c:	c203      	stmia	r2!, {r0, r1}
 801571e:	4619      	mov	r1, r3
 8015720:	4668      	mov	r0, sp
 8015722:	f7fd fbbf 	bl	8012ea4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015726:	f8d8 3000 	ldr.w	r3, [r8]
 801572a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801572e:	442b      	add	r3, r5
 8015730:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015734:	4413      	add	r3, r2
 8015736:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801573a:	4293      	cmp	r3, r2
 801573c:	ddd7      	ble.n	80156ee <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801573e:	4620      	mov	r0, r4
 8015740:	f7fa fb17 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015744:	b990      	cbnz	r0, 801576c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 8015746:	88a7      	ldrh	r7, [r4, #4]
 8015748:	88e3      	ldrh	r3, [r4, #6]
 801574a:	fb17 f703 	smulbb	r7, r7, r3
 801574e:	f8d8 3000 	ldr.w	r3, [r8]
 8015752:	441d      	add	r5, r3
 8015754:	4628      	mov	r0, r5
 8015756:	f7fa fb0c 	bl	800fd72 <_ZNK8touchgfx4Rect7isEmptyEv>
 801575a:	b948      	cbnz	r0, 8015770 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801575c:	88ab      	ldrh	r3, [r5, #4]
 801575e:	88ea      	ldrh	r2, [r5, #6]
 8015760:	fb13 f302 	smulbb	r3, r3, r2
 8015764:	42bb      	cmp	r3, r7
 8015766:	f6bf af7c 	bge.w	8015662 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801576a:	e79e      	b.n	80156aa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801576c:	2700      	movs	r7, #0
 801576e:	e7ee      	b.n	801574e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8015770:	2300      	movs	r3, #0
 8015772:	e7f7      	b.n	8015764 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8015774:	2400753c 	.word	0x2400753c
 8015778:	24007524 	.word	0x24007524

0801577c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801577e:	4c24      	ldr	r4, [pc, #144]	; (8015810 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8015780:	6823      	ldr	r3, [r4, #0]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d042      	beq.n	801580c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015786:	4a23      	ldr	r2, [pc, #140]	; (8015814 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015788:	4d23      	ldr	r5, [pc, #140]	; (8015818 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801578a:	8811      	ldrh	r1, [r2, #0]
 801578c:	f8b5 c000 	ldrh.w	ip, [r5]
 8015790:	4822      	ldr	r0, [pc, #136]	; (801581c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8015792:	4461      	add	r1, ip
 8015794:	1c4a      	adds	r2, r1, #1
 8015796:	008f      	lsls	r7, r1, #2
 8015798:	f022 0201 	bic.w	r2, r2, #1
 801579c:	19de      	adds	r6, r3, r7
 801579e:	0412      	lsls	r2, r2, #16
 80157a0:	6006      	str	r6, [r0, #0]
 80157a2:	4e1f      	ldr	r6, [pc, #124]	; (8015820 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80157a4:	0c12      	lsrs	r2, r2, #16
 80157a6:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 80157aa:	19da      	adds	r2, r3, r7
 80157ac:	6032      	str	r2, [r6, #0]
 80157ae:	220e      	movs	r2, #14
 80157b0:	fb02 f20c 	mul.w	r2, r2, ip
 80157b4:	3203      	adds	r2, #3
 80157b6:	f022 0203 	bic.w	r2, r2, #3
 80157ba:	443a      	add	r2, r7
 80157bc:	4f19      	ldr	r7, [pc, #100]	; (8015824 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80157be:	4413      	add	r3, r2
 80157c0:	603b      	str	r3, [r7, #0]
 80157c2:	2300      	movs	r3, #0
 80157c4:	4f18      	ldr	r7, [pc, #96]	; (8015828 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80157c6:	469c      	mov	ip, r3
 80157c8:	803b      	strh	r3, [r7, #0]
 80157ca:	4f18      	ldr	r7, [pc, #96]	; (801582c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80157cc:	683f      	ldr	r7, [r7, #0]
 80157ce:	1aba      	subs	r2, r7, r2
 80157d0:	4f17      	ldr	r7, [pc, #92]	; (8015830 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80157d2:	603a      	str	r2, [r7, #0]
 80157d4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80157d8:	4a16      	ldr	r2, [pc, #88]	; (8015834 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80157da:	8013      	strh	r3, [r2, #0]
 80157dc:	428b      	cmp	r3, r1
 80157de:	d10d      	bne.n	80157fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80157e0:	882d      	ldrh	r5, [r5, #0]
 80157e2:	2300      	movs	r3, #0
 80157e4:	6830      	ldr	r0, [r6, #0]
 80157e6:	240e      	movs	r4, #14
 80157e8:	429d      	cmp	r5, r3
 80157ea:	d90f      	bls.n	801580c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80157ec:	fb04 0203 	mla	r2, r4, r3, r0
 80157f0:	3301      	adds	r3, #1
 80157f2:	7b11      	ldrb	r1, [r2, #12]
 80157f4:	f36f 1145 	bfc	r1, #5, #1
 80157f8:	7311      	strb	r1, [r2, #12]
 80157fa:	e7f5      	b.n	80157e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80157fc:	6822      	ldr	r2, [r4, #0]
 80157fe:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8015802:	6802      	ldr	r2, [r0, #0]
 8015804:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015808:	3301      	adds	r3, #1
 801580a:	e7e7      	b.n	80157dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801580c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801580e:	bf00      	nop
 8015810:	24007520 	.word	0x24007520
 8015814:	2400753c 	.word	0x2400753c
 8015818:	24007540 	.word	0x24007540
 801581c:	24007534 	.word	0x24007534
 8015820:	24007524 	.word	0x24007524
 8015824:	2400752c 	.word	0x2400752c
 8015828:	2400753e 	.word	0x2400753e
 801582c:	24007528 	.word	0x24007528
 8015830:	24007538 	.word	0x24007538
 8015834:	24007530 	.word	0x24007530

08015838 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015838:	4b06      	ldr	r3, [pc, #24]	; (8015854 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	b943      	cbnz	r3, 8015850 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801583e:	b139      	cbz	r1, 8015850 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015840:	4b05      	ldr	r3, [pc, #20]	; (8015858 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8015842:	801a      	strh	r2, [r3, #0]
 8015844:	4b05      	ldr	r3, [pc, #20]	; (801585c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8015846:	6019      	str	r1, [r3, #0]
 8015848:	4b05      	ldr	r3, [pc, #20]	; (8015860 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801584a:	6018      	str	r0, [r3, #0]
 801584c:	f7ff bf96 	b.w	801577c <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015850:	4770      	bx	lr
 8015852:	bf00      	nop
 8015854:	2400752c 	.word	0x2400752c
 8015858:	24007540 	.word	0x24007540
 801585c:	24007528 	.word	0x24007528
 8015860:	24007520 	.word	0x24007520

08015864 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015864:	b470      	push	{r4, r5, r6}
 8015866:	4c07      	ldr	r4, [pc, #28]	; (8015884 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015868:	4605      	mov	r5, r0
 801586a:	4610      	mov	r0, r2
 801586c:	9a03      	ldr	r2, [sp, #12]
 801586e:	6826      	ldr	r6, [r4, #0]
 8015870:	b936      	cbnz	r6, 8015880 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015872:	6025      	str	r5, [r4, #0]
 8015874:	4c04      	ldr	r4, [pc, #16]	; (8015888 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8015876:	8021      	strh	r1, [r4, #0]
 8015878:	4619      	mov	r1, r3
 801587a:	bc70      	pop	{r4, r5, r6}
 801587c:	f7ff bfdc 	b.w	8015838 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015880:	bc70      	pop	{r4, r5, r6}
 8015882:	4770      	bx	lr
 8015884:	24007544 	.word	0x24007544
 8015888:	2400753c 	.word	0x2400753c

0801588c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801588c:	4a12      	ldr	r2, [pc, #72]	; (80158d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801588e:	8803      	ldrh	r3, [r0, #0]
 8015890:	8812      	ldrh	r2, [r2, #0]
 8015892:	4293      	cmp	r3, r2
 8015894:	d207      	bcs.n	80158a6 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015896:	4a11      	ldr	r2, [pc, #68]	; (80158dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015898:	2114      	movs	r1, #20
 801589a:	6812      	ldr	r2, [r2, #0]
 801589c:	fb01 2303 	mla	r3, r1, r3, r2
 80158a0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80158a4:	4770      	bx	lr
 80158a6:	490e      	ldr	r1, [pc, #56]	; (80158e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80158a8:	8809      	ldrh	r1, [r1, #0]
 80158aa:	4411      	add	r1, r2
 80158ac:	428b      	cmp	r3, r1
 80158ae:	da04      	bge.n	80158ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80158b0:	1a9b      	subs	r3, r3, r2
 80158b2:	4a0c      	ldr	r2, [pc, #48]	; (80158e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80158b4:	210e      	movs	r1, #14
 80158b6:	6812      	ldr	r2, [r2, #0]
 80158b8:	e7f0      	b.n	801589c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80158ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80158be:	4293      	cmp	r3, r2
 80158c0:	d108      	bne.n	80158d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80158c2:	4b09      	ldr	r3, [pc, #36]	; (80158e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	b91b      	cbnz	r3, 80158d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80158c8:	4b08      	ldr	r3, [pc, #32]	; (80158ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80158ca:	f9b3 0000 	ldrsh.w	r0, [r3]
 80158ce:	4770      	bx	lr
 80158d0:	4b07      	ldr	r3, [pc, #28]	; (80158f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80158d2:	e7fa      	b.n	80158ca <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80158d4:	2000      	movs	r0, #0
 80158d6:	4770      	bx	lr
 80158d8:	2400753c 	.word	0x2400753c
 80158dc:	24007544 	.word	0x24007544
 80158e0:	24007540 	.word	0x24007540
 80158e4:	24007524 	.word	0x24007524
 80158e8:	240074b4 	.word	0x240074b4
 80158ec:	240074b6 	.word	0x240074b6
 80158f0:	240074b8 	.word	0x240074b8

080158f4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80158f4:	4a12      	ldr	r2, [pc, #72]	; (8015940 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80158f6:	8803      	ldrh	r3, [r0, #0]
 80158f8:	8812      	ldrh	r2, [r2, #0]
 80158fa:	4293      	cmp	r3, r2
 80158fc:	d207      	bcs.n	801590e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80158fe:	4a11      	ldr	r2, [pc, #68]	; (8015944 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015900:	2114      	movs	r1, #20
 8015902:	6812      	ldr	r2, [r2, #0]
 8015904:	fb01 2303 	mla	r3, r1, r3, r2
 8015908:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801590c:	4770      	bx	lr
 801590e:	490e      	ldr	r1, [pc, #56]	; (8015948 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015910:	8809      	ldrh	r1, [r1, #0]
 8015912:	4411      	add	r1, r2
 8015914:	428b      	cmp	r3, r1
 8015916:	da04      	bge.n	8015922 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015918:	1a9b      	subs	r3, r3, r2
 801591a:	4a0c      	ldr	r2, [pc, #48]	; (801594c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801591c:	210e      	movs	r1, #14
 801591e:	6812      	ldr	r2, [r2, #0]
 8015920:	e7f0      	b.n	8015904 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8015922:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015926:	4293      	cmp	r3, r2
 8015928:	d108      	bne.n	801593c <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801592a:	4b09      	ldr	r3, [pc, #36]	; (8015950 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	b91b      	cbnz	r3, 8015938 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8015930:	4b08      	ldr	r3, [pc, #32]	; (8015954 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8015932:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015936:	4770      	bx	lr
 8015938:	4b07      	ldr	r3, [pc, #28]	; (8015958 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801593a:	e7fa      	b.n	8015932 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801593c:	2000      	movs	r0, #0
 801593e:	4770      	bx	lr
 8015940:	2400753c 	.word	0x2400753c
 8015944:	24007544 	.word	0x24007544
 8015948:	24007540 	.word	0x24007540
 801594c:	24007524 	.word	0x24007524
 8015950:	240074b4 	.word	0x240074b4
 8015954:	240074b8 	.word	0x240074b8
 8015958:	240074b6 	.word	0x240074b6

0801595c <_ZNK8touchgfx6Bitmap7getDataEv>:
 801595c:	4a12      	ldr	r2, [pc, #72]	; (80159a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801595e:	8803      	ldrh	r3, [r0, #0]
 8015960:	8811      	ldrh	r1, [r2, #0]
 8015962:	428b      	cmp	r3, r1
 8015964:	d20b      	bcs.n	801597e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8015966:	4a11      	ldr	r2, [pc, #68]	; (80159ac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8015968:	6812      	ldr	r2, [r2, #0]
 801596a:	b112      	cbz	r2, 8015972 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801596c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015970:	b9c0      	cbnz	r0, 80159a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8015972:	4a0f      	ldr	r2, [pc, #60]	; (80159b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015974:	6811      	ldr	r1, [r2, #0]
 8015976:	2214      	movs	r2, #20
 8015978:	4353      	muls	r3, r2
 801597a:	58c8      	ldr	r0, [r1, r3]
 801597c:	4770      	bx	lr
 801597e:	4a0d      	ldr	r2, [pc, #52]	; (80159b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015980:	8812      	ldrh	r2, [r2, #0]
 8015982:	440a      	add	r2, r1
 8015984:	4293      	cmp	r3, r2
 8015986:	da04      	bge.n	8015992 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8015988:	4a08      	ldr	r2, [pc, #32]	; (80159ac <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801598a:	6812      	ldr	r2, [r2, #0]
 801598c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015990:	4770      	bx	lr
 8015992:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015996:	4293      	cmp	r3, r2
 8015998:	d103      	bne.n	80159a2 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801599a:	4b07      	ldr	r3, [pc, #28]	; (80159b8 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80159a0:	4770      	bx	lr
 80159a2:	2000      	movs	r0, #0
 80159a4:	4770      	bx	lr
 80159a6:	bf00      	nop
 80159a8:	2400753c 	.word	0x2400753c
 80159ac:	24007520 	.word	0x24007520
 80159b0:	24007544 	.word	0x24007544
 80159b4:	24007540 	.word	0x24007540
 80159b8:	240074bc 	.word	0x240074bc

080159bc <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80159bc:	4b24      	ldr	r3, [pc, #144]	; (8015a50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80159be:	8802      	ldrh	r2, [r0, #0]
 80159c0:	8818      	ldrh	r0, [r3, #0]
 80159c2:	4282      	cmp	r2, r0
 80159c4:	d221      	bcs.n	8015a0a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80159c6:	4b23      	ldr	r3, [pc, #140]	; (8015a54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80159c8:	6819      	ldr	r1, [r3, #0]
 80159ca:	2314      	movs	r3, #20
 80159cc:	fb03 1302 	mla	r3, r3, r2, r1
 80159d0:	6858      	ldr	r0, [r3, #4]
 80159d2:	2800      	cmp	r0, #0
 80159d4:	d03a      	beq.n	8015a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80159d6:	4920      	ldr	r1, [pc, #128]	; (8015a58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80159d8:	6809      	ldr	r1, [r1, #0]
 80159da:	2900      	cmp	r1, #0
 80159dc:	d036      	beq.n	8015a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80159de:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80159e2:	2900      	cmp	r1, #0
 80159e4:	d032      	beq.n	8015a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80159e6:	891a      	ldrh	r2, [r3, #8]
 80159e8:	8958      	ldrh	r0, [r3, #10]
 80159ea:	4350      	muls	r0, r2
 80159ec:	7c5a      	ldrb	r2, [r3, #17]
 80159ee:	7cdb      	ldrb	r3, [r3, #19]
 80159f0:	0952      	lsrs	r2, r2, #5
 80159f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80159f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80159fa:	2b0b      	cmp	r3, #11
 80159fc:	bf18      	it	ne
 80159fe:	0040      	lslne	r0, r0, #1
 8015a00:	3003      	adds	r0, #3
 8015a02:	f020 0003 	bic.w	r0, r0, #3
 8015a06:	4408      	add	r0, r1
 8015a08:	4770      	bx	lr
 8015a0a:	4b14      	ldr	r3, [pc, #80]	; (8015a5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8015a0c:	881b      	ldrh	r3, [r3, #0]
 8015a0e:	4403      	add	r3, r0
 8015a10:	429a      	cmp	r2, r3
 8015a12:	da1a      	bge.n	8015a4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015a14:	4b12      	ldr	r3, [pc, #72]	; (8015a60 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8015a16:	1a10      	subs	r0, r2, r0
 8015a18:	210e      	movs	r1, #14
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	fb01 3000 	mla	r0, r1, r0, r3
 8015a20:	7b03      	ldrb	r3, [r0, #12]
 8015a22:	f003 031f 	and.w	r3, r3, #31
 8015a26:	2b0b      	cmp	r3, #11
 8015a28:	d10b      	bne.n	8015a42 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8015a2a:	8903      	ldrh	r3, [r0, #8]
 8015a2c:	8940      	ldrh	r0, [r0, #10]
 8015a2e:	4358      	muls	r0, r3
 8015a30:	4b09      	ldr	r3, [pc, #36]	; (8015a58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015a32:	3003      	adds	r0, #3
 8015a34:	6819      	ldr	r1, [r3, #0]
 8015a36:	f020 0303 	bic.w	r3, r0, #3
 8015a3a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8015a3e:	4418      	add	r0, r3
 8015a40:	4770      	bx	lr
 8015a42:	2b0d      	cmp	r3, #13
 8015a44:	d101      	bne.n	8015a4a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8015a46:	300d      	adds	r0, #13
 8015a48:	4770      	bx	lr
 8015a4a:	2000      	movs	r0, #0
 8015a4c:	4770      	bx	lr
 8015a4e:	bf00      	nop
 8015a50:	2400753c 	.word	0x2400753c
 8015a54:	24007544 	.word	0x24007544
 8015a58:	24007520 	.word	0x24007520
 8015a5c:	24007540 	.word	0x24007540
 8015a60:	24007524 	.word	0x24007524

08015a64 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8015a64:	4a17      	ldr	r2, [pc, #92]	; (8015ac4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8015a66:	b510      	push	{r4, lr}
 8015a68:	8803      	ldrh	r3, [r0, #0]
 8015a6a:	8812      	ldrh	r2, [r2, #0]
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	d20c      	bcs.n	8015a8a <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8015a70:	4a15      	ldr	r2, [pc, #84]	; (8015ac8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8015a72:	2114      	movs	r1, #20
 8015a74:	6812      	ldr	r2, [r2, #0]
 8015a76:	fb01 2303 	mla	r3, r1, r3, r2
 8015a7a:	7c58      	ldrb	r0, [r3, #17]
 8015a7c:	0942      	lsrs	r2, r0, #5
 8015a7e:	7cd8      	ldrb	r0, [r3, #19]
 8015a80:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8015a84:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8015a88:	bd10      	pop	{r4, pc}
 8015a8a:	4910      	ldr	r1, [pc, #64]	; (8015acc <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8015a8c:	8809      	ldrh	r1, [r1, #0]
 8015a8e:	4411      	add	r1, r2
 8015a90:	428b      	cmp	r3, r1
 8015a92:	da09      	bge.n	8015aa8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8015a94:	1a9b      	subs	r3, r3, r2
 8015a96:	4a0e      	ldr	r2, [pc, #56]	; (8015ad0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8015a98:	210e      	movs	r1, #14
 8015a9a:	6812      	ldr	r2, [r2, #0]
 8015a9c:	fb01 2303 	mla	r3, r1, r3, r2
 8015aa0:	7b18      	ldrb	r0, [r3, #12]
 8015aa2:	f000 001f 	and.w	r0, r0, #31
 8015aa6:	e7ef      	b.n	8015a88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015aa8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015aac:	4293      	cmp	r3, r2
 8015aae:	d106      	bne.n	8015abe <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8015ab0:	f7fa fbea 	bl	8010288 <_ZN8touchgfx3HAL3lcdEv>
 8015ab4:	6803      	ldr	r3, [r0, #0]
 8015ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015abc:	4718      	bx	r3
 8015abe:	2000      	movs	r0, #0
 8015ac0:	e7e2      	b.n	8015a88 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8015ac2:	bf00      	nop
 8015ac4:	2400753c 	.word	0x2400753c
 8015ac8:	24007544 	.word	0x24007544
 8015acc:	24007540 	.word	0x24007540
 8015ad0:	24007524 	.word	0x24007524

08015ad4 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015ad4:	2018      	movs	r0, #24
 8015ad6:	4770      	bx	lr

08015ad8 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 8015ad8:	2001      	movs	r0, #1
 8015ada:	4770      	bx	lr

08015adc <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015adc:	4b02      	ldr	r3, [pc, #8]	; (8015ae8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8015ade:	8818      	ldrh	r0, [r3, #0]
 8015ae0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015ae4:	b280      	uxth	r0, r0
 8015ae6:	4770      	bx	lr
 8015ae8:	240074b6 	.word	0x240074b6

08015aec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8015aec:	2bff      	cmp	r3, #255	; 0xff
 8015aee:	d040      	beq.n	8015b72 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x86>
 8015af0:	2a2c      	cmp	r2, #44	; 0x2c
 8015af2:	d02a      	beq.n	8015b4a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5e>
 8015af4:	d80f      	bhi.n	8015b16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 8015af6:	2a08      	cmp	r2, #8
 8015af8:	d037      	beq.n	8015b6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015afa:	d805      	bhi.n	8015b08 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 8015afc:	2a04      	cmp	r2, #4
 8015afe:	d032      	beq.n	8015b66 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7a>
 8015b00:	2a05      	cmp	r2, #5
 8015b02:	d02e      	beq.n	8015b62 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8015b04:	2000      	movs	r0, #0
 8015b06:	4770      	bx	lr
 8015b08:	2a0a      	cmp	r2, #10
 8015b0a:	d02e      	beq.n	8015b6a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8015b0c:	d301      	bcc.n	8015b12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 8015b0e:	2a0b      	cmp	r2, #11
 8015b10:	d1f8      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b12:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8015b14:	4770      	bx	lr
 8015b16:	2a30      	cmp	r2, #48	; 0x30
 8015b18:	d029      	beq.n	8015b6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015b1a:	d808      	bhi.n	8015b2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8015b1c:	2a2e      	cmp	r2, #46	; 0x2e
 8015b1e:	684b      	ldr	r3, [r1, #4]
 8015b20:	d01a      	beq.n	8015b58 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6c>
 8015b22:	d90b      	bls.n	8015b3c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8015b24:	781b      	ldrb	r3, [r3, #0]
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d1ec      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b2a:	6a00      	ldr	r0, [r0, #32]
 8015b2c:	4770      	bx	lr
 8015b2e:	2a32      	cmp	r2, #50	; 0x32
 8015b30:	d01d      	beq.n	8015b6e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8015b32:	d301      	bcc.n	8015b38 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4c>
 8015b34:	2a33      	cmp	r2, #51	; 0x33
 8015b36:	d1e5      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b38:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8015b3a:	4770      	bx	lr
 8015b3c:	781b      	ldrb	r3, [r3, #0]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d0f3      	beq.n	8015b2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x3e>
 8015b42:	2b01      	cmp	r3, #1
 8015b44:	d1de      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b46:	6900      	ldr	r0, [r0, #16]
 8015b48:	4770      	bx	lr
 8015b4a:	684b      	ldr	r3, [r1, #4]
 8015b4c:	781b      	ldrb	r3, [r3, #0]
 8015b4e:	b133      	cbz	r3, 8015b5e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8015b50:	2b01      	cmp	r3, #1
 8015b52:	d1d7      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b54:	6880      	ldr	r0, [r0, #8]
 8015b56:	4770      	bx	lr
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d1d2      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b5e:	6980      	ldr	r0, [r0, #24]
 8015b60:	4770      	bx	lr
 8015b62:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8015b64:	4770      	bx	lr
 8015b66:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8015b68:	4770      	bx	lr
 8015b6a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8015b6c:	4770      	bx	lr
 8015b6e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8015b70:	4770      	bx	lr
 8015b72:	2a2c      	cmp	r2, #44	; 0x2c
 8015b74:	d02a      	beq.n	8015bcc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe0>
 8015b76:	d80f      	bhi.n	8015b98 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xac>
 8015b78:	2a08      	cmp	r2, #8
 8015b7a:	d035      	beq.n	8015be8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015b7c:	d805      	bhi.n	8015b8a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8015b7e:	2a04      	cmp	r2, #4
 8015b80:	d030      	beq.n	8015be4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf8>
 8015b82:	2a05      	cmp	r2, #5
 8015b84:	d1be      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b86:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8015b88:	4770      	bx	lr
 8015b8a:	2a0a      	cmp	r2, #10
 8015b8c:	d02c      	beq.n	8015be8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfc>
 8015b8e:	d301      	bcc.n	8015b94 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa8>
 8015b90:	2a0b      	cmp	r2, #11
 8015b92:	d1b7      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015b94:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8015b96:	4770      	bx	lr
 8015b98:	2a30      	cmp	r2, #48	; 0x30
 8015b9a:	d027      	beq.n	8015bec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015b9c:	d808      	bhi.n	8015bb0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8015b9e:	2a2e      	cmp	r2, #46	; 0x2e
 8015ba0:	684b      	ldr	r3, [r1, #4]
 8015ba2:	d01a      	beq.n	8015bda <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xee>
 8015ba4:	d90b      	bls.n	8015bbe <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd2>
 8015ba6:	781b      	ldrb	r3, [r3, #0]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d1ab      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015bac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8015bae:	4770      	bx	lr
 8015bb0:	2a32      	cmp	r2, #50	; 0x32
 8015bb2:	d01b      	beq.n	8015bec <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x100>
 8015bb4:	d301      	bcc.n	8015bba <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xce>
 8015bb6:	2a33      	cmp	r2, #51	; 0x33
 8015bb8:	d1a4      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015bba:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8015bbc:	4770      	bx	lr
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d0f3      	beq.n	8015bac <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8015bc4:	2b01      	cmp	r3, #1
 8015bc6:	d19d      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015bc8:	6940      	ldr	r0, [r0, #20]
 8015bca:	4770      	bx	lr
 8015bcc:	684b      	ldr	r3, [r1, #4]
 8015bce:	781b      	ldrb	r3, [r3, #0]
 8015bd0:	b133      	cbz	r3, 8015be0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf4>
 8015bd2:	2b01      	cmp	r3, #1
 8015bd4:	d196      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015bd6:	68c0      	ldr	r0, [r0, #12]
 8015bd8:	4770      	bx	lr
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d191      	bne.n	8015b04 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015be0:	69c0      	ldr	r0, [r0, #28]
 8015be2:	4770      	bx	lr
 8015be4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8015be6:	4770      	bx	lr
 8015be8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8015bea:	4770      	bx	lr
 8015bec:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8015bee:	4770      	bx	lr

08015bf0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bf4:	b085      	sub	sp, #20
 8015bf6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8015bf8:	9203      	str	r2, [sp, #12]
 8015bfa:	6870      	ldr	r0, [r6, #4]
 8015bfc:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8015c00:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015c04:	9101      	str	r1, [sp, #4]
 8015c06:	fa1f f885 	uxth.w	r8, r5
 8015c0a:	43ed      	mvns	r5, r5
 8015c0c:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8015c10:	b2ed      	uxtb	r5, r5
 8015c12:	fb00 2404 	mla	r4, r0, r4, r2
 8015c16:	6832      	ldr	r2, [r6, #0]
 8015c18:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015c1c:	4414      	add	r4, r2
 8015c1e:	f8dc 2000 	ldr.w	r2, [ip]
 8015c22:	9202      	str	r2, [sp, #8]
 8015c24:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015c28:	f102 0e04 	add.w	lr, r2, #4
 8015c2c:	9a01      	ldr	r2, [sp, #4]
 8015c2e:	2a00      	cmp	r2, #0
 8015c30:	dc03      	bgt.n	8015c3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015c32:	9a03      	ldr	r2, [sp, #12]
 8015c34:	2a00      	cmp	r2, #0
 8015c36:	f340 8116 	ble.w	8015e66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015c3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015c3c:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015c40:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015c44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015c46:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015c4a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	dd0e      	ble.n	8015c70 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015c52:	1406      	asrs	r6, r0, #16
 8015c54:	d405      	bmi.n	8015c62 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015c56:	4556      	cmp	r6, sl
 8015c58:	da03      	bge.n	8015c62 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015c5a:	1416      	asrs	r6, r2, #16
 8015c5c:	d401      	bmi.n	8015c62 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015c5e:	454e      	cmp	r6, r9
 8015c60:	db07      	blt.n	8015c72 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015c62:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015c64:	3b01      	subs	r3, #1
 8015c66:	3403      	adds	r4, #3
 8015c68:	4430      	add	r0, r6
 8015c6a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8015c6c:	4432      	add	r2, r6
 8015c6e:	e7ee      	b.n	8015c4e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015c70:	d063      	beq.n	8015d3a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015c72:	1e5e      	subs	r6, r3, #1
 8015c74:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8015c76:	fb07 0706 	mla	r7, r7, r6, r0
 8015c7a:	143f      	asrs	r7, r7, #16
 8015c7c:	d454      	bmi.n	8015d28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015c7e:	4557      	cmp	r7, sl
 8015c80:	da52      	bge.n	8015d28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015c82:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015c84:	fb07 2606 	mla	r6, r7, r6, r2
 8015c88:	1436      	asrs	r6, r6, #16
 8015c8a:	d44d      	bmi.n	8015d28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015c8c:	454e      	cmp	r6, r9
 8015c8e:	da4b      	bge.n	8015d28 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015c90:	1ce6      	adds	r6, r4, #3
 8015c92:	4699      	mov	r9, r3
 8015c94:	f1b9 0f00 	cmp.w	r9, #0
 8015c98:	f106 0603 	add.w	r6, r6, #3
 8015c9c:	dd48      	ble.n	8015d30 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015c9e:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015ca2:	1417      	asrs	r7, r2, #16
 8015ca4:	9902      	ldr	r1, [sp, #8]
 8015ca6:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015caa:	f109 39ff 	add.w	r9, r9, #4294967295
 8015cae:	fb0b 1707 	mla	r7, fp, r7, r1
 8015cb2:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015cb6:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015cb8:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015cbc:	fb1b fb05 	smulbb	fp, fp, r5
 8015cc0:	4408      	add	r0, r1
 8015cc2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015cc4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015cc8:	440a      	add	r2, r1
 8015cca:	eb0e 0a07 	add.w	sl, lr, r7
 8015cce:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015cd2:	fb07 b708 	mla	r7, r7, r8, fp
 8015cd6:	b2bf      	uxth	r7, r7
 8015cd8:	f107 0b01 	add.w	fp, r7, #1
 8015cdc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015ce0:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015ce4:	fb1b fb05 	smulbb	fp, fp, r5
 8015ce8:	123f      	asrs	r7, r7, #8
 8015cea:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015cee:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015cf2:	fb07 b708 	mla	r7, r7, r8, fp
 8015cf6:	b2bf      	uxth	r7, r7
 8015cf8:	f107 0b01 	add.w	fp, r7, #1
 8015cfc:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015d00:	123f      	asrs	r7, r7, #8
 8015d02:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015d06:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015d0a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015d0e:	fb1a fa05 	smulbb	sl, sl, r5
 8015d12:	fb07 a708 	mla	r7, r7, r8, sl
 8015d16:	b2bf      	uxth	r7, r7
 8015d18:	f107 0a01 	add.w	sl, r7, #1
 8015d1c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015d20:	123f      	asrs	r7, r7, #8
 8015d22:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015d26:	e7b5      	b.n	8015c94 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015d28:	2700      	movs	r7, #0
 8015d2a:	1bde      	subs	r6, r3, r7
 8015d2c:	2e00      	cmp	r6, #0
 8015d2e:	dc42      	bgt.n	8015db6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015d30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d38:	441c      	add	r4, r3
 8015d3a:	9b01      	ldr	r3, [sp, #4]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	f340 8092 	ble.w	8015e66 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015d42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015d4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015d50:	eef0 6a62 	vmov.f32	s13, s5
 8015d54:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015d58:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015d5c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015d60:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8015d64:	eef0 6a43 	vmov.f32	s13, s6
 8015d68:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015d6c:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 8015d70:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015d74:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015d78:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015d7c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015d80:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015d84:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015d88:	ee12 2a90 	vmov	r2, s5
 8015d8c:	eef0 2a47 	vmov.f32	s5, s14
 8015d90:	fb92 f3f3 	sdiv	r3, r2, r3
 8015d94:	ee13 2a10 	vmov	r2, s6
 8015d98:	9311      	str	r3, [sp, #68]	; 0x44
 8015d9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d9c:	eeb0 3a67 	vmov.f32	s6, s15
 8015da0:	fb92 f3f3 	sdiv	r3, r2, r3
 8015da4:	9312      	str	r3, [sp, #72]	; 0x48
 8015da6:	9b01      	ldr	r3, [sp, #4]
 8015da8:	9a03      	ldr	r2, [sp, #12]
 8015daa:	3b01      	subs	r3, #1
 8015dac:	9301      	str	r3, [sp, #4]
 8015dae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015db0:	bf08      	it	eq
 8015db2:	4613      	moveq	r3, r2
 8015db4:	e73a      	b.n	8015c2c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015db6:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015dba:	d44e      	bmi.n	8015e5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015dbc:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015dc0:	4556      	cmp	r6, sl
 8015dc2:	dd4a      	ble.n	8015e5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015dc4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015dc8:	d447      	bmi.n	8015e5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015dca:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015dce:	4559      	cmp	r1, fp
 8015dd0:	dd43      	ble.n	8015e5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015dd2:	fa0f f986 	sxth.w	r9, r6
 8015dd6:	9902      	ldr	r1, [sp, #8]
 8015dd8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015ddc:	fb0b 1909 	mla	r9, fp, r9, r1
 8015de0:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015de4:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015de8:	fb1b fb05 	smulbb	fp, fp, r5
 8015dec:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015df0:	eb0e 0a09 	add.w	sl, lr, r9
 8015df4:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015df8:	fb09 b908 	mla	r9, r9, r8, fp
 8015dfc:	fa1f f989 	uxth.w	r9, r9
 8015e00:	f109 0b01 	add.w	fp, r9, #1
 8015e04:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015e08:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015e0c:	f804 9006 	strb.w	r9, [r4, r6]
 8015e10:	4426      	add	r6, r4
 8015e12:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015e16:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015e1a:	fb1b fb05 	smulbb	fp, fp, r5
 8015e1e:	fb09 b908 	mla	r9, r9, r8, fp
 8015e22:	fa1f f989 	uxth.w	r9, r9
 8015e26:	f109 0b01 	add.w	fp, r9, #1
 8015e2a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015e2e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015e32:	f886 9001 	strb.w	r9, [r6, #1]
 8015e36:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015e3a:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015e3e:	fb1a fa05 	smulbb	sl, sl, r5
 8015e42:	fb09 a908 	mla	r9, r9, r8, sl
 8015e46:	fa1f f989 	uxth.w	r9, r9
 8015e4a:	f109 0a01 	add.w	sl, r9, #1
 8015e4e:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015e52:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015e56:	f886 9002 	strb.w	r9, [r6, #2]
 8015e5a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8015e5c:	3701      	adds	r7, #1
 8015e5e:	4408      	add	r0, r1
 8015e60:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015e62:	440a      	add	r2, r1
 8015e64:	e761      	b.n	8015d2a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015e66:	b005      	add	sp, #20
 8015e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e6c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e70:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8015e72:	4693      	mov	fp, r2
 8015e74:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8015e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015e7a:	6868      	ldr	r0, [r5, #4]
 8015e7c:	6877      	ldr	r7, [r6, #4]
 8015e7e:	9100      	str	r1, [sp, #0]
 8015e80:	3704      	adds	r7, #4
 8015e82:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 8015e86:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 8015e8a:	fb00 2404 	mla	r4, r0, r4, r2
 8015e8e:	682a      	ldr	r2, [r5, #0]
 8015e90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015e94:	4414      	add	r4, r2
 8015e96:	6832      	ldr	r2, [r6, #0]
 8015e98:	9201      	str	r2, [sp, #4]
 8015e9a:	9a00      	ldr	r2, [sp, #0]
 8015e9c:	2a00      	cmp	r2, #0
 8015e9e:	dc03      	bgt.n	8015ea8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015ea0:	f1bb 0f00 	cmp.w	fp, #0
 8015ea4:	f340 80bc 	ble.w	8016020 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015ea8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015eaa:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015eae:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8015eb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015eb4:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015eb8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	dd0c      	ble.n	8015eda <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015ec0:	1405      	asrs	r5, r0, #16
 8015ec2:	d405      	bmi.n	8015ed0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015ec4:	4555      	cmp	r5, sl
 8015ec6:	da03      	bge.n	8015ed0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015ec8:	1415      	asrs	r5, r2, #16
 8015eca:	d401      	bmi.n	8015ed0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015ecc:	454d      	cmp	r5, r9
 8015ece:	db05      	blt.n	8015edc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015ed0:	4440      	add	r0, r8
 8015ed2:	4472      	add	r2, lr
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	3403      	adds	r4, #3
 8015ed8:	e7f0      	b.n	8015ebc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015eda:	d03f      	beq.n	8015f5c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015edc:	1e5d      	subs	r5, r3, #1
 8015ede:	fb08 0c05 	mla	ip, r8, r5, r0
 8015ee2:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015ee6:	d42e      	bmi.n	8015f46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015ee8:	45d4      	cmp	ip, sl
 8015eea:	da2c      	bge.n	8015f46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015eec:	fb0e 2505 	mla	r5, lr, r5, r2
 8015ef0:	142d      	asrs	r5, r5, #16
 8015ef2:	d428      	bmi.n	8015f46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015ef4:	454d      	cmp	r5, r9
 8015ef6:	da26      	bge.n	8015f46 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015ef8:	1ce5      	adds	r5, r4, #3
 8015efa:	469c      	mov	ip, r3
 8015efc:	f1bc 0f00 	cmp.w	ip, #0
 8015f00:	f105 0503 	add.w	r5, r5, #3
 8015f04:	dd25      	ble.n	8015f52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015f06:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015f0a:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015f0e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015f12:	4472      	add	r2, lr
 8015f14:	468a      	mov	sl, r1
 8015f16:	9901      	ldr	r1, [sp, #4]
 8015f18:	fb0a 1909 	mla	r9, sl, r9, r1
 8015f1c:	1401      	asrs	r1, r0, #16
 8015f1e:	4440      	add	r0, r8
 8015f20:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015f24:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015f28:	eb07 0a09 	add.w	sl, r7, r9
 8015f2c:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015f30:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015f34:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015f38:	f805 9c05 	strb.w	r9, [r5, #-5]
 8015f3c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015f40:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015f44:	e7da      	b.n	8015efc <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015f46:	2500      	movs	r5, #0
 8015f48:	eba3 0c05 	sub.w	ip, r3, r5
 8015f4c:	f1bc 0f00 	cmp.w	ip, #0
 8015f50:	dc3b      	bgt.n	8015fca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015f52:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f5a:	441c      	add	r4, r3
 8015f5c:	9b00      	ldr	r3, [sp, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	dd5e      	ble.n	8016020 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015f62:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015f66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015f68:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015f6c:	eeb0 6a62 	vmov.f32	s12, s5
 8015f70:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015f74:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015f78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015f7c:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8015f80:	eeb0 6a43 	vmov.f32	s12, s6
 8015f84:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015f88:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8015f8c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015f90:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015f94:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015f98:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015f9c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015fa0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015fa4:	ee12 2a90 	vmov	r2, s5
 8015fa8:	eef0 2a47 	vmov.f32	s5, s14
 8015fac:	fb92 f8f3 	sdiv	r8, r2, r3
 8015fb0:	ee13 2a10 	vmov	r2, s6
 8015fb4:	eeb0 3a67 	vmov.f32	s6, s15
 8015fb8:	fb92 fef3 	sdiv	lr, r2, r3
 8015fbc:	9b00      	ldr	r3, [sp, #0]
 8015fbe:	3b01      	subs	r3, #1
 8015fc0:	9300      	str	r3, [sp, #0]
 8015fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fc4:	bf08      	it	eq
 8015fc6:	465b      	moveq	r3, fp
 8015fc8:	e767      	b.n	8015e9a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015fca:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015fce:	d423      	bmi.n	8016018 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015fd0:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015fd4:	45cc      	cmp	ip, r9
 8015fd6:	dd1f      	ble.n	8016018 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015fd8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015fdc:	d41c      	bmi.n	8016018 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015fde:	68f1      	ldr	r1, [r6, #12]
 8015fe0:	4551      	cmp	r1, sl
 8015fe2:	dd19      	ble.n	8016018 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015fe4:	fa0f fc8c 	sxth.w	ip, ip
 8015fe8:	9901      	ldr	r1, [sp, #4]
 8015fea:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8015fee:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015ff2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015ff6:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8015ffa:	eb07 090c 	add.w	r9, r7, ip
 8015ffe:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8016002:	f804 a00c 	strb.w	sl, [r4, ip]
 8016006:	44a4      	add	ip, r4
 8016008:	f899 a001 	ldrb.w	sl, [r9, #1]
 801600c:	f88c a001 	strb.w	sl, [ip, #1]
 8016010:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016014:	f88c 9002 	strb.w	r9, [ip, #2]
 8016018:	4440      	add	r0, r8
 801601a:	4472      	add	r2, lr
 801601c:	3501      	adds	r5, #1
 801601e:	e793      	b.n	8015f48 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8016020:	b003      	add	sp, #12
 8016022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016026 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016026:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801602a:	b085      	sub	sp, #20
 801602c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016030:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016032:	9202      	str	r2, [sp, #8]
 8016034:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8016038:	6860      	ldr	r0, [r4, #4]
 801603a:	9203      	str	r2, [sp, #12]
 801603c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016040:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8016044:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 8016048:	fb00 2505 	mla	r5, r0, r5, r2
 801604c:	6822      	ldr	r2, [r4, #0]
 801604e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016052:	4415      	add	r5, r2
 8016054:	f8dc 2000 	ldr.w	r2, [ip]
 8016058:	9200      	str	r2, [sp, #0]
 801605a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801605e:	3204      	adds	r2, #4
 8016060:	9201      	str	r2, [sp, #4]
 8016062:	2900      	cmp	r1, #0
 8016064:	dc03      	bgt.n	801606e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016066:	9a02      	ldr	r2, [sp, #8]
 8016068:	2a00      	cmp	r2, #0
 801606a:	f340 8127 	ble.w	80162bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801606e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016070:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016074:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016078:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801607a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801607e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016082:	2b00      	cmp	r3, #0
 8016084:	dd0d      	ble.n	80160a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016086:	1422      	asrs	r2, r4, #16
 8016088:	d405      	bmi.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801608a:	4542      	cmp	r2, r8
 801608c:	da03      	bge.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801608e:	1402      	asrs	r2, r0, #16
 8016090:	d401      	bmi.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016092:	42ba      	cmp	r2, r7
 8016094:	db06      	blt.n	80160a4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016098:	4474      	add	r4, lr
 801609a:	3b01      	subs	r3, #1
 801609c:	3503      	adds	r5, #3
 801609e:	4410      	add	r0, r2
 80160a0:	e7ef      	b.n	8016082 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80160a2:	d075      	beq.n	8016190 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80160a4:	1e5a      	subs	r2, r3, #1
 80160a6:	fb0e 4602 	mla	r6, lr, r2, r4
 80160aa:	1436      	asrs	r6, r6, #16
 80160ac:	d465      	bmi.n	801617a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80160ae:	4546      	cmp	r6, r8
 80160b0:	da63      	bge.n	801617a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80160b2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80160b4:	fb06 0202 	mla	r2, r6, r2, r0
 80160b8:	1412      	asrs	r2, r2, #16
 80160ba:	d45e      	bmi.n	801617a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80160bc:	42ba      	cmp	r2, r7
 80160be:	da5c      	bge.n	801617a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80160c0:	1cef      	adds	r7, r5, #3
 80160c2:	4699      	mov	r9, r3
 80160c4:	f1b9 0f00 	cmp.w	r9, #0
 80160c8:	dd5d      	ble.n	8016186 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 80160ca:	1402      	asrs	r2, r0, #16
 80160cc:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80160d0:	1426      	asrs	r6, r4, #16
 80160d2:	4692      	mov	sl, r2
 80160d4:	9a00      	ldr	r2, [sp, #0]
 80160d6:	fb08 220a 	mla	r2, r8, sl, r2
 80160da:	5d92      	ldrb	r2, [r2, r6]
 80160dc:	9e01      	ldr	r6, [sp, #4]
 80160de:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80160e2:	ea5f 6816 	movs.w	r8, r6, lsr #24
 80160e6:	d041      	beq.n	801616c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80160e8:	9a03      	ldr	r2, [sp, #12]
 80160ea:	fa5f fb86 	uxtb.w	fp, r6
 80160ee:	fb02 f808 	mul.w	r8, r2, r8
 80160f2:	f108 0201 	add.w	r2, r8, #1
 80160f6:	eb02 2228 	add.w	r2, r2, r8, asr #8
 80160fa:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 80160fe:	1212      	asrs	r2, r2, #8
 8016100:	fa1f fa82 	uxth.w	sl, r2
 8016104:	43d2      	mvns	r2, r2
 8016106:	fb1b fb0a 	smulbb	fp, fp, sl
 801610a:	b2d2      	uxtb	r2, r2
 801610c:	fb08 b802 	mla	r8, r8, r2, fp
 8016110:	fa1f f888 	uxth.w	r8, r8
 8016114:	f108 0b01 	add.w	fp, r8, #1
 8016118:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801611c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016120:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016124:	fb1b fb0a 	smulbb	fp, fp, sl
 8016128:	ea4f 2828 	mov.w	r8, r8, asr #8
 801612c:	fb16 fa0a 	smulbb	sl, r6, sl
 8016130:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016134:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016138:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801613c:	fb06 aa02 	mla	sl, r6, r2, sl
 8016140:	fb08 b802 	mla	r8, r8, r2, fp
 8016144:	fa1f fa8a 	uxth.w	sl, sl
 8016148:	fa1f f888 	uxth.w	r8, r8
 801614c:	f10a 0601 	add.w	r6, sl, #1
 8016150:	f108 0b01 	add.w	fp, r8, #1
 8016154:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016158:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801615c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016160:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016164:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016168:	f807 8c02 	strb.w	r8, [r7, #-2]
 801616c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801616e:	4474      	add	r4, lr
 8016170:	3703      	adds	r7, #3
 8016172:	f109 39ff 	add.w	r9, r9, #4294967295
 8016176:	4410      	add	r0, r2
 8016178:	e7a4      	b.n	80160c4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801617a:	f04f 0800 	mov.w	r8, #0
 801617e:	eba3 0208 	sub.w	r2, r3, r8
 8016182:	2a00      	cmp	r2, #0
 8016184:	dc3b      	bgt.n	80161fe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8016186:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801618a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801618e:	441d      	add	r5, r3
 8016190:	2900      	cmp	r1, #0
 8016192:	f340 8093 	ble.w	80162bc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8016196:	ee30 0a04 	vadd.f32	s0, s0, s8
 801619a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801619c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80161a0:	3901      	subs	r1, #1
 80161a2:	eeb0 6a62 	vmov.f32	s12, s5
 80161a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80161aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80161ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80161b2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80161b6:	eeb0 6a43 	vmov.f32	s12, s6
 80161ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80161be:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80161c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80161c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80161ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80161ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80161d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80161d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80161da:	ee12 2a90 	vmov	r2, s5
 80161de:	eef0 2a47 	vmov.f32	s5, s14
 80161e2:	fb92 fef3 	sdiv	lr, r2, r3
 80161e6:	ee13 2a10 	vmov	r2, s6
 80161ea:	eeb0 3a67 	vmov.f32	s6, s15
 80161ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80161f2:	9a02      	ldr	r2, [sp, #8]
 80161f4:	9312      	str	r3, [sp, #72]	; 0x48
 80161f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80161f8:	bf08      	it	eq
 80161fa:	4613      	moveq	r3, r2
 80161fc:	e731      	b.n	8016062 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80161fe:	1427      	asrs	r7, r4, #16
 8016200:	d456      	bmi.n	80162b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016202:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016206:	42be      	cmp	r6, r7
 8016208:	dd52      	ble.n	80162b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801620a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801620e:	d44f      	bmi.n	80162b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016210:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016214:	454a      	cmp	r2, r9
 8016216:	dd4b      	ble.n	80162b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016218:	9a00      	ldr	r2, [sp, #0]
 801621a:	b236      	sxth	r6, r6
 801621c:	fb09 2606 	mla	r6, r9, r6, r2
 8016220:	5df2      	ldrb	r2, [r6, r7]
 8016222:	9e01      	ldr	r6, [sp, #4]
 8016224:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016228:	0e3a      	lsrs	r2, r7, #24
 801622a:	d041      	beq.n	80162b0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801622c:	9e03      	ldr	r6, [sp, #12]
 801622e:	fa5f fb87 	uxtb.w	fp, r7
 8016232:	4372      	muls	r2, r6
 8016234:	1c56      	adds	r6, r2, #1
 8016236:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801623a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801623e:	1212      	asrs	r2, r2, #8
 8016240:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016244:	fa1f fa82 	uxth.w	sl, r2
 8016248:	43d2      	mvns	r2, r2
 801624a:	fb1b fb0a 	smulbb	fp, fp, sl
 801624e:	b2d2      	uxtb	r2, r2
 8016250:	fb09 b902 	mla	r9, r9, r2, fp
 8016254:	fa1f f989 	uxth.w	r9, r9
 8016258:	f109 0b01 	add.w	fp, r9, #1
 801625c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016260:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016264:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016268:	fb1b fb0a 	smulbb	fp, fp, sl
 801626c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016270:	fb17 fa0a 	smulbb	sl, r7, sl
 8016274:	f805 9006 	strb.w	r9, [r5, r6]
 8016278:	442e      	add	r6, r5
 801627a:	78b7      	ldrb	r7, [r6, #2]
 801627c:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016280:	fb07 aa02 	mla	sl, r7, r2, sl
 8016284:	fb09 b902 	mla	r9, r9, r2, fp
 8016288:	fa1f fa8a 	uxth.w	sl, sl
 801628c:	fa1f f989 	uxth.w	r9, r9
 8016290:	f10a 0701 	add.w	r7, sl, #1
 8016294:	f109 0b01 	add.w	fp, r9, #1
 8016298:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801629c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80162a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80162a4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80162a8:	f886 a002 	strb.w	sl, [r6, #2]
 80162ac:	f886 9001 	strb.w	r9, [r6, #1]
 80162b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80162b2:	4474      	add	r4, lr
 80162b4:	f108 0801 	add.w	r8, r8, #1
 80162b8:	4410      	add	r0, r2
 80162ba:	e760      	b.n	801617e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80162bc:	b005      	add	sp, #20
 80162be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162c2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80162c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c6:	b085      	sub	sp, #20
 80162c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80162cc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80162ce:	9203      	str	r2, [sp, #12]
 80162d0:	6868      	ldr	r0, [r5, #4]
 80162d2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80162d6:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80162da:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80162de:	fb00 2404 	mla	r4, r0, r4, r2
 80162e2:	682a      	ldr	r2, [r5, #0]
 80162e4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80162e8:	4414      	add	r4, r2
 80162ea:	f8dc 2000 	ldr.w	r2, [ip]
 80162ee:	9201      	str	r2, [sp, #4]
 80162f0:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80162f4:	3204      	adds	r2, #4
 80162f6:	9202      	str	r2, [sp, #8]
 80162f8:	2900      	cmp	r1, #0
 80162fa:	dc03      	bgt.n	8016304 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80162fc:	9a03      	ldr	r2, [sp, #12]
 80162fe:	2a00      	cmp	r2, #0
 8016300:	f340 8137 	ble.w	8016572 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016304:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016306:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801630a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801630e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016310:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016314:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016318:	2b00      	cmp	r3, #0
 801631a:	dd0d      	ble.n	8016338 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801631c:	1405      	asrs	r5, r0, #16
 801631e:	d405      	bmi.n	801632c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016320:	4545      	cmp	r5, r8
 8016322:	da03      	bge.n	801632c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016324:	1415      	asrs	r5, r2, #16
 8016326:	d401      	bmi.n	801632c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016328:	42bd      	cmp	r5, r7
 801632a:	db06      	blt.n	801633a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801632c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801632e:	4470      	add	r0, lr
 8016330:	3b01      	subs	r3, #1
 8016332:	3403      	adds	r4, #3
 8016334:	442a      	add	r2, r5
 8016336:	e7ef      	b.n	8016318 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8016338:	d070      	beq.n	801641c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801633a:	1e5d      	subs	r5, r3, #1
 801633c:	fb0e 0605 	mla	r6, lr, r5, r0
 8016340:	1436      	asrs	r6, r6, #16
 8016342:	d462      	bmi.n	801640a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016344:	4546      	cmp	r6, r8
 8016346:	da60      	bge.n	801640a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016348:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801634a:	fb06 2505 	mla	r5, r6, r5, r2
 801634e:	142d      	asrs	r5, r5, #16
 8016350:	d45b      	bmi.n	801640a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016352:	42bd      	cmp	r5, r7
 8016354:	da59      	bge.n	801640a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016356:	1ce5      	adds	r5, r4, #3
 8016358:	469a      	mov	sl, r3
 801635a:	f1ba 0f00 	cmp.w	sl, #0
 801635e:	dd58      	ble.n	8016412 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8016360:	1416      	asrs	r6, r2, #16
 8016362:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016366:	1407      	asrs	r7, r0, #16
 8016368:	46b1      	mov	r9, r6
 801636a:	9e01      	ldr	r6, [sp, #4]
 801636c:	fb08 6609 	mla	r6, r8, r9, r6
 8016370:	5df6      	ldrb	r6, [r6, r7]
 8016372:	9f02      	ldr	r7, [sp, #8]
 8016374:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8016378:	0e37      	lsrs	r7, r6, #24
 801637a:	2fff      	cmp	r7, #255	; 0xff
 801637c:	f000 80f0 	beq.w	8016560 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8016380:	fa5f f887 	uxtb.w	r8, r7
 8016384:	b3d7      	cbz	r7, 80163fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016386:	fa1f f788 	uxth.w	r7, r8
 801638a:	ea6f 0808 	mvn.w	r8, r8
 801638e:	fa5f fb86 	uxtb.w	fp, r6
 8016392:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 8016396:	fa5f f888 	uxtb.w	r8, r8
 801639a:	fb1b fb07 	smulbb	fp, fp, r7
 801639e:	fb09 b908 	mla	r9, r9, r8, fp
 80163a2:	fa1f f989 	uxth.w	r9, r9
 80163a6:	f109 0b01 	add.w	fp, r9, #1
 80163aa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80163ae:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80163b2:	fb1b fb08 	smulbb	fp, fp, r8
 80163b6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80163ba:	f805 9c03 	strb.w	r9, [r5, #-3]
 80163be:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80163c2:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80163c6:	fb09 b907 	mla	r9, r9, r7, fp
 80163ca:	fa1f f989 	uxth.w	r9, r9
 80163ce:	f109 0b01 	add.w	fp, r9, #1
 80163d2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80163d6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80163da:	f805 9c02 	strb.w	r9, [r5, #-2]
 80163de:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80163e2:	fb19 f808 	smulbb	r8, r9, r8
 80163e6:	fb06 8607 	mla	r6, r6, r7, r8
 80163ea:	b2b6      	uxth	r6, r6
 80163ec:	f106 0801 	add.w	r8, r6, #1
 80163f0:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80163f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80163f8:	f805 8c01 	strb.w	r8, [r5, #-1]
 80163fc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80163fe:	4470      	add	r0, lr
 8016400:	3503      	adds	r5, #3
 8016402:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016406:	4432      	add	r2, r6
 8016408:	e7a7      	b.n	801635a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801640a:	2600      	movs	r6, #0
 801640c:	1b9d      	subs	r5, r3, r6
 801640e:	2d00      	cmp	r5, #0
 8016410:	dc3b      	bgt.n	801648a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016412:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801641a:	441c      	add	r4, r3
 801641c:	2900      	cmp	r1, #0
 801641e:	f340 80a8 	ble.w	8016572 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016422:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016428:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801642c:	3901      	subs	r1, #1
 801642e:	eeb0 6a62 	vmov.f32	s12, s5
 8016432:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016436:	ee31 1a05 	vadd.f32	s2, s2, s10
 801643a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801643e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016442:	eeb0 6a43 	vmov.f32	s12, s6
 8016446:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801644a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801644e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016452:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016456:	ee77 2a62 	vsub.f32	s5, s14, s5
 801645a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801645e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016462:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016466:	ee12 2a90 	vmov	r2, s5
 801646a:	eef0 2a47 	vmov.f32	s5, s14
 801646e:	fb92 fef3 	sdiv	lr, r2, r3
 8016472:	ee13 2a10 	vmov	r2, s6
 8016476:	eeb0 3a67 	vmov.f32	s6, s15
 801647a:	fb92 f3f3 	sdiv	r3, r2, r3
 801647e:	9a03      	ldr	r2, [sp, #12]
 8016480:	9312      	str	r3, [sp, #72]	; 0x48
 8016482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016484:	bf08      	it	eq
 8016486:	4613      	moveq	r3, r2
 8016488:	e736      	b.n	80162f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801648a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801648e:	d457      	bmi.n	8016540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016490:	f8dc 7008 	ldr.w	r7, [ip, #8]
 8016494:	4547      	cmp	r7, r8
 8016496:	dd53      	ble.n	8016540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016498:	ea5f 4922 	movs.w	r9, r2, asr #16
 801649c:	d450      	bmi.n	8016540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801649e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80164a2:	454d      	cmp	r5, r9
 80164a4:	dd4c      	ble.n	8016540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80164a6:	9d01      	ldr	r5, [sp, #4]
 80164a8:	b23f      	sxth	r7, r7
 80164aa:	fb09 5707 	mla	r7, r9, r7, r5
 80164ae:	f817 5008 	ldrb.w	r5, [r7, r8]
 80164b2:	9f02      	ldr	r7, [sp, #8]
 80164b4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80164b8:	0e2f      	lsrs	r7, r5, #24
 80164ba:	2fff      	cmp	r7, #255	; 0xff
 80164bc:	d045      	beq.n	801654a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80164be:	fa5f f987 	uxtb.w	r9, r7
 80164c2:	b3ef      	cbz	r7, 8016540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80164c4:	fa1f f889 	uxth.w	r8, r9
 80164c8:	ea6f 0909 	mvn.w	r9, r9
 80164cc:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80164d0:	fa5f fb85 	uxtb.w	fp, r5
 80164d4:	f814 a007 	ldrb.w	sl, [r4, r7]
 80164d8:	fa5f f989 	uxtb.w	r9, r9
 80164dc:	fb1b fb08 	smulbb	fp, fp, r8
 80164e0:	fb0a ba09 	mla	sl, sl, r9, fp
 80164e4:	fa1f fa8a 	uxth.w	sl, sl
 80164e8:	f10a 0b01 	add.w	fp, sl, #1
 80164ec:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80164f0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80164f4:	f804 a007 	strb.w	sl, [r4, r7]
 80164f8:	4427      	add	r7, r4
 80164fa:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80164fe:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8016502:	f897 b001 	ldrb.w	fp, [r7, #1]
 8016506:	fb1b fb09 	smulbb	fp, fp, r9
 801650a:	fb0a ba08 	mla	sl, sl, r8, fp
 801650e:	fa1f fa8a 	uxth.w	sl, sl
 8016512:	f10a 0b01 	add.w	fp, sl, #1
 8016516:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801651a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801651e:	f887 a001 	strb.w	sl, [r7, #1]
 8016522:	f897 a002 	ldrb.w	sl, [r7, #2]
 8016526:	fb1a f909 	smulbb	r9, sl, r9
 801652a:	fb05 9508 	mla	r5, r5, r8, r9
 801652e:	b2ad      	uxth	r5, r5
 8016530:	f105 0901 	add.w	r9, r5, #1
 8016534:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8016538:	ea4f 2929 	mov.w	r9, r9, asr #8
 801653c:	f887 9002 	strb.w	r9, [r7, #2]
 8016540:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8016542:	4470      	add	r0, lr
 8016544:	3601      	adds	r6, #1
 8016546:	442a      	add	r2, r5
 8016548:	e760      	b.n	801640c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801654a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801654e:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8016552:	55e5      	strb	r5, [r4, r7]
 8016554:	4427      	add	r7, r4
 8016556:	0c2d      	lsrs	r5, r5, #16
 8016558:	f887 8001 	strb.w	r8, [r7, #1]
 801655c:	70bd      	strb	r5, [r7, #2]
 801655e:	e7ef      	b.n	8016540 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016560:	0a37      	lsrs	r7, r6, #8
 8016562:	f805 6c03 	strb.w	r6, [r5, #-3]
 8016566:	0c36      	lsrs	r6, r6, #16
 8016568:	f805 7c02 	strb.w	r7, [r5, #-2]
 801656c:	f805 6c01 	strb.w	r6, [r5, #-1]
 8016570:	e744      	b.n	80163fc <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016572:	b005      	add	sp, #20
 8016574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016578 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801657c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801657e:	9201      	str	r2, [sp, #4]
 8016580:	6870      	ldr	r0, [r6, #4]
 8016582:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8016586:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 801658a:	fa1f fe85 	uxth.w	lr, r5
 801658e:	43ed      	mvns	r5, r5
 8016590:	f8dc 8000 	ldr.w	r8, [ip]
 8016594:	b2ed      	uxtb	r5, r5
 8016596:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801659a:	fb00 2404 	mla	r4, r0, r4, r2
 801659e:	6832      	ldr	r2, [r6, #0]
 80165a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80165a4:	4414      	add	r4, r2
 80165a6:	2900      	cmp	r1, #0
 80165a8:	dc03      	bgt.n	80165b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80165aa:	9a01      	ldr	r2, [sp, #4]
 80165ac:	2a00      	cmp	r2, #0
 80165ae:	f340 810d 	ble.w	80167cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80165b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80165b4:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80165b8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80165bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80165be:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80165c2:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	dd0e      	ble.n	80165e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80165ca:	1406      	asrs	r6, r0, #16
 80165cc:	d405      	bmi.n	80165da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80165ce:	4556      	cmp	r6, sl
 80165d0:	da03      	bge.n	80165da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80165d2:	1416      	asrs	r6, r2, #16
 80165d4:	d401      	bmi.n	80165da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80165d6:	454e      	cmp	r6, r9
 80165d8:	db07      	blt.n	80165ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80165da:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80165dc:	3b01      	subs	r3, #1
 80165de:	3403      	adds	r4, #3
 80165e0:	4430      	add	r0, r6
 80165e2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80165e4:	4432      	add	r2, r6
 80165e6:	e7ee      	b.n	80165c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80165e8:	d060      	beq.n	80166ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80165ea:	1e5e      	subs	r6, r3, #1
 80165ec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80165ee:	fb07 0706 	mla	r7, r7, r6, r0
 80165f2:	143f      	asrs	r7, r7, #16
 80165f4:	d451      	bmi.n	801669a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80165f6:	4557      	cmp	r7, sl
 80165f8:	da4f      	bge.n	801669a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80165fa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80165fc:	fb07 2606 	mla	r6, r7, r6, r2
 8016600:	1436      	asrs	r6, r6, #16
 8016602:	d44a      	bmi.n	801669a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016604:	454e      	cmp	r6, r9
 8016606:	da48      	bge.n	801669a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8016608:	1ce6      	adds	r6, r4, #3
 801660a:	4699      	mov	r9, r3
 801660c:	f1b9 0f00 	cmp.w	r9, #0
 8016610:	f106 0603 	add.w	r6, r6, #3
 8016614:	dd45      	ble.n	80166a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8016616:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801661a:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801661e:	1417      	asrs	r7, r2, #16
 8016620:	f109 39ff 	add.w	r9, r9, #4294967295
 8016624:	fb0b a707 	mla	r7, fp, r7, sl
 8016628:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801662c:	fb1b fb05 	smulbb	fp, fp, r5
 8016630:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8016634:	eb08 0a07 	add.w	sl, r8, r7
 8016638:	f818 7007 	ldrb.w	r7, [r8, r7]
 801663c:	fb07 b70e 	mla	r7, r7, lr, fp
 8016640:	b2bf      	uxth	r7, r7
 8016642:	f107 0b01 	add.w	fp, r7, #1
 8016646:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801664a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801664e:	fb1b fb05 	smulbb	fp, fp, r5
 8016652:	123f      	asrs	r7, r7, #8
 8016654:	f806 7c06 	strb.w	r7, [r6, #-6]
 8016658:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801665c:	fb07 b70e 	mla	r7, r7, lr, fp
 8016660:	b2bf      	uxth	r7, r7
 8016662:	f107 0b01 	add.w	fp, r7, #1
 8016666:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801666a:	123f      	asrs	r7, r7, #8
 801666c:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016670:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016674:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016678:	fb1a fa05 	smulbb	sl, sl, r5
 801667c:	fb07 a70e 	mla	r7, r7, lr, sl
 8016680:	b2bf      	uxth	r7, r7
 8016682:	f107 0a01 	add.w	sl, r7, #1
 8016686:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801668a:	123f      	asrs	r7, r7, #8
 801668c:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016690:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8016692:	4438      	add	r0, r7
 8016694:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016696:	443a      	add	r2, r7
 8016698:	e7b8      	b.n	801660c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801669a:	2700      	movs	r7, #0
 801669c:	1bde      	subs	r6, r3, r7
 801669e:	2e00      	cmp	r6, #0
 80166a0:	dc3f      	bgt.n	8016722 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80166a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80166a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80166aa:	441c      	add	r4, r3
 80166ac:	2900      	cmp	r1, #0
 80166ae:	f340 808d 	ble.w	80167cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80166b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80166b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80166bc:	3901      	subs	r1, #1
 80166be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80166c2:	eef0 6a62 	vmov.f32	s13, s5
 80166c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80166ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 80166ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80166d2:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
 80166d6:	eef0 6a43 	vmov.f32	s13, s6
 80166da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80166de:	edcd 6a0e 	vstr	s13, [sp, #56]	; 0x38
 80166e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80166e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80166ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 80166ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80166f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80166f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80166fa:	ee12 2a90 	vmov	r2, s5
 80166fe:	eef0 2a47 	vmov.f32	s5, s14
 8016702:	fb92 f3f3 	sdiv	r3, r2, r3
 8016706:	ee13 2a10 	vmov	r2, s6
 801670a:	930f      	str	r3, [sp, #60]	; 0x3c
 801670c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801670e:	eeb0 3a67 	vmov.f32	s6, s15
 8016712:	fb92 f3f3 	sdiv	r3, r2, r3
 8016716:	9a01      	ldr	r2, [sp, #4]
 8016718:	9310      	str	r3, [sp, #64]	; 0x40
 801671a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801671c:	bf08      	it	eq
 801671e:	4613      	moveq	r3, r2
 8016720:	e741      	b.n	80165a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016722:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016726:	d44b      	bmi.n	80167c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016728:	f8dc b008 	ldr.w	fp, [ip, #8]
 801672c:	45cb      	cmp	fp, r9
 801672e:	dd47      	ble.n	80167c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016730:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016734:	d444      	bmi.n	80167c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016736:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801673a:	4556      	cmp	r6, sl
 801673c:	dd40      	ble.n	80167c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801673e:	fa0f f68b 	sxth.w	r6, fp
 8016742:	fb0a 9906 	mla	r9, sl, r6, r9
 8016746:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801674a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801674e:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016752:	fb1b fb05 	smulbb	fp, fp, r5
 8016756:	eb08 0a09 	add.w	sl, r8, r9
 801675a:	f818 9009 	ldrb.w	r9, [r8, r9]
 801675e:	fb09 b90e 	mla	r9, r9, lr, fp
 8016762:	fa1f f989 	uxth.w	r9, r9
 8016766:	f109 0b01 	add.w	fp, r9, #1
 801676a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801676e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016772:	f804 9006 	strb.w	r9, [r4, r6]
 8016776:	4426      	add	r6, r4
 8016778:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801677c:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016780:	fb1b fb05 	smulbb	fp, fp, r5
 8016784:	fb09 b90e 	mla	r9, r9, lr, fp
 8016788:	fa1f f989 	uxth.w	r9, r9
 801678c:	f109 0b01 	add.w	fp, r9, #1
 8016790:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016794:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016798:	f886 9001 	strb.w	r9, [r6, #1]
 801679c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80167a0:	f896 a002 	ldrb.w	sl, [r6, #2]
 80167a4:	fb1a fa05 	smulbb	sl, sl, r5
 80167a8:	fb09 a90e 	mla	r9, r9, lr, sl
 80167ac:	fa1f f989 	uxth.w	r9, r9
 80167b0:	f109 0a01 	add.w	sl, r9, #1
 80167b4:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80167b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 80167bc:	f886 9002 	strb.w	r9, [r6, #2]
 80167c0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80167c2:	3701      	adds	r7, #1
 80167c4:	4430      	add	r0, r6
 80167c6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80167c8:	4432      	add	r2, r6
 80167ca:	e767      	b.n	801669c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80167cc:	b003      	add	sp, #12
 80167ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080167d2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80167d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167d6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80167d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80167dc:	9201      	str	r2, [sp, #4]
 80167de:	6868      	ldr	r0, [r5, #4]
 80167e0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80167e2:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80167e6:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80167ea:	fb00 2404 	mla	r4, r0, r4, r2
 80167ee:	682a      	ldr	r2, [r5, #0]
 80167f0:	f8d7 8000 	ldr.w	r8, [r7]
 80167f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80167f8:	4414      	add	r4, r2
 80167fa:	2900      	cmp	r1, #0
 80167fc:	dc03      	bgt.n	8016806 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80167fe:	9a01      	ldr	r2, [sp, #4]
 8016800:	2a00      	cmp	r2, #0
 8016802:	f340 80af 	ble.w	8016964 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016806:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016808:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801680c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016810:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016812:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8016816:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801681a:	2b00      	cmp	r3, #0
 801681c:	dd0c      	ble.n	8016838 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801681e:	1405      	asrs	r5, r0, #16
 8016820:	d405      	bmi.n	801682e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016822:	4555      	cmp	r5, sl
 8016824:	da03      	bge.n	801682e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016826:	1415      	asrs	r5, r2, #16
 8016828:	d401      	bmi.n	801682e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801682a:	454d      	cmp	r5, r9
 801682c:	db05      	blt.n	801683a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801682e:	4470      	add	r0, lr
 8016830:	4462      	add	r2, ip
 8016832:	3b01      	subs	r3, #1
 8016834:	3403      	adds	r4, #3
 8016836:	e7f0      	b.n	801681a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016838:	d038      	beq.n	80168ac <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801683a:	1e5d      	subs	r5, r3, #1
 801683c:	fb0e 0605 	mla	r6, lr, r5, r0
 8016840:	1436      	asrs	r6, r6, #16
 8016842:	d42a      	bmi.n	801689a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016844:	4556      	cmp	r6, sl
 8016846:	da28      	bge.n	801689a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016848:	fb0c 2505 	mla	r5, ip, r5, r2
 801684c:	142d      	asrs	r5, r5, #16
 801684e:	d424      	bmi.n	801689a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016850:	454d      	cmp	r5, r9
 8016852:	da22      	bge.n	801689a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016854:	1ce6      	adds	r6, r4, #3
 8016856:	4699      	mov	r9, r3
 8016858:	f1b9 0f00 	cmp.w	r9, #0
 801685c:	f106 0603 	add.w	r6, r6, #3
 8016860:	dd1f      	ble.n	80168a2 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8016862:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8016866:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801686a:	1415      	asrs	r5, r2, #16
 801686c:	4470      	add	r0, lr
 801686e:	4462      	add	r2, ip
 8016870:	f109 39ff 	add.w	r9, r9, #4294967295
 8016874:	fb0b a505 	mla	r5, fp, r5, sl
 8016878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801687c:	eb08 0a05 	add.w	sl, r8, r5
 8016880:	f818 5005 	ldrb.w	r5, [r8, r5]
 8016884:	f806 5c06 	strb.w	r5, [r6, #-6]
 8016888:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801688c:	f806 5c05 	strb.w	r5, [r6, #-5]
 8016890:	f89a 5002 	ldrb.w	r5, [sl, #2]
 8016894:	f806 5c04 	strb.w	r5, [r6, #-4]
 8016898:	e7de      	b.n	8016858 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801689a:	2600      	movs	r6, #0
 801689c:	1b9d      	subs	r5, r3, r6
 801689e:	2d00      	cmp	r5, #0
 80168a0:	dc38      	bgt.n	8016914 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80168a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80168a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80168aa:	441c      	add	r4, r3
 80168ac:	2900      	cmp	r1, #0
 80168ae:	dd59      	ble.n	8016964 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80168b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80168b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80168ba:	3901      	subs	r1, #1
 80168bc:	eeb0 6a62 	vmov.f32	s12, s5
 80168c0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80168c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80168c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168cc:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80168d0:	eeb0 6a43 	vmov.f32	s12, s6
 80168d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168d8:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80168dc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80168e0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80168e4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80168e8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80168ec:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80168f0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80168f4:	ee12 2a90 	vmov	r2, s5
 80168f8:	eef0 2a47 	vmov.f32	s5, s14
 80168fc:	fb92 fef3 	sdiv	lr, r2, r3
 8016900:	ee13 2a10 	vmov	r2, s6
 8016904:	eeb0 3a67 	vmov.f32	s6, s15
 8016908:	fb92 fcf3 	sdiv	ip, r2, r3
 801690c:	9a01      	ldr	r2, [sp, #4]
 801690e:	bf08      	it	eq
 8016910:	4613      	moveq	r3, r2
 8016912:	e772      	b.n	80167fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016914:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016918:	d420      	bmi.n	801695c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801691a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801691e:	45cb      	cmp	fp, r9
 8016920:	dd1c      	ble.n	801695c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016922:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016926:	d419      	bmi.n	801695c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016928:	68fd      	ldr	r5, [r7, #12]
 801692a:	4555      	cmp	r5, sl
 801692c:	dd16      	ble.n	801695c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801692e:	fa0f f58b 	sxth.w	r5, fp
 8016932:	fb0a 9505 	mla	r5, sl, r5, r9
 8016936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801693a:	f818 9005 	ldrb.w	r9, [r8, r5]
 801693e:	eb08 0b05 	add.w	fp, r8, r5
 8016942:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8016946:	f804 9005 	strb.w	r9, [r4, r5]
 801694a:	4425      	add	r5, r4
 801694c:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016950:	f885 9001 	strb.w	r9, [r5, #1]
 8016954:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016958:	f885 9002 	strb.w	r9, [r5, #2]
 801695c:	4470      	add	r0, lr
 801695e:	4462      	add	r2, ip
 8016960:	3601      	adds	r6, #1
 8016962:	e79b      	b.n	801689c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8016964:	b003      	add	sp, #12
 8016966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801696a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801696a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801696e:	b085      	sub	sp, #20
 8016970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016974:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8016976:	9202      	str	r2, [sp, #8]
 8016978:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801697c:	6860      	ldr	r0, [r4, #4]
 801697e:	9203      	str	r2, [sp, #12]
 8016980:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8016984:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8016988:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801698c:	fb00 2505 	mla	r5, r0, r5, r2
 8016990:	6822      	ldr	r2, [r4, #0]
 8016992:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016996:	4415      	add	r5, r2
 8016998:	f8dc 2000 	ldr.w	r2, [ip]
 801699c:	9201      	str	r2, [sp, #4]
 801699e:	2900      	cmp	r1, #0
 80169a0:	dc03      	bgt.n	80169aa <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80169a2:	9a02      	ldr	r2, [sp, #8]
 80169a4:	2a00      	cmp	r2, #0
 80169a6:	f340 8122 	ble.w	8016bee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80169aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169ac:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80169b0:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80169b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80169b6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80169ba:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80169be:	2b00      	cmp	r3, #0
 80169c0:	dd0d      	ble.n	80169de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80169c2:	1422      	asrs	r2, r4, #16
 80169c4:	d405      	bmi.n	80169d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80169c6:	4542      	cmp	r2, r8
 80169c8:	da03      	bge.n	80169d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80169ca:	1402      	asrs	r2, r0, #16
 80169cc:	d401      	bmi.n	80169d2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80169ce:	42ba      	cmp	r2, r7
 80169d0:	db06      	blt.n	80169e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80169d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80169d4:	4474      	add	r4, lr
 80169d6:	3b01      	subs	r3, #1
 80169d8:	3503      	adds	r5, #3
 80169da:	4410      	add	r0, r2
 80169dc:	e7ef      	b.n	80169be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80169de:	d072      	beq.n	8016ac6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80169e0:	1e5a      	subs	r2, r3, #1
 80169e2:	fb0e 4602 	mla	r6, lr, r2, r4
 80169e6:	1436      	asrs	r6, r6, #16
 80169e8:	d462      	bmi.n	8016ab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80169ea:	4546      	cmp	r6, r8
 80169ec:	da60      	bge.n	8016ab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80169ee:	9e12      	ldr	r6, [sp, #72]	; 0x48
 80169f0:	fb06 0202 	mla	r2, r6, r2, r0
 80169f4:	1412      	asrs	r2, r2, #16
 80169f6:	d45b      	bmi.n	8016ab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80169f8:	42ba      	cmp	r2, r7
 80169fa:	da59      	bge.n	8016ab0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80169fc:	1cef      	adds	r7, r5, #3
 80169fe:	4699      	mov	r9, r3
 8016a00:	f1b9 0f00 	cmp.w	r9, #0
 8016a04:	dd5a      	ble.n	8016abc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016a06:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016a0a:	1426      	asrs	r6, r4, #16
 8016a0c:	1402      	asrs	r2, r0, #16
 8016a0e:	fb08 6202 	mla	r2, r8, r2, r6
 8016a12:	9e01      	ldr	r6, [sp, #4]
 8016a14:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016a18:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016a1c:	d041      	beq.n	8016aa2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016a1e:	9a03      	ldr	r2, [sp, #12]
 8016a20:	fa5f fb86 	uxtb.w	fp, r6
 8016a24:	fb02 f808 	mul.w	r8, r2, r8
 8016a28:	f108 0201 	add.w	r2, r8, #1
 8016a2c:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016a30:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016a34:	1212      	asrs	r2, r2, #8
 8016a36:	fa1f fa82 	uxth.w	sl, r2
 8016a3a:	43d2      	mvns	r2, r2
 8016a3c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016a40:	b2d2      	uxtb	r2, r2
 8016a42:	fb08 b802 	mla	r8, r8, r2, fp
 8016a46:	fa1f f888 	uxth.w	r8, r8
 8016a4a:	f108 0b01 	add.w	fp, r8, #1
 8016a4e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016a52:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016a56:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016a5a:	fb1b fb0a 	smulbb	fp, fp, sl
 8016a5e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016a62:	fb16 fa0a 	smulbb	sl, r6, sl
 8016a66:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016a6a:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016a6e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016a72:	fb06 aa02 	mla	sl, r6, r2, sl
 8016a76:	fb08 b802 	mla	r8, r8, r2, fp
 8016a7a:	fa1f fa8a 	uxth.w	sl, sl
 8016a7e:	fa1f f888 	uxth.w	r8, r8
 8016a82:	f10a 0601 	add.w	r6, sl, #1
 8016a86:	f108 0b01 	add.w	fp, r8, #1
 8016a8a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016a8e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016a92:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016a96:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016a9a:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016a9e:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016aa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016aa4:	4474      	add	r4, lr
 8016aa6:	3703      	adds	r7, #3
 8016aa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8016aac:	4410      	add	r0, r2
 8016aae:	e7a7      	b.n	8016a00 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016ab0:	f04f 0800 	mov.w	r8, #0
 8016ab4:	eba3 0208 	sub.w	r2, r3, r8
 8016ab8:	2a00      	cmp	r2, #0
 8016aba:	dc3b      	bgt.n	8016b34 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8016abc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ac0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016ac4:	441d      	add	r5, r3
 8016ac6:	2900      	cmp	r1, #0
 8016ac8:	f340 8091 	ble.w	8016bee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016acc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016ad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016ad2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016ad6:	3901      	subs	r1, #1
 8016ad8:	eeb0 6a62 	vmov.f32	s12, s5
 8016adc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016ae0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016ae4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016ae8:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016aec:	eeb0 6a43 	vmov.f32	s12, s6
 8016af0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016af4:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016af8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016afc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b00:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b04:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b08:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b0c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b10:	ee12 2a90 	vmov	r2, s5
 8016b14:	eef0 2a47 	vmov.f32	s5, s14
 8016b18:	fb92 fef3 	sdiv	lr, r2, r3
 8016b1c:	ee13 2a10 	vmov	r2, s6
 8016b20:	eeb0 3a67 	vmov.f32	s6, s15
 8016b24:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b28:	9a02      	ldr	r2, [sp, #8]
 8016b2a:	9312      	str	r3, [sp, #72]	; 0x48
 8016b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016b2e:	bf08      	it	eq
 8016b30:	4613      	moveq	r3, r2
 8016b32:	e734      	b.n	801699e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016b34:	1427      	asrs	r7, r4, #16
 8016b36:	d454      	bmi.n	8016be2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016b38:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016b3c:	42be      	cmp	r6, r7
 8016b3e:	dd50      	ble.n	8016be2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016b40:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016b44:	d44d      	bmi.n	8016be2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016b46:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016b4a:	454a      	cmp	r2, r9
 8016b4c:	dd49      	ble.n	8016be2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016b4e:	b236      	sxth	r6, r6
 8016b50:	9a01      	ldr	r2, [sp, #4]
 8016b52:	fb09 7606 	mla	r6, r9, r6, r7
 8016b56:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016b5a:	0e3a      	lsrs	r2, r7, #24
 8016b5c:	d041      	beq.n	8016be2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016b5e:	9e03      	ldr	r6, [sp, #12]
 8016b60:	fa5f fb87 	uxtb.w	fp, r7
 8016b64:	4372      	muls	r2, r6
 8016b66:	1c56      	adds	r6, r2, #1
 8016b68:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016b6c:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016b70:	1212      	asrs	r2, r2, #8
 8016b72:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016b76:	fa1f fa82 	uxth.w	sl, r2
 8016b7a:	43d2      	mvns	r2, r2
 8016b7c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016b80:	b2d2      	uxtb	r2, r2
 8016b82:	fb09 b902 	mla	r9, r9, r2, fp
 8016b86:	fa1f f989 	uxth.w	r9, r9
 8016b8a:	f109 0b01 	add.w	fp, r9, #1
 8016b8e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016b92:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016b96:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016b9a:	fb1b fb0a 	smulbb	fp, fp, sl
 8016b9e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ba2:	fb17 fa0a 	smulbb	sl, r7, sl
 8016ba6:	f805 9006 	strb.w	r9, [r5, r6]
 8016baa:	442e      	add	r6, r5
 8016bac:	78b7      	ldrb	r7, [r6, #2]
 8016bae:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016bb2:	fb07 aa02 	mla	sl, r7, r2, sl
 8016bb6:	fb09 b902 	mla	r9, r9, r2, fp
 8016bba:	fa1f fa8a 	uxth.w	sl, sl
 8016bbe:	fa1f f989 	uxth.w	r9, r9
 8016bc2:	f10a 0701 	add.w	r7, sl, #1
 8016bc6:	f109 0b01 	add.w	fp, r9, #1
 8016bca:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016bce:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016bd2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016bd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016bda:	f886 a002 	strb.w	sl, [r6, #2]
 8016bde:	f886 9001 	strb.w	r9, [r6, #1]
 8016be2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016be4:	4474      	add	r4, lr
 8016be6:	f108 0801 	add.w	r8, r8, #1
 8016bea:	4410      	add	r0, r2
 8016bec:	e762      	b.n	8016ab4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016bee:	b005      	add	sp, #20
 8016bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bf4 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bf8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8016bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016bfe:	9201      	str	r2, [sp, #4]
 8016c00:	6860      	ldr	r0, [r4, #4]
 8016c02:	f8dd c050 	ldr.w	ip, [sp, #80]	; 0x50
 8016c06:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 8016c0a:	fb00 2505 	mla	r5, r0, r5, r2
 8016c0e:	6822      	ldr	r2, [r4, #0]
 8016c10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c14:	4415      	add	r5, r2
 8016c16:	f8dc 2000 	ldr.w	r2, [ip]
 8016c1a:	9200      	str	r2, [sp, #0]
 8016c1c:	2900      	cmp	r1, #0
 8016c1e:	dc03      	bgt.n	8016c28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016c20:	9a01      	ldr	r2, [sp, #4]
 8016c22:	2a00      	cmp	r2, #0
 8016c24:	f340 812b 	ble.w	8016e7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016c28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c2a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016c2e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016c34:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016c38:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	dd0e      	ble.n	8016c5e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016c40:	1422      	asrs	r2, r4, #16
 8016c42:	d405      	bmi.n	8016c50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016c44:	4572      	cmp	r2, lr
 8016c46:	da03      	bge.n	8016c50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016c48:	1402      	asrs	r2, r0, #16
 8016c4a:	d401      	bmi.n	8016c50 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016c4c:	42ba      	cmp	r2, r7
 8016c4e:	db07      	blt.n	8016c60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016c50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016c52:	3b01      	subs	r3, #1
 8016c54:	3503      	adds	r5, #3
 8016c56:	4414      	add	r4, r2
 8016c58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016c5a:	4410      	add	r0, r2
 8016c5c:	e7ee      	b.n	8016c3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016c5e:	d06f      	beq.n	8016d40 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016c60:	1e5a      	subs	r2, r3, #1
 8016c62:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8016c64:	fb06 4602 	mla	r6, r6, r2, r4
 8016c68:	1436      	asrs	r6, r6, #16
 8016c6a:	d45e      	bmi.n	8016d2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016c6c:	4576      	cmp	r6, lr
 8016c6e:	da5c      	bge.n	8016d2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016c70:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8016c72:	fb06 0202 	mla	r2, r6, r2, r0
 8016c76:	1412      	asrs	r2, r2, #16
 8016c78:	d457      	bmi.n	8016d2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016c7a:	42ba      	cmp	r2, r7
 8016c7c:	da55      	bge.n	8016d2a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016c7e:	1cee      	adds	r6, r5, #3
 8016c80:	469a      	mov	sl, r3
 8016c82:	f1ba 0f00 	cmp.w	sl, #0
 8016c86:	dd56      	ble.n	8016d36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016c88:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016c8c:	1427      	asrs	r7, r4, #16
 8016c8e:	1402      	asrs	r2, r0, #16
 8016c90:	fb0e 7202 	mla	r2, lr, r2, r7
 8016c94:	9f00      	ldr	r7, [sp, #0]
 8016c96:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016c9a:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016c9e:	d03c      	beq.n	8016d1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016ca0:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8016ca4:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016ca8:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016cac:	fa5f f28e 	uxtb.w	r2, lr
 8016cb0:	b2ff      	uxtb	r7, r7
 8016cb2:	f000 80dd 	beq.w	8016e70 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016cb6:	fa1f f882 	uxth.w	r8, r2
 8016cba:	43d2      	mvns	r2, r2
 8016cbc:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016cc0:	fb17 f708 	smulbb	r7, r7, r8
 8016cc4:	b2d2      	uxtb	r2, r2
 8016cc6:	fb19 f908 	smulbb	r9, r9, r8
 8016cca:	fb0e 7702 	mla	r7, lr, r2, r7
 8016cce:	fb1b f808 	smulbb	r8, fp, r8
 8016cd2:	b2bf      	uxth	r7, r7
 8016cd4:	f107 0e01 	add.w	lr, r7, #1
 8016cd8:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016cdc:	123f      	asrs	r7, r7, #8
 8016cde:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016ce2:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016ce6:	fb07 9902 	mla	r9, r7, r2, r9
 8016cea:	fa1f f989 	uxth.w	r9, r9
 8016cee:	f109 0701 	add.w	r7, r9, #1
 8016cf2:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016cf6:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016cfa:	fb07 8802 	mla	r8, r7, r2, r8
 8016cfe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016d02:	fa1f f888 	uxth.w	r8, r8
 8016d06:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016d0a:	f108 0201 	add.w	r2, r8, #1
 8016d0e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016d12:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016d16:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016d1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d1c:	3603      	adds	r6, #3
 8016d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d22:	4414      	add	r4, r2
 8016d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d26:	4410      	add	r0, r2
 8016d28:	e7ab      	b.n	8016c82 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016d2a:	f04f 0e00 	mov.w	lr, #0
 8016d2e:	eba3 020e 	sub.w	r2, r3, lr
 8016d32:	2a00      	cmp	r2, #0
 8016d34:	dc3d      	bgt.n	8016db2 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016d36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016d3e:	441d      	add	r5, r3
 8016d40:	2900      	cmp	r1, #0
 8016d42:	f340 809c 	ble.w	8016e7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016d46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d4c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016d50:	3901      	subs	r1, #1
 8016d52:	eeb0 6a62 	vmov.f32	s12, s5
 8016d56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016d5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016d5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d62:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 8016d66:	eeb0 6a43 	vmov.f32	s12, s6
 8016d6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d6e:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 8016d72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016d76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016d7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016d7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016d82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016d86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016d8a:	ee12 2a90 	vmov	r2, s5
 8016d8e:	eef0 2a47 	vmov.f32	s5, s14
 8016d92:	fb92 f3f3 	sdiv	r3, r2, r3
 8016d96:	ee13 2a10 	vmov	r2, s6
 8016d9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d9e:	eeb0 3a67 	vmov.f32	s6, s15
 8016da2:	fb92 f3f3 	sdiv	r3, r2, r3
 8016da6:	9a01      	ldr	r2, [sp, #4]
 8016da8:	9310      	str	r3, [sp, #64]	; 0x40
 8016daa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016dac:	bf08      	it	eq
 8016dae:	4613      	moveq	r3, r2
 8016db0:	e734      	b.n	8016c1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016db2:	1427      	asrs	r7, r4, #16
 8016db4:	d44d      	bmi.n	8016e52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016db6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016dba:	42be      	cmp	r6, r7
 8016dbc:	dd49      	ble.n	8016e52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016dbe:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016dc2:	d446      	bmi.n	8016e52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016dc4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016dc8:	4542      	cmp	r2, r8
 8016dca:	dd42      	ble.n	8016e52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016dcc:	b236      	sxth	r6, r6
 8016dce:	9a00      	ldr	r2, [sp, #0]
 8016dd0:	fb08 7606 	mla	r6, r8, r6, r7
 8016dd4:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016dd8:	0e3a      	lsrs	r2, r7, #24
 8016dda:	d03a      	beq.n	8016e52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016ddc:	2aff      	cmp	r2, #255	; 0xff
 8016dde:	b2d6      	uxtb	r6, r2
 8016de0:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016de4:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016de8:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016dec:	b2ff      	uxtb	r7, r7
 8016dee:	d037      	beq.n	8016e60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016df0:	fa1f f986 	uxth.w	r9, r6
 8016df4:	4472      	add	r2, lr
 8016df6:	43f6      	mvns	r6, r6
 8016df8:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016dfc:	fb17 f709 	smulbb	r7, r7, r9
 8016e00:	fb1a fa09 	smulbb	sl, sl, r9
 8016e04:	b2f6      	uxtb	r6, r6
 8016e06:	fb1b f909 	smulbb	r9, fp, r9
 8016e0a:	fb08 7706 	mla	r7, r8, r6, r7
 8016e0e:	b2bf      	uxth	r7, r7
 8016e10:	f107 0801 	add.w	r8, r7, #1
 8016e14:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016e18:	123f      	asrs	r7, r7, #8
 8016e1a:	54af      	strb	r7, [r5, r2]
 8016e1c:	442a      	add	r2, r5
 8016e1e:	7857      	ldrb	r7, [r2, #1]
 8016e20:	fb07 aa06 	mla	sl, r7, r6, sl
 8016e24:	fa1f fa8a 	uxth.w	sl, sl
 8016e28:	f10a 0701 	add.w	r7, sl, #1
 8016e2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016e30:	7897      	ldrb	r7, [r2, #2]
 8016e32:	fb07 9906 	mla	r9, r7, r6, r9
 8016e36:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016e3a:	fa1f f989 	uxth.w	r9, r9
 8016e3e:	f882 a001 	strb.w	sl, [r2, #1]
 8016e42:	f109 0601 	add.w	r6, r9, #1
 8016e46:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016e4a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016e4e:	f882 9002 	strb.w	r9, [r2, #2]
 8016e52:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016e54:	f10e 0e01 	add.w	lr, lr, #1
 8016e58:	4414      	add	r4, r2
 8016e5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016e5c:	4410      	add	r0, r2
 8016e5e:	e766      	b.n	8016d2e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016e60:	4472      	add	r2, lr
 8016e62:	54af      	strb	r7, [r5, r2]
 8016e64:	442a      	add	r2, r5
 8016e66:	f882 a001 	strb.w	sl, [r2, #1]
 8016e6a:	f882 b002 	strb.w	fp, [r2, #2]
 8016e6e:	e7f0      	b.n	8016e52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016e70:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016e74:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016e78:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016e7c:	e74d      	b.n	8016d1a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016e7e:	b003      	add	sp, #12
 8016e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016e84 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e88:	b087      	sub	sp, #28
 8016e8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e8e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8016e90:	9204      	str	r2, [sp, #16]
 8016e92:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016e96:	6860      	ldr	r0, [r4, #4]
 8016e98:	9205      	str	r2, [sp, #20]
 8016e9a:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016e9e:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8016ea2:	9101      	str	r1, [sp, #4]
 8016ea4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8016ea8:	fb00 2505 	mla	r5, r0, r5, r2
 8016eac:	6822      	ldr	r2, [r4, #0]
 8016eae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016eb2:	4415      	add	r5, r2
 8016eb4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016eb8:	3201      	adds	r2, #1
 8016eba:	f022 0201 	bic.w	r2, r2, #1
 8016ebe:	9202      	str	r2, [sp, #8]
 8016ec0:	f8dc 2000 	ldr.w	r2, [ip]
 8016ec4:	9203      	str	r2, [sp, #12]
 8016ec6:	9a01      	ldr	r2, [sp, #4]
 8016ec8:	2a00      	cmp	r2, #0
 8016eca:	dc03      	bgt.n	8016ed4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016ecc:	9a04      	ldr	r2, [sp, #16]
 8016ece:	2a00      	cmp	r2, #0
 8016ed0:	f340 8135 	ble.w	801713e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016ed4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016ed6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016eda:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 8016ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ee0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016ee4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	dd0d      	ble.n	8016f08 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016eec:	1422      	asrs	r2, r4, #16
 8016eee:	d405      	bmi.n	8016efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016ef0:	4542      	cmp	r2, r8
 8016ef2:	da03      	bge.n	8016efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016ef4:	1402      	asrs	r2, r0, #16
 8016ef6:	d401      	bmi.n	8016efc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016ef8:	42ba      	cmp	r2, r7
 8016efa:	db06      	blt.n	8016f0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016efc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016efe:	4474      	add	r4, lr
 8016f00:	3b01      	subs	r3, #1
 8016f02:	3503      	adds	r5, #3
 8016f04:	4410      	add	r0, r2
 8016f06:	e7ef      	b.n	8016ee8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016f08:	d077      	beq.n	8016ffa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016f0a:	1e5a      	subs	r2, r3, #1
 8016f0c:	fb0e 4602 	mla	r6, lr, r2, r4
 8016f10:	1436      	asrs	r6, r6, #16
 8016f12:	d469      	bmi.n	8016fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016f14:	4546      	cmp	r6, r8
 8016f16:	da67      	bge.n	8016fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016f18:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8016f1a:	fb06 0202 	mla	r2, r6, r2, r0
 8016f1e:	1412      	asrs	r2, r2, #16
 8016f20:	d462      	bmi.n	8016fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016f22:	42ba      	cmp	r2, r7
 8016f24:	da60      	bge.n	8016fe8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016f26:	1cee      	adds	r6, r5, #3
 8016f28:	4699      	mov	r9, r3
 8016f2a:	f1b9 0f00 	cmp.w	r9, #0
 8016f2e:	dd5f      	ble.n	8016ff0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016f30:	1422      	asrs	r2, r4, #16
 8016f32:	9902      	ldr	r1, [sp, #8]
 8016f34:	1407      	asrs	r7, r0, #16
 8016f36:	fb01 2707 	mla	r7, r1, r7, r2
 8016f3a:	9903      	ldr	r1, [sp, #12]
 8016f3c:	087a      	lsrs	r2, r7, #1
 8016f3e:	5c8a      	ldrb	r2, [r1, r2]
 8016f40:	07f9      	lsls	r1, r7, #31
 8016f42:	bf54      	ite	pl
 8016f44:	f002 020f 	andpl.w	r2, r2, #15
 8016f48:	1112      	asrmi	r2, r2, #4
 8016f4a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016f4e:	b2d2      	uxtb	r2, r2
 8016f50:	2a00      	cmp	r2, #0
 8016f52:	d042      	beq.n	8016fda <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016f54:	497b      	ldr	r1, [pc, #492]	; (8017144 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016f56:	680f      	ldr	r7, [r1, #0]
 8016f58:	9905      	ldr	r1, [sp, #20]
 8016f5a:	fa5f fb87 	uxtb.w	fp, r7
 8016f5e:	434a      	muls	r2, r1
 8016f60:	f102 0801 	add.w	r8, r2, #1
 8016f64:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8016f68:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8016f6c:	1212      	asrs	r2, r2, #8
 8016f6e:	fa1f fa82 	uxth.w	sl, r2
 8016f72:	43d2      	mvns	r2, r2
 8016f74:	fb1b fb0a 	smulbb	fp, fp, sl
 8016f78:	b2d2      	uxtb	r2, r2
 8016f7a:	fb08 b802 	mla	r8, r8, r2, fp
 8016f7e:	fa1f f888 	uxth.w	r8, r8
 8016f82:	f108 0b01 	add.w	fp, r8, #1
 8016f86:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016f8a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016f8e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016f92:	fb1b fb0a 	smulbb	fp, fp, sl
 8016f96:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016f9a:	fb17 fa0a 	smulbb	sl, r7, sl
 8016f9e:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016fa2:	f806 8c03 	strb.w	r8, [r6, #-3]
 8016fa6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8016faa:	fb07 aa02 	mla	sl, r7, r2, sl
 8016fae:	fb08 b802 	mla	r8, r8, r2, fp
 8016fb2:	fa1f fa8a 	uxth.w	sl, sl
 8016fb6:	fa1f f888 	uxth.w	r8, r8
 8016fba:	f10a 0701 	add.w	r7, sl, #1
 8016fbe:	f108 0b01 	add.w	fp, r8, #1
 8016fc2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016fc6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016fca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016fce:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016fd2:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016fd6:	f806 8c02 	strb.w	r8, [r6, #-2]
 8016fda:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016fdc:	4474      	add	r4, lr
 8016fde:	3603      	adds	r6, #3
 8016fe0:	f109 39ff 	add.w	r9, r9, #4294967295
 8016fe4:	4410      	add	r0, r2
 8016fe6:	e7a0      	b.n	8016f2a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016fe8:	2700      	movs	r7, #0
 8016fea:	1bda      	subs	r2, r3, r7
 8016fec:	2a00      	cmp	r2, #0
 8016fee:	dc3e      	bgt.n	801706e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016ff0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ff4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016ff8:	441d      	add	r5, r3
 8016ffa:	9b01      	ldr	r3, [sp, #4]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	f340 809e 	ble.w	801713e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017002:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017006:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017008:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801700c:	eeb0 6a62 	vmov.f32	s12, s5
 8017010:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017014:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017018:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801701c:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017020:	eeb0 6a43 	vmov.f32	s12, s6
 8017024:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017028:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801702c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017030:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017034:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017038:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801703c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017040:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017044:	ee12 2a90 	vmov	r2, s5
 8017048:	eef0 2a47 	vmov.f32	s5, s14
 801704c:	fb92 fef3 	sdiv	lr, r2, r3
 8017050:	ee13 2a10 	vmov	r2, s6
 8017054:	eeb0 3a67 	vmov.f32	s6, s15
 8017058:	fb92 f3f3 	sdiv	r3, r2, r3
 801705c:	9314      	str	r3, [sp, #80]	; 0x50
 801705e:	9b01      	ldr	r3, [sp, #4]
 8017060:	9a04      	ldr	r2, [sp, #16]
 8017062:	3b01      	subs	r3, #1
 8017064:	9301      	str	r3, [sp, #4]
 8017066:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017068:	bf08      	it	eq
 801706a:	4613      	moveq	r3, r2
 801706c:	e72b      	b.n	8016ec6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801706e:	1426      	asrs	r6, r4, #16
 8017070:	d460      	bmi.n	8017134 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017072:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017076:	42b2      	cmp	r2, r6
 8017078:	dd5c      	ble.n	8017134 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801707a:	ea5f 4820 	movs.w	r8, r0, asr #16
 801707e:	d459      	bmi.n	8017134 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017080:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017084:	4542      	cmp	r2, r8
 8017086:	dd55      	ble.n	8017134 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017088:	9a02      	ldr	r2, [sp, #8]
 801708a:	9903      	ldr	r1, [sp, #12]
 801708c:	fb08 6602 	mla	r6, r8, r2, r6
 8017090:	0872      	lsrs	r2, r6, #1
 8017092:	07f6      	lsls	r6, r6, #31
 8017094:	5c8a      	ldrb	r2, [r1, r2]
 8017096:	bf54      	ite	pl
 8017098:	f002 020f 	andpl.w	r2, r2, #15
 801709c:	1112      	asrmi	r2, r2, #4
 801709e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80170a2:	b2d2      	uxtb	r2, r2
 80170a4:	2a00      	cmp	r2, #0
 80170a6:	d045      	beq.n	8017134 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80170a8:	4926      	ldr	r1, [pc, #152]	; (8017144 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 80170aa:	f8d1 8000 	ldr.w	r8, [r1]
 80170ae:	9905      	ldr	r1, [sp, #20]
 80170b0:	fa5f fb88 	uxtb.w	fp, r8
 80170b4:	434a      	muls	r2, r1
 80170b6:	1c56      	adds	r6, r2, #1
 80170b8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 80170bc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80170c0:	1212      	asrs	r2, r2, #8
 80170c2:	f815 9006 	ldrb.w	r9, [r5, r6]
 80170c6:	fa1f fa82 	uxth.w	sl, r2
 80170ca:	43d2      	mvns	r2, r2
 80170cc:	fb1b fb0a 	smulbb	fp, fp, sl
 80170d0:	b2d2      	uxtb	r2, r2
 80170d2:	fb09 b902 	mla	r9, r9, r2, fp
 80170d6:	fa1f f989 	uxth.w	r9, r9
 80170da:	f109 0b01 	add.w	fp, r9, #1
 80170de:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80170e2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 80170e6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 80170ea:	fb1b fb0a 	smulbb	fp, fp, sl
 80170ee:	ea4f 2929 	mov.w	r9, r9, asr #8
 80170f2:	fb18 fa0a 	smulbb	sl, r8, sl
 80170f6:	f805 9006 	strb.w	r9, [r5, r6]
 80170fa:	442e      	add	r6, r5
 80170fc:	f896 8002 	ldrb.w	r8, [r6, #2]
 8017100:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017104:	fb08 aa02 	mla	sl, r8, r2, sl
 8017108:	fb09 b902 	mla	r9, r9, r2, fp
 801710c:	fa1f fa8a 	uxth.w	sl, sl
 8017110:	fa1f f989 	uxth.w	r9, r9
 8017114:	f10a 0801 	add.w	r8, sl, #1
 8017118:	f109 0b01 	add.w	fp, r9, #1
 801711c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8017120:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017124:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017128:	ea4f 2929 	mov.w	r9, r9, asr #8
 801712c:	f886 a002 	strb.w	sl, [r6, #2]
 8017130:	f886 9001 	strb.w	r9, [r6, #1]
 8017134:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017136:	4474      	add	r4, lr
 8017138:	3701      	adds	r7, #1
 801713a:	4410      	add	r0, r2
 801713c:	e755      	b.n	8016fea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801713e:	b007      	add	sp, #28
 8017140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017144:	240074c4 	.word	0x240074c4

08017148 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714c:	b085      	sub	sp, #20
 801714e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017152:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017154:	9203      	str	r2, [sp, #12]
 8017156:	6860      	ldr	r0, [r4, #4]
 8017158:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 801715c:	9100      	str	r1, [sp, #0]
 801715e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	; 0x50
 8017162:	fb00 2606 	mla	r6, r0, r6, r2
 8017166:	6822      	ldr	r2, [r4, #0]
 8017168:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801716c:	4416      	add	r6, r2
 801716e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017172:	3201      	adds	r2, #1
 8017174:	f022 0201 	bic.w	r2, r2, #1
 8017178:	9201      	str	r2, [sp, #4]
 801717a:	f8dc 2000 	ldr.w	r2, [ip]
 801717e:	9202      	str	r2, [sp, #8]
 8017180:	9a00      	ldr	r2, [sp, #0]
 8017182:	2a00      	cmp	r2, #0
 8017184:	dc03      	bgt.n	801718e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017186:	9a03      	ldr	r2, [sp, #12]
 8017188:	2a00      	cmp	r2, #0
 801718a:	f340 8140 	ble.w	801740e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801718e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017190:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017194:	f502 4500 	add.w	r5, r2, #32768	; 0x8000
 8017198:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801719a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801719e:	f502 4400 	add.w	r4, r2, #32768	; 0x8000
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	dd0e      	ble.n	80171c4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80171a6:	142a      	asrs	r2, r5, #16
 80171a8:	d405      	bmi.n	80171b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80171aa:	4572      	cmp	r2, lr
 80171ac:	da03      	bge.n	80171b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80171ae:	1422      	asrs	r2, r4, #16
 80171b0:	d401      	bmi.n	80171b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 80171b2:	42ba      	cmp	r2, r7
 80171b4:	db07      	blt.n	80171c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 80171b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80171b8:	3b01      	subs	r3, #1
 80171ba:	3603      	adds	r6, #3
 80171bc:	4415      	add	r5, r2
 80171be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80171c0:	4414      	add	r4, r2
 80171c2:	e7ee      	b.n	80171a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80171c4:	d072      	beq.n	80172ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80171c6:	1e5a      	subs	r2, r3, #1
 80171c8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80171ca:	fb00 5002 	mla	r0, r0, r2, r5
 80171ce:	1400      	asrs	r0, r0, #16
 80171d0:	d463      	bmi.n	801729a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80171d2:	4570      	cmp	r0, lr
 80171d4:	da61      	bge.n	801729a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80171d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80171d8:	fb00 4202 	mla	r2, r0, r2, r4
 80171dc:	1412      	asrs	r2, r2, #16
 80171de:	d45c      	bmi.n	801729a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80171e0:	42ba      	cmp	r2, r7
 80171e2:	da5a      	bge.n	801729a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80171e4:	1cf0      	adds	r0, r6, #3
 80171e6:	469a      	mov	sl, r3
 80171e8:	f1ba 0f00 	cmp.w	sl, #0
 80171ec:	dd59      	ble.n	80172a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80171ee:	142a      	asrs	r2, r5, #16
 80171f0:	9901      	ldr	r1, [sp, #4]
 80171f2:	1427      	asrs	r7, r4, #16
 80171f4:	fb01 2707 	mla	r7, r1, r7, r2
 80171f8:	9902      	ldr	r1, [sp, #8]
 80171fa:	087a      	lsrs	r2, r7, #1
 80171fc:	5c8a      	ldrb	r2, [r1, r2]
 80171fe:	07f9      	lsls	r1, r7, #31
 8017200:	bf54      	ite	pl
 8017202:	f002 020f 	andpl.w	r2, r2, #15
 8017206:	1112      	asrmi	r2, r2, #4
 8017208:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801720c:	b2d2      	uxtb	r2, r2
 801720e:	2a00      	cmp	r2, #0
 8017210:	d03b      	beq.n	801728a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017212:	4980      	ldr	r1, [pc, #512]	; (8017414 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017214:	2aff      	cmp	r2, #255	; 0xff
 8017216:	680f      	ldr	r7, [r1, #0]
 8017218:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801721c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017220:	b2ff      	uxtb	r7, r7
 8017222:	f000 80ed 	beq.w	8017400 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017226:	fa1f f882 	uxth.w	r8, r2
 801722a:	43d2      	mvns	r2, r2
 801722c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8017230:	fb17 f708 	smulbb	r7, r7, r8
 8017234:	b2d2      	uxtb	r2, r2
 8017236:	fb19 f908 	smulbb	r9, r9, r8
 801723a:	fb0e 7702 	mla	r7, lr, r2, r7
 801723e:	fb1b f808 	smulbb	r8, fp, r8
 8017242:	b2bf      	uxth	r7, r7
 8017244:	f107 0e01 	add.w	lr, r7, #1
 8017248:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801724c:	123f      	asrs	r7, r7, #8
 801724e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017252:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8017256:	fb07 9902 	mla	r9, r7, r2, r9
 801725a:	fa1f f989 	uxth.w	r9, r9
 801725e:	f109 0701 	add.w	r7, r9, #1
 8017262:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017266:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801726a:	fb07 8802 	mla	r8, r7, r2, r8
 801726e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017272:	fa1f f888 	uxth.w	r8, r8
 8017276:	f800 9c02 	strb.w	r9, [r0, #-2]
 801727a:	f108 0201 	add.w	r2, r8, #1
 801727e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017282:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017286:	f800 8c01 	strb.w	r8, [r0, #-1]
 801728a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801728c:	3003      	adds	r0, #3
 801728e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017292:	4415      	add	r5, r2
 8017294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017296:	4414      	add	r4, r2
 8017298:	e7a6      	b.n	80171e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801729a:	2700      	movs	r7, #0
 801729c:	1bda      	subs	r2, r3, r7
 801729e:	2a00      	cmp	r2, #0
 80172a0:	dc40      	bgt.n	8017324 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 80172a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80172a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80172aa:	441e      	add	r6, r3
 80172ac:	9b00      	ldr	r3, [sp, #0]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	f340 80ad 	ble.w	801740e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80172b4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80172b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80172ba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80172be:	eeb0 6a62 	vmov.f32	s12, s5
 80172c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80172c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80172ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80172ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80172d2:	eeb0 6a43 	vmov.f32	s12, s6
 80172d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80172da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80172de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80172e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80172e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80172ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80172ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80172f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80172f6:	ee12 2a90 	vmov	r2, s5
 80172fa:	eef0 2a47 	vmov.f32	s5, s14
 80172fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8017302:	ee13 2a10 	vmov	r2, s6
 8017306:	9311      	str	r3, [sp, #68]	; 0x44
 8017308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801730a:	eeb0 3a67 	vmov.f32	s6, s15
 801730e:	fb92 f3f3 	sdiv	r3, r2, r3
 8017312:	9312      	str	r3, [sp, #72]	; 0x48
 8017314:	9b00      	ldr	r3, [sp, #0]
 8017316:	9a03      	ldr	r2, [sp, #12]
 8017318:	3b01      	subs	r3, #1
 801731a:	9300      	str	r3, [sp, #0]
 801731c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801731e:	bf08      	it	eq
 8017320:	4613      	moveq	r3, r2
 8017322:	e72d      	b.n	8017180 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017324:	1428      	asrs	r0, r5, #16
 8017326:	d45c      	bmi.n	80173e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017328:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801732c:	4282      	cmp	r2, r0
 801732e:	dd58      	ble.n	80173e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017330:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8017334:	d455      	bmi.n	80173e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017336:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801733a:	4572      	cmp	r2, lr
 801733c:	dd51      	ble.n	80173e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801733e:	9a01      	ldr	r2, [sp, #4]
 8017340:	9902      	ldr	r1, [sp, #8]
 8017342:	fb0e 0002 	mla	r0, lr, r2, r0
 8017346:	0842      	lsrs	r2, r0, #1
 8017348:	07c0      	lsls	r0, r0, #31
 801734a:	5c8a      	ldrb	r2, [r1, r2]
 801734c:	bf54      	ite	pl
 801734e:	f002 020f 	andpl.w	r2, r2, #15
 8017352:	1112      	asrmi	r2, r2, #4
 8017354:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017358:	b2d2      	uxtb	r2, r2
 801735a:	2a00      	cmp	r2, #0
 801735c:	d041      	beq.n	80173e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801735e:	492d      	ldr	r1, [pc, #180]	; (8017414 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017360:	2aff      	cmp	r2, #255	; 0xff
 8017362:	6808      	ldr	r0, [r1, #0]
 8017364:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8017368:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801736c:	fa5f fe80 	uxtb.w	lr, r0
 8017370:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8017374:	d03b      	beq.n	80173ee <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8017376:	fa1f f982 	uxth.w	r9, r2
 801737a:	4438      	add	r0, r7
 801737c:	43d2      	mvns	r2, r2
 801737e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8017382:	fb1e fe09 	smulbb	lr, lr, r9
 8017386:	fb1a fa09 	smulbb	sl, sl, r9
 801738a:	b2d2      	uxtb	r2, r2
 801738c:	fb1b f909 	smulbb	r9, fp, r9
 8017390:	fb08 ee02 	mla	lr, r8, r2, lr
 8017394:	fa1f fe8e 	uxth.w	lr, lr
 8017398:	f10e 0801 	add.w	r8, lr, #1
 801739c:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80173a0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80173a4:	f806 e000 	strb.w	lr, [r6, r0]
 80173a8:	4430      	add	r0, r6
 80173aa:	f890 e001 	ldrb.w	lr, [r0, #1]
 80173ae:	fb0e aa02 	mla	sl, lr, r2, sl
 80173b2:	fa1f fa8a 	uxth.w	sl, sl
 80173b6:	f10a 0e01 	add.w	lr, sl, #1
 80173ba:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80173be:	f890 e002 	ldrb.w	lr, [r0, #2]
 80173c2:	fb0e 9902 	mla	r9, lr, r2, r9
 80173c6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80173ca:	fa1f f989 	uxth.w	r9, r9
 80173ce:	f880 a001 	strb.w	sl, [r0, #1]
 80173d2:	f109 0201 	add.w	r2, r9, #1
 80173d6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80173da:	ea4f 2929 	mov.w	r9, r9, asr #8
 80173de:	f880 9002 	strb.w	r9, [r0, #2]
 80173e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80173e4:	3701      	adds	r7, #1
 80173e6:	4415      	add	r5, r2
 80173e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80173ea:	4414      	add	r4, r2
 80173ec:	e756      	b.n	801729c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80173ee:	4438      	add	r0, r7
 80173f0:	f806 e000 	strb.w	lr, [r6, r0]
 80173f4:	4430      	add	r0, r6
 80173f6:	f880 a001 	strb.w	sl, [r0, #1]
 80173fa:	f880 b002 	strb.w	fp, [r0, #2]
 80173fe:	e7f0      	b.n	80173e2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017400:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017404:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017408:	f800 bc01 	strb.w	fp, [r0, #-1]
 801740c:	e73d      	b.n	801728a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801740e:	b005      	add	sp, #20
 8017410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017414:	240074c4 	.word	0x240074c4

08017418 <_ZN8touchgfx8LCD24bppD1Ev>:
 8017418:	4770      	bx	lr

0801741a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801741a:	4770      	bx	lr

0801741c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801741c:	4770      	bx	lr

0801741e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801741e:	4770      	bx	lr

08017420 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017420:	4770      	bx	lr

08017422 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017422:	4770      	bx	lr

08017424 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017424:	4770      	bx	lr

08017426 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017426:	4770      	bx	lr

08017428 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017428:	4770      	bx	lr

0801742a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801742a:	4770      	bx	lr

0801742c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801742c:	4770      	bx	lr

0801742e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801742e:	4770      	bx	lr

08017430 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017430:	4770      	bx	lr

08017432 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017432:	4770      	bx	lr

08017434 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017434:	4770      	bx	lr

08017436 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017436:	4770      	bx	lr

08017438 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017438:	4770      	bx	lr

0801743a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801743a:	4770      	bx	lr

0801743c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801743c:	4770      	bx	lr

0801743e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801743e:	4770      	bx	lr

08017440 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017440:	4770      	bx	lr
	...

08017444 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017446:	4606      	mov	r6, r0
 8017448:	b087      	sub	sp, #28
 801744a:	4615      	mov	r5, r2
 801744c:	461f      	mov	r7, r3
 801744e:	b353      	cbz	r3, 80174a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017450:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017454:	2b00      	cmp	r3, #0
 8017456:	dd26      	ble.n	80174a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017458:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801745c:	2b00      	cmp	r3, #0
 801745e:	dd22      	ble.n	80174a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017460:	6808      	ldr	r0, [r1, #0]
 8017462:	aa04      	add	r2, sp, #16
 8017464:	6849      	ldr	r1, [r1, #4]
 8017466:	4c1b      	ldr	r4, [pc, #108]	; (80174d4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8017468:	c203      	stmia	r2!, {r0, r1}
 801746a:	a804      	add	r0, sp, #16
 801746c:	f7fb fb5c 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017470:	6820      	ldr	r0, [r4, #0]
 8017472:	6803      	ldr	r3, [r0, #0]
 8017474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017476:	4798      	blx	r3
 8017478:	2fff      	cmp	r7, #255	; 0xff
 801747a:	d016      	beq.n	80174aa <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801747c:	f010 0f08 	tst.w	r0, #8
 8017480:	6820      	ldr	r0, [r4, #0]
 8017482:	d015      	beq.n	80174b0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8017484:	2400      	movs	r4, #0
 8017486:	6801      	ldr	r1, [r0, #0]
 8017488:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801748c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017490:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8017494:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8017498:	9401      	str	r4, [sp, #4]
 801749a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801749e:	9400      	str	r4, [sp, #0]
 80174a0:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80174a2:	4629      	mov	r1, r5
 80174a4:	47a0      	blx	r4
 80174a6:	b007      	add	sp, #28
 80174a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174aa:	f010 0f02 	tst.w	r0, #2
 80174ae:	e7e7      	b.n	8017480 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80174b0:	6803      	ldr	r3, [r0, #0]
 80174b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174b4:	4798      	blx	r3
 80174b6:	4b08      	ldr	r3, [pc, #32]	; (80174d8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80174b8:	4601      	mov	r1, r0
 80174ba:	4630      	mov	r0, r6
 80174bc:	881a      	ldrh	r2, [r3, #0]
 80174be:	6833      	ldr	r3, [r6, #0]
 80174c0:	e9cd 5700 	strd	r5, r7, [sp]
 80174c4:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80174c6:	ab04      	add	r3, sp, #16
 80174c8:	47a8      	blx	r5
 80174ca:	6820      	ldr	r0, [r4, #0]
 80174cc:	6803      	ldr	r3, [r0, #0]
 80174ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174d0:	4798      	blx	r3
 80174d2:	e7e8      	b.n	80174a6 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80174d4:	240074bc 	.word	0x240074bc
 80174d8:	240074b6 	.word	0x240074b6

080174dc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80174dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174e0:	b08b      	sub	sp, #44	; 0x2c
 80174e2:	460d      	mov	r5, r1
 80174e4:	4616      	mov	r6, r2
 80174e6:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 80174ea:	f1b8 0f00 	cmp.w	r8, #0
 80174ee:	d047      	beq.n	8017580 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80174f0:	6810      	ldr	r0, [r2, #0]
 80174f2:	ac06      	add	r4, sp, #24
 80174f4:	6851      	ldr	r1, [r2, #4]
 80174f6:	4f51      	ldr	r7, [pc, #324]	; (801763c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80174f8:	c403      	stmia	r4!, {r0, r1}
 80174fa:	6818      	ldr	r0, [r3, #0]
 80174fc:	ac08      	add	r4, sp, #32
 80174fe:	6859      	ldr	r1, [r3, #4]
 8017500:	c403      	stmia	r4!, {r0, r1}
 8017502:	a806      	add	r0, sp, #24
 8017504:	f7fb fb10 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017508:	4631      	mov	r1, r6
 801750a:	a808      	add	r0, sp, #32
 801750c:	f7fb fb34 	bl	8012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017510:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017514:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8017518:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801751c:	6838      	ldr	r0, [r7, #0]
 801751e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017522:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 8017526:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	; 0x26
 801752a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801752e:	440d      	add	r5, r1
 8017530:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017534:	440a      	add	r2, r1
 8017536:	f8ad 2020 	strh.w	r2, [sp, #32]
 801753a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801753e:	4413      	add	r3, r2
 8017540:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017544:	6803      	ldr	r3, [r0, #0]
 8017546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017548:	4798      	blx	r3
 801754a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801754e:	d01a      	beq.n	8017586 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8017550:	f010 0f04 	tst.w	r0, #4
 8017554:	6838      	ldr	r0, [r7, #0]
 8017556:	d019      	beq.n	801758c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8017558:	2100      	movs	r1, #0
 801755a:	6807      	ldr	r7, [r0, #0]
 801755c:	b2a4      	uxth	r4, r4
 801755e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017562:	b2b6      	uxth	r6, r6
 8017564:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8017568:	9401      	str	r4, [sp, #4]
 801756a:	9600      	str	r6, [sp, #0]
 801756c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017570:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8017574:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017578:	9102      	str	r1, [sp, #8]
 801757a:	4629      	mov	r1, r5
 801757c:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 801757e:	47a0      	blx	r4
 8017580:	b00b      	add	sp, #44	; 0x2c
 8017582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017586:	f010 0f01 	tst.w	r0, #1
 801758a:	e7e3      	b.n	8017554 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801758c:	6803      	ldr	r3, [r0, #0]
 801758e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017590:	4798      	blx	r3
 8017592:	4a2b      	ldr	r2, [pc, #172]	; (8017640 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8017594:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	; 0x22
 8017598:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801759c:	8813      	ldrh	r3, [r2, #0]
 801759e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80175a2:	fb03 f404 	mul.w	r4, r3, r4
 80175a6:	fb03 c101 	mla	r1, r3, r1, ip
 80175aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80175ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80175b2:	4408      	add	r0, r1
 80175b4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80175b8:	4404      	add	r4, r0
 80175ba:	d02e      	beq.n	801761a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80175bc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80175c0:	1b9b      	subs	r3, r3, r6
 80175c2:	f1c8 0cff 	rsb	ip, r8, #255	; 0xff
 80175c6:	1b96      	subs	r6, r2, r6
 80175c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80175d0:	42a0      	cmp	r0, r4
 80175d2:	d22d      	bcs.n	8017630 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80175d4:	eb00 0e01 	add.w	lr, r0, r1
 80175d8:	4570      	cmp	r0, lr
 80175da:	d210      	bcs.n	80175fe <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80175dc:	f890 9000 	ldrb.w	r9, [r0]
 80175e0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80175e4:	fb19 f90c 	smulbb	r9, r9, ip
 80175e8:	fb02 9208 	mla	r2, r2, r8, r9
 80175ec:	b292      	uxth	r2, r2
 80175ee:	f102 0901 	add.w	r9, r2, #1
 80175f2:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80175f6:	1212      	asrs	r2, r2, #8
 80175f8:	f800 2b01 	strb.w	r2, [r0], #1
 80175fc:	e7ec      	b.n	80175d8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80175fe:	4418      	add	r0, r3
 8017600:	4435      	add	r5, r6
 8017602:	e7e5      	b.n	80175d0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 8017604:	8813      	ldrh	r3, [r2, #0]
 8017606:	1b9b      	subs	r3, r3, r6
 8017608:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801760c:	4418      	add	r0, r3
 801760e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017612:	1b9b      	subs	r3, r3, r6
 8017614:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017618:	441d      	add	r5, r3
 801761a:	42a0      	cmp	r0, r4
 801761c:	d208      	bcs.n	8017630 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801761e:	eb00 0c01 	add.w	ip, r0, r1
 8017622:	4560      	cmp	r0, ip
 8017624:	d2ee      	bcs.n	8017604 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017626:	f815 3b01 	ldrb.w	r3, [r5], #1
 801762a:	f800 3b01 	strb.w	r3, [r0], #1
 801762e:	e7f8      	b.n	8017622 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8017630:	6838      	ldr	r0, [r7, #0]
 8017632:	6803      	ldr	r3, [r0, #0]
 8017634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017636:	4798      	blx	r3
 8017638:	e7a2      	b.n	8017580 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801763a:	bf00      	nop
 801763c:	240074bc 	.word	0x240074bc
 8017640:	240074b6 	.word	0x240074b6

08017644 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017646:	2300      	movs	r3, #0
 8017648:	b085      	sub	sp, #20
 801764a:	9300      	str	r3, [sp, #0]
 801764c:	4b41      	ldr	r3, [pc, #260]	; (8017754 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801764e:	781b      	ldrb	r3, [r3, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d136      	bne.n	80176c2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8017654:	4a40      	ldr	r2, [pc, #256]	; (8017758 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017656:	f9b2 2000 	ldrsh.w	r2, [r2]
 801765a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d131      	bne.n	80176c6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8017662:	4b3e      	ldr	r3, [pc, #248]	; (801775c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017664:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017668:	ac02      	add	r4, sp, #8
 801766a:	6808      	ldr	r0, [r1, #0]
 801766c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017670:	ab02      	add	r3, sp, #8
 8017672:	6849      	ldr	r1, [r1, #4]
 8017674:	4d3a      	ldr	r5, [pc, #232]	; (8017760 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8017676:	c303      	stmia	r3!, {r0, r1}
 8017678:	4669      	mov	r1, sp
 801767a:	4620      	mov	r0, r4
 801767c:	f7fb fa7c 	bl	8012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017680:	4668      	mov	r0, sp
 8017682:	f7fb fa51 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017686:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801768a:	f8bd 2000 	ldrh.w	r2, [sp]
 801768e:	462e      	mov	r6, r5
 8017690:	6828      	ldr	r0, [r5, #0]
 8017692:	4413      	add	r3, r2
 8017694:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017698:	f8ad 3008 	strh.w	r3, [sp, #8]
 801769c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80176a0:	4413      	add	r3, r2
 80176a2:	f8ad 300a 	strh.w	r3, [sp, #10]
 80176a6:	6803      	ldr	r3, [r0, #0]
 80176a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176aa:	4798      	blx	r3
 80176ac:	f010 0f01 	tst.w	r0, #1
 80176b0:	d00b      	beq.n	80176ca <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80176b2:	6828      	ldr	r0, [r5, #0]
 80176b4:	6803      	ldr	r3, [r0, #0]
 80176b6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80176ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80176bc:	4798      	blx	r3
 80176be:	b005      	add	sp, #20
 80176c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176c2:	4a26      	ldr	r2, [pc, #152]	; (801775c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80176c4:	e7c7      	b.n	8017656 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80176c6:	4b24      	ldr	r3, [pc, #144]	; (8017758 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80176c8:	e7cc      	b.n	8017664 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80176ca:	6830      	ldr	r0, [r6, #0]
 80176cc:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80176d0:	6803      	ldr	r3, [r0, #0]
 80176d2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80176d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176d8:	4798      	blx	r3
 80176da:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80176de:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80176e2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80176e6:	fb14 3402 	smlabb	r4, r4, r2, r3
 80176ea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80176ee:	4404      	add	r4, r0
 80176f0:	6830      	ldr	r0, [r6, #0]
 80176f2:	6803      	ldr	r3, [r0, #0]
 80176f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80176f6:	4798      	blx	r3
 80176f8:	4917      	ldr	r1, [pc, #92]	; (8017758 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80176fa:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80176fe:	880b      	ldrh	r3, [r1, #0]
 8017700:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 8017704:	fb03 c202 	mla	r2, r3, r2, ip
 8017708:	437b      	muls	r3, r7
 801770a:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801770e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017712:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017716:	4410      	add	r0, r2
 8017718:	18c2      	adds	r2, r0, r3
 801771a:	4290      	cmp	r0, r2
 801771c:	d214      	bcs.n	8017748 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801771e:	eb00 0c07 	add.w	ip, r0, r7
 8017722:	4560      	cmp	r0, ip
 8017724:	d204      	bcs.n	8017730 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017726:	f814 3b01 	ldrb.w	r3, [r4], #1
 801772a:	f800 3b01 	strb.w	r3, [r0], #1
 801772e:	e7f8      	b.n	8017722 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8017730:	880b      	ldrh	r3, [r1, #0]
 8017732:	1b5b      	subs	r3, r3, r5
 8017734:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017738:	4418      	add	r0, r3
 801773a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801773e:	1b5b      	subs	r3, r3, r5
 8017740:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017744:	441c      	add	r4, r3
 8017746:	e7e8      	b.n	801771a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017748:	6830      	ldr	r0, [r6, #0]
 801774a:	6803      	ldr	r3, [r0, #0]
 801774c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801774e:	4798      	blx	r3
 8017750:	e7b5      	b.n	80176be <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8017752:	bf00      	nop
 8017754:	240074b4 	.word	0x240074b4
 8017758:	240074b6 	.word	0x240074b6
 801775c:	240074b8 	.word	0x240074b8
 8017760:	240074bc 	.word	0x240074bc

08017764 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8017764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017768:	b089      	sub	sp, #36	; 0x24
 801776a:	4607      	mov	r7, r0
 801776c:	4689      	mov	r9, r1
 801776e:	4692      	mov	sl, r2
 8017770:	ac08      	add	r4, sp, #32
 8017772:	461e      	mov	r6, r3
 8017774:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8017778:	4620      	mov	r0, r4
 801777a:	f7fe f8ef 	bl	801595c <_ZNK8touchgfx6Bitmap7getDataEv>
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	4605      	mov	r5, r0
 8017782:	4620      	mov	r0, r4
 8017784:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017788:	f7fe f880 	bl	801588c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801778c:	4683      	mov	fp, r0
 801778e:	4620      	mov	r0, r4
 8017790:	f7fe f8b0 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017794:	4653      	mov	r3, sl
 8017796:	464a      	mov	r2, r9
 8017798:	4639      	mov	r1, r7
 801779a:	9500      	str	r5, [sp, #0]
 801779c:	e9cd b001 	strd	fp, r0, [sp, #4]
 80177a0:	a806      	add	r0, sp, #24
 80177a2:	47c0      	blx	r8
 80177a4:	a906      	add	r1, sp, #24
 80177a6:	4630      	mov	r0, r6
 80177a8:	f7fd ff54 	bl	8015654 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 80177ac:	4628      	mov	r0, r5
 80177ae:	b009      	add	sp, #36	; 0x24
 80177b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080177b4 <_ZN8touchgfx8LCD24bppD0Ev>:
 80177b4:	b510      	push	{r4, lr}
 80177b6:	4604      	mov	r4, r0
 80177b8:	2158      	movs	r1, #88	; 0x58
 80177ba:	f006 f8f6 	bl	801d9aa <_ZdlPvj>
 80177be:	4620      	mov	r0, r4
 80177c0:	bd10      	pop	{r4, pc}

080177c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80177c2:	b510      	push	{r4, lr}
 80177c4:	4604      	mov	r4, r0
 80177c6:	2104      	movs	r1, #4
 80177c8:	f006 f8ef 	bl	801d9aa <_ZdlPvj>
 80177cc:	4620      	mov	r0, r4
 80177ce:	bd10      	pop	{r4, pc}

080177d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80177d0:	b510      	push	{r4, lr}
 80177d2:	4604      	mov	r4, r0
 80177d4:	2104      	movs	r1, #4
 80177d6:	f006 f8e8 	bl	801d9aa <_ZdlPvj>
 80177da:	4620      	mov	r0, r4
 80177dc:	bd10      	pop	{r4, pc}

080177de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80177de:	b510      	push	{r4, lr}
 80177e0:	4604      	mov	r4, r0
 80177e2:	2104      	movs	r1, #4
 80177e4:	f006 f8e1 	bl	801d9aa <_ZdlPvj>
 80177e8:	4620      	mov	r0, r4
 80177ea:	bd10      	pop	{r4, pc}

080177ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80177ec:	b510      	push	{r4, lr}
 80177ee:	4604      	mov	r4, r0
 80177f0:	2104      	movs	r1, #4
 80177f2:	f006 f8da 	bl	801d9aa <_ZdlPvj>
 80177f6:	4620      	mov	r0, r4
 80177f8:	bd10      	pop	{r4, pc}

080177fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80177fa:	b510      	push	{r4, lr}
 80177fc:	4604      	mov	r4, r0
 80177fe:	2104      	movs	r1, #4
 8017800:	f006 f8d3 	bl	801d9aa <_ZdlPvj>
 8017804:	4620      	mov	r0, r4
 8017806:	bd10      	pop	{r4, pc}

08017808 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017808:	b510      	push	{r4, lr}
 801780a:	4604      	mov	r4, r0
 801780c:	2104      	movs	r1, #4
 801780e:	f006 f8cc 	bl	801d9aa <_ZdlPvj>
 8017812:	4620      	mov	r0, r4
 8017814:	bd10      	pop	{r4, pc}

08017816 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017816:	b510      	push	{r4, lr}
 8017818:	4604      	mov	r4, r0
 801781a:	2104      	movs	r1, #4
 801781c:	f006 f8c5 	bl	801d9aa <_ZdlPvj>
 8017820:	4620      	mov	r0, r4
 8017822:	bd10      	pop	{r4, pc}

08017824 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017824:	b510      	push	{r4, lr}
 8017826:	4604      	mov	r4, r0
 8017828:	2104      	movs	r1, #4
 801782a:	f006 f8be 	bl	801d9aa <_ZdlPvj>
 801782e:	4620      	mov	r0, r4
 8017830:	bd10      	pop	{r4, pc}

08017832 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8017832:	b510      	push	{r4, lr}
 8017834:	4604      	mov	r4, r0
 8017836:	2104      	movs	r1, #4
 8017838:	f006 f8b7 	bl	801d9aa <_ZdlPvj>
 801783c:	4620      	mov	r0, r4
 801783e:	bd10      	pop	{r4, pc}

08017840 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8017840:	b510      	push	{r4, lr}
 8017842:	4604      	mov	r4, r0
 8017844:	2104      	movs	r1, #4
 8017846:	f006 f8b0 	bl	801d9aa <_ZdlPvj>
 801784a:	4620      	mov	r0, r4
 801784c:	bd10      	pop	{r4, pc}

0801784e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801784e:	b510      	push	{r4, lr}
 8017850:	4604      	mov	r4, r0
 8017852:	2104      	movs	r1, #4
 8017854:	f006 f8a9 	bl	801d9aa <_ZdlPvj>
 8017858:	4620      	mov	r0, r4
 801785a:	bd10      	pop	{r4, pc}

0801785c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801785c:	b510      	push	{r4, lr}
 801785e:	4604      	mov	r4, r0
 8017860:	2104      	movs	r1, #4
 8017862:	f006 f8a2 	bl	801d9aa <_ZdlPvj>
 8017866:	4620      	mov	r0, r4
 8017868:	bd10      	pop	{r4, pc}

0801786a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801786a:	b510      	push	{r4, lr}
 801786c:	4604      	mov	r4, r0
 801786e:	2104      	movs	r1, #4
 8017870:	f006 f89b 	bl	801d9aa <_ZdlPvj>
 8017874:	4620      	mov	r0, r4
 8017876:	bd10      	pop	{r4, pc}

08017878 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017878:	b510      	push	{r4, lr}
 801787a:	4604      	mov	r4, r0
 801787c:	2104      	movs	r1, #4
 801787e:	f006 f894 	bl	801d9aa <_ZdlPvj>
 8017882:	4620      	mov	r0, r4
 8017884:	bd10      	pop	{r4, pc}

08017886 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017886:	b510      	push	{r4, lr}
 8017888:	4604      	mov	r4, r0
 801788a:	2104      	movs	r1, #4
 801788c:	f006 f88d 	bl	801d9aa <_ZdlPvj>
 8017890:	4620      	mov	r0, r4
 8017892:	bd10      	pop	{r4, pc}

08017894 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017894:	b510      	push	{r4, lr}
 8017896:	4604      	mov	r4, r0
 8017898:	2104      	movs	r1, #4
 801789a:	f006 f886 	bl	801d9aa <_ZdlPvj>
 801789e:	4620      	mov	r0, r4
 80178a0:	bd10      	pop	{r4, pc}

080178a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80178a2:	b510      	push	{r4, lr}
 80178a4:	4604      	mov	r4, r0
 80178a6:	2104      	movs	r1, #4
 80178a8:	f006 f87f 	bl	801d9aa <_ZdlPvj>
 80178ac:	4620      	mov	r0, r4
 80178ae:	bd10      	pop	{r4, pc}

080178b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	4604      	mov	r4, r0
 80178b4:	2104      	movs	r1, #4
 80178b6:	f006 f878 	bl	801d9aa <_ZdlPvj>
 80178ba:	4620      	mov	r0, r4
 80178bc:	bd10      	pop	{r4, pc}

080178be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80178be:	b510      	push	{r4, lr}
 80178c0:	4604      	mov	r4, r0
 80178c2:	2104      	movs	r1, #4
 80178c4:	f006 f871 	bl	801d9aa <_ZdlPvj>
 80178c8:	4620      	mov	r0, r4
 80178ca:	bd10      	pop	{r4, pc}

080178cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80178cc:	b510      	push	{r4, lr}
 80178ce:	4604      	mov	r4, r0
 80178d0:	2104      	movs	r1, #4
 80178d2:	f006 f86a 	bl	801d9aa <_ZdlPvj>
 80178d6:	4620      	mov	r0, r4
 80178d8:	bd10      	pop	{r4, pc}

080178da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 80178da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178de:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80178e2:	9c06      	ldr	r4, [sp, #24]
 80178e4:	2800      	cmp	r0, #0
 80178e6:	d06e      	beq.n	80179c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80178e8:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 80178ec:	2d00      	cmp	r5, #0
 80178ee:	dd6a      	ble.n	80179c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80178f0:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 80178f4:	f1bc 0f00 	cmp.w	ip, #0
 80178f8:	dd65      	ble.n	80179c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80178fa:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 80178fe:	28ff      	cmp	r0, #255	; 0xff
 8017900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017904:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8017908:	fb02 3306 	mla	r3, r2, r6, r3
 801790c:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8017910:	b2e4      	uxtb	r4, r4
 8017912:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017916:	4419      	add	r1, r3
 8017918:	fb02 f30c 	mul.w	r3, r2, ip
 801791c:	eba2 0205 	sub.w	r2, r2, r5
 8017920:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017924:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017928:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801792c:	440b      	add	r3, r1
 801792e:	d03e      	beq.n	80179ae <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8017930:	fa1f fc80 	uxth.w	ip, r0
 8017934:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8017938:	fb06 f60c 	mul.w	r6, r6, ip
 801793c:	b280      	uxth	r0, r0
 801793e:	fb07 f70c 	mul.w	r7, r7, ip
 8017942:	fb04 f40c 	mul.w	r4, r4, ip
 8017946:	4299      	cmp	r1, r3
 8017948:	d23d      	bcs.n	80179c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801794a:	eb01 0c05 	add.w	ip, r1, r5
 801794e:	458c      	cmp	ip, r1
 8017950:	f101 0e03 	add.w	lr, r1, #3
 8017954:	d928      	bls.n	80179a8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8017956:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801795a:	fb11 f100 	smulbb	r1, r1, r0
 801795e:	4421      	add	r1, r4
 8017960:	b289      	uxth	r1, r1
 8017962:	f101 0801 	add.w	r8, r1, #1
 8017966:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801796a:	1209      	asrs	r1, r1, #8
 801796c:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8017970:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8017974:	fb11 f100 	smulbb	r1, r1, r0
 8017978:	4439      	add	r1, r7
 801797a:	b289      	uxth	r1, r1
 801797c:	f101 0801 	add.w	r8, r1, #1
 8017980:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8017984:	1209      	asrs	r1, r1, #8
 8017986:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801798a:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801798e:	fb11 f100 	smulbb	r1, r1, r0
 8017992:	4431      	add	r1, r6
 8017994:	b289      	uxth	r1, r1
 8017996:	f101 0801 	add.w	r8, r1, #1
 801799a:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801799e:	1209      	asrs	r1, r1, #8
 80179a0:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80179a4:	4671      	mov	r1, lr
 80179a6:	e7d2      	b.n	801794e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80179a8:	4411      	add	r1, r2
 80179aa:	e7cc      	b.n	8017946 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80179ac:	4411      	add	r1, r2
 80179ae:	4299      	cmp	r1, r3
 80179b0:	d209      	bcs.n	80179c6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80179b2:	1948      	adds	r0, r1, r5
 80179b4:	4281      	cmp	r1, r0
 80179b6:	d2f9      	bcs.n	80179ac <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80179b8:	700c      	strb	r4, [r1, #0]
 80179ba:	3103      	adds	r1, #3
 80179bc:	f801 7c02 	strb.w	r7, [r1, #-2]
 80179c0:	f801 6c01 	strb.w	r6, [r1, #-1]
 80179c4:	e7f6      	b.n	80179b4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80179c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080179cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80179cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d0:	b093      	sub	sp, #76	; 0x4c
 80179d2:	4699      	mov	r9, r3
 80179d4:	4617      	mov	r7, r2
 80179d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80179da:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	; 0x74
 80179de:	4604      	mov	r4, r0
 80179e0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80179e4:	a80c      	add	r0, sp, #48	; 0x30
 80179e6:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	; 0x78
 80179ea:	460d      	mov	r5, r1
 80179ec:	4649      	mov	r1, r9
 80179ee:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80179f2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80179f6:	f8ad 8034 	strh.w	r8, [sp, #52]	; 0x34
 80179fa:	f8ad 6036 	strh.w	r6, [sp, #54]	; 0x36
 80179fe:	f7f8 f975 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 8017a02:	4639      	mov	r1, r7
 8017a04:	a80c      	add	r0, sp, #48	; 0x30
 8017a06:	f7f8 f971 	bl	800fcec <_ZN8touchgfx4RectaNERKS0_>
 8017a0a:	4b78      	ldr	r3, [pc, #480]	; (8017bec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8017a0c:	8818      	ldrh	r0, [r3, #0]
 8017a0e:	4b78      	ldr	r3, [pc, #480]	; (8017bf0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8017a10:	b202      	sxth	r2, r0
 8017a12:	8819      	ldrh	r1, [r3, #0]
 8017a14:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017a18:	b20f      	sxth	r7, r1
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	da07      	bge.n	8017a2e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8017a1e:	f8bd c034 	ldrh.w	ip, [sp, #52]	; 0x34
 8017a22:	4463      	add	r3, ip
 8017a24:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8017a28:	2300      	movs	r3, #0
 8017a2a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8017a2e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8017a32:	f9bd c034 	ldrsh.w	ip, [sp, #52]	; 0x34
 8017a36:	1ad2      	subs	r2, r2, r3
 8017a38:	4594      	cmp	ip, r2
 8017a3a:	bfc4      	itt	gt
 8017a3c:	1ac2      	subgt	r2, r0, r3
 8017a3e:	f8ad 2034 	strhgt.w	r2, [sp, #52]	; 0x34
 8017a42:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8017a46:	2a00      	cmp	r2, #0
 8017a48:	da07      	bge.n	8017a5a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8017a4a:	f8bd c036 	ldrh.w	ip, [sp, #54]	; 0x36
 8017a4e:	4462      	add	r2, ip
 8017a50:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
 8017a54:	2200      	movs	r2, #0
 8017a56:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017a5a:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 8017a5e:	f9bd c036 	ldrsh.w	ip, [sp, #54]	; 0x36
 8017a62:	1abf      	subs	r7, r7, r2
 8017a64:	45bc      	cmp	ip, r7
 8017a66:	f8df c190 	ldr.w	ip, [pc, #400]	; 8017bf8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8017a6a:	bfc8      	it	gt
 8017a6c:	1a8f      	subgt	r7, r1, r2
 8017a6e:	f89c c000 	ldrb.w	ip, [ip]
 8017a72:	bfc8      	it	gt
 8017a74:	f8ad 7036 	strhgt.w	r7, [sp, #54]	; 0x36
 8017a78:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8017a7c:	f1bc 0f00 	cmp.w	ip, #0
 8017a80:	d176      	bne.n	8017b70 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8017a82:	4287      	cmp	r7, r0
 8017a84:	bf14      	ite	ne
 8017a86:	2100      	movne	r1, #0
 8017a88:	2101      	moveq	r1, #1
 8017a8a:	2f00      	cmp	r7, #0
 8017a8c:	9107      	str	r1, [sp, #28]
 8017a8e:	dd73      	ble.n	8017b78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8017a90:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	; 0x36
 8017a94:	2900      	cmp	r1, #0
 8017a96:	9104      	str	r1, [sp, #16]
 8017a98:	dd6e      	ble.n	8017b78 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8017a9a:	f8b9 1000 	ldrh.w	r1, [r9]
 8017a9e:	a80e      	add	r0, sp, #56	; 0x38
 8017aa0:	f8ad 8044 	strh.w	r8, [sp, #68]	; 0x44
 8017aa4:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8017aa8:	1a5b      	subs	r3, r3, r1
 8017aaa:	a910      	add	r1, sp, #64	; 0x40
 8017aac:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 8017ab0:	b21b      	sxth	r3, r3
 8017ab2:	f8ad 703c 	strh.w	r7, [sp, #60]	; 0x3c
 8017ab6:	f8df a144 	ldr.w	sl, [pc, #324]	; 8017bfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8017aba:	9305      	str	r3, [sp, #20]
 8017abc:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8017ac0:	1ad2      	subs	r2, r2, r3
 8017ac2:	b213      	sxth	r3, r2
 8017ac4:	9306      	str	r3, [sp, #24]
 8017ac6:	9b05      	ldr	r3, [sp, #20]
 8017ac8:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017acc:	9b06      	ldr	r3, [sp, #24]
 8017ace:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017ad2:	9b04      	ldr	r3, [sp, #16]
 8017ad4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8017ad8:	2300      	movs	r3, #0
 8017ada:	9310      	str	r3, [sp, #64]	; 0x40
 8017adc:	f7fb f84c 	bl	8012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ae0:	4640      	mov	r0, r8
 8017ae2:	f7fb f821 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ae6:	a810      	add	r0, sp, #64	; 0x40
 8017ae8:	f7fb f81e 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017aec:	4b41      	ldr	r3, [pc, #260]	; (8017bf4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8017aee:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8017af2:	4628      	mov	r0, r5
 8017af4:	881b      	ldrh	r3, [r3, #0]
 8017af6:	9308      	str	r3, [sp, #32]
 8017af8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8017afc:	b21b      	sxth	r3, r3
 8017afe:	9303      	str	r3, [sp, #12]
 8017b00:	682b      	ldr	r3, [r5, #0]
 8017b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b04:	4798      	blx	r3
 8017b06:	9a03      	ldr	r2, [sp, #12]
 8017b08:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8017b0c:	4681      	mov	r9, r0
 8017b0e:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8017b12:	fb13 f302 	smulbb	r3, r3, r2
 8017b16:	2203      	movs	r2, #3
 8017b18:	f8da 0000 	ldr.w	r0, [sl]
 8017b1c:	fb15 3302 	smlabb	r3, r5, r2, r3
 8017b20:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8017b22:	920b      	str	r2, [sp, #44]	; 0x2c
 8017b24:	441d      	add	r5, r3
 8017b26:	6803      	ldr	r3, [r0, #0]
 8017b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b2a:	4798      	blx	r3
 8017b2c:	9009      	str	r0, [sp, #36]	; 0x24
 8017b2e:	f8da 0000 	ldr.w	r0, [sl]
 8017b32:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8017b36:	6803      	ldr	r3, [r0, #0]
 8017b38:	910a      	str	r1, [sp, #40]	; 0x28
 8017b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b3c:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	; 0x32
 8017b40:	4798      	blx	r3
 8017b42:	f010 0f01 	tst.w	r0, #1
 8017b46:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8017b4a:	d01e      	beq.n	8017b8a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8017b4c:	f8da 0000 	ldr.w	r0, [sl]
 8017b50:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8017b54:	6803      	ldr	r3, [r0, #0]
 8017b56:	9200      	str	r2, [sp, #0]
 8017b58:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017b5a:	462b      	mov	r3, r5
 8017b5c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8017b60:	47b0      	blx	r6
 8017b62:	9b05      	ldr	r3, [sp, #20]
 8017b64:	80a7      	strh	r7, [r4, #4]
 8017b66:	8023      	strh	r3, [r4, #0]
 8017b68:	9b06      	ldr	r3, [sp, #24]
 8017b6a:	8063      	strh	r3, [r4, #2]
 8017b6c:	9b04      	ldr	r3, [sp, #16]
 8017b6e:	e007      	b.n	8017b80 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8017b70:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	; 0x36
 8017b74:	4288      	cmp	r0, r1
 8017b76:	e785      	b.n	8017a84 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8017b78:	2300      	movs	r3, #0
 8017b7a:	8023      	strh	r3, [r4, #0]
 8017b7c:	8063      	strh	r3, [r4, #2]
 8017b7e:	80a3      	strh	r3, [r4, #4]
 8017b80:	4620      	mov	r0, r4
 8017b82:	80e3      	strh	r3, [r4, #6]
 8017b84:	b013      	add	sp, #76	; 0x4c
 8017b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b8a:	fb09 f606 	mul.w	r6, r9, r6
 8017b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017b90:	fb11 6602 	smlabb	r6, r1, r2, r6
 8017b94:	9a07      	ldr	r2, [sp, #28]
 8017b96:	4433      	add	r3, r6
 8017b98:	461e      	mov	r6, r3
 8017b9a:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 8017b9e:	b16a      	cbz	r2, 8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017ba0:	9a08      	ldr	r2, [sp, #32]
 8017ba2:	4593      	cmp	fp, r2
 8017ba4:	d10a      	bne.n	8017bbc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 8017ba6:	f8da 0000 	ldr.w	r0, [sl]
 8017baa:	fb09 f303 	mul.w	r3, r9, r3
 8017bae:	4629      	mov	r1, r5
 8017bb0:	6802      	ldr	r2, [r0, #0]
 8017bb2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017bb6:	4632      	mov	r2, r6
 8017bb8:	47d0      	blx	sl
 8017bba:	e7d2      	b.n	8017b62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017bbc:	9a03      	ldr	r2, [sp, #12]
 8017bbe:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8017bfc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 8017bc2:	fb02 5803 	mla	r8, r2, r3, r5
 8017bc6:	4545      	cmp	r5, r8
 8017bc8:	d2cb      	bcs.n	8017b62 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 8017bca:	f8db 0000 	ldr.w	r0, [fp]
 8017bce:	4629      	mov	r1, r5
 8017bd0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8017bd4:	6802      	ldr	r2, [r0, #0]
 8017bd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017bda:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8017bde:	4632      	mov	r2, r6
 8017be0:	47d0      	blx	sl
 8017be2:	9b03      	ldr	r3, [sp, #12]
 8017be4:	444e      	add	r6, r9
 8017be6:	441d      	add	r5, r3
 8017be8:	e7ed      	b.n	8017bc6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 8017bea:	bf00      	nop
 8017bec:	240074b0 	.word	0x240074b0
 8017bf0:	240074b2 	.word	0x240074b2
 8017bf4:	240074b6 	.word	0x240074b6
 8017bf8:	240074b4 	.word	0x240074b4
 8017bfc:	240074bc 	.word	0x240074bc

08017c00 <_ZN8touchgfx8LCD24bppC1Ev>:
 8017c00:	2200      	movs	r2, #0
 8017c02:	490c      	ldr	r1, [pc, #48]	; (8017c34 <_ZN8touchgfx8LCD24bppC1Ev+0x34>)
 8017c04:	6042      	str	r2, [r0, #4]
 8017c06:	6001      	str	r1, [r0, #0]
 8017c08:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8017c0c:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8017c10:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8017c14:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8017c18:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8017c1c:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8017c20:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8017c24:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8017c28:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8017c2c:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8017c30:	4770      	bx	lr
 8017c32:	bf00      	nop
 8017c34:	08020dc4 	.word	0x08020dc4

08017c38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8017c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c3c:	b091      	sub	sp, #68	; 0x44
 8017c3e:	4607      	mov	r7, r0
 8017c40:	4688      	mov	r8, r1
 8017c42:	6810      	ldr	r0, [r2, #0]
 8017c44:	6851      	ldr	r1, [r2, #4]
 8017c46:	ac0c      	add	r4, sp, #48	; 0x30
 8017c48:	4616      	mov	r6, r2
 8017c4a:	f89d 9068 	ldrb.w	r9, [sp, #104]	; 0x68
 8017c4e:	4d64      	ldr	r5, [pc, #400]	; (8017de0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017c50:	f8df a190 	ldr.w	sl, [pc, #400]	; 8017de4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8017c54:	c403      	stmia	r4!, {r0, r1}
 8017c56:	6818      	ldr	r0, [r3, #0]
 8017c58:	ac0e      	add	r4, sp, #56	; 0x38
 8017c5a:	6859      	ldr	r1, [r3, #4]
 8017c5c:	c403      	stmia	r4!, {r0, r1}
 8017c5e:	a80c      	add	r0, sp, #48	; 0x30
 8017c60:	f7fa ff62 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017c64:	4631      	mov	r1, r6
 8017c66:	a80e      	add	r0, sp, #56	; 0x38
 8017c68:	f7fa ff86 	bl	8012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017c6c:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017c70:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017c74:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017c78:	6828      	ldr	r0, [r5, #0]
 8017c7a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017c7e:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8017c82:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8017c86:	440f      	add	r7, r1
 8017c88:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017c8c:	440a      	add	r2, r1
 8017c8e:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017c92:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017c96:	4413      	add	r3, r2
 8017c98:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017c9c:	6803      	ldr	r3, [r0, #0]
 8017c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ca0:	4798      	blx	r3
 8017ca2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017ca6:	6828      	ldr	r0, [r5, #0]
 8017ca8:	d01f      	beq.n	8017cea <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 8017caa:	2201      	movs	r2, #1
 8017cac:	2500      	movs	r5, #0
 8017cae:	6801      	ldr	r1, [r0, #0]
 8017cb0:	b2a4      	uxth	r4, r4
 8017cb2:	b2b6      	uxth	r6, r6
 8017cb4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017cb8:	e9cd 2508 	strd	r2, r5, [sp, #32]
 8017cbc:	250b      	movs	r5, #11
 8017cbe:	9507      	str	r5, [sp, #28]
 8017cc0:	f8ba 5000 	ldrh.w	r5, [sl]
 8017cc4:	f8cd 9010 	str.w	r9, [sp, #16]
 8017cc8:	9602      	str	r6, [sp, #8]
 8017cca:	9401      	str	r4, [sp, #4]
 8017ccc:	e9cd 2505 	strd	r2, r5, [sp, #20]
 8017cd0:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017cd4:	9203      	str	r2, [sp, #12]
 8017cd6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017cda:	9200      	str	r2, [sp, #0]
 8017cdc:	4642      	mov	r2, r8
 8017cde:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8017ce0:	4639      	mov	r1, r7
 8017ce2:	47a0      	blx	r4
 8017ce4:	b011      	add	sp, #68	; 0x44
 8017ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cea:	6803      	ldr	r3, [r0, #0]
 8017cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017cee:	4798      	blx	r3
 8017cf0:	f8ba 5000 	ldrh.w	r5, [sl]
 8017cf4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017cf8:	f04f 0e04 	mov.w	lr, #4
 8017cfc:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017d00:	436e      	muls	r6, r5
 8017d02:	fb05 2303 	mla	r3, r5, r3, r2
 8017d06:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017d0a:	1b2d      	subs	r5, r5, r4
 8017d0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017d10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017d14:	4418      	add	r0, r3
 8017d16:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8017d1a:	1982      	adds	r2, r0, r6
 8017d1c:	1b1b      	subs	r3, r3, r4
 8017d1e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017d22:	930b      	str	r3, [sp, #44]	; 0x2c
 8017d24:	4290      	cmp	r0, r2
 8017d26:	d254      	bcs.n	8017dd2 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017d28:	eb00 0a04 	add.w	sl, r0, r4
 8017d2c:	4550      	cmp	r0, sl
 8017d2e:	d24c      	bcs.n	8017dca <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 8017d30:	f817 1b01 	ldrb.w	r1, [r7], #1
 8017d34:	fb1e e101 	smlabb	r1, lr, r1, lr
 8017d38:	eb08 0c01 	add.w	ip, r8, r1
 8017d3c:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8017d40:	b173      	cbz	r3, 8017d60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017d42:	2bff      	cmp	r3, #255	; 0xff
 8017d44:	f818 b001 	ldrb.w	fp, [r8, r1]
 8017d48:	d10c      	bne.n	8017d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017d4a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8017d4e:	d109      	bne.n	8017d64 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8017d50:	f880 b000 	strb.w	fp, [r0]
 8017d54:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8017d58:	7043      	strb	r3, [r0, #1]
 8017d5a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8017d5e:	7083      	strb	r3, [r0, #2]
 8017d60:	3003      	adds	r0, #3
 8017d62:	e7e3      	b.n	8017d2c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8017d64:	fb09 f103 	mul.w	r1, r9, r3
 8017d68:	1c4b      	adds	r3, r1, #1
 8017d6a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8017d6e:	7801      	ldrb	r1, [r0, #0]
 8017d70:	121b      	asrs	r3, r3, #8
 8017d72:	b29e      	uxth	r6, r3
 8017d74:	43db      	mvns	r3, r3
 8017d76:	fb1b fb06 	smulbb	fp, fp, r6
 8017d7a:	b2db      	uxtb	r3, r3
 8017d7c:	fb01 b103 	mla	r1, r1, r3, fp
 8017d80:	b289      	uxth	r1, r1
 8017d82:	f101 0b01 	add.w	fp, r1, #1
 8017d86:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017d8a:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017d8e:	fb1b fb03 	smulbb	fp, fp, r3
 8017d92:	1209      	asrs	r1, r1, #8
 8017d94:	7001      	strb	r1, [r0, #0]
 8017d96:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8017d9a:	fb01 b106 	mla	r1, r1, r6, fp
 8017d9e:	b289      	uxth	r1, r1
 8017da0:	f101 0b01 	add.w	fp, r1, #1
 8017da4:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 8017da8:	1209      	asrs	r1, r1, #8
 8017daa:	7041      	strb	r1, [r0, #1]
 8017dac:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8017db0:	f890 c002 	ldrb.w	ip, [r0, #2]
 8017db4:	fb1c f303 	smulbb	r3, ip, r3
 8017db8:	fb01 3606 	mla	r6, r1, r6, r3
 8017dbc:	b2b6      	uxth	r6, r6
 8017dbe:	1c73      	adds	r3, r6, #1
 8017dc0:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 8017dc4:	1236      	asrs	r6, r6, #8
 8017dc6:	7086      	strb	r6, [r0, #2]
 8017dc8:	e7ca      	b.n	8017d60 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8017dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dcc:	4428      	add	r0, r5
 8017dce:	441f      	add	r7, r3
 8017dd0:	e7a8      	b.n	8017d24 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 8017dd2:	4b03      	ldr	r3, [pc, #12]	; (8017de0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8017dd4:	6818      	ldr	r0, [r3, #0]
 8017dd6:	6803      	ldr	r3, [r0, #0]
 8017dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dda:	4798      	blx	r3
 8017ddc:	e782      	b.n	8017ce4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 8017dde:	bf00      	nop
 8017de0:	240074bc 	.word	0x240074bc
 8017de4:	240074b6 	.word	0x240074b6

08017de8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8017de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dec:	b091      	sub	sp, #68	; 0x44
 8017dee:	4680      	mov	r8, r0
 8017df0:	460e      	mov	r6, r1
 8017df2:	6810      	ldr	r0, [r2, #0]
 8017df4:	6851      	ldr	r1, [r2, #4]
 8017df6:	ad0c      	add	r5, sp, #48	; 0x30
 8017df8:	4614      	mov	r4, r2
 8017dfa:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
 8017dfe:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8017f98 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 8017e02:	f8df a198 	ldr.w	sl, [pc, #408]	; 8017f9c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8017e06:	c503      	stmia	r5!, {r0, r1}
 8017e08:	6818      	ldr	r0, [r3, #0]
 8017e0a:	ad0e      	add	r5, sp, #56	; 0x38
 8017e0c:	6859      	ldr	r1, [r3, #4]
 8017e0e:	c503      	stmia	r5!, {r0, r1}
 8017e10:	a80c      	add	r0, sp, #48	; 0x30
 8017e12:	f7fa fe89 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017e16:	4621      	mov	r1, r4
 8017e18:	a80e      	add	r0, sp, #56	; 0x38
 8017e1a:	f7fa fead 	bl	8012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017e1e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8017e22:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017e26:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8017e2a:	f8d9 0000 	ldr.w	r0, [r9]
 8017e2e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017e32:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 8017e36:	eb08 0401 	add.w	r4, r8, r1
 8017e3a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8017e3e:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8017e42:	440a      	add	r2, r1
 8017e44:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8017e48:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8017e4c:	4413      	add	r3, r2
 8017e4e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8017e52:	6803      	ldr	r3, [r0, #0]
 8017e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e56:	4798      	blx	r3
 8017e58:	f010 0f80 	tst.w	r0, #128	; 0x80
 8017e5c:	f8d9 0000 	ldr.w	r0, [r9]
 8017e60:	d022      	beq.n	8017ea8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 8017e62:	2200      	movs	r2, #0
 8017e64:	f04f 0c01 	mov.w	ip, #1
 8017e68:	6801      	ldr	r1, [r0, #0]
 8017e6a:	b2ad      	uxth	r5, r5
 8017e6c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017e70:	e9cd c208 	strd	ip, r2, [sp, #32]
 8017e74:	f04f 0c0b 	mov.w	ip, #11
 8017e78:	f8cd c01c 	str.w	ip, [sp, #28]
 8017e7c:	f8ba c000 	ldrh.w	ip, [sl]
 8017e80:	9704      	str	r7, [sp, #16]
 8017e82:	9502      	str	r5, [sp, #8]
 8017e84:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 8017e88:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8017e8c:	9203      	str	r2, [sp, #12]
 8017e8e:	fa1f f288 	uxth.w	r2, r8
 8017e92:	9201      	str	r2, [sp, #4]
 8017e94:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8017e98:	9200      	str	r2, [sp, #0]
 8017e9a:	4632      	mov	r2, r6
 8017e9c:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8017e9e:	4621      	mov	r1, r4
 8017ea0:	47a8      	blx	r5
 8017ea2:	b011      	add	sp, #68	; 0x44
 8017ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ea8:	6803      	ldr	r3, [r0, #0]
 8017eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017eac:	4798      	blx	r3
 8017eae:	f8ba 2000 	ldrh.w	r2, [sl]
 8017eb2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8017eb6:	f04f 0e03 	mov.w	lr, #3
 8017eba:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8017ebe:	4355      	muls	r5, r2
 8017ec0:	fa1f fc87 	uxth.w	ip, r7
 8017ec4:	fb02 1303 	mla	r3, r2, r3, r1
 8017ec8:	eba2 0208 	sub.w	r2, r2, r8
 8017ecc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ed0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017ed4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017ed8:	4418      	add	r0, r3
 8017eda:	920b      	str	r2, [sp, #44]	; 0x2c
 8017edc:	1943      	adds	r3, r0, r5
 8017ede:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8017ee2:	f1c7 05ff 	rsb	r5, r7, #255	; 0xff
 8017ee6:	eba2 0208 	sub.w	r2, r2, r8
 8017eea:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017eee:	b2ad      	uxth	r5, r5
 8017ef0:	4298      	cmp	r0, r3
 8017ef2:	d24a      	bcs.n	8017f8a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8017ef4:	eb00 0908 	add.w	r9, r0, r8
 8017ef8:	4621      	mov	r1, r4
 8017efa:	4548      	cmp	r0, r9
 8017efc:	460c      	mov	r4, r1
 8017efe:	d240      	bcs.n	8017f82 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 8017f00:	f04f 0a04 	mov.w	sl, #4
 8017f04:	7824      	ldrb	r4, [r4, #0]
 8017f06:	2fff      	cmp	r7, #255	; 0xff
 8017f08:	f101 0101 	add.w	r1, r1, #1
 8017f0c:	fb1e a404 	smlabb	r4, lr, r4, sl
 8017f10:	eb06 0a04 	add.w	sl, r6, r4
 8017f14:	f816 b004 	ldrb.w	fp, [r6, r4]
 8017f18:	d02b      	beq.n	8017f72 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8017f1a:	7804      	ldrb	r4, [r0, #0]
 8017f1c:	fb14 f405 	smulbb	r4, r4, r5
 8017f20:	fb0b 440c 	mla	r4, fp, ip, r4
 8017f24:	b2a4      	uxth	r4, r4
 8017f26:	f104 0b01 	add.w	fp, r4, #1
 8017f2a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017f2e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8017f32:	fb1b fb05 	smulbb	fp, fp, r5
 8017f36:	1224      	asrs	r4, r4, #8
 8017f38:	7004      	strb	r4, [r0, #0]
 8017f3a:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017f3e:	fb04 b40c 	mla	r4, r4, ip, fp
 8017f42:	b2a4      	uxth	r4, r4
 8017f44:	f104 0b01 	add.w	fp, r4, #1
 8017f48:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8017f4c:	1224      	asrs	r4, r4, #8
 8017f4e:	7044      	strb	r4, [r0, #1]
 8017f50:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017f54:	f890 a002 	ldrb.w	sl, [r0, #2]
 8017f58:	fb1a fa05 	smulbb	sl, sl, r5
 8017f5c:	fb04 a40c 	mla	r4, r4, ip, sl
 8017f60:	b2a4      	uxth	r4, r4
 8017f62:	f104 0a01 	add.w	sl, r4, #1
 8017f66:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8017f6a:	1224      	asrs	r4, r4, #8
 8017f6c:	7084      	strb	r4, [r0, #2]
 8017f6e:	3003      	adds	r0, #3
 8017f70:	e7c3      	b.n	8017efa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 8017f72:	f880 b000 	strb.w	fp, [r0]
 8017f76:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8017f7a:	7044      	strb	r4, [r0, #1]
 8017f7c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8017f80:	e7f4      	b.n	8017f6c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 8017f82:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8017f84:	4420      	add	r0, r4
 8017f86:	188c      	adds	r4, r1, r2
 8017f88:	e7b2      	b.n	8017ef0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 8017f8a:	4b03      	ldr	r3, [pc, #12]	; (8017f98 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 8017f8c:	6818      	ldr	r0, [r3, #0]
 8017f8e:	6803      	ldr	r3, [r0, #0]
 8017f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f92:	4798      	blx	r3
 8017f94:	e785      	b.n	8017ea2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 8017f96:	bf00      	nop
 8017f98:	240074bc 	.word	0x240074bc
 8017f9c:	240074b6 	.word	0x240074b6

08017fa0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8017fa0:	b430      	push	{r4, r5}
 8017fa2:	780d      	ldrb	r5, [r1, #0]
 8017fa4:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8017fa8:	b11d      	cbz	r5, 8017fb2 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x12>
 8017faa:	2d01      	cmp	r5, #1
 8017fac:	d005      	beq.n	8017fba <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8017fae:	bc30      	pop	{r4, r5}
 8017fb0:	4770      	bx	lr
 8017fb2:	9402      	str	r4, [sp, #8]
 8017fb4:	bc30      	pop	{r4, r5}
 8017fb6:	f7ff be3f 	b.w	8017c38 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8017fba:	9402      	str	r4, [sp, #8]
 8017fbc:	bc30      	pop	{r4, r5}
 8017fbe:	f7ff bf13 	b.w	8017de8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
	...

08017fc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8017fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fc8:	4605      	mov	r5, r0
 8017fca:	b08f      	sub	sp, #60	; 0x3c
 8017fcc:	460c      	mov	r4, r1
 8017fce:	461f      	mov	r7, r3
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d052      	beq.n	801807a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8017fd4:	6808      	ldr	r0, [r1, #0]
 8017fd6:	ab0a      	add	r3, sp, #40	; 0x28
 8017fd8:	6849      	ldr	r1, [r1, #4]
 8017fda:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80181a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 8017fde:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 80181a8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 8017fe2:	c303      	stmia	r3!, {r0, r1}
 8017fe4:	6810      	ldr	r0, [r2, #0]
 8017fe6:	ab0c      	add	r3, sp, #48	; 0x30
 8017fe8:	6851      	ldr	r1, [r2, #4]
 8017fea:	c303      	stmia	r3!, {r0, r1}
 8017fec:	a80a      	add	r0, sp, #40	; 0x28
 8017fee:	f7fa fd9b 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ff2:	4621      	mov	r1, r4
 8017ff4:	a80c      	add	r0, sp, #48	; 0x30
 8017ff6:	f7fa fdbf 	bl	8012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ffa:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8017ffe:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018002:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018006:	f8d8 0000 	ldr.w	r0, [r8]
 801800a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801800e:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	; 0x34
 8018012:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	; 0x36
 8018016:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801801a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801801e:	440a      	add	r2, r1
 8018020:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8018024:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8018028:	4413      	add	r3, r2
 801802a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801802e:	6803      	ldr	r3, [r0, #0]
 8018030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018032:	4798      	blx	r3
 8018034:	2fff      	cmp	r7, #255	; 0xff
 8018036:	d023      	beq.n	8018080 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8018038:	f010 0f04 	tst.w	r0, #4
 801803c:	f8d8 0000 	ldr.w	r0, [r8]
 8018040:	d021      	beq.n	8018086 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 8018042:	2100      	movs	r1, #0
 8018044:	f04f 0e01 	mov.w	lr, #1
 8018048:	f8d0 c000 	ldr.w	ip, [r0]
 801804c:	b2a4      	uxth	r4, r4
 801804e:	9106      	str	r1, [sp, #24]
 8018050:	b2b6      	uxth	r6, r6
 8018052:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8018056:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801805a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801805e:	f8b9 e000 	ldrh.w	lr, [r9]
 8018062:	9703      	str	r7, [sp, #12]
 8018064:	9401      	str	r4, [sp, #4]
 8018066:	9600      	str	r6, [sp, #0]
 8018068:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801806c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8018070:	9102      	str	r1, [sp, #8]
 8018072:	4629      	mov	r1, r5
 8018074:	f8dc 4040 	ldr.w	r4, [ip, #64]	; 0x40
 8018078:	47a0      	blx	r4
 801807a:	b00f      	add	sp, #60	; 0x3c
 801807c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018080:	f010 0f01 	tst.w	r0, #1
 8018084:	e7da      	b.n	801803c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8018086:	6803      	ldr	r3, [r0, #0]
 8018088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801808a:	4798      	blx	r3
 801808c:	f8b9 1000 	ldrh.w	r1, [r9]
 8018090:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8018094:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8018098:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801809c:	434c      	muls	r4, r1
 801809e:	2fff      	cmp	r7, #255	; 0xff
 80180a0:	fb01 2303 	mla	r3, r1, r3, r2
 80180a4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80180a8:	eba1 0106 	sub.w	r1, r1, r6
 80180ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80180b0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80180b4:	4418      	add	r0, r3
 80180b6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80180ba:	eba3 0606 	sub.w	r6, r3, r6
 80180be:	4404      	add	r4, r0
 80180c0:	ea4f 0646 	mov.w	r6, r6, lsl #1
 80180c4:	d04a      	beq.n	801815c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 80180c6:	43fa      	mvns	r2, r7
 80180c8:	b2bb      	uxth	r3, r7
 80180ca:	b2d7      	uxtb	r7, r2
 80180cc:	42a0      	cmp	r0, r4
 80180ce:	d263      	bcs.n	8018198 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80180d0:	eb00 0e0c 	add.w	lr, r0, ip
 80180d4:	4586      	cmp	lr, r0
 80180d6:	f100 0803 	add.w	r8, r0, #3
 80180da:	d93a      	bls.n	8018152 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 80180dc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80180e0:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 80180e4:	00d0      	lsls	r0, r2, #3
 80180e6:	fb19 f907 	smulbb	r9, r9, r7
 80180ea:	b2c0      	uxtb	r0, r0
 80180ec:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80180f0:	fb00 9003 	mla	r0, r0, r3, r9
 80180f4:	b280      	uxth	r0, r0
 80180f6:	f100 0901 	add.w	r9, r0, #1
 80180fa:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80180fe:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 8018102:	fb19 f907 	smulbb	r9, r9, r7
 8018106:	1200      	asrs	r0, r0, #8
 8018108:	f808 0c03 	strb.w	r0, [r8, #-3]
 801810c:	10d0      	asrs	r0, r2, #3
 801810e:	1212      	asrs	r2, r2, #8
 8018110:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018114:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8018118:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801811c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018120:	fb00 9003 	mla	r0, r0, r3, r9
 8018124:	b280      	uxth	r0, r0
 8018126:	f100 0901 	add.w	r9, r0, #1
 801812a:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801812e:	1200      	asrs	r0, r0, #8
 8018130:	f808 0c02 	strb.w	r0, [r8, #-2]
 8018134:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 8018138:	fb10 f007 	smulbb	r0, r0, r7
 801813c:	fb02 0203 	mla	r2, r2, r3, r0
 8018140:	b292      	uxth	r2, r2
 8018142:	1c50      	adds	r0, r2, #1
 8018144:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8018148:	4640      	mov	r0, r8
 801814a:	1212      	asrs	r2, r2, #8
 801814c:	f808 2c01 	strb.w	r2, [r8, #-1]
 8018150:	e7c0      	b.n	80180d4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 8018152:	4408      	add	r0, r1
 8018154:	4435      	add	r5, r6
 8018156:	e7b9      	b.n	80180cc <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 8018158:	4408      	add	r0, r1
 801815a:	4435      	add	r5, r6
 801815c:	42a0      	cmp	r0, r4
 801815e:	d21b      	bcs.n	8018198 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 8018160:	eb00 070c 	add.w	r7, r0, ip
 8018164:	42b8      	cmp	r0, r7
 8018166:	d2f7      	bcs.n	8018158 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 8018168:	f835 3b02 	ldrh.w	r3, [r5], #2
 801816c:	3003      	adds	r0, #3
 801816e:	00da      	lsls	r2, r3, #3
 8018170:	b2d2      	uxtb	r2, r2
 8018172:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8018176:	f800 2c03 	strb.w	r2, [r0, #-3]
 801817a:	10da      	asrs	r2, r3, #3
 801817c:	121b      	asrs	r3, r3, #8
 801817e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8018182:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8018186:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801818a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801818e:	f800 2c02 	strb.w	r2, [r0, #-2]
 8018192:	f800 3c01 	strb.w	r3, [r0, #-1]
 8018196:	e7e5      	b.n	8018164 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8018198:	4b02      	ldr	r3, [pc, #8]	; (80181a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801819a:	6818      	ldr	r0, [r3, #0]
 801819c:	6803      	ldr	r3, [r0, #0]
 801819e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181a0:	4798      	blx	r3
 80181a2:	e76a      	b.n	801807a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 80181a4:	240074bc 	.word	0x240074bc
 80181a8:	240074b6 	.word	0x240074b6

080181ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80181ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181b0:	b08a      	sub	sp, #40	; 0x28
 80181b2:	460d      	mov	r5, r1
 80181b4:	4604      	mov	r4, r0
 80181b6:	461e      	mov	r6, r3
 80181b8:	6808      	ldr	r0, [r1, #0]
 80181ba:	ab06      	add	r3, sp, #24
 80181bc:	6849      	ldr	r1, [r1, #4]
 80181be:	4f5d      	ldr	r7, [pc, #372]	; (8018334 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80181c0:	c303      	stmia	r3!, {r0, r1}
 80181c2:	6810      	ldr	r0, [r2, #0]
 80181c4:	ab08      	add	r3, sp, #32
 80181c6:	6851      	ldr	r1, [r2, #4]
 80181c8:	c303      	stmia	r3!, {r0, r1}
 80181ca:	a806      	add	r0, sp, #24
 80181cc:	f7fa fcac 	bl	8012b28 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80181d0:	4629      	mov	r1, r5
 80181d2:	a808      	add	r0, sp, #32
 80181d4:	f7fa fcd0 	bl	8012b78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80181d8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80181dc:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80181e0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80181e4:	6838      	ldr	r0, [r7, #0]
 80181e6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80181ea:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80181ee:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 80181f2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80181f6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80181fa:	440a      	add	r2, r1
 80181fc:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018200:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018204:	4413      	add	r3, r2
 8018206:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801820a:	6803      	ldr	r3, [r0, #0]
 801820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801820e:	4798      	blx	r3
 8018210:	2eff      	cmp	r6, #255	; 0xff
 8018212:	d119      	bne.n	8018248 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 8018214:	f010 0f20 	tst.w	r0, #32
 8018218:	6838      	ldr	r0, [r7, #0]
 801821a:	d018      	beq.n	801824e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801821c:	b2ad      	uxth	r5, r5
 801821e:	2700      	movs	r7, #0
 8018220:	6801      	ldr	r1, [r0, #0]
 8018222:	9501      	str	r5, [sp, #4]
 8018224:	fa1f f588 	uxth.w	r5, r8
 8018228:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801822c:	9500      	str	r5, [sp, #0]
 801822e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018232:	e9cd 6703 	strd	r6, r7, [sp, #12]
 8018236:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801823a:	9602      	str	r6, [sp, #8]
 801823c:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801823e:	4621      	mov	r1, r4
 8018240:	47a8      	blx	r5
 8018242:	b00a      	add	sp, #40	; 0x28
 8018244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018248:	f010 0f40 	tst.w	r0, #64	; 0x40
 801824c:	e7e4      	b.n	8018218 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801824e:	6803      	ldr	r3, [r0, #0]
 8018250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018252:	4798      	blx	r3
 8018254:	4b38      	ldr	r3, [pc, #224]	; (8018338 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8018256:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801825a:	f8b3 c000 	ldrh.w	ip, [r3]
 801825e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8018262:	fb0c f505 	mul.w	r5, ip, r5
 8018266:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801826a:	fb0c 2303 	mla	r3, ip, r3, r2
 801826e:	ebac 0c08 	sub.w	ip, ip, r8
 8018272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018276:	ebae 0e08 	sub.w	lr, lr, r8
 801827a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801827e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8018282:	4418      	add	r0, r3
 8018284:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8018288:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801828c:	4405      	add	r5, r0
 801828e:	42a8      	cmp	r0, r5
 8018290:	d24a      	bcs.n	8018328 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8018292:	eb00 0803 	add.w	r8, r0, r3
 8018296:	4540      	cmp	r0, r8
 8018298:	d243      	bcs.n	8018322 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801829a:	78e2      	ldrb	r2, [r4, #3]
 801829c:	b15a      	cbz	r2, 80182b6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801829e:	2aff      	cmp	r2, #255	; 0xff
 80182a0:	f894 9000 	ldrb.w	r9, [r4]
 80182a4:	d10a      	bne.n	80182bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80182a6:	2eff      	cmp	r6, #255	; 0xff
 80182a8:	d108      	bne.n	80182bc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 80182aa:	f880 9000 	strb.w	r9, [r0]
 80182ae:	7862      	ldrb	r2, [r4, #1]
 80182b0:	7042      	strb	r2, [r0, #1]
 80182b2:	78a2      	ldrb	r2, [r4, #2]
 80182b4:	7082      	strb	r2, [r0, #2]
 80182b6:	3003      	adds	r0, #3
 80182b8:	3404      	adds	r4, #4
 80182ba:	e7ec      	b.n	8018296 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 80182bc:	4372      	muls	r2, r6
 80182be:	1c51      	adds	r1, r2, #1
 80182c0:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80182c4:	1209      	asrs	r1, r1, #8
 80182c6:	fa1f fa81 	uxth.w	sl, r1
 80182ca:	43c9      	mvns	r1, r1
 80182cc:	fb19 f90a 	smulbb	r9, r9, sl
 80182d0:	b2ca      	uxtb	r2, r1
 80182d2:	7801      	ldrb	r1, [r0, #0]
 80182d4:	fb01 9902 	mla	r9, r1, r2, r9
 80182d8:	fa1f f989 	uxth.w	r9, r9
 80182dc:	f109 0101 	add.w	r1, r9, #1
 80182e0:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 80182e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80182e8:	f880 9000 	strb.w	r9, [r0]
 80182ec:	f890 9001 	ldrb.w	r9, [r0, #1]
 80182f0:	7861      	ldrb	r1, [r4, #1]
 80182f2:	fb19 f902 	smulbb	r9, r9, r2
 80182f6:	fb01 910a 	mla	r1, r1, sl, r9
 80182fa:	b289      	uxth	r1, r1
 80182fc:	f101 0901 	add.w	r9, r1, #1
 8018300:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8018304:	1209      	asrs	r1, r1, #8
 8018306:	7041      	strb	r1, [r0, #1]
 8018308:	7881      	ldrb	r1, [r0, #2]
 801830a:	f894 9002 	ldrb.w	r9, [r4, #2]
 801830e:	fb11 f202 	smulbb	r2, r1, r2
 8018312:	fb09 220a 	mla	r2, r9, sl, r2
 8018316:	b292      	uxth	r2, r2
 8018318:	1c51      	adds	r1, r2, #1
 801831a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801831e:	1212      	asrs	r2, r2, #8
 8018320:	e7c8      	b.n	80182b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8018322:	4460      	add	r0, ip
 8018324:	4474      	add	r4, lr
 8018326:	e7b2      	b.n	801828e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8018328:	6838      	ldr	r0, [r7, #0]
 801832a:	6803      	ldr	r3, [r0, #0]
 801832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801832e:	4798      	blx	r3
 8018330:	e787      	b.n	8018242 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8018332:	bf00      	nop
 8018334:	240074bc 	.word	0x240074bc
 8018338:	240074b6 	.word	0x240074b6

0801833c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801833c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018340:	b085      	sub	sp, #20
 8018342:	4606      	mov	r6, r0
 8018344:	460c      	mov	r4, r1
 8018346:	4691      	mov	r9, r2
 8018348:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801834c:	4698      	mov	r8, r3
 801834e:	b31d      	cbz	r5, 8018398 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018350:	4608      	mov	r0, r1
 8018352:	f7fd fa9b 	bl	801588c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018356:	4607      	mov	r7, r0
 8018358:	4620      	mov	r0, r4
 801835a:	f7fd facb 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801835e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8018362:	4620      	mov	r0, r4
 8018364:	f8ad 9008 	strh.w	r9, [sp, #8]
 8018368:	f8ad 800a 	strh.w	r8, [sp, #10]
 801836c:	f8ad 700c 	strh.w	r7, [sp, #12]
 8018370:	f7fd fb78 	bl	8015a64 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8018374:	280b      	cmp	r0, #11
 8018376:	d80f      	bhi.n	8018398 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 8018378:	e8df f000 	tbb	[pc, r0]
 801837c:	0e062920 	.word	0x0e062920
 8018380:	0e0e0e0e 	.word	0x0e0e0e0e
 8018384:	110e0e0e 	.word	0x110e0e0e
 8018388:	4620      	mov	r0, r4
 801838a:	f7fd fae7 	bl	801595c <_ZNK8touchgfx6Bitmap7getDataEv>
 801838e:	462b      	mov	r3, r5
 8018390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018392:	a902      	add	r1, sp, #8
 8018394:	f7ff ff0a 	bl	80181ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8018398:	b005      	add	sp, #20
 801839a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801839e:	4620      	mov	r0, r4
 80183a0:	f7fd fadc 	bl	801595c <_ZNK8touchgfx6Bitmap7getDataEv>
 80183a4:	4606      	mov	r6, r0
 80183a6:	4620      	mov	r0, r4
 80183a8:	f7fd fb08 	bl	80159bc <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 80183ac:	9500      	str	r5, [sp, #0]
 80183ae:	4601      	mov	r1, r0
 80183b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183b2:	aa02      	add	r2, sp, #8
 80183b4:	4630      	mov	r0, r6
 80183b6:	f7ff fdf3 	bl	8017fa0 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 80183ba:	e7ed      	b.n	8018398 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80183bc:	4620      	mov	r0, r4
 80183be:	f7fd facd 	bl	801595c <_ZNK8touchgfx6Bitmap7getDataEv>
 80183c2:	462b      	mov	r3, r5
 80183c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183c6:	a902      	add	r1, sp, #8
 80183c8:	f7ff fdfc 	bl	8017fc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 80183cc:	e7e4      	b.n	8018398 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>
 80183ce:	6833      	ldr	r3, [r6, #0]
 80183d0:	4620      	mov	r0, r4
 80183d2:	68df      	ldr	r7, [r3, #12]
 80183d4:	f7fd fac2 	bl	801595c <_ZNK8touchgfx6Bitmap7getDataEv>
 80183d8:	2300      	movs	r3, #0
 80183da:	4601      	mov	r1, r0
 80183dc:	aa02      	add	r2, sp, #8
 80183de:	4630      	mov	r0, r6
 80183e0:	e9cd 5300 	strd	r5, r3, [sp]
 80183e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80183e6:	47b8      	blx	r7
 80183e8:	e7d6      	b.n	8018398 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x5c>

080183ea <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80183ea:	b4f0      	push	{r4, r5, r6, r7}
 80183ec:	4616      	mov	r6, r2
 80183ee:	461c      	mov	r4, r3
 80183f0:	460d      	mov	r5, r1
 80183f2:	9a04      	ldr	r2, [sp, #16]
 80183f4:	2e01      	cmp	r6, #1
 80183f6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80183fa:	d00e      	beq.n	801841a <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 80183fc:	d303      	bcc.n	8018406 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 80183fe:	2e02      	cmp	r6, #2
 8018400:	d006      	beq.n	8018410 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8018402:	bcf0      	pop	{r4, r5, r6, r7}
 8018404:	4770      	bx	lr
 8018406:	4621      	mov	r1, r4
 8018408:	4628      	mov	r0, r5
 801840a:	bcf0      	pop	{r4, r5, r6, r7}
 801840c:	f7ff bdda 	b.w	8017fc4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8018410:	4621      	mov	r1, r4
 8018412:	4628      	mov	r0, r5
 8018414:	bcf0      	pop	{r4, r5, r6, r7}
 8018416:	f7ff bec9 	b.w	80181ac <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801841a:	6805      	ldr	r5, [r0, #0]
 801841c:	2600      	movs	r6, #0
 801841e:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8018422:	68ed      	ldr	r5, [r5, #12]
 8018424:	4613      	mov	r3, r2
 8018426:	4622      	mov	r2, r4
 8018428:	46ac      	mov	ip, r5
 801842a:	bcf0      	pop	{r4, r5, r6, r7}
 801842c:	4760      	bx	ip
	...

08018430 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8018430:	b160      	cbz	r0, 801844c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8018432:	2903      	cmp	r1, #3
 8018434:	d818      	bhi.n	8018468 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8018436:	e8df f001 	tbb	[pc, r1]
 801843a:	1902      	.short	0x1902
 801843c:	1b06      	.short	0x1b06
 801843e:	4b0e      	ldr	r3, [pc, #56]	; (8018478 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8018440:	8818      	ldrh	r0, [r3, #0]
 8018442:	4240      	negs	r0, r0
 8018444:	4770      	bx	lr
 8018446:	4b0c      	ldr	r3, [pc, #48]	; (8018478 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8018448:	8818      	ldrh	r0, [r3, #0]
 801844a:	4770      	bx	lr
 801844c:	2903      	cmp	r1, #3
 801844e:	d80b      	bhi.n	8018468 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8018450:	a301      	add	r3, pc, #4	; (adr r3, 8018458 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8018452:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8018456:	bf00      	nop
 8018458:	0801846d 	.word	0x0801846d
 801845c:	08018447 	.word	0x08018447
 8018460:	08018471 	.word	0x08018471
 8018464:	0801843f 	.word	0x0801843f
 8018468:	2000      	movs	r0, #0
 801846a:	4770      	bx	lr
 801846c:	2001      	movs	r0, #1
 801846e:	4770      	bx	lr
 8018470:	f04f 30ff 	mov.w	r0, #4294967295
 8018474:	4770      	bx	lr
 8018476:	bf00      	nop
 8018478:	240074b6 	.word	0x240074b6

0801847c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801847c:	b160      	cbz	r0, 8018498 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801847e:	2903      	cmp	r1, #3
 8018480:	d818      	bhi.n	80184b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8018482:	e8df f001 	tbb	[pc, r1]
 8018486:	0219      	.short	0x0219
 8018488:	051b      	.short	0x051b
 801848a:	4b0e      	ldr	r3, [pc, #56]	; (80184c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801848c:	8818      	ldrh	r0, [r3, #0]
 801848e:	4770      	bx	lr
 8018490:	4b0c      	ldr	r3, [pc, #48]	; (80184c4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8018492:	8818      	ldrh	r0, [r3, #0]
 8018494:	4240      	negs	r0, r0
 8018496:	4770      	bx	lr
 8018498:	2903      	cmp	r1, #3
 801849a:	d80b      	bhi.n	80184b4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801849c:	a301      	add	r3, pc, #4	; (adr r3, 80184a4 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801849e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80184a2:	bf00      	nop
 80184a4:	0801848b 	.word	0x0801848b
 80184a8:	080184bd 	.word	0x080184bd
 80184ac:	08018491 	.word	0x08018491
 80184b0:	080184b9 	.word	0x080184b9
 80184b4:	2000      	movs	r0, #0
 80184b6:	4770      	bx	lr
 80184b8:	2001      	movs	r0, #1
 80184ba:	4770      	bx	lr
 80184bc:	f04f 30ff 	mov.w	r0, #4294967295
 80184c0:	4770      	bx	lr
 80184c2:	bf00      	nop
 80184c4:	240074b6 	.word	0x240074b6

080184c8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 80184c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184cc:	b097      	sub	sp, #92	; 0x5c
 80184ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80184d0:	a912      	add	r1, sp, #72	; 0x48
 80184d2:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	; 0x80
 80184d6:	f8bd 7088 	ldrh.w	r7, [sp, #136]	; 0x88
 80184da:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 80184de:	f89d 80a4 	ldrb.w	r8, [sp, #164]	; 0xa4
 80184e2:	f89d 90ac 	ldrb.w	r9, [sp, #172]	; 0xac
 80184e6:	e881 000c 	stmia.w	r1, {r2, r3}
 80184ea:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 80184ee:	930a      	str	r3, [sp, #40]	; 0x28
 80184f0:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 80184f4:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80184f8:	9311      	str	r3, [sp, #68]	; 0x44
 80184fa:	f89d 30a8 	ldrb.w	r3, [sp, #168]	; 0xa8
 80184fe:	798d      	ldrb	r5, [r1, #6]
 8018500:	930c      	str	r3, [sp, #48]	; 0x30
 8018502:	7b4b      	ldrb	r3, [r1, #13]
 8018504:	0158      	lsls	r0, r3, #5
 8018506:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801850a:	4328      	orrs	r0, r5
 801850c:	9009      	str	r0, [sp, #36]	; 0x24
 801850e:	f000 817c 	beq.w	801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018512:	011b      	lsls	r3, r3, #4
 8018514:	79c8      	ldrb	r0, [r1, #7]
 8018516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801851a:	4303      	orrs	r3, r0
 801851c:	930e      	str	r3, [sp, #56]	; 0x38
 801851e:	f000 8174 	beq.w	801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018522:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8018526:	b29b      	uxth	r3, r3
 8018528:	2f00      	cmp	r7, #0
 801852a:	f000 8116 	beq.w	801875a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801852e:	1aff      	subs	r7, r7, r3
 8018530:	b2bf      	uxth	r7, r7
 8018532:	043b      	lsls	r3, r7, #16
 8018534:	d502      	bpl.n	801853c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8018536:	1bf6      	subs	r6, r6, r7
 8018538:	2700      	movs	r7, #0
 801853a:	b236      	sxth	r6, r6
 801853c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018540:	a812      	add	r0, sp, #72	; 0x48
 8018542:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8018546:	428e      	cmp	r6, r1
 8018548:	b28b      	uxth	r3, r1
 801854a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801854e:	bfbf      	itttt	lt
 8018550:	18ff      	addlt	r7, r7, r3
 8018552:	1bbe      	sublt	r6, r7, r6
 8018554:	b2b7      	uxthlt	r7, r6
 8018556:	460e      	movlt	r6, r1
 8018558:	8891      	ldrh	r1, [r2, #4]
 801855a:	440b      	add	r3, r1
 801855c:	4631      	mov	r1, r6
 801855e:	b21b      	sxth	r3, r3
 8018560:	9310      	str	r3, [sp, #64]	; 0x40
 8018562:	88d3      	ldrh	r3, [r2, #6]
 8018564:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018566:	449a      	add	sl, r3
 8018568:	fa0f f38a 	sxth.w	r3, sl
 801856c:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 8018570:	930f      	str	r3, [sp, #60]	; 0x3c
 8018572:	4bb5      	ldr	r3, [pc, #724]	; (8018848 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8018574:	f893 b000 	ldrb.w	fp, [r3]
 8018578:	f10b 3cff 	add.w	ip, fp, #4294967295
 801857c:	f1dc 0300 	rsbs	r3, ip, #0
 8018580:	eb43 030c 	adc.w	r3, r3, ip
 8018584:	930d      	str	r3, [sp, #52]	; 0x34
 8018586:	464b      	mov	r3, r9
 8018588:	f7fa f949 	bl	801281e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801858c:	4631      	mov	r1, r6
 801858e:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8018592:	464b      	mov	r3, r9
 8018594:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018596:	a812      	add	r0, sp, #72	; 0x48
 8018598:	f7fa f95e 	bl	8012858 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801859c:	a916      	add	r1, sp, #88	; 0x58
 801859e:	f821 0d02 	strh.w	r0, [r1, #-2]!
 80185a2:	a815      	add	r0, sp, #84	; 0x54
 80185a4:	f7fa fa7e 	bl	8012aa4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 80185a8:	f1b9 0f00 	cmp.w	r9, #0
 80185ac:	f040 80d8 	bne.w	8018760 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 80185b0:	f1bb 0f01 	cmp.w	fp, #1
 80185b4:	f040 80dc 	bne.w	8018770 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 80185b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80185ba:	b153      	cbz	r3, 80185d2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 80185bc:	2508      	movs	r5, #8
 80185be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80185c0:	fb95 f3f8 	sdiv	r3, r5, r8
 80185c4:	1e5d      	subs	r5, r3, #1
 80185c6:	4415      	add	r5, r2
 80185c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80185cc:	fb15 f503 	smulbb	r5, r5, r3
 80185d0:	b2ad      	uxth	r5, r5
 80185d2:	b907      	cbnz	r7, 80185d6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 80185d4:	b16c      	cbz	r4, 80185f2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 80185d6:	fb04 7305 	mla	r3, r4, r5, r7
 80185da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80185dc:	ebaa 0a04 	sub.w	sl, sl, r4
 80185e0:	fb08 f303 	mul.w	r3, r8, r3
 80185e4:	fa1f fa8a 	uxth.w	sl, sl
 80185e8:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 80185ec:	f003 0407 	and.w	r4, r3, #7
 80185f0:	9226      	str	r2, [sp, #152]	; 0x98
 80185f2:	4649      	mov	r1, r9
 80185f4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80185f6:	f7ff ff1b 	bl	8018430 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 80185fa:	4683      	mov	fp, r0
 80185fc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80185fe:	f7ff ff3d 	bl	801847c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8018602:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018606:	4681      	mov	r9, r0
 8018608:	1a9b      	subs	r3, r3, r2
 801860a:	459a      	cmp	sl, r3
 801860c:	bfa8      	it	ge
 801860e:	469a      	movge	sl, r3
 8018610:	f1ba 0f00 	cmp.w	sl, #0
 8018614:	f340 80f9 	ble.w	801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018618:	1bf6      	subs	r6, r6, r7
 801861a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801861c:	1b9e      	subs	r6, r3, r6
 801861e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018620:	429e      	cmp	r6, r3
 8018622:	bfd4      	ite	le
 8018624:	ebc7 0706 	rsble	r7, r7, r6
 8018628:	ebc7 0703 	rsbgt	r7, r7, r3
 801862c:	2f00      	cmp	r7, #0
 801862e:	f340 80ec 	ble.w	801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018632:	1bed      	subs	r5, r5, r7
 8018634:	fb08 f305 	mul.w	r3, r8, r5
 8018638:	930d      	str	r3, [sp, #52]	; 0x34
 801863a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801863c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8018640:	930e      	str	r3, [sp, #56]	; 0x38
 8018642:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8018644:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018648:	930f      	str	r3, [sp, #60]	; 0x3c
 801864a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801864c:	b2db      	uxtb	r3, r3
 801864e:	9310      	str	r3, [sp, #64]	; 0x40
 8018650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018652:	2b00      	cmp	r3, #0
 8018654:	f040 80de 	bne.w	8018814 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8018658:	4b7c      	ldr	r3, [pc, #496]	; (801884c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801865a:	6818      	ldr	r0, [r3, #0]
 801865c:	6803      	ldr	r3, [r0, #0]
 801865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018660:	4798      	blx	r3
 8018662:	2301      	movs	r3, #1
 8018664:	4a7a      	ldr	r2, [pc, #488]	; (8018850 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8018666:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801866a:	fb07 9b1b 	mls	fp, r7, fp, r9
 801866e:	fa03 f308 	lsl.w	r3, r3, r8
 8018672:	8811      	ldrh	r1, [r2, #0]
 8018674:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8018678:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801867c:	3b01      	subs	r3, #1
 801867e:	fb06 bb07 	mla	fp, r6, r7, fp
 8018682:	b2db      	uxtb	r3, r3
 8018684:	930a      	str	r3, [sp, #40]	; 0x28
 8018686:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 801868a:	fb01 2303 	mla	r3, r1, r3, r2
 801868e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018692:	18c3      	adds	r3, r0, r3
 8018694:	9309      	str	r3, [sp, #36]	; 0x24
 8018696:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018698:	781a      	ldrb	r2, [r3, #0]
 801869a:	4122      	asrs	r2, r4
 801869c:	b2d2      	uxtb	r2, r2
 801869e:	f11a 3aff 	adds.w	sl, sl, #4294967295
 80186a2:	f0c0 80d7 	bcc.w	8018854 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 80186a6:	46be      	mov	lr, r7
 80186a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80186aa:	f11e 3eff 	adds.w	lr, lr, #4294967295
 80186ae:	f0c0 80ba 	bcc.w	8018826 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 80186b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186b4:	4013      	ands	r3, r2
 80186b6:	d041      	beq.n	801873c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 80186b8:	20ff      	movs	r0, #255	; 0xff
 80186ba:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80186bc:	fb90 f5f5 	sdiv	r5, r0, r5
 80186c0:	436b      	muls	r3, r5
 80186c2:	2bfe      	cmp	r3, #254	; 0xfe
 80186c4:	dd03      	ble.n	80186ce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 80186c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80186c8:	4285      	cmp	r5, r0
 80186ca:	f000 80a5 	beq.w	8018818 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 80186ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80186d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80186d2:	fb15 f303 	smulbb	r3, r5, r3
 80186d6:	b29b      	uxth	r3, r3
 80186d8:	1c5d      	adds	r5, r3, #1
 80186da:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 80186de:	780d      	ldrb	r5, [r1, #0]
 80186e0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80186e4:	fa1f fc83 	uxth.w	ip, r3
 80186e8:	43db      	mvns	r3, r3
 80186ea:	fb10 f90c 	smulbb	r9, r0, ip
 80186ee:	b2db      	uxtb	r3, r3
 80186f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80186f2:	fb05 9503 	mla	r5, r5, r3, r9
 80186f6:	b2ad      	uxth	r5, r5
 80186f8:	f105 0901 	add.w	r9, r5, #1
 80186fc:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8018700:	fb10 f90c 	smulbb	r9, r0, ip
 8018704:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018706:	122d      	asrs	r5, r5, #8
 8018708:	fb10 fc0c 	smulbb	ip, r0, ip
 801870c:	700d      	strb	r5, [r1, #0]
 801870e:	784d      	ldrb	r5, [r1, #1]
 8018710:	fb05 9503 	mla	r5, r5, r3, r9
 8018714:	b2ad      	uxth	r5, r5
 8018716:	f105 0901 	add.w	r9, r5, #1
 801871a:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801871e:	122d      	asrs	r5, r5, #8
 8018720:	704d      	strb	r5, [r1, #1]
 8018722:	788d      	ldrb	r5, [r1, #2]
 8018724:	fb05 cc03 	mla	ip, r5, r3, ip
 8018728:	fa1f fc8c 	uxth.w	ip, ip
 801872c:	f10c 0301 	add.w	r3, ip, #1
 8018730:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8018734:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018738:	f881 c002 	strb.w	ip, [r1, #2]
 801873c:	4444      	add	r4, r8
 801873e:	4431      	add	r1, r6
 8018740:	b2a4      	uxth	r4, r4
 8018742:	2c07      	cmp	r4, #7
 8018744:	bf89      	itett	hi
 8018746:	9b26      	ldrhi	r3, [sp, #152]	; 0x98
 8018748:	fa42 f208 	asrls.w	r2, r2, r8
 801874c:	2400      	movhi	r4, #0
 801874e:	785a      	ldrbhi	r2, [r3, #1]
 8018750:	bf8a      	itet	hi
 8018752:	3301      	addhi	r3, #1
 8018754:	b2d2      	uxtbls	r2, r2
 8018756:	9326      	strhi	r3, [sp, #152]	; 0x98
 8018758:	e7a7      	b.n	80186aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801875a:	441e      	add	r6, r3
 801875c:	b236      	sxth	r6, r6
 801875e:	e6ed      	b.n	801853c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8018760:	f1b9 0f01 	cmp.w	r9, #1
 8018764:	f47f af28 	bne.w	80185b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018768:	f1bb 0f01 	cmp.w	fp, #1
 801876c:	f47f af24 	bne.w	80185b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8018770:	f8df b0d8 	ldr.w	fp, [pc, #216]	; 801884c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8018774:	f8db 0000 	ldr.w	r0, [fp]
 8018778:	6803      	ldr	r3, [r0, #0]
 801877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801877c:	4798      	blx	r3
 801877e:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8018782:	465a      	mov	r2, fp
 8018784:	d006      	beq.n	8018794 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8018786:	f1b8 0f04 	cmp.w	r8, #4
 801878a:	d141      	bne.n	8018810 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801878c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801878e:	3300      	adds	r3, #0
 8018790:	bf18      	it	ne
 8018792:	2301      	movne	r3, #1
 8018794:	0580      	lsls	r0, r0, #22
 8018796:	d566      	bpl.n	8018866 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8018798:	f1b8 0f08 	cmp.w	r8, #8
 801879c:	d163      	bne.n	8018866 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801879e:	2b00      	cmp	r3, #0
 80187a0:	bf0c      	ite	eq
 80187a2:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80187a6:	f44f 7180 	movne.w	r1, #256	; 0x100
 80187aa:	2f00      	cmp	r7, #0
 80187ac:	f47f af04 	bne.w	80185b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187b0:	2c00      	cmp	r4, #0
 80187b2:	f47f af01 	bne.w	80185b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80187b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80187ba:	18f3      	adds	r3, r6, r3
 80187bc:	4283      	cmp	r3, r0
 80187be:	f73f aefb 	bgt.w	80185b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80187c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80187c6:	4403      	add	r3, r0
 80187c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80187ca:	4283      	cmp	r3, r0
 80187cc:	f73f aef4 	bgt.w	80185b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 80187d0:	f1b8 0f08 	cmp.w	r8, #8
 80187d4:	6810      	ldr	r0, [r2, #0]
 80187d6:	f04f 0600 	mov.w	r6, #0
 80187da:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80187de:	bf18      	it	ne
 80187e0:	3501      	addne	r5, #1
 80187e2:	6804      	ldr	r4, [r0, #0]
 80187e4:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80187e8:	bf18      	it	ne
 80187ea:	f025 0501 	bicne.w	r5, r5, #1
 80187ee:	e9cd 1605 	strd	r1, r6, [sp, #20]
 80187f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80187f4:	bf18      	it	ne
 80187f6:	b2ad      	uxthne	r5, r5
 80187f8:	9104      	str	r1, [sp, #16]
 80187fa:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80187fc:	e9cd 5a00 	strd	r5, sl, [sp]
 8018800:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8018804:	9926      	ldr	r1, [sp, #152]	; 0x98
 8018806:	6d64      	ldr	r4, [r4, #84]	; 0x54
 8018808:	47a0      	blx	r4
 801880a:	b017      	add	sp, #92	; 0x5c
 801880c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018810:	2300      	movs	r3, #0
 8018812:	e7bf      	b.n	8018794 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8018814:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8018816:	e724      	b.n	8018662 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8018818:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801881a:	700b      	strb	r3, [r1, #0]
 801881c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801881e:	704b      	strb	r3, [r1, #1]
 8018820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018822:	708b      	strb	r3, [r1, #2]
 8018824:	e78a      	b.n	801873c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8018826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018828:	b153      	cbz	r3, 8018840 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801882a:	441c      	add	r4, r3
 801882c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801882e:	b2a4      	uxth	r4, r4
 8018830:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8018834:	f004 0407 	and.w	r4, r4, #7
 8018838:	781a      	ldrb	r2, [r3, #0]
 801883a:	9326      	str	r3, [sp, #152]	; 0x98
 801883c:	4122      	asrs	r2, r4
 801883e:	b2d2      	uxtb	r2, r2
 8018840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018842:	445b      	add	r3, fp
 8018844:	9309      	str	r3, [sp, #36]	; 0x24
 8018846:	e72a      	b.n	801869e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8018848:	240074b4 	.word	0x240074b4
 801884c:	240074bc 	.word	0x240074bc
 8018850:	240074b6 	.word	0x240074b6
 8018854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018856:	2b00      	cmp	r3, #0
 8018858:	d1d7      	bne.n	801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801885a:	4b06      	ldr	r3, [pc, #24]	; (8018874 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801885c:	6818      	ldr	r0, [r3, #0]
 801885e:	6803      	ldr	r3, [r0, #0]
 8018860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018862:	4798      	blx	r3
 8018864:	e7d1      	b.n	801880a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8018866:	2b00      	cmp	r3, #0
 8018868:	f43f aea6 	beq.w	80185b8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801886c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018870:	e79b      	b.n	80187aa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8018872:	bf00      	nop
 8018874:	240074bc 	.word	0x240074bc

08018878 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8018878:	b538      	push	{r3, r4, r5, lr}
 801887a:	4c15      	ldr	r4, [pc, #84]	; (80188d0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801887c:	4605      	mov	r5, r0
 801887e:	7823      	ldrb	r3, [r4, #0]
 8018880:	f3bf 8f5b 	dmb	ish
 8018884:	07da      	lsls	r2, r3, #31
 8018886:	d40b      	bmi.n	80188a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018888:	4620      	mov	r0, r4
 801888a:	f005 f890 	bl	801d9ae <__cxa_guard_acquire>
 801888e:	b138      	cbz	r0, 80188a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8018890:	4620      	mov	r0, r4
 8018892:	f005 f898 	bl	801d9c6 <__cxa_guard_release>
 8018896:	4a0f      	ldr	r2, [pc, #60]	; (80188d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8018898:	490f      	ldr	r1, [pc, #60]	; (80188d8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801889a:	4810      	ldr	r0, [pc, #64]	; (80188dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801889c:	f005 f880 	bl	801d9a0 <__aeabi_atexit>
 80188a0:	4c0f      	ldr	r4, [pc, #60]	; (80188e0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 80188a2:	7823      	ldrb	r3, [r4, #0]
 80188a4:	f3bf 8f5b 	dmb	ish
 80188a8:	07db      	lsls	r3, r3, #31
 80188aa:	d40b      	bmi.n	80188c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80188ac:	4620      	mov	r0, r4
 80188ae:	f005 f87e 	bl	801d9ae <__cxa_guard_acquire>
 80188b2:	b138      	cbz	r0, 80188c4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 80188b4:	4620      	mov	r0, r4
 80188b6:	f005 f886 	bl	801d9c6 <__cxa_guard_release>
 80188ba:	4a06      	ldr	r2, [pc, #24]	; (80188d4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 80188bc:	4909      	ldr	r1, [pc, #36]	; (80188e4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 80188be:	480a      	ldr	r0, [pc, #40]	; (80188e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80188c0:	f005 f86e 	bl	801d9a0 <__aeabi_atexit>
 80188c4:	4b05      	ldr	r3, [pc, #20]	; (80188dc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 80188c6:	612b      	str	r3, [r5, #16]
 80188c8:	4b07      	ldr	r3, [pc, #28]	; (80188e8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 80188ca:	616b      	str	r3, [r5, #20]
 80188cc:	bd38      	pop	{r3, r4, r5, pc}
 80188ce:	bf00      	nop
 80188d0:	24007588 	.word	0x24007588
 80188d4:	24000000 	.word	0x24000000
 80188d8:	0801743d 	.word	0x0801743d
 80188dc:	24000134 	.word	0x24000134
 80188e0:	2400758c 	.word	0x2400758c
 80188e4:	0801743b 	.word	0x0801743b
 80188e8:	24000138 	.word	0x24000138

080188ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80188ec:	b538      	push	{r3, r4, r5, lr}
 80188ee:	4c15      	ldr	r4, [pc, #84]	; (8018944 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80188f0:	4605      	mov	r5, r0
 80188f2:	7823      	ldrb	r3, [r4, #0]
 80188f4:	f3bf 8f5b 	dmb	ish
 80188f8:	07da      	lsls	r2, r3, #31
 80188fa:	d40b      	bmi.n	8018914 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80188fc:	4620      	mov	r0, r4
 80188fe:	f005 f856 	bl	801d9ae <__cxa_guard_acquire>
 8018902:	b138      	cbz	r0, 8018914 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8018904:	4620      	mov	r0, r4
 8018906:	f005 f85e 	bl	801d9c6 <__cxa_guard_release>
 801890a:	4a0f      	ldr	r2, [pc, #60]	; (8018948 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801890c:	490f      	ldr	r1, [pc, #60]	; (801894c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801890e:	4810      	ldr	r0, [pc, #64]	; (8018950 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8018910:	f005 f846 	bl	801d9a0 <__aeabi_atexit>
 8018914:	4c0f      	ldr	r4, [pc, #60]	; (8018954 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8018916:	7823      	ldrb	r3, [r4, #0]
 8018918:	f3bf 8f5b 	dmb	ish
 801891c:	07db      	lsls	r3, r3, #31
 801891e:	d40b      	bmi.n	8018938 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018920:	4620      	mov	r0, r4
 8018922:	f005 f844 	bl	801d9ae <__cxa_guard_acquire>
 8018926:	b138      	cbz	r0, 8018938 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8018928:	4620      	mov	r0, r4
 801892a:	f005 f84c 	bl	801d9c6 <__cxa_guard_release>
 801892e:	4a06      	ldr	r2, [pc, #24]	; (8018948 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8018930:	4909      	ldr	r1, [pc, #36]	; (8018958 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8018932:	480a      	ldr	r0, [pc, #40]	; (801895c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8018934:	f005 f834 	bl	801d9a0 <__aeabi_atexit>
 8018938:	4b05      	ldr	r3, [pc, #20]	; (8018950 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801893a:	60ab      	str	r3, [r5, #8]
 801893c:	4b07      	ldr	r3, [pc, #28]	; (801895c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801893e:	60eb      	str	r3, [r5, #12]
 8018940:	bd38      	pop	{r3, r4, r5, pc}
 8018942:	bf00      	nop
 8018944:	24007568 	.word	0x24007568
 8018948:	24000000 	.word	0x24000000
 801894c:	08017441 	.word	0x08017441
 8018950:	24000114 	.word	0x24000114
 8018954:	2400756c 	.word	0x2400756c
 8018958:	0801743f 	.word	0x0801743f
 801895c:	24000118 	.word	0x24000118

08018960 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 8018960:	b510      	push	{r4, lr}
 8018962:	4604      	mov	r4, r0
 8018964:	f7ff ff88 	bl	8018878 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 8018968:	4620      	mov	r0, r4
 801896a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801896e:	f7ff bfbd 	b.w	80188ec <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08018974 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8018974:	b538      	push	{r3, r4, r5, lr}
 8018976:	4c15      	ldr	r4, [pc, #84]	; (80189cc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 8018978:	4605      	mov	r5, r0
 801897a:	7823      	ldrb	r3, [r4, #0]
 801897c:	f3bf 8f5b 	dmb	ish
 8018980:	07da      	lsls	r2, r3, #31
 8018982:	d40b      	bmi.n	801899c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8018984:	4620      	mov	r0, r4
 8018986:	f005 f812 	bl	801d9ae <__cxa_guard_acquire>
 801898a:	b138      	cbz	r0, 801899c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801898c:	4620      	mov	r0, r4
 801898e:	f005 f81a 	bl	801d9c6 <__cxa_guard_release>
 8018992:	4a0f      	ldr	r2, [pc, #60]	; (80189d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 8018994:	490f      	ldr	r1, [pc, #60]	; (80189d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 8018996:	4810      	ldr	r0, [pc, #64]	; (80189d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 8018998:	f005 f802 	bl	801d9a0 <__aeabi_atexit>
 801899c:	4c0f      	ldr	r4, [pc, #60]	; (80189dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801899e:	7823      	ldrb	r3, [r4, #0]
 80189a0:	f3bf 8f5b 	dmb	ish
 80189a4:	07db      	lsls	r3, r3, #31
 80189a6:	d40b      	bmi.n	80189c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80189a8:	4620      	mov	r0, r4
 80189aa:	f005 f800 	bl	801d9ae <__cxa_guard_acquire>
 80189ae:	b138      	cbz	r0, 80189c0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 80189b0:	4620      	mov	r0, r4
 80189b2:	f005 f808 	bl	801d9c6 <__cxa_guard_release>
 80189b6:	4a06      	ldr	r2, [pc, #24]	; (80189d0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 80189b8:	4909      	ldr	r1, [pc, #36]	; (80189e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 80189ba:	480a      	ldr	r0, [pc, #40]	; (80189e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80189bc:	f004 fff0 	bl	801d9a0 <__aeabi_atexit>
 80189c0:	4b05      	ldr	r3, [pc, #20]	; (80189d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 80189c2:	622b      	str	r3, [r5, #32]
 80189c4:	4b07      	ldr	r3, [pc, #28]	; (80189e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 80189c6:	626b      	str	r3, [r5, #36]	; 0x24
 80189c8:	bd38      	pop	{r3, r4, r5, pc}
 80189ca:	bf00      	nop
 80189cc:	24007590 	.word	0x24007590
 80189d0:	24000000 	.word	0x24000000
 80189d4:	08017435 	.word	0x08017435
 80189d8:	2400013c 	.word	0x2400013c
 80189dc:	24007594 	.word	0x24007594
 80189e0:	08017433 	.word	0x08017433
 80189e4:	24000140 	.word	0x24000140

080189e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 80189e8:	b538      	push	{r3, r4, r5, lr}
 80189ea:	4c15      	ldr	r4, [pc, #84]	; (8018a40 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 80189ec:	4605      	mov	r5, r0
 80189ee:	7823      	ldrb	r3, [r4, #0]
 80189f0:	f3bf 8f5b 	dmb	ish
 80189f4:	07da      	lsls	r2, r3, #31
 80189f6:	d40b      	bmi.n	8018a10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80189f8:	4620      	mov	r0, r4
 80189fa:	f004 ffd8 	bl	801d9ae <__cxa_guard_acquire>
 80189fe:	b138      	cbz	r0, 8018a10 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8018a00:	4620      	mov	r0, r4
 8018a02:	f004 ffe0 	bl	801d9c6 <__cxa_guard_release>
 8018a06:	4a0f      	ldr	r2, [pc, #60]	; (8018a44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018a08:	490f      	ldr	r1, [pc, #60]	; (8018a48 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 8018a0a:	4810      	ldr	r0, [pc, #64]	; (8018a4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018a0c:	f004 ffc8 	bl	801d9a0 <__aeabi_atexit>
 8018a10:	4c0f      	ldr	r4, [pc, #60]	; (8018a50 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 8018a12:	7823      	ldrb	r3, [r4, #0]
 8018a14:	f3bf 8f5b 	dmb	ish
 8018a18:	07db      	lsls	r3, r3, #31
 8018a1a:	d40b      	bmi.n	8018a34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018a1c:	4620      	mov	r0, r4
 8018a1e:	f004 ffc6 	bl	801d9ae <__cxa_guard_acquire>
 8018a22:	b138      	cbz	r0, 8018a34 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 8018a24:	4620      	mov	r0, r4
 8018a26:	f004 ffce 	bl	801d9c6 <__cxa_guard_release>
 8018a2a:	4a06      	ldr	r2, [pc, #24]	; (8018a44 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 8018a2c:	4909      	ldr	r1, [pc, #36]	; (8018a54 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 8018a2e:	480a      	ldr	r0, [pc, #40]	; (8018a58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018a30:	f004 ffb6 	bl	801d9a0 <__aeabi_atexit>
 8018a34:	4b05      	ldr	r3, [pc, #20]	; (8018a4c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 8018a36:	61ab      	str	r3, [r5, #24]
 8018a38:	4b07      	ldr	r3, [pc, #28]	; (8018a58 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 8018a3a:	61eb      	str	r3, [r5, #28]
 8018a3c:	bd38      	pop	{r3, r4, r5, pc}
 8018a3e:	bf00      	nop
 8018a40:	24007570 	.word	0x24007570
 8018a44:	24000000 	.word	0x24000000
 8018a48:	08017439 	.word	0x08017439
 8018a4c:	2400011c 	.word	0x2400011c
 8018a50:	24007574 	.word	0x24007574
 8018a54:	08017437 	.word	0x08017437
 8018a58:	24000120 	.word	0x24000120

08018a5c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 8018a5c:	b510      	push	{r4, lr}
 8018a5e:	4604      	mov	r4, r0
 8018a60:	f7ff ff88 	bl	8018974 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8018a64:	4620      	mov	r0, r4
 8018a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a6a:	f7ff bfbd 	b.w	80189e8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

08018a70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 8018a70:	b538      	push	{r3, r4, r5, lr}
 8018a72:	4c15      	ldr	r4, [pc, #84]	; (8018ac8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8018a74:	4605      	mov	r5, r0
 8018a76:	7823      	ldrb	r3, [r4, #0]
 8018a78:	f3bf 8f5b 	dmb	ish
 8018a7c:	07da      	lsls	r2, r3, #31
 8018a7e:	d40b      	bmi.n	8018a98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018a80:	4620      	mov	r0, r4
 8018a82:	f004 ff94 	bl	801d9ae <__cxa_guard_acquire>
 8018a86:	b138      	cbz	r0, 8018a98 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8018a88:	4620      	mov	r0, r4
 8018a8a:	f004 ff9c 	bl	801d9c6 <__cxa_guard_release>
 8018a8e:	4a0f      	ldr	r2, [pc, #60]	; (8018acc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018a90:	490f      	ldr	r1, [pc, #60]	; (8018ad0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 8018a92:	4810      	ldr	r0, [pc, #64]	; (8018ad4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018a94:	f004 ff84 	bl	801d9a0 <__aeabi_atexit>
 8018a98:	4c0f      	ldr	r4, [pc, #60]	; (8018ad8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 8018a9a:	7823      	ldrb	r3, [r4, #0]
 8018a9c:	f3bf 8f5b 	dmb	ish
 8018aa0:	07db      	lsls	r3, r3, #31
 8018aa2:	d40b      	bmi.n	8018abc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018aa4:	4620      	mov	r0, r4
 8018aa6:	f004 ff82 	bl	801d9ae <__cxa_guard_acquire>
 8018aaa:	b138      	cbz	r0, 8018abc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8018aac:	4620      	mov	r0, r4
 8018aae:	f004 ff8a 	bl	801d9c6 <__cxa_guard_release>
 8018ab2:	4a06      	ldr	r2, [pc, #24]	; (8018acc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8018ab4:	4909      	ldr	r1, [pc, #36]	; (8018adc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8018ab6:	480a      	ldr	r0, [pc, #40]	; (8018ae0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018ab8:	f004 ff72 	bl	801d9a0 <__aeabi_atexit>
 8018abc:	4b05      	ldr	r3, [pc, #20]	; (8018ad4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 8018abe:	632b      	str	r3, [r5, #48]	; 0x30
 8018ac0:	4b07      	ldr	r3, [pc, #28]	; (8018ae0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8018ac2:	636b      	str	r3, [r5, #52]	; 0x34
 8018ac4:	bd38      	pop	{r3, r4, r5, pc}
 8018ac6:	bf00      	nop
 8018ac8:	24007578 	.word	0x24007578
 8018acc:	24000000 	.word	0x24000000
 8018ad0:	0801742d 	.word	0x0801742d
 8018ad4:	24000124 	.word	0x24000124
 8018ad8:	2400757c 	.word	0x2400757c
 8018adc:	0801742b 	.word	0x0801742b
 8018ae0:	24000128 	.word	0x24000128

08018ae4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8018ae4:	b538      	push	{r3, r4, r5, lr}
 8018ae6:	4c15      	ldr	r4, [pc, #84]	; (8018b3c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8018ae8:	4605      	mov	r5, r0
 8018aea:	7823      	ldrb	r3, [r4, #0]
 8018aec:	f3bf 8f5b 	dmb	ish
 8018af0:	07da      	lsls	r2, r3, #31
 8018af2:	d40b      	bmi.n	8018b0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018af4:	4620      	mov	r0, r4
 8018af6:	f004 ff5a 	bl	801d9ae <__cxa_guard_acquire>
 8018afa:	b138      	cbz	r0, 8018b0c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8018afc:	4620      	mov	r0, r4
 8018afe:	f004 ff62 	bl	801d9c6 <__cxa_guard_release>
 8018b02:	4a0f      	ldr	r2, [pc, #60]	; (8018b40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018b04:	490f      	ldr	r1, [pc, #60]	; (8018b44 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8018b06:	4810      	ldr	r0, [pc, #64]	; (8018b48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018b08:	f004 ff4a 	bl	801d9a0 <__aeabi_atexit>
 8018b0c:	4c0f      	ldr	r4, [pc, #60]	; (8018b4c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 8018b0e:	7823      	ldrb	r3, [r4, #0]
 8018b10:	f3bf 8f5b 	dmb	ish
 8018b14:	07db      	lsls	r3, r3, #31
 8018b16:	d40b      	bmi.n	8018b30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f004 ff48 	bl	801d9ae <__cxa_guard_acquire>
 8018b1e:	b138      	cbz	r0, 8018b30 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8018b20:	4620      	mov	r0, r4
 8018b22:	f004 ff50 	bl	801d9c6 <__cxa_guard_release>
 8018b26:	4a06      	ldr	r2, [pc, #24]	; (8018b40 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8018b28:	4909      	ldr	r1, [pc, #36]	; (8018b50 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8018b2a:	480a      	ldr	r0, [pc, #40]	; (8018b54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018b2c:	f004 ff38 	bl	801d9a0 <__aeabi_atexit>
 8018b30:	4b05      	ldr	r3, [pc, #20]	; (8018b48 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8018b32:	62ab      	str	r3, [r5, #40]	; 0x28
 8018b34:	4b07      	ldr	r3, [pc, #28]	; (8018b54 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8018b36:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018b38:	bd38      	pop	{r3, r4, r5, pc}
 8018b3a:	bf00      	nop
 8018b3c:	24007550 	.word	0x24007550
 8018b40:	24000000 	.word	0x24000000
 8018b44:	08017431 	.word	0x08017431
 8018b48:	240000fc 	.word	0x240000fc
 8018b4c:	24007554 	.word	0x24007554
 8018b50:	0801742f 	.word	0x0801742f
 8018b54:	24000100 	.word	0x24000100

08018b58 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 8018b58:	b510      	push	{r4, lr}
 8018b5a:	4604      	mov	r4, r0
 8018b5c:	f7ff ff88 	bl	8018a70 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 8018b60:	4620      	mov	r0, r4
 8018b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b66:	f7ff bfbd 	b.w	8018ae4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08018b6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8018b6c:	b538      	push	{r3, r4, r5, lr}
 8018b6e:	4c15      	ldr	r4, [pc, #84]	; (8018bc4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 8018b70:	4605      	mov	r5, r0
 8018b72:	7823      	ldrb	r3, [r4, #0]
 8018b74:	f3bf 8f5b 	dmb	ish
 8018b78:	07da      	lsls	r2, r3, #31
 8018b7a:	d40b      	bmi.n	8018b94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	f004 ff16 	bl	801d9ae <__cxa_guard_acquire>
 8018b82:	b138      	cbz	r0, 8018b94 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8018b84:	4620      	mov	r0, r4
 8018b86:	f004 ff1e 	bl	801d9c6 <__cxa_guard_release>
 8018b8a:	4a0f      	ldr	r2, [pc, #60]	; (8018bc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018b8c:	490f      	ldr	r1, [pc, #60]	; (8018bcc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 8018b8e:	4810      	ldr	r0, [pc, #64]	; (8018bd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018b90:	f004 ff06 	bl	801d9a0 <__aeabi_atexit>
 8018b94:	4c0f      	ldr	r4, [pc, #60]	; (8018bd4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 8018b96:	7823      	ldrb	r3, [r4, #0]
 8018b98:	f3bf 8f5b 	dmb	ish
 8018b9c:	07db      	lsls	r3, r3, #31
 8018b9e:	d40b      	bmi.n	8018bb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018ba0:	4620      	mov	r0, r4
 8018ba2:	f004 ff04 	bl	801d9ae <__cxa_guard_acquire>
 8018ba6:	b138      	cbz	r0, 8018bb8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 8018ba8:	4620      	mov	r0, r4
 8018baa:	f004 ff0c 	bl	801d9c6 <__cxa_guard_release>
 8018bae:	4a06      	ldr	r2, [pc, #24]	; (8018bc8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 8018bb0:	4909      	ldr	r1, [pc, #36]	; (8018bd8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 8018bb2:	480a      	ldr	r0, [pc, #40]	; (8018bdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018bb4:	f004 fef4 	bl	801d9a0 <__aeabi_atexit>
 8018bb8:	4b05      	ldr	r3, [pc, #20]	; (8018bd0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 8018bba:	642b      	str	r3, [r5, #64]	; 0x40
 8018bbc:	4b07      	ldr	r3, [pc, #28]	; (8018bdc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 8018bbe:	646b      	str	r3, [r5, #68]	; 0x44
 8018bc0:	bd38      	pop	{r3, r4, r5, pc}
 8018bc2:	bf00      	nop
 8018bc4:	24007580 	.word	0x24007580
 8018bc8:	24000000 	.word	0x24000000
 8018bcc:	08017425 	.word	0x08017425
 8018bd0:	2400012c 	.word	0x2400012c
 8018bd4:	24007584 	.word	0x24007584
 8018bd8:	08017423 	.word	0x08017423
 8018bdc:	24000130 	.word	0x24000130

08018be0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8018be0:	b538      	push	{r3, r4, r5, lr}
 8018be2:	4c15      	ldr	r4, [pc, #84]	; (8018c38 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 8018be4:	4605      	mov	r5, r0
 8018be6:	7823      	ldrb	r3, [r4, #0]
 8018be8:	f3bf 8f5b 	dmb	ish
 8018bec:	07da      	lsls	r2, r3, #31
 8018bee:	d40b      	bmi.n	8018c08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	f004 fedc 	bl	801d9ae <__cxa_guard_acquire>
 8018bf6:	b138      	cbz	r0, 8018c08 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	f004 fee4 	bl	801d9c6 <__cxa_guard_release>
 8018bfe:	4a0f      	ldr	r2, [pc, #60]	; (8018c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018c00:	490f      	ldr	r1, [pc, #60]	; (8018c40 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 8018c02:	4810      	ldr	r0, [pc, #64]	; (8018c44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018c04:	f004 fecc 	bl	801d9a0 <__aeabi_atexit>
 8018c08:	4c0f      	ldr	r4, [pc, #60]	; (8018c48 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 8018c0a:	7823      	ldrb	r3, [r4, #0]
 8018c0c:	f3bf 8f5b 	dmb	ish
 8018c10:	07db      	lsls	r3, r3, #31
 8018c12:	d40b      	bmi.n	8018c2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018c14:	4620      	mov	r0, r4
 8018c16:	f004 feca 	bl	801d9ae <__cxa_guard_acquire>
 8018c1a:	b138      	cbz	r0, 8018c2c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 8018c1c:	4620      	mov	r0, r4
 8018c1e:	f004 fed2 	bl	801d9c6 <__cxa_guard_release>
 8018c22:	4a06      	ldr	r2, [pc, #24]	; (8018c3c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 8018c24:	4909      	ldr	r1, [pc, #36]	; (8018c4c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 8018c26:	480a      	ldr	r0, [pc, #40]	; (8018c50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018c28:	f004 feba 	bl	801d9a0 <__aeabi_atexit>
 8018c2c:	4b05      	ldr	r3, [pc, #20]	; (8018c44 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 8018c2e:	63ab      	str	r3, [r5, #56]	; 0x38
 8018c30:	4b07      	ldr	r3, [pc, #28]	; (8018c50 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 8018c32:	63eb      	str	r3, [r5, #60]	; 0x3c
 8018c34:	bd38      	pop	{r3, r4, r5, pc}
 8018c36:	bf00      	nop
 8018c38:	24007560 	.word	0x24007560
 8018c3c:	24000000 	.word	0x24000000
 8018c40:	08017429 	.word	0x08017429
 8018c44:	2400010c 	.word	0x2400010c
 8018c48:	24007564 	.word	0x24007564
 8018c4c:	08017427 	.word	0x08017427
 8018c50:	24000110 	.word	0x24000110

08018c54 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 8018c54:	b510      	push	{r4, lr}
 8018c56:	4604      	mov	r4, r0
 8018c58:	f7ff ff88 	bl	8018b6c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018c62:	f7ff bfbd 	b.w	8018be0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

08018c68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 8018c68:	b538      	push	{r3, r4, r5, lr}
 8018c6a:	4c15      	ldr	r4, [pc, #84]	; (8018cc0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8018c6c:	4605      	mov	r5, r0
 8018c6e:	7823      	ldrb	r3, [r4, #0]
 8018c70:	f3bf 8f5b 	dmb	ish
 8018c74:	07da      	lsls	r2, r3, #31
 8018c76:	d40b      	bmi.n	8018c90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018c78:	4620      	mov	r0, r4
 8018c7a:	f004 fe98 	bl	801d9ae <__cxa_guard_acquire>
 8018c7e:	b138      	cbz	r0, 8018c90 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8018c80:	4620      	mov	r0, r4
 8018c82:	f004 fea0 	bl	801d9c6 <__cxa_guard_release>
 8018c86:	4a0f      	ldr	r2, [pc, #60]	; (8018cc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018c88:	490f      	ldr	r1, [pc, #60]	; (8018cc8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 8018c8a:	4810      	ldr	r0, [pc, #64]	; (8018ccc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018c8c:	f004 fe88 	bl	801d9a0 <__aeabi_atexit>
 8018c90:	4c0f      	ldr	r4, [pc, #60]	; (8018cd0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8018c92:	7823      	ldrb	r3, [r4, #0]
 8018c94:	f3bf 8f5b 	dmb	ish
 8018c98:	07db      	lsls	r3, r3, #31
 8018c9a:	d40b      	bmi.n	8018cb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018c9c:	4620      	mov	r0, r4
 8018c9e:	f004 fe86 	bl	801d9ae <__cxa_guard_acquire>
 8018ca2:	b138      	cbz	r0, 8018cb4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8018ca4:	4620      	mov	r0, r4
 8018ca6:	f004 fe8e 	bl	801d9c6 <__cxa_guard_release>
 8018caa:	4a06      	ldr	r2, [pc, #24]	; (8018cc4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8018cac:	4909      	ldr	r1, [pc, #36]	; (8018cd4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8018cae:	480a      	ldr	r0, [pc, #40]	; (8018cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018cb0:	f004 fe76 	bl	801d9a0 <__aeabi_atexit>
 8018cb4:	4b05      	ldr	r3, [pc, #20]	; (8018ccc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8018cb6:	652b      	str	r3, [r5, #80]	; 0x50
 8018cb8:	4b07      	ldr	r3, [pc, #28]	; (8018cd8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8018cba:	656b      	str	r3, [r5, #84]	; 0x54
 8018cbc:	bd38      	pop	{r3, r4, r5, pc}
 8018cbe:	bf00      	nop
 8018cc0:	24007558 	.word	0x24007558
 8018cc4:	24000000 	.word	0x24000000
 8018cc8:	0801741d 	.word	0x0801741d
 8018ccc:	24000104 	.word	0x24000104
 8018cd0:	2400755c 	.word	0x2400755c
 8018cd4:	0801741b 	.word	0x0801741b
 8018cd8:	24000108 	.word	0x24000108

08018cdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 8018cdc:	b538      	push	{r3, r4, r5, lr}
 8018cde:	4c15      	ldr	r4, [pc, #84]	; (8018d34 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8018ce0:	4605      	mov	r5, r0
 8018ce2:	7823      	ldrb	r3, [r4, #0]
 8018ce4:	f3bf 8f5b 	dmb	ish
 8018ce8:	07da      	lsls	r2, r3, #31
 8018cea:	d40b      	bmi.n	8018d04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018cec:	4620      	mov	r0, r4
 8018cee:	f004 fe5e 	bl	801d9ae <__cxa_guard_acquire>
 8018cf2:	b138      	cbz	r0, 8018d04 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8018cf4:	4620      	mov	r0, r4
 8018cf6:	f004 fe66 	bl	801d9c6 <__cxa_guard_release>
 8018cfa:	4a0f      	ldr	r2, [pc, #60]	; (8018d38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018cfc:	490f      	ldr	r1, [pc, #60]	; (8018d3c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 8018cfe:	4810      	ldr	r0, [pc, #64]	; (8018d40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018d00:	f004 fe4e 	bl	801d9a0 <__aeabi_atexit>
 8018d04:	4c0f      	ldr	r4, [pc, #60]	; (8018d44 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 8018d06:	7823      	ldrb	r3, [r4, #0]
 8018d08:	f3bf 8f5b 	dmb	ish
 8018d0c:	07db      	lsls	r3, r3, #31
 8018d0e:	d40b      	bmi.n	8018d28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018d10:	4620      	mov	r0, r4
 8018d12:	f004 fe4c 	bl	801d9ae <__cxa_guard_acquire>
 8018d16:	b138      	cbz	r0, 8018d28 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8018d18:	4620      	mov	r0, r4
 8018d1a:	f004 fe54 	bl	801d9c6 <__cxa_guard_release>
 8018d1e:	4a06      	ldr	r2, [pc, #24]	; (8018d38 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8018d20:	4909      	ldr	r1, [pc, #36]	; (8018d48 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8018d22:	480a      	ldr	r0, [pc, #40]	; (8018d4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018d24:	f004 fe3c 	bl	801d9a0 <__aeabi_atexit>
 8018d28:	4b05      	ldr	r3, [pc, #20]	; (8018d40 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 8018d2a:	64ab      	str	r3, [r5, #72]	; 0x48
 8018d2c:	4b07      	ldr	r3, [pc, #28]	; (8018d4c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8018d2e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8018d30:	bd38      	pop	{r3, r4, r5, pc}
 8018d32:	bf00      	nop
 8018d34:	24007548 	.word	0x24007548
 8018d38:	24000000 	.word	0x24000000
 8018d3c:	08017421 	.word	0x08017421
 8018d40:	240000f4 	.word	0x240000f4
 8018d44:	2400754c 	.word	0x2400754c
 8018d48:	0801741f 	.word	0x0801741f
 8018d4c:	240000f8 	.word	0x240000f8

08018d50 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 8018d50:	b510      	push	{r4, lr}
 8018d52:	4604      	mov	r4, r0
 8018d54:	f7ff ff88 	bl	8018c68 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 8018d58:	4620      	mov	r0, r4
 8018d5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d5e:	f7ff bfbd 	b.w	8018cdc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

08018d62 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 8018d62:	b510      	push	{r4, lr}
 8018d64:	4604      	mov	r4, r0
 8018d66:	f7ff fff3 	bl	8018d50 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 8018d6a:	4620      	mov	r0, r4
 8018d6c:	f7ff ff72 	bl	8018c54 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 8018d70:	4620      	mov	r0, r4
 8018d72:	f7ff fe73 	bl	8018a5c <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 8018d76:	4620      	mov	r0, r4
 8018d78:	f7ff fdf2 	bl	8018960 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 8018d7c:	4620      	mov	r0, r4
 8018d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d82:	f7ff bee9 	b.w	8018b58 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>

08018d86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 8018d86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d8a:	b087      	sub	sp, #28
 8018d8c:	788d      	ldrb	r5, [r1, #2]
 8018d8e:	f891 9000 	ldrb.w	r9, [r1]
 8018d92:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 8018d96:	9501      	str	r5, [sp, #4]
 8018d98:	784d      	ldrb	r5, [r1, #1]
 8018d9a:	9203      	str	r2, [sp, #12]
 8018d9c:	9502      	str	r5, [sp, #8]
 8018d9e:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8018da2:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8018da6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8018daa:	f89d e058 	ldrb.w	lr, [sp, #88]	; 0x58
 8018dae:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 8018db2:	fb06 0708 	mla	r7, r6, r8, r0
 8018db6:	2e00      	cmp	r6, #0
 8018db8:	eb02 0a07 	add.w	sl, r2, r7
 8018dbc:	ea4f 2205 	mov.w	r2, r5, lsl #8
 8018dc0:	9d01      	ldr	r5, [sp, #4]
 8018dc2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8018dc6:	ea45 0509 	orr.w	r5, r5, r9
 8018dca:	9505      	str	r5, [sp, #20]
 8018dcc:	f2c0 80b2 	blt.w	8018f34 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018dd0:	45b3      	cmp	fp, r6
 8018dd2:	f340 80af 	ble.w	8018f34 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 8018dd6:	2800      	cmp	r0, #0
 8018dd8:	f2c0 80aa 	blt.w	8018f30 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018ddc:	4580      	cmp	r8, r0
 8018dde:	f340 80a7 	ble.w	8018f30 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 8018de2:	9a03      	ldr	r2, [sp, #12]
 8018de4:	5dd7      	ldrb	r7, [r2, r7]
 8018de6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018dea:	441f      	add	r7, r3
 8018dec:	1c42      	adds	r2, r0, #1
 8018dee:	f100 80a4 	bmi.w	8018f3a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018df2:	4590      	cmp	r8, r2
 8018df4:	f340 80a1 	ble.w	8018f3a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018df8:	2c00      	cmp	r4, #0
 8018dfa:	f000 809e 	beq.w	8018f3a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 8018dfe:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8018e02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e06:	441d      	add	r5, r3
 8018e08:	3601      	adds	r6, #1
 8018e0a:	f100 809a 	bmi.w	8018f42 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018e0e:	45b3      	cmp	fp, r6
 8018e10:	f340 8097 	ble.w	8018f42 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018e14:	f1bc 0f00 	cmp.w	ip, #0
 8018e18:	f000 8093 	beq.w	8018f42 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 8018e1c:	2800      	cmp	r0, #0
 8018e1e:	f2c0 808e 	blt.w	8018f3e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018e22:	4580      	cmp	r8, r0
 8018e24:	f340 808b 	ble.w	8018f3e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 8018e28:	f81a 6008 	ldrb.w	r6, [sl, r8]
 8018e2c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018e30:	441e      	add	r6, r3
 8018e32:	3001      	adds	r0, #1
 8018e34:	f100 8088 	bmi.w	8018f48 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018e38:	4580      	cmp	r8, r0
 8018e3a:	f340 8085 	ble.w	8018f48 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018e3e:	2c00      	cmp	r4, #0
 8018e40:	f000 8082 	beq.w	8018f48 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 8018e44:	44d0      	add	r8, sl
 8018e46:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018e4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e4e:	4413      	add	r3, r2
 8018e50:	b2a4      	uxth	r4, r4
 8018e52:	f895 a000 	ldrb.w	sl, [r5]
 8018e56:	fa1f fc8c 	uxth.w	ip, ip
 8018e5a:	fb04 fb0c 	mul.w	fp, r4, ip
 8018e5e:	0124      	lsls	r4, r4, #4
 8018e60:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 8018e64:	f5c4 7880 	rsb	r8, r4, #256	; 0x100
 8018e68:	eba4 040b 	sub.w	r4, r4, fp
 8018e6c:	fa1f f08c 	uxth.w	r0, ip
 8018e70:	b2a2      	uxth	r2, r4
 8018e72:	783c      	ldrb	r4, [r7, #0]
 8018e74:	eba8 0800 	sub.w	r8, r8, r0
 8018e78:	fa1f fc8e 	uxth.w	ip, lr
 8018e7c:	fb02 fa0a 	mul.w	sl, r2, sl
 8018e80:	ea6f 0e0e 	mvn.w	lr, lr
 8018e84:	fa1f f888 	uxth.w	r8, r8
 8018e88:	fa5f fe8e 	uxtb.w	lr, lr
 8018e8c:	fb08 aa04 	mla	sl, r8, r4, sl
 8018e90:	7834      	ldrb	r4, [r6, #0]
 8018e92:	fb19 f90e 	smulbb	r9, r9, lr
 8018e96:	fb00 aa04 	mla	sl, r0, r4, sl
 8018e9a:	781c      	ldrb	r4, [r3, #0]
 8018e9c:	fb0b a404 	mla	r4, fp, r4, sl
 8018ea0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8018ea4:	fb04 990c 	mla	r9, r4, ip, r9
 8018ea8:	fa1f f989 	uxth.w	r9, r9
 8018eac:	f109 0401 	add.w	r4, r9, #1
 8018eb0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8018eb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018eb8:	f881 9000 	strb.w	r9, [r1]
 8018ebc:	f895 9001 	ldrb.w	r9, [r5, #1]
 8018ec0:	787c      	ldrb	r4, [r7, #1]
 8018ec2:	fb02 f909 	mul.w	r9, r2, r9
 8018ec6:	fb08 9904 	mla	r9, r8, r4, r9
 8018eca:	7874      	ldrb	r4, [r6, #1]
 8018ecc:	fb00 9904 	mla	r9, r0, r4, r9
 8018ed0:	785c      	ldrb	r4, [r3, #1]
 8018ed2:	fb0b 9404 	mla	r4, fp, r4, r9
 8018ed6:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 8018eda:	9c02      	ldr	r4, [sp, #8]
 8018edc:	fb14 f90e 	smulbb	r9, r4, lr
 8018ee0:	fb0a 940c 	mla	r4, sl, ip, r9
 8018ee4:	b2a4      	uxth	r4, r4
 8018ee6:	f104 0901 	add.w	r9, r4, #1
 8018eea:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 8018eee:	1224      	asrs	r4, r4, #8
 8018ef0:	704c      	strb	r4, [r1, #1]
 8018ef2:	78ad      	ldrb	r5, [r5, #2]
 8018ef4:	78bc      	ldrb	r4, [r7, #2]
 8018ef6:	436a      	muls	r2, r5
 8018ef8:	789b      	ldrb	r3, [r3, #2]
 8018efa:	fb08 2204 	mla	r2, r8, r4, r2
 8018efe:	78b4      	ldrb	r4, [r6, #2]
 8018f00:	fb00 2004 	mla	r0, r0, r4, r2
 8018f04:	fb0b 0b03 	mla	fp, fp, r3, r0
 8018f08:	9b01      	ldr	r3, [sp, #4]
 8018f0a:	fb13 fe0e 	smulbb	lr, r3, lr
 8018f0e:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8018f12:	fb0b ec0c 	mla	ip, fp, ip, lr
 8018f16:	fa1f fc8c 	uxth.w	ip, ip
 8018f1a:	f10c 0e01 	add.w	lr, ip, #1
 8018f1e:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 8018f22:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8018f26:	f881 c002 	strb.w	ip, [r1, #2]
 8018f2a:	b007      	add	sp, #28
 8018f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f30:	af05      	add	r7, sp, #20
 8018f32:	e75b      	b.n	8018dec <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 8018f34:	ad05      	add	r5, sp, #20
 8018f36:	462f      	mov	r7, r5
 8018f38:	e766      	b.n	8018e08 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8018f3a:	ad05      	add	r5, sp, #20
 8018f3c:	e764      	b.n	8018e08 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 8018f3e:	ae05      	add	r6, sp, #20
 8018f40:	e777      	b.n	8018e32 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 8018f42:	ab05      	add	r3, sp, #20
 8018f44:	461e      	mov	r6, r3
 8018f46:	e783      	b.n	8018e50 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 8018f48:	ab05      	add	r3, sp, #20
 8018f4a:	e781      	b.n	8018e50 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

08018f4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f50:	b093      	sub	sp, #76	; 0x4c
 8018f52:	9210      	str	r2, [sp, #64]	; 0x40
 8018f54:	9309      	str	r3, [sp, #36]	; 0x24
 8018f56:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018f58:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 8018f5c:	9011      	str	r0, [sp, #68]	; 0x44
 8018f5e:	930e      	str	r3, [sp, #56]	; 0x38
 8018f60:	6850      	ldr	r0, [r2, #4]
 8018f62:	910d      	str	r1, [sp, #52]	; 0x34
 8018f64:	6812      	ldr	r2, [r2, #0]
 8018f66:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8018f6a:	fb00 1303 	mla	r3, r0, r3, r1
 8018f6e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f72:	18d3      	adds	r3, r2, r3
 8018f74:	930a      	str	r3, [sp, #40]	; 0x28
 8018f76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	930c      	str	r3, [sp, #48]	; 0x30
 8018f7c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018f7e:	685c      	ldr	r4, [r3, #4]
 8018f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018f82:	3404      	adds	r4, #4
 8018f84:	43db      	mvns	r3, r3
 8018f86:	b2db      	uxtb	r3, r3
 8018f88:	930b      	str	r3, [sp, #44]	; 0x2c
 8018f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	dc03      	bgt.n	8018f98 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8018f90:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	f340 8250 	ble.w	8019438 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 8018f98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8018f9a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8018f9e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8018fa2:	1e48      	subs	r0, r1, #1
 8018fa4:	1e55      	subs	r5, r2, #1
 8018fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	f340 80ee 	ble.w	801918a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 8018fae:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8018fb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018fb2:	1436      	asrs	r6, r6, #16
 8018fb4:	ea4f 4323 	mov.w	r3, r3, asr #16
 8018fb8:	d406      	bmi.n	8018fc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018fba:	4286      	cmp	r6, r0
 8018fbc:	da04      	bge.n	8018fc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	db02      	blt.n	8018fc8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018fc2:	42ab      	cmp	r3, r5
 8018fc4:	f2c0 80e2 	blt.w	801918c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8018fc8:	3601      	adds	r6, #1
 8018fca:	f100 80cf 	bmi.w	801916c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018fce:	42b1      	cmp	r1, r6
 8018fd0:	f2c0 80cc 	blt.w	801916c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018fd4:	3301      	adds	r3, #1
 8018fd6:	f100 80c9 	bmi.w	801916c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018fda:	429a      	cmp	r2, r3
 8018fdc:	f2c0 80c6 	blt.w	801916c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 8018fe0:	e9dd b609 	ldrd	fp, r6, [sp, #36]	; 0x24
 8018fe4:	f1bb 0f00 	cmp.w	fp, #0
 8018fe8:	f340 80f1 	ble.w	80191ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8018fec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8018fee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8018ff0:	9824      	ldr	r0, [sp, #144]	; 0x90
 8018ff2:	141d      	asrs	r5, r3, #16
 8018ff4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018ff6:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8018ffa:	68c7      	ldr	r7, [r0, #12]
 8018ffc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018ffe:	1418      	asrs	r0, r3, #16
 8019000:	f3c3 3803 	ubfx	r8, r3, #12, #4
 8019004:	6892      	ldr	r2, [r2, #8]
 8019006:	f100 8137 	bmi.w	8019278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801900a:	f102 3cff 	add.w	ip, r2, #4294967295
 801900e:	4560      	cmp	r0, ip
 8019010:	f280 8132 	bge.w	8019278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8019014:	2d00      	cmp	r5, #0
 8019016:	f2c0 812f 	blt.w	8019278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801901a:	f107 3cff 	add.w	ip, r7, #4294967295
 801901e:	4565      	cmp	r5, ip
 8019020:	f280 812a 	bge.w	8019278 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8019024:	b212      	sxth	r2, r2
 8019026:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019028:	fb05 0002 	mla	r0, r5, r2, r0
 801902c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801902e:	f817 c000 	ldrb.w	ip, [r7, r0]
 8019032:	4405      	add	r5, r0
 8019034:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019038:	eb04 0e0c 	add.w	lr, r4, ip
 801903c:	f1b8 0f00 	cmp.w	r8, #0
 8019040:	f000 810c 	beq.w	801925c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8019044:	786f      	ldrb	r7, [r5, #1]
 8019046:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801904a:	4427      	add	r7, r4
 801904c:	2900      	cmp	r1, #0
 801904e:	f000 810d 	beq.w	801926c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8019052:	18a8      	adds	r0, r5, r2
 8019054:	5caa      	ldrb	r2, [r5, r2]
 8019056:	7840      	ldrb	r0, [r0, #1]
 8019058:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801905c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019060:	4422      	add	r2, r4
 8019062:	4420      	add	r0, r4
 8019064:	fa1f f388 	uxth.w	r3, r8
 8019068:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801906c:	b289      	uxth	r1, r1
 801906e:	f897 c000 	ldrb.w	ip, [r7]
 8019072:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8019076:	fb03 f901 	mul.w	r9, r3, r1
 801907a:	011b      	lsls	r3, r3, #4
 801907c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019080:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 8019084:	eba3 0309 	sub.w	r3, r3, r9
 8019088:	b289      	uxth	r1, r1
 801908a:	b29b      	uxth	r3, r3
 801908c:	eba8 0801 	sub.w	r8, r8, r1
 8019090:	fb03 fc0c 	mul.w	ip, r3, ip
 8019094:	fa1f f888 	uxth.w	r8, r8
 8019098:	930f      	str	r3, [sp, #60]	; 0x3c
 801909a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801909c:	fb08 cc0a 	mla	ip, r8, sl, ip
 80190a0:	f892 a000 	ldrb.w	sl, [r2]
 80190a4:	fb01 cc0a 	mla	ip, r1, sl, ip
 80190a8:	f890 a000 	ldrb.w	sl, [r0]
 80190ac:	fb09 cc0a 	mla	ip, r9, sl, ip
 80190b0:	f896 a000 	ldrb.w	sl, [r6]
 80190b4:	fb1a fa03 	smulbb	sl, sl, r3
 80190b8:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80190bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190be:	fb0c ac05 	mla	ip, ip, r5, sl
 80190c2:	fa1f fc8c 	uxth.w	ip, ip
 80190c6:	f10c 0a01 	add.w	sl, ip, #1
 80190ca:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 80190ce:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80190d2:	f886 a000 	strb.w	sl, [r6]
 80190d6:	f897 c001 	ldrb.w	ip, [r7, #1]
 80190da:	f89e a001 	ldrb.w	sl, [lr, #1]
 80190de:	fb03 fc0c 	mul.w	ip, r3, ip
 80190e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190e4:	fb08 cc0a 	mla	ip, r8, sl, ip
 80190e8:	f892 a001 	ldrb.w	sl, [r2, #1]
 80190ec:	fb01 cc0a 	mla	ip, r1, sl, ip
 80190f0:	f890 a001 	ldrb.w	sl, [r0, #1]
 80190f4:	fb09 cc0a 	mla	ip, r9, sl, ip
 80190f8:	f896 a001 	ldrb.w	sl, [r6, #1]
 80190fc:	fb1a fa03 	smulbb	sl, sl, r3
 8019100:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8019104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019106:	fb0c ac05 	mla	ip, ip, r5, sl
 801910a:	fa1f fc8c 	uxth.w	ip, ip
 801910e:	f10c 0a01 	add.w	sl, ip, #1
 8019112:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 8019116:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801911a:	f886 c001 	strb.w	ip, [r6, #1]
 801911e:	78bf      	ldrb	r7, [r7, #2]
 8019120:	f89e c002 	ldrb.w	ip, [lr, #2]
 8019124:	437b      	muls	r3, r7
 8019126:	fb08 330c 	mla	r3, r8, ip, r3
 801912a:	f892 c002 	ldrb.w	ip, [r2, #2]
 801912e:	7882      	ldrb	r2, [r0, #2]
 8019130:	fb01 310c 	mla	r1, r1, ip, r3
 8019134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019136:	fb09 1902 	mla	r9, r9, r2, r1
 801913a:	78b1      	ldrb	r1, [r6, #2]
 801913c:	fb11 f103 	smulbb	r1, r1, r3
 8019140:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8019144:	fb09 1505 	mla	r5, r9, r5, r1
 8019148:	b2ad      	uxth	r5, r5
 801914a:	1c6b      	adds	r3, r5, #1
 801914c:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8019150:	122d      	asrs	r5, r5, #8
 8019152:	70b5      	strb	r5, [r6, #2]
 8019154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019156:	3603      	adds	r6, #3
 8019158:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801915a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801915e:	4413      	add	r3, r2
 8019160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019162:	931d      	str	r3, [sp, #116]	; 0x74
 8019164:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019166:	4413      	add	r3, r2
 8019168:	931e      	str	r3, [sp, #120]	; 0x78
 801916a:	e73b      	b.n	8018fe4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801916c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801916e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8019170:	4433      	add	r3, r6
 8019172:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8019174:	931d      	str	r3, [sp, #116]	; 0x74
 8019176:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019178:	4433      	add	r3, r6
 801917a:	931e      	str	r3, [sp, #120]	; 0x78
 801917c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801917e:	3b01      	subs	r3, #1
 8019180:	9309      	str	r3, [sp, #36]	; 0x24
 8019182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019184:	3303      	adds	r3, #3
 8019186:	930a      	str	r3, [sp, #40]	; 0x28
 8019188:	e70d      	b.n	8018fa6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801918a:	d028      	beq.n	80191de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801918c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801918e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8019190:	3b01      	subs	r3, #1
 8019192:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8019194:	fb00 5003 	mla	r0, r0, r3, r5
 8019198:	1400      	asrs	r0, r0, #16
 801919a:	f53f af21 	bmi.w	8018fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801919e:	3901      	subs	r1, #1
 80191a0:	4288      	cmp	r0, r1
 80191a2:	f6bf af1d 	bge.w	8018fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80191a6:	9920      	ldr	r1, [sp, #128]	; 0x80
 80191a8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80191aa:	fb01 0303 	mla	r3, r1, r3, r0
 80191ae:	141b      	asrs	r3, r3, #16
 80191b0:	f53f af16 	bmi.w	8018fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80191b4:	3a01      	subs	r2, #1
 80191b6:	4293      	cmp	r3, r2
 80191b8:	f6bf af12 	bge.w	8018fe0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80191bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80191be:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80191c2:	1cdf      	adds	r7, r3, #3
 80191c4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
 80191c8:	f1b9 0f00 	cmp.w	r9, #0
 80191cc:	dc73      	bgt.n	80192b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80191ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80191d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80191da:	441a      	add	r2, r3
 80191dc:	920a      	str	r2, [sp, #40]	; 0x28
 80191de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80191e0:	2b00      	cmp	r3, #0
 80191e2:	f340 8129 	ble.w	8019438 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 80191e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80191ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80191ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 80191f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80191f4:	eef0 6a62 	vmov.f32	s13, s5
 80191f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80191fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019200:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019204:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8019208:	eef0 6a43 	vmov.f32	s13, s6
 801920c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019210:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 8019214:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019218:	ee61 7a27 	vmul.f32	s15, s2, s15
 801921c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019220:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019224:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019228:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801922c:	ee12 2a90 	vmov	r2, s5
 8019230:	eef0 2a47 	vmov.f32	s5, s14
 8019234:	fb92 f3f3 	sdiv	r3, r2, r3
 8019238:	ee13 2a10 	vmov	r2, s6
 801923c:	931f      	str	r3, [sp, #124]	; 0x7c
 801923e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019240:	eeb0 3a67 	vmov.f32	s6, s15
 8019244:	fb92 f3f3 	sdiv	r3, r2, r3
 8019248:	9320      	str	r3, [sp, #128]	; 0x80
 801924a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801924c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801924e:	3b01      	subs	r3, #1
 8019250:	930d      	str	r3, [sp, #52]	; 0x34
 8019252:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019254:	bf08      	it	eq
 8019256:	4613      	moveq	r3, r2
 8019258:	9309      	str	r3, [sp, #36]	; 0x24
 801925a:	e696      	b.n	8018f8a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801925c:	b149      	cbz	r1, 8019272 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801925e:	5caa      	ldrb	r2, [r5, r2]
 8019260:	4670      	mov	r0, lr
 8019262:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019266:	4422      	add	r2, r4
 8019268:	4677      	mov	r7, lr
 801926a:	e6fb      	b.n	8019064 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801926c:	4670      	mov	r0, lr
 801926e:	4672      	mov	r2, lr
 8019270:	e6f8      	b.n	8019064 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 8019272:	4670      	mov	r0, lr
 8019274:	4672      	mov	r2, lr
 8019276:	e7f7      	b.n	8019268 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8019278:	f110 0c01 	adds.w	ip, r0, #1
 801927c:	f53f af6a 	bmi.w	8019154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019280:	4562      	cmp	r2, ip
 8019282:	f6ff af67 	blt.w	8019154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019286:	f115 0c01 	adds.w	ip, r5, #1
 801928a:	f53f af63 	bmi.w	8019154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801928e:	4567      	cmp	r7, ip
 8019290:	f6ff af60 	blt.w	8019154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 8019294:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019296:	b23f      	sxth	r7, r7
 8019298:	b212      	sxth	r2, r2
 801929a:	9002      	str	r0, [sp, #8]
 801929c:	9701      	str	r7, [sp, #4]
 801929e:	9200      	str	r2, [sp, #0]
 80192a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80192a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80192a4:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80192a8:	e9cd 5803 	strd	r5, r8, [sp, #12]
 80192ac:	4623      	mov	r3, r4
 80192ae:	4631      	mov	r1, r6
 80192b0:	f7ff fd69 	bl	8018d86 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 80192b4:	e74e      	b.n	8019154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 80192b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80192b8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80192ba:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80192be:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80192c0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80192c2:	1400      	asrs	r0, r0, #16
 80192c4:	142d      	asrs	r5, r5, #16
 80192c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80192c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80192cc:	f3c3 3303 	ubfx	r3, r3, #12, #4
 80192d0:	fb02 5000 	mla	r0, r2, r0, r5
 80192d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80192d6:	f815 e000 	ldrb.w	lr, [r5, r0]
 80192da:	eb05 0c00 	add.w	ip, r5, r0
 80192de:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80192e2:	eb04 060e 	add.w	r6, r4, lr
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	f000 8097 	beq.w	801941a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 80192ec:	f89c 5001 	ldrb.w	r5, [ip, #1]
 80192f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80192f4:	4425      	add	r5, r4
 80192f6:	2900      	cmp	r1, #0
 80192f8:	f000 8098 	beq.w	801942c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 80192fc:	eb0c 0002 	add.w	r0, ip, r2
 8019300:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019304:	7840      	ldrb	r0, [r0, #1]
 8019306:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801930a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801930e:	4422      	add	r2, r4
 8019310:	4420      	add	r0, r4
 8019312:	b29b      	uxth	r3, r3
 8019314:	f814 b00e 	ldrb.w	fp, [r4, lr]
 8019318:	b289      	uxth	r1, r1
 801931a:	f895 e000 	ldrb.w	lr, [r5]
 801931e:	3703      	adds	r7, #3
 8019320:	f109 39ff 	add.w	r9, r9, #4294967295
 8019324:	fb03 f801 	mul.w	r8, r3, r1
 8019328:	011b      	lsls	r3, r3, #4
 801932a:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801932e:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 8019332:	eba3 0308 	sub.w	r3, r3, r8
 8019336:	b289      	uxth	r1, r1
 8019338:	b29b      	uxth	r3, r3
 801933a:	ebac 0c01 	sub.w	ip, ip, r1
 801933e:	fb03 fe0e 	mul.w	lr, r3, lr
 8019342:	fa1f fc8c 	uxth.w	ip, ip
 8019346:	930f      	str	r3, [sp, #60]	; 0x3c
 8019348:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801934a:	fb0c ee0b 	mla	lr, ip, fp, lr
 801934e:	f892 b000 	ldrb.w	fp, [r2]
 8019352:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019356:	f890 b000 	ldrb.w	fp, [r0]
 801935a:	fb08 ee0b 	mla	lr, r8, fp, lr
 801935e:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 8019362:	fb1b fb03 	smulbb	fp, fp, r3
 8019366:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801936a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801936c:	fb0e be0a 	mla	lr, lr, sl, fp
 8019370:	fa1f fe8e 	uxth.w	lr, lr
 8019374:	f10e 0b01 	add.w	fp, lr, #1
 8019378:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801937c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019380:	f807 ec06 	strb.w	lr, [r7, #-6]
 8019384:	f895 e001 	ldrb.w	lr, [r5, #1]
 8019388:	f896 b001 	ldrb.w	fp, [r6, #1]
 801938c:	fb03 fe0e 	mul.w	lr, r3, lr
 8019390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019392:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019396:	f892 b001 	ldrb.w	fp, [r2, #1]
 801939a:	fb01 ee0b 	mla	lr, r1, fp, lr
 801939e:	f890 b001 	ldrb.w	fp, [r0, #1]
 80193a2:	fb08 ee0b 	mla	lr, r8, fp, lr
 80193a6:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 80193aa:	fb1b fb03 	smulbb	fp, fp, r3
 80193ae:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80193b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80193b4:	fb0e be0a 	mla	lr, lr, sl, fp
 80193b8:	fa1f fe8e 	uxth.w	lr, lr
 80193bc:	f10e 0b01 	add.w	fp, lr, #1
 80193c0:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 80193c4:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80193c8:	f807 ec05 	strb.w	lr, [r7, #-5]
 80193cc:	78ad      	ldrb	r5, [r5, #2]
 80193ce:	78b6      	ldrb	r6, [r6, #2]
 80193d0:	436b      	muls	r3, r5
 80193d2:	7895      	ldrb	r5, [r2, #2]
 80193d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80193d6:	fb0c 3306 	mla	r3, ip, r6, r3
 80193da:	fb01 3305 	mla	r3, r1, r5, r3
 80193de:	7885      	ldrb	r5, [r0, #2]
 80193e0:	fb08 3805 	mla	r8, r8, r5, r3
 80193e4:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 80193e8:	fb13 f302 	smulbb	r3, r3, r2
 80193ec:	f3c8 2807 	ubfx	r8, r8, #8, #8
 80193f0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80193f2:	fb08 380a 	mla	r8, r8, sl, r3
 80193f6:	fa1f f888 	uxth.w	r8, r8
 80193fa:	f108 0301 	add.w	r3, r8, #1
 80193fe:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 8019402:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019404:	4413      	add	r3, r2
 8019406:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019408:	ea4f 2828 	mov.w	r8, r8, asr #8
 801940c:	931d      	str	r3, [sp, #116]	; 0x74
 801940e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8019410:	f807 8c04 	strb.w	r8, [r7, #-4]
 8019414:	4413      	add	r3, r2
 8019416:	931e      	str	r3, [sp, #120]	; 0x78
 8019418:	e6d6      	b.n	80191c8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801941a:	b151      	cbz	r1, 8019432 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801941c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019420:	4630      	mov	r0, r6
 8019422:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019426:	4422      	add	r2, r4
 8019428:	4635      	mov	r5, r6
 801942a:	e772      	b.n	8019312 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801942c:	4630      	mov	r0, r6
 801942e:	4632      	mov	r2, r6
 8019430:	e76f      	b.n	8019312 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8019432:	4630      	mov	r0, r6
 8019434:	4632      	mov	r2, r6
 8019436:	e7f7      	b.n	8019428 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8019438:	b013      	add	sp, #76	; 0x4c
 801943a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801943e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801943e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8019442:	784c      	ldrb	r4, [r1, #1]
 8019444:	f891 a002 	ldrb.w	sl, [r1, #2]
 8019448:	0224      	lsls	r4, r4, #8
 801944a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801944e:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	; 0x2c
 8019452:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019456:	f891 a000 	ldrb.w	sl, [r1]
 801945a:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
 801945e:	ea44 040a 	orr.w	r4, r4, sl
 8019462:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 8019466:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	; 0x30
 801946a:	9401      	str	r4, [sp, #4]
 801946c:	fb05 c70e 	mla	r7, r5, lr, ip
 8019470:	2d00      	cmp	r5, #0
 8019472:	eb02 0807 	add.w	r8, r2, r7
 8019476:	db72      	blt.n	801955e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 8019478:	45a9      	cmp	r9, r5
 801947a:	dd70      	ble.n	801955e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801947c:	f1bc 0f00 	cmp.w	ip, #0
 8019480:	db6b      	blt.n	801955a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8019482:	45e6      	cmp	lr, ip
 8019484:	dd69      	ble.n	801955a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 8019486:	5dd7      	ldrb	r7, [r2, r7]
 8019488:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801948c:	441f      	add	r7, r3
 801948e:	f11c 0201 	adds.w	r2, ip, #1
 8019492:	d467      	bmi.n	8019564 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8019494:	4596      	cmp	lr, r2
 8019496:	dd65      	ble.n	8019564 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 8019498:	2800      	cmp	r0, #0
 801949a:	d063      	beq.n	8019564 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801949c:	f898 4001 	ldrb.w	r4, [r8, #1]
 80194a0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80194a4:	441c      	add	r4, r3
 80194a6:	3501      	adds	r5, #1
 80194a8:	d460      	bmi.n	801956c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80194aa:	45a9      	cmp	r9, r5
 80194ac:	dd5e      	ble.n	801956c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80194ae:	2e00      	cmp	r6, #0
 80194b0:	d05c      	beq.n	801956c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 80194b2:	f1bc 0f00 	cmp.w	ip, #0
 80194b6:	db57      	blt.n	8019568 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80194b8:	45e6      	cmp	lr, ip
 80194ba:	dd55      	ble.n	8019568 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 80194bc:	f818 500e 	ldrb.w	r5, [r8, lr]
 80194c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194c4:	441d      	add	r5, r3
 80194c6:	f11c 0201 	adds.w	r2, ip, #1
 80194ca:	d452      	bmi.n	8019572 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80194cc:	4596      	cmp	lr, r2
 80194ce:	dd50      	ble.n	8019572 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80194d0:	2800      	cmp	r0, #0
 80194d2:	d04e      	beq.n	8019572 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 80194d4:	44c6      	add	lr, r8
 80194d6:	f89e 2001 	ldrb.w	r2, [lr, #1]
 80194da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80194de:	4413      	add	r3, r2
 80194e0:	b280      	uxth	r0, r0
 80194e2:	f897 8000 	ldrb.w	r8, [r7]
 80194e6:	b2b2      	uxth	r2, r6
 80194e8:	fb00 f602 	mul.w	r6, r0, r2
 80194ec:	0100      	lsls	r0, r0, #4
 80194ee:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 80194f2:	f5c0 7e80 	rsb	lr, r0, #256	; 0x100
 80194f6:	1b80      	subs	r0, r0, r6
 80194f8:	fa1f fc82 	uxth.w	ip, r2
 80194fc:	b282      	uxth	r2, r0
 80194fe:	7820      	ldrb	r0, [r4, #0]
 8019500:	ebae 0e0c 	sub.w	lr, lr, ip
 8019504:	4350      	muls	r0, r2
 8019506:	fa1f fe8e 	uxth.w	lr, lr
 801950a:	fb0e 0808 	mla	r8, lr, r8, r0
 801950e:	7828      	ldrb	r0, [r5, #0]
 8019510:	fb0c 8800 	mla	r8, ip, r0, r8
 8019514:	7818      	ldrb	r0, [r3, #0]
 8019516:	fb06 8000 	mla	r0, r6, r0, r8
 801951a:	1200      	asrs	r0, r0, #8
 801951c:	7008      	strb	r0, [r1, #0]
 801951e:	7860      	ldrb	r0, [r4, #1]
 8019520:	f897 8001 	ldrb.w	r8, [r7, #1]
 8019524:	4350      	muls	r0, r2
 8019526:	fb0e 0808 	mla	r8, lr, r8, r0
 801952a:	7868      	ldrb	r0, [r5, #1]
 801952c:	fb0c 8800 	mla	r8, ip, r0, r8
 8019530:	7858      	ldrb	r0, [r3, #1]
 8019532:	fb06 8000 	mla	r0, r6, r0, r8
 8019536:	1200      	asrs	r0, r0, #8
 8019538:	7048      	strb	r0, [r1, #1]
 801953a:	78a0      	ldrb	r0, [r4, #2]
 801953c:	78bf      	ldrb	r7, [r7, #2]
 801953e:	4350      	muls	r0, r2
 8019540:	78aa      	ldrb	r2, [r5, #2]
 8019542:	fb0e 0007 	mla	r0, lr, r7, r0
 8019546:	fb0c 0c02 	mla	ip, ip, r2, r0
 801954a:	789a      	ldrb	r2, [r3, #2]
 801954c:	fb06 c202 	mla	r2, r6, r2, ip
 8019550:	1212      	asrs	r2, r2, #8
 8019552:	708a      	strb	r2, [r1, #2]
 8019554:	b002      	add	sp, #8
 8019556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801955a:	af01      	add	r7, sp, #4
 801955c:	e797      	b.n	801948e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801955e:	ac01      	add	r4, sp, #4
 8019560:	4627      	mov	r7, r4
 8019562:	e7a0      	b.n	80194a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8019564:	ac01      	add	r4, sp, #4
 8019566:	e79e      	b.n	80194a6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 8019568:	ad01      	add	r5, sp, #4
 801956a:	e7ac      	b.n	80194c6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801956c:	ab01      	add	r3, sp, #4
 801956e:	461d      	mov	r5, r3
 8019570:	e7b6      	b.n	80194e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 8019572:	ab01      	add	r3, sp, #4
 8019574:	e7b4      	b.n	80194e0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

08019576 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801957a:	b08d      	sub	sp, #52	; 0x34
 801957c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019580:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 8019584:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019586:	900b      	str	r0, [sp, #44]	; 0x2c
 8019588:	9306      	str	r3, [sp, #24]
 801958a:	6850      	ldr	r0, [r2, #4]
 801958c:	6812      	ldr	r2, [r2, #0]
 801958e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8019590:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	; 0x70
 8019594:	fb00 1303 	mla	r3, r0, r3, r1
 8019598:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801959c:	18d3      	adds	r3, r2, r3
 801959e:	9307      	str	r3, [sp, #28]
 80195a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	9308      	str	r3, [sp, #32]
 80195a6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80195a8:	685d      	ldr	r5, [r3, #4]
 80195aa:	3504      	adds	r5, #4
 80195ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	dc03      	bgt.n	80195ba <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80195b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	f340 81e6 	ble.w	8019986 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80195ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80195bc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80195c0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80195c4:	1e48      	subs	r0, r1, #1
 80195c6:	1e56      	subs	r6, r2, #1
 80195c8:	9b06      	ldr	r3, [sp, #24]
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	f340 80bd 	ble.w	801974a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80195d0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80195d2:	1427      	asrs	r7, r4, #16
 80195d4:	ea4f 4323 	mov.w	r3, r3, asr #16
 80195d8:	d406      	bmi.n	80195e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195da:	4287      	cmp	r7, r0
 80195dc:	da04      	bge.n	80195e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195de:	2b00      	cmp	r3, #0
 80195e0:	db02      	blt.n	80195e8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80195e2:	42b3      	cmp	r3, r6
 80195e4:	f2c0 80b2 	blt.w	801974c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80195e8:	3701      	adds	r7, #1
 80195ea:	f100 80a1 	bmi.w	8019730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80195ee:	42b9      	cmp	r1, r7
 80195f0:	f2c0 809e 	blt.w	8019730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80195f4:	3301      	adds	r3, #1
 80195f6:	f100 809b 	bmi.w	8019730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 80195fa:	429a      	cmp	r2, r3
 80195fc:	f2c0 8098 	blt.w	8019730 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8019600:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8019604:	f1bb 0f00 	cmp.w	fp, #0
 8019608:	f340 80bf 	ble.w	801978a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801960c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801960e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8019610:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019612:	f3c2 3103 	ubfx	r1, r2, #12, #4
 8019616:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801961a:	1420      	asrs	r0, r4, #16
 801961c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801961e:	ea4f 4723 	mov.w	r7, r3, asr #16
 8019622:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8019626:	6892      	ldr	r2, [r2, #8]
 8019628:	f100 8103 	bmi.w	8019832 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801962c:	f102 3eff 	add.w	lr, r2, #4294967295
 8019630:	4570      	cmp	r0, lr
 8019632:	f280 80fe 	bge.w	8019832 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8019636:	2f00      	cmp	r7, #0
 8019638:	f2c0 80fb 	blt.w	8019832 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801963c:	f10c 3eff 	add.w	lr, ip, #4294967295
 8019640:	4577      	cmp	r7, lr
 8019642:	f280 80f6 	bge.w	8019832 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 8019646:	b212      	sxth	r2, r2
 8019648:	fb07 0002 	mla	r0, r7, r2, r0
 801964c:	9f08      	ldr	r7, [sp, #32]
 801964e:	f817 8000 	ldrb.w	r8, [r7, r0]
 8019652:	eb07 0e00 	add.w	lr, r7, r0
 8019656:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801965a:	eb05 0c08 	add.w	ip, r5, r8
 801965e:	2b00      	cmp	r3, #0
 8019660:	f000 80d8 	beq.w	8019814 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8019664:	f89e 7001 	ldrb.w	r7, [lr, #1]
 8019668:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801966c:	442f      	add	r7, r5
 801966e:	2900      	cmp	r1, #0
 8019670:	f000 80d9 	beq.w	8019826 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8019674:	eb0e 0002 	add.w	r0, lr, r2
 8019678:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801967c:	7840      	ldrb	r0, [r0, #1]
 801967e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019682:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019686:	442a      	add	r2, r5
 8019688:	4428      	add	r0, r5
 801968a:	b29b      	uxth	r3, r3
 801968c:	f815 a008 	ldrb.w	sl, [r5, r8]
 8019690:	b289      	uxth	r1, r1
 8019692:	f897 8000 	ldrb.w	r8, [r7]
 8019696:	fb03 f901 	mul.w	r9, r3, r1
 801969a:	011b      	lsls	r3, r3, #4
 801969c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80196a0:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80196a4:	eba3 0309 	sub.w	r3, r3, r9
 80196a8:	b289      	uxth	r1, r1
 80196aa:	b29b      	uxth	r3, r3
 80196ac:	ebae 0e01 	sub.w	lr, lr, r1
 80196b0:	fb03 f808 	mul.w	r8, r3, r8
 80196b4:	fa1f fe8e 	uxth.w	lr, lr
 80196b8:	fb0e 880a 	mla	r8, lr, sl, r8
 80196bc:	f892 a000 	ldrb.w	sl, [r2]
 80196c0:	fb01 880a 	mla	r8, r1, sl, r8
 80196c4:	f890 a000 	ldrb.w	sl, [r0]
 80196c8:	fb09 880a 	mla	r8, r9, sl, r8
 80196cc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80196d0:	f886 8000 	strb.w	r8, [r6]
 80196d4:	f897 8001 	ldrb.w	r8, [r7, #1]
 80196d8:	f89c a001 	ldrb.w	sl, [ip, #1]
 80196dc:	fb03 f808 	mul.w	r8, r3, r8
 80196e0:	fb0e 880a 	mla	r8, lr, sl, r8
 80196e4:	f892 a001 	ldrb.w	sl, [r2, #1]
 80196e8:	fb01 880a 	mla	r8, r1, sl, r8
 80196ec:	f890 a001 	ldrb.w	sl, [r0, #1]
 80196f0:	fb09 880a 	mla	r8, r9, sl, r8
 80196f4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80196f8:	f886 8001 	strb.w	r8, [r6, #1]
 80196fc:	78bf      	ldrb	r7, [r7, #2]
 80196fe:	f89c c002 	ldrb.w	ip, [ip, #2]
 8019702:	437b      	muls	r3, r7
 8019704:	7892      	ldrb	r2, [r2, #2]
 8019706:	fb0e 330c 	mla	r3, lr, ip, r3
 801970a:	fb01 3102 	mla	r1, r1, r2, r3
 801970e:	7882      	ldrb	r2, [r0, #2]
 8019710:	fb09 1902 	mla	r9, r9, r2, r1
 8019714:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019718:	f886 9002 	strb.w	r9, [r6, #2]
 801971c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801971e:	3603      	adds	r6, #3
 8019720:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019722:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019726:	441c      	add	r4, r3
 8019728:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801972a:	4413      	add	r3, r2
 801972c:	9318      	str	r3, [sp, #96]	; 0x60
 801972e:	e769      	b.n	8019604 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8019730:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019732:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8019734:	441c      	add	r4, r3
 8019736:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019738:	443b      	add	r3, r7
 801973a:	9318      	str	r3, [sp, #96]	; 0x60
 801973c:	9b06      	ldr	r3, [sp, #24]
 801973e:	3b01      	subs	r3, #1
 8019740:	9306      	str	r3, [sp, #24]
 8019742:	9b07      	ldr	r3, [sp, #28]
 8019744:	3303      	adds	r3, #3
 8019746:	9307      	str	r3, [sp, #28]
 8019748:	e73e      	b.n	80195c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801974a:	d026      	beq.n	801979a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801974c:	9b06      	ldr	r3, [sp, #24]
 801974e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019750:	3b01      	subs	r3, #1
 8019752:	fb00 4003 	mla	r0, r0, r3, r4
 8019756:	1400      	asrs	r0, r0, #16
 8019758:	f53f af52 	bmi.w	8019600 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801975c:	3901      	subs	r1, #1
 801975e:	4288      	cmp	r0, r1
 8019760:	f6bf af4e 	bge.w	8019600 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019764:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019766:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019768:	fb01 0303 	mla	r3, r1, r3, r0
 801976c:	141b      	asrs	r3, r3, #16
 801976e:	f53f af47 	bmi.w	8019600 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8019772:	3a01      	subs	r2, #1
 8019774:	4293      	cmp	r3, r2
 8019776:	f6bf af43 	bge.w	8019600 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801977a:	9b07      	ldr	r3, [sp, #28]
 801977c:	f8dd a018 	ldr.w	sl, [sp, #24]
 8019780:	f103 0803 	add.w	r8, r3, #3
 8019784:	f1ba 0f00 	cmp.w	sl, #0
 8019788:	dc71      	bgt.n	801986e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801978a:	9b06      	ldr	r3, [sp, #24]
 801978c:	9a07      	ldr	r2, [sp, #28]
 801978e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019792:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019796:	441a      	add	r2, r3
 8019798:	9207      	str	r2, [sp, #28]
 801979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801979c:	2b00      	cmp	r3, #0
 801979e:	f340 80f2 	ble.w	8019986 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 80197a2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80197a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80197a8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80197ac:	eeb0 6a62 	vmov.f32	s12, s5
 80197b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80197b4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80197b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197bc:	ee16 4a10 	vmov	r4, s12
 80197c0:	eeb0 6a43 	vmov.f32	s12, s6
 80197c4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197c8:	ed8d 6a18 	vstr	s12, [sp, #96]	; 0x60
 80197cc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80197d0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80197dc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80197e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80197e4:	ee12 2a90 	vmov	r2, s5
 80197e8:	eef0 2a47 	vmov.f32	s5, s14
 80197ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80197f0:	ee13 2a10 	vmov	r2, s6
 80197f4:	9319      	str	r3, [sp, #100]	; 0x64
 80197f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80197f8:	eeb0 3a67 	vmov.f32	s6, s15
 80197fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8019800:	931a      	str	r3, [sp, #104]	; 0x68
 8019802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019806:	3b01      	subs	r3, #1
 8019808:	9309      	str	r3, [sp, #36]	; 0x24
 801980a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801980c:	bf08      	it	eq
 801980e:	4613      	moveq	r3, r2
 8019810:	9306      	str	r3, [sp, #24]
 8019812:	e6cb      	b.n	80195ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8019814:	b151      	cbz	r1, 801982c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8019816:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801981a:	4660      	mov	r0, ip
 801981c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019820:	442a      	add	r2, r5
 8019822:	4667      	mov	r7, ip
 8019824:	e731      	b.n	801968a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8019826:	4660      	mov	r0, ip
 8019828:	4662      	mov	r2, ip
 801982a:	e72e      	b.n	801968a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801982c:	4660      	mov	r0, ip
 801982e:	4662      	mov	r2, ip
 8019830:	e7f7      	b.n	8019822 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8019832:	f110 0e01 	adds.w	lr, r0, #1
 8019836:	f53f af71 	bmi.w	801971c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801983a:	4572      	cmp	r2, lr
 801983c:	f6ff af6e 	blt.w	801971c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019840:	f117 0e01 	adds.w	lr, r7, #1
 8019844:	f53f af6a 	bmi.w	801971c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019848:	45f4      	cmp	ip, lr
 801984a:	f6ff af67 	blt.w	801971c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801984e:	b212      	sxth	r2, r2
 8019850:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8019854:	fa0f f38c 	sxth.w	r3, ip
 8019858:	9200      	str	r2, [sp, #0]
 801985a:	4631      	mov	r1, r6
 801985c:	9a08      	ldr	r2, [sp, #32]
 801985e:	9301      	str	r3, [sp, #4]
 8019860:	462b      	mov	r3, r5
 8019862:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8019866:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019868:	f7ff fde9 	bl	801943e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801986c:	e756      	b.n	801971c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801986e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019870:	1426      	asrs	r6, r4, #16
 8019872:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019874:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8019878:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801987c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801987e:	1400      	asrs	r0, r0, #16
 8019880:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8019884:	fb02 6000 	mla	r0, r2, r0, r6
 8019888:	9e08      	ldr	r6, [sp, #32]
 801988a:	f816 e000 	ldrb.w	lr, [r6, r0]
 801988e:	eb06 0c00 	add.w	ip, r6, r0
 8019892:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019896:	eb05 070e 	add.w	r7, r5, lr
 801989a:	2b00      	cmp	r3, #0
 801989c:	d064      	beq.n	8019968 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801989e:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80198a2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80198a6:	442e      	add	r6, r5
 80198a8:	2900      	cmp	r1, #0
 80198aa:	d066      	beq.n	801997a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80198ac:	eb0c 0002 	add.w	r0, ip, r2
 80198b0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80198b4:	7840      	ldrb	r0, [r0, #1]
 80198b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80198ba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80198be:	442a      	add	r2, r5
 80198c0:	4428      	add	r0, r5
 80198c2:	b29b      	uxth	r3, r3
 80198c4:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80198c8:	b289      	uxth	r1, r1
 80198ca:	f896 e000 	ldrb.w	lr, [r6]
 80198ce:	f108 0803 	add.w	r8, r8, #3
 80198d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80198d6:	fb03 f901 	mul.w	r9, r3, r1
 80198da:	011b      	lsls	r3, r3, #4
 80198dc:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80198e0:	f5c3 7c80 	rsb	ip, r3, #256	; 0x100
 80198e4:	eba3 0309 	sub.w	r3, r3, r9
 80198e8:	b289      	uxth	r1, r1
 80198ea:	b29b      	uxth	r3, r3
 80198ec:	ebac 0c01 	sub.w	ip, ip, r1
 80198f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80198f4:	fa1f fc8c 	uxth.w	ip, ip
 80198f8:	fb0c ee0b 	mla	lr, ip, fp, lr
 80198fc:	f892 b000 	ldrb.w	fp, [r2]
 8019900:	fb01 ee0b 	mla	lr, r1, fp, lr
 8019904:	f890 b000 	ldrb.w	fp, [r0]
 8019908:	fb09 ee0b 	mla	lr, r9, fp, lr
 801990c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019910:	f808 ec06 	strb.w	lr, [r8, #-6]
 8019914:	f896 e001 	ldrb.w	lr, [r6, #1]
 8019918:	f897 b001 	ldrb.w	fp, [r7, #1]
 801991c:	fb03 fe0e 	mul.w	lr, r3, lr
 8019920:	fb0c ee0b 	mla	lr, ip, fp, lr
 8019924:	f892 b001 	ldrb.w	fp, [r2, #1]
 8019928:	fb01 ee0b 	mla	lr, r1, fp, lr
 801992c:	f890 b001 	ldrb.w	fp, [r0, #1]
 8019930:	fb09 ee0b 	mla	lr, r9, fp, lr
 8019934:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8019938:	f808 ec05 	strb.w	lr, [r8, #-5]
 801993c:	78b6      	ldrb	r6, [r6, #2]
 801993e:	78bf      	ldrb	r7, [r7, #2]
 8019940:	4373      	muls	r3, r6
 8019942:	7896      	ldrb	r6, [r2, #2]
 8019944:	7882      	ldrb	r2, [r0, #2]
 8019946:	fb0c 3307 	mla	r3, ip, r7, r3
 801994a:	fb01 3306 	mla	r3, r1, r6, r3
 801994e:	fb09 3902 	mla	r9, r9, r2, r3
 8019952:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019954:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019956:	441c      	add	r4, r3
 8019958:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801995a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801995e:	4413      	add	r3, r2
 8019960:	f808 9c04 	strb.w	r9, [r8, #-4]
 8019964:	9318      	str	r3, [sp, #96]	; 0x60
 8019966:	e70d      	b.n	8019784 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 8019968:	b151      	cbz	r1, 8019980 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801996a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801996e:	4638      	mov	r0, r7
 8019970:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019974:	442a      	add	r2, r5
 8019976:	463e      	mov	r6, r7
 8019978:	e7a3      	b.n	80198c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801997a:	4638      	mov	r0, r7
 801997c:	463a      	mov	r2, r7
 801997e:	e7a0      	b.n	80198c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8019980:	4638      	mov	r0, r7
 8019982:	463a      	mov	r2, r7
 8019984:	e7f7      	b.n	8019976 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8019986:	b00d      	add	sp, #52	; 0x34
 8019988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801998c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801998c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019990:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 8019994:	f9bd c030 	ldrsh.w	ip, [sp, #48]	; 0x30
 8019998:	2d00      	cmp	r5, #0
 801999a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801999e:	fb05 700c 	mla	r0, r5, ip, r7
 80199a2:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80199a6:	f89d e044 	ldrb.w	lr, [sp, #68]	; 0x44
 80199aa:	eb02 0800 	add.w	r8, r2, r0
 80199ae:	f2c0 8118 	blt.w	8019be2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80199b2:	45a9      	cmp	r9, r5
 80199b4:	f340 8115 	ble.w	8019be2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80199b8:	2f00      	cmp	r7, #0
 80199ba:	f2c0 8110 	blt.w	8019bde <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80199be:	45bc      	cmp	ip, r7
 80199c0:	f340 810d 	ble.w	8019bde <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80199c4:	5c12      	ldrb	r2, [r2, r0]
 80199c6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80199ca:	1c7a      	adds	r2, r7, #1
 80199cc:	f100 810c 	bmi.w	8019be8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 80199d0:	4594      	cmp	ip, r2
 80199d2:	f340 8109 	ble.w	8019be8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 80199d6:	2c00      	cmp	r4, #0
 80199d8:	f000 8108 	beq.w	8019bec <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 80199dc:	f898 2001 	ldrb.w	r2, [r8, #1]
 80199e0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80199e4:	3501      	adds	r5, #1
 80199e6:	f100 8105 	bmi.w	8019bf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 80199ea:	45a9      	cmp	r9, r5
 80199ec:	f340 8102 	ble.w	8019bf4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 80199f0:	f1be 0f00 	cmp.w	lr, #0
 80199f4:	f000 8101 	beq.w	8019bfa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 80199f8:	2f00      	cmp	r7, #0
 80199fa:	f2c0 80f9 	blt.w	8019bf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 80199fe:	45bc      	cmp	ip, r7
 8019a00:	f340 80f6 	ble.w	8019bf0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8019a04:	f818 200c 	ldrb.w	r2, [r8, ip]
 8019a08:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8019a0c:	3701      	adds	r7, #1
 8019a0e:	f100 80f7 	bmi.w	8019c00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019a12:	45bc      	cmp	ip, r7
 8019a14:	f340 80f4 	ble.w	8019c00 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8019a18:	2c00      	cmp	r4, #0
 8019a1a:	f000 80f3 	beq.w	8019c04 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8019a1e:	44c4      	add	ip, r8
 8019a20:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8019a24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8019a28:	fa1f fc84 	uxth.w	ip, r4
 8019a2c:	fa1f f48e 	uxth.w	r4, lr
 8019a30:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8019a34:	fb04 fe0c 	mul.w	lr, r4, ip
 8019a38:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8019a3c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8019a40:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8019a44:	ebac 070e 	sub.w	r7, ip, lr
 8019a48:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 8019a4c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8019a50:	b2a4      	uxth	r4, r4
 8019a52:	b2bf      	uxth	r7, r7
 8019a54:	1b1b      	subs	r3, r3, r4
 8019a56:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8019a5a:	fb07 fc0a 	mul.w	ip, r7, sl
 8019a5e:	b29b      	uxth	r3, r3
 8019a60:	fb03 cc0b 	mla	ip, r3, fp, ip
 8019a64:	9300      	str	r3, [sp, #0]
 8019a66:	fb04 cc09 	mla	ip, r4, r9, ip
 8019a6a:	fb0e cc08 	mla	ip, lr, r8, ip
 8019a6e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019a72:	9301      	str	r3, [sp, #4]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	f000 80af 	beq.w	8019bd8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 8019a7a:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 8019a7e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019a82:	fb0b fc0c 	mul.w	ip, fp, ip
 8019a86:	fb0b f606 	mul.w	r6, fp, r6
 8019a8a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8019a8e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8019a92:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8019a96:	44dc      	add	ip, fp
 8019a98:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 8019a9c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019aa0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019aa4:	fb0a fb0b 	mul.w	fp, sl, fp
 8019aa8:	fb0a fa00 	mul.w	sl, sl, r0
 8019aac:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 8019ab0:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 8019ab4:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 8019ab8:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8019abc:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8019ac0:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019ac4:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8019ac8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019acc:	0a36      	lsrs	r6, r6, #8
 8019ace:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019ad2:	44dc      	add	ip, fp
 8019ad4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8019ad8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8019adc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8019ae0:	fb09 fb0b 	mul.w	fp, r9, fp
 8019ae4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019ae8:	fb09 f905 	mul.w	r9, r9, r5
 8019aec:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8019af0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019af4:	f509 7580 	add.w	r5, r9, #256	; 0x100
 8019af8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019afc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019b00:	fb0c fc07 	mul.w	ip, ip, r7
 8019b04:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8019b08:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 8019b0c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8019b10:	4458      	add	r0, fp
 8019b12:	fb08 f505 	mul.w	r5, r8, r5
 8019b16:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019b1a:	fb08 f802 	mul.w	r8, r8, r2
 8019b1e:	0a00      	lsrs	r0, r0, #8
 8019b20:	0a2a      	lsrs	r2, r5, #8
 8019b22:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 8019b26:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8019b2a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8019b2e:	4415      	add	r5, r2
 8019b30:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8019b34:	0a2d      	lsrs	r5, r5, #8
 8019b36:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8019b3a:	9a00      	ldr	r2, [sp, #0]
 8019b3c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8019b40:	fb03 cc02 	mla	ip, r3, r2, ip
 8019b44:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8019b48:	9b01      	ldr	r3, [sp, #4]
 8019b4a:	fb05 c50e 	mla	r5, r5, lr, ip
 8019b4e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8019b52:	fb00 5004 	mla	r0, r0, r4, r5
 8019b56:	0a00      	lsrs	r0, r0, #8
 8019b58:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 8019b5c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 8019b60:	4378      	muls	r0, r7
 8019b62:	fb02 0006 	mla	r0, r2, r6, r0
 8019b66:	fb0e 0e08 	mla	lr, lr, r8, r0
 8019b6a:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 8019b6e:	fb04 e000 	mla	r0, r4, r0, lr
 8019b72:	0a00      	lsrs	r0, r0, #8
 8019b74:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8019b78:	4328      	orrs	r0, r5
 8019b7a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8019b7e:	b2ad      	uxth	r5, r5
 8019b80:	b2c4      	uxtb	r4, r0
 8019b82:	436b      	muls	r3, r5
 8019b84:	fb14 f405 	smulbb	r4, r4, r5
 8019b88:	1c5a      	adds	r2, r3, #1
 8019b8a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8019b8e:	780b      	ldrb	r3, [r1, #0]
 8019b90:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 8019b94:	b2d2      	uxtb	r2, r2
 8019b96:	fb03 4302 	mla	r3, r3, r2, r4
 8019b9a:	b29b      	uxth	r3, r3
 8019b9c:	1c5c      	adds	r4, r3, #1
 8019b9e:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019ba2:	784c      	ldrb	r4, [r1, #1]
 8019ba4:	fb14 f402 	smulbb	r4, r4, r2
 8019ba8:	121b      	asrs	r3, r3, #8
 8019baa:	700b      	strb	r3, [r1, #0]
 8019bac:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8019bb0:	fb03 4305 	mla	r3, r3, r5, r4
 8019bb4:	b29b      	uxth	r3, r3
 8019bb6:	1c5c      	adds	r4, r3, #1
 8019bb8:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 8019bbc:	0c04      	lsrs	r4, r0, #16
 8019bbe:	7888      	ldrb	r0, [r1, #2]
 8019bc0:	121b      	asrs	r3, r3, #8
 8019bc2:	fb10 f002 	smulbb	r0, r0, r2
 8019bc6:	704b      	strb	r3, [r1, #1]
 8019bc8:	fb04 0005 	mla	r0, r4, r5, r0
 8019bcc:	b280      	uxth	r0, r0
 8019bce:	1c43      	adds	r3, r0, #1
 8019bd0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8019bd4:	1200      	asrs	r0, r0, #8
 8019bd6:	7088      	strb	r0, [r1, #2]
 8019bd8:	b003      	add	sp, #12
 8019bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bde:	2600      	movs	r6, #0
 8019be0:	e6f3      	b.n	80199ca <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8019be2:	2000      	movs	r0, #0
 8019be4:	4606      	mov	r6, r0
 8019be6:	e6fd      	b.n	80199e4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019be8:	2000      	movs	r0, #0
 8019bea:	e6fb      	b.n	80199e4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019bec:	4620      	mov	r0, r4
 8019bee:	e6f9      	b.n	80199e4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8019bf0:	2500      	movs	r5, #0
 8019bf2:	e70b      	b.n	8019a0c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8019bf4:	2200      	movs	r2, #0
 8019bf6:	4615      	mov	r5, r2
 8019bf8:	e716      	b.n	8019a28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019bfa:	4672      	mov	r2, lr
 8019bfc:	4675      	mov	r5, lr
 8019bfe:	e713      	b.n	8019a28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019c00:	2200      	movs	r2, #0
 8019c02:	e711      	b.n	8019a28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8019c04:	4622      	mov	r2, r4
 8019c06:	e70f      	b.n	8019a28 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

08019c08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c0c:	b09f      	sub	sp, #124	; 0x7c
 8019c0e:	921b      	str	r2, [sp, #108]	; 0x6c
 8019c10:	9309      	str	r3, [sp, #36]	; 0x24
 8019c12:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019c14:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8019c18:	901d      	str	r0, [sp, #116]	; 0x74
 8019c1a:	931c      	str	r3, [sp, #112]	; 0x70
 8019c1c:	6850      	ldr	r0, [r2, #4]
 8019c1e:	9119      	str	r1, [sp, #100]	; 0x64
 8019c20:	6812      	ldr	r2, [r2, #0]
 8019c22:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8019c24:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 8019c28:	fb00 1303 	mla	r3, r0, r3, r1
 8019c2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019c30:	18d3      	adds	r3, r2, r3
 8019c32:	930c      	str	r3, [sp, #48]	; 0x30
 8019c34:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	9312      	str	r3, [sp, #72]	; 0x48
 8019c3a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019c3c:	685e      	ldr	r6, [r3, #4]
 8019c3e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 8019c42:	3604      	adds	r6, #4
 8019c44:	930d      	str	r3, [sp, #52]	; 0x34
 8019c46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	dc03      	bgt.n	8019c54 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8019c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	f340 8378 	ble.w	801a344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019c54:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019c56:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8019c5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8019c5e:	1e48      	subs	r0, r1, #1
 8019c60:	1e57      	subs	r7, r2, #1
 8019c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	f340 818c 	ble.w	8019f82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 8019c6a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019c6c:	142b      	asrs	r3, r5, #16
 8019c6e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8019c72:	d406      	bmi.n	8019c82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019c74:	4584      	cmp	ip, r0
 8019c76:	da04      	bge.n	8019c82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	db02      	blt.n	8019c82 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8019c7c:	42bb      	cmp	r3, r7
 8019c7e:	f2c0 8181 	blt.w	8019f84 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8019c82:	f11c 0c01 	adds.w	ip, ip, #1
 8019c86:	f100 816f 	bmi.w	8019f68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019c8a:	4561      	cmp	r1, ip
 8019c8c:	f2c0 816c 	blt.w	8019f68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019c90:	3301      	adds	r3, #1
 8019c92:	f100 8169 	bmi.w	8019f68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019c96:	429a      	cmp	r2, r3
 8019c98:	f2c0 8166 	blt.w	8019f68 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8019c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c9e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8019ca0:	931a      	str	r3, [sp, #104]	; 0x68
 8019ca2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	f340 818c 	ble.w	8019fc2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8019caa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019cac:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8019cb0:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8019cb4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8019cb8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8019cba:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8019cbe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019cc0:	141b      	asrs	r3, r3, #16
 8019cc2:	f100 81d0 	bmi.w	801a066 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019cc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8019cca:	4543      	cmp	r3, r8
 8019ccc:	f280 81cb 	bge.w	801a066 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019cd0:	f1bc 0f00 	cmp.w	ip, #0
 8019cd4:	f2c0 81c7 	blt.w	801a066 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019cd8:	f10e 38ff 	add.w	r8, lr, #4294967295
 8019cdc:	45c4      	cmp	ip, r8
 8019cde:	f280 81c2 	bge.w	801a066 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8019ce2:	b200      	sxth	r0, r0
 8019ce4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019ce6:	fb0c 3300 	mla	r3, ip, r0, r3
 8019cea:	eb04 0803 	add.w	r8, r4, r3
 8019cee:	5ce3      	ldrb	r3, [r4, r3]
 8019cf0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8019cf4:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8019cf8:	2a00      	cmp	r2, #0
 8019cfa:	f000 81a9 	beq.w	801a050 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8019cfe:	f898 c001 	ldrb.w	ip, [r8, #1]
 8019d02:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8019d06:	940e      	str	r4, [sp, #56]	; 0x38
 8019d08:	0e24      	lsrs	r4, r4, #24
 8019d0a:	9415      	str	r4, [sp, #84]	; 0x54
 8019d0c:	b179      	cbz	r1, 8019d2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8019d0e:	eb08 0c00 	add.w	ip, r8, r0
 8019d12:	f818 0000 	ldrb.w	r0, [r8, r0]
 8019d16:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019d1a:	900a      	str	r0, [sp, #40]	; 0x28
 8019d1c:	0e00      	lsrs	r0, r0, #24
 8019d1e:	9013      	str	r0, [sp, #76]	; 0x4c
 8019d20:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8019d24:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8019d28:	900f      	str	r0, [sp, #60]	; 0x3c
 8019d2a:	0e00      	lsrs	r0, r0, #24
 8019d2c:	9016      	str	r0, [sp, #88]	; 0x58
 8019d2e:	b292      	uxth	r2, r2
 8019d30:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019d32:	b289      	uxth	r1, r1
 8019d34:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019d36:	fb02 f901 	mul.w	r9, r2, r1
 8019d3a:	0112      	lsls	r2, r2, #4
 8019d3c:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8019d40:	eba2 0809 	sub.w	r8, r2, r9
 8019d44:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8019d48:	b289      	uxth	r1, r1
 8019d4a:	fa1f f888 	uxth.w	r8, r8
 8019d4e:	1a52      	subs	r2, r2, r1
 8019d50:	fb08 f000 	mul.w	r0, r8, r0
 8019d54:	b292      	uxth	r2, r2
 8019d56:	fb02 000e 	mla	r0, r2, lr, r0
 8019d5a:	fb01 0004 	mla	r0, r1, r4, r0
 8019d5e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019d60:	fb09 0004 	mla	r0, r9, r4, r0
 8019d64:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	f000 80f2 	beq.w	8019f52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8019d6e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8019d72:	d01b      	beq.n	8019dac <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 8019d74:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8019d78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019d7c:	fb0e fa0a 	mul.w	sl, lr, sl
 8019d80:	fb0e fe03 	mul.w	lr, lr, r3
 8019d84:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8019d88:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8019d8c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8019d90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019d94:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8019d98:	4453      	add	r3, sl
 8019d9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019d9e:	0a1b      	lsrs	r3, r3, #8
 8019da0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8019da4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8019da8:	ea43 030c 	orr.w	r3, r3, ip
 8019dac:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019dae:	2cff      	cmp	r4, #255	; 0xff
 8019db0:	d021      	beq.n	8019df6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8019db2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019db4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019db8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019dba:	fb04 fb0b 	mul.w	fp, r4, fp
 8019dbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019dc0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019dc4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8019dc6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019dca:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019dce:	fb04 fa0a 	mul.w	sl, r4, sl
 8019dd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019dd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019dda:	44de      	add	lr, fp
 8019ddc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019de0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019de8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019df0:	ea4e 040a 	orr.w	r4, lr, sl
 8019df4:	940e      	str	r4, [sp, #56]	; 0x38
 8019df6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019df8:	2cff      	cmp	r4, #255	; 0xff
 8019dfa:	d021      	beq.n	8019e40 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 8019dfc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019dfe:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019e02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019e04:	fb04 fb0b 	mul.w	fp, r4, fp
 8019e08:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019e0a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019e0e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8019e10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019e14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019e18:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019e20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019e24:	44de      	add	lr, fp
 8019e26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019e2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019e2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019e36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019e3a:	ea4e 040a 	orr.w	r4, lr, sl
 8019e3e:	940a      	str	r4, [sp, #40]	; 0x28
 8019e40:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e42:	2cff      	cmp	r4, #255	; 0xff
 8019e44:	d021      	beq.n	8019e8a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8019e46:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019e48:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 8019e4c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e4e:	fb04 fb0b 	mul.w	fp, r4, fp
 8019e52:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019e54:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 8019e58:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8019e5a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8019e5e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8019e62:	fb04 fa0a 	mul.w	sl, r4, sl
 8019e66:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019e6a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8019e6e:	44de      	add	lr, fp
 8019e70:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8019e74:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8019e78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8019e7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8019e80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8019e84:	ea4e 040a 	orr.w	r4, lr, sl
 8019e88:	940f      	str	r4, [sp, #60]	; 0x3c
 8019e8a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019e8c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8019e90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8019e94:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8019e98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8019e9a:	fb08 fc0c 	mul.w	ip, r8, ip
 8019e9e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8019ea2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019ea6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8019ea8:	fb01 cc0e 	mla	ip, r1, lr, ip
 8019eac:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 8019eb0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8019eb2:	fb09 cc0e 	mla	ip, r9, lr, ip
 8019eb6:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 8019eba:	fb08 f80e 	mul.w	r8, r8, lr
 8019ebe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8019ec2:	fb02 8303 	mla	r3, r2, r3, r8
 8019ec6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019ec8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8019ecc:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8019ed0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ed2:	fb01 330a 	mla	r3, r1, sl, r3
 8019ed6:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 8019eda:	fb09 3901 	mla	r9, r9, r1, r3
 8019ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019ee0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019ee2:	4343      	muls	r3, r0
 8019ee4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8019ee8:	1c58      	adds	r0, r3, #1
 8019eea:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8019eee:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8019ef2:	ea4c 0c09 	orr.w	ip, ip, r9
 8019ef6:	783b      	ldrb	r3, [r7, #0]
 8019ef8:	fa5f f28c 	uxtb.w	r2, ip
 8019efc:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8019f00:	fb12 f201 	smulbb	r2, r2, r1
 8019f04:	b2c0      	uxtb	r0, r0
 8019f06:	fb03 2300 	mla	r3, r3, r0, r2
 8019f0a:	b29b      	uxth	r3, r3
 8019f0c:	1c5a      	adds	r2, r3, #1
 8019f0e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019f12:	787a      	ldrb	r2, [r7, #1]
 8019f14:	fb12 f200 	smulbb	r2, r2, r0
 8019f18:	121b      	asrs	r3, r3, #8
 8019f1a:	703b      	strb	r3, [r7, #0]
 8019f1c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8019f20:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019f24:	fb03 2301 	mla	r3, r3, r1, r2
 8019f28:	b29b      	uxth	r3, r3
 8019f2a:	1c5a      	adds	r2, r3, #1
 8019f2c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8019f30:	121b      	asrs	r3, r3, #8
 8019f32:	707b      	strb	r3, [r7, #1]
 8019f34:	78bb      	ldrb	r3, [r7, #2]
 8019f36:	fb13 f000 	smulbb	r0, r3, r0
 8019f3a:	fb0c 0c01 	mla	ip, ip, r1, r0
 8019f3e:	fa1f fc8c 	uxth.w	ip, ip
 8019f42:	f10c 0301 	add.w	r3, ip, #1
 8019f46:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019f4a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019f4e:	f887 c002 	strb.w	ip, [r7, #2]
 8019f52:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019f54:	3703      	adds	r7, #3
 8019f56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8019f58:	441a      	add	r2, r3
 8019f5a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019f5c:	441d      	add	r5, r3
 8019f5e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8019f60:	9229      	str	r2, [sp, #164]	; 0xa4
 8019f62:	3b01      	subs	r3, #1
 8019f64:	931a      	str	r3, [sp, #104]	; 0x68
 8019f66:	e69c      	b.n	8019ca2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8019f68:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8019f6a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019f6c:	441c      	add	r4, r3
 8019f6e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8019f70:	441d      	add	r5, r3
 8019f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f74:	9429      	str	r4, [sp, #164]	; 0xa4
 8019f76:	3b01      	subs	r3, #1
 8019f78:	9309      	str	r3, [sp, #36]	; 0x24
 8019f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f7c:	3303      	adds	r3, #3
 8019f7e:	930c      	str	r3, [sp, #48]	; 0x30
 8019f80:	e66f      	b.n	8019c62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8019f82:	d026      	beq.n	8019fd2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 8019f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f86:	982b      	ldr	r0, [sp, #172]	; 0xac
 8019f88:	3b01      	subs	r3, #1
 8019f8a:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8019f8c:	fb00 4003 	mla	r0, r0, r3, r4
 8019f90:	1400      	asrs	r0, r0, #16
 8019f92:	f53f ae83 	bmi.w	8019c9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f96:	3901      	subs	r1, #1
 8019f98:	4288      	cmp	r0, r1
 8019f9a:	f6bf ae7f 	bge.w	8019c9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019f9e:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8019fa0:	fb01 5303 	mla	r3, r1, r3, r5
 8019fa4:	141b      	asrs	r3, r3, #16
 8019fa6:	f53f ae79 	bmi.w	8019c9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019faa:	3a01      	subs	r2, #1
 8019fac:	4293      	cmp	r3, r2
 8019fae:	f6bf ae75 	bge.w	8019c9c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8019fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fb4:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8019fb8:	f103 0e03 	add.w	lr, r3, #3
 8019fbc:	f1bb 0f00 	cmp.w	fp, #0
 8019fc0:	dc71      	bgt.n	801a0a6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8019fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019fc4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8019fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019fca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019fce:	4423      	add	r3, r4
 8019fd0:	930c      	str	r3, [sp, #48]	; 0x30
 8019fd2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	f340 81b5 	ble.w	801a344 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8019fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019fde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8019fe0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019fe4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019fe8:	eef0 6a62 	vmov.f32	s13, s5
 8019fec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019ff0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ff4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8019ff8:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 8019ffc:	eef0 6a43 	vmov.f32	s13, s6
 801a000:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a004:	ee16 5a90 	vmov	r5, s13
 801a008:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a00c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a010:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a014:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a018:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a01c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a020:	ee12 2a90 	vmov	r2, s5
 801a024:	eef0 2a47 	vmov.f32	s5, s14
 801a028:	fb92 f3f3 	sdiv	r3, r2, r3
 801a02c:	ee13 2a10 	vmov	r2, s6
 801a030:	932b      	str	r3, [sp, #172]	; 0xac
 801a032:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a034:	eeb0 3a67 	vmov.f32	s6, s15
 801a038:	fb92 f3f3 	sdiv	r3, r2, r3
 801a03c:	932c      	str	r3, [sp, #176]	; 0xb0
 801a03e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a040:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801a042:	3b01      	subs	r3, #1
 801a044:	9319      	str	r3, [sp, #100]	; 0x64
 801a046:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a048:	bf08      	it	eq
 801a04a:	4613      	moveq	r3, r2
 801a04c:	9309      	str	r3, [sp, #36]	; 0x24
 801a04e:	e5fa      	b.n	8019c46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801a050:	2900      	cmp	r1, #0
 801a052:	f43f ae6c 	beq.w	8019d2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a056:	f818 0000 	ldrb.w	r0, [r8, r0]
 801a05a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801a05e:	900a      	str	r0, [sp, #40]	; 0x28
 801a060:	0e00      	lsrs	r0, r0, #24
 801a062:	9013      	str	r0, [sp, #76]	; 0x4c
 801a064:	e663      	b.n	8019d2e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801a066:	f113 0801 	adds.w	r8, r3, #1
 801a06a:	f53f af72 	bmi.w	8019f52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a06e:	4540      	cmp	r0, r8
 801a070:	f6ff af6f 	blt.w	8019f52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a074:	f11c 0801 	adds.w	r8, ip, #1
 801a078:	f53f af6b 	bmi.w	8019f52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a07c:	45c6      	cmp	lr, r8
 801a07e:	f6ff af68 	blt.w	8019f52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a082:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a084:	b200      	sxth	r0, r0
 801a086:	9302      	str	r3, [sp, #8]
 801a088:	fa0f f38e 	sxth.w	r3, lr
 801a08c:	9000      	str	r0, [sp, #0]
 801a08e:	9301      	str	r3, [sp, #4]
 801a090:	4633      	mov	r3, r6
 801a092:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a094:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801a098:	e9cd c203 	strd	ip, r2, [sp, #12]
 801a09c:	4639      	mov	r1, r7
 801a09e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a0a0:	f7ff fc74 	bl	801998c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801a0a4:	e755      	b.n	8019f52 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a0a6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a0a8:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a0ac:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801a0ae:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a0b2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801a0b4:	1427      	asrs	r7, r4, #16
 801a0b6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a0b8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a0bc:	142b      	asrs	r3, r5, #16
 801a0be:	fb01 7303 	mla	r3, r1, r3, r7
 801a0c2:	18e7      	adds	r7, r4, r3
 801a0c4:	5ce3      	ldrb	r3, [r4, r3]
 801a0c6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a0ca:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801a0ce:	2a00      	cmp	r2, #0
 801a0d0:	f000 812e 	beq.w	801a330 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801a0d4:	f897 8001 	ldrb.w	r8, [r7, #1]
 801a0d8:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801a0dc:	9410      	str	r4, [sp, #64]	; 0x40
 801a0de:	0e24      	lsrs	r4, r4, #24
 801a0e0:	9417      	str	r4, [sp, #92]	; 0x5c
 801a0e2:	b170      	cbz	r0, 801a102 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a0e4:	eb07 0801 	add.w	r8, r7, r1
 801a0e8:	5c79      	ldrb	r1, [r7, r1]
 801a0ea:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a0ee:	910b      	str	r1, [sp, #44]	; 0x2c
 801a0f0:	0e09      	lsrs	r1, r1, #24
 801a0f2:	9114      	str	r1, [sp, #80]	; 0x50
 801a0f4:	f898 1001 	ldrb.w	r1, [r8, #1]
 801a0f8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a0fc:	9111      	str	r1, [sp, #68]	; 0x44
 801a0fe:	0e09      	lsrs	r1, r1, #24
 801a100:	9118      	str	r1, [sp, #96]	; 0x60
 801a102:	b292      	uxth	r2, r2
 801a104:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801a106:	b280      	uxth	r0, r0
 801a108:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a10a:	fb02 f900 	mul.w	r9, r2, r0
 801a10e:	0112      	lsls	r2, r2, #4
 801a110:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a114:	eba2 0809 	sub.w	r8, r2, r9
 801a118:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a11c:	b280      	uxth	r0, r0
 801a11e:	fa1f f888 	uxth.w	r8, r8
 801a122:	1a12      	subs	r2, r2, r0
 801a124:	fb08 f101 	mul.w	r1, r8, r1
 801a128:	b292      	uxth	r2, r2
 801a12a:	fb02 110c 	mla	r1, r2, ip, r1
 801a12e:	fb00 1104 	mla	r1, r0, r4, r1
 801a132:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a134:	fb09 1104 	mla	r1, r9, r4, r1
 801a138:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a13c:	2900      	cmp	r1, #0
 801a13e:	f000 80ec 	beq.w	801a31a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801a142:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801a146:	d019      	beq.n	801a17c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801a148:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a14c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a150:	fb0c fa0a 	mul.w	sl, ip, sl
 801a154:	fb0c fc03 	mul.w	ip, ip, r3
 801a158:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a15c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a160:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801a164:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a168:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801a16c:	4453      	add	r3, sl
 801a16e:	0a3f      	lsrs	r7, r7, #8
 801a170:	0a1b      	lsrs	r3, r3, #8
 801a172:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801a176:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a17a:	433b      	orrs	r3, r7
 801a17c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a17e:	2cff      	cmp	r4, #255	; 0xff
 801a180:	d020      	beq.n	801a1c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801a182:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a184:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a188:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a18a:	4367      	muls	r7, r4
 801a18c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a18e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a192:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a196:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801a198:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a19c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a1a0:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1a4:	44bc      	add	ip, r7
 801a1a6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a1aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a1ae:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a1b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a1b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a1ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a1be:	ea4c 040a 	orr.w	r4, ip, sl
 801a1c2:	9410      	str	r4, [sp, #64]	; 0x40
 801a1c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a1c6:	2cff      	cmp	r4, #255	; 0xff
 801a1c8:	d020      	beq.n	801a20c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801a1ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a1cc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a1d0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a1d2:	4367      	muls	r7, r4
 801a1d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a1d6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a1da:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a1de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801a1e0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a1e4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a1e8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a1ec:	44bc      	add	ip, r7
 801a1ee:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a1f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a1f6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a1fa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a1fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a202:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a206:	ea4c 040a 	orr.w	r4, ip, sl
 801a20a:	940b      	str	r4, [sp, #44]	; 0x2c
 801a20c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a20e:	2cff      	cmp	r4, #255	; 0xff
 801a210:	d020      	beq.n	801a254 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801a212:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a214:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a218:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a21a:	4367      	muls	r7, r4
 801a21c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a21e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801a222:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a226:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801a228:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801a22c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a230:	fb04 fa0a 	mul.w	sl, r4, sl
 801a234:	44bc      	add	ip, r7
 801a236:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801a23a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a23e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801a242:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a246:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a24a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a24e:	ea4c 040a 	orr.w	r4, ip, sl
 801a252:	9411      	str	r4, [sp, #68]	; 0x44
 801a254:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a256:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801a25a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a25e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801a262:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a264:	fb08 f707 	mul.w	r7, r8, r7
 801a268:	fb02 770c 	mla	r7, r2, ip, r7
 801a26c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a270:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801a272:	fb00 770c 	mla	r7, r0, ip, r7
 801a276:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a27a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a27c:	fb09 770c 	mla	r7, r9, ip, r7
 801a280:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801a284:	fb08 f80c 	mul.w	r8, r8, ip
 801a288:	0a3f      	lsrs	r7, r7, #8
 801a28a:	fb02 8303 	mla	r3, r2, r3, r8
 801a28e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a290:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801a294:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a298:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a29a:	fb00 330a 	mla	r3, r0, sl, r3
 801a29e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801a2a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a2a4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801a2a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a2ae:	434b      	muls	r3, r1
 801a2b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a2b4:	1c59      	adds	r1, r3, #1
 801a2b6:	ea47 070c 	orr.w	r7, r7, ip
 801a2ba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801a2be:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801a2c2:	b2fa      	uxtb	r2, r7
 801a2c4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801a2c8:	fb12 f200 	smulbb	r2, r2, r0
 801a2cc:	b2c9      	uxtb	r1, r1
 801a2ce:	fb03 2301 	mla	r3, r3, r1, r2
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	1c5a      	adds	r2, r3, #1
 801a2d6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a2da:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801a2de:	fb12 f201 	smulbb	r2, r2, r1
 801a2e2:	121b      	asrs	r3, r3, #8
 801a2e4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801a2e8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801a2ec:	0c3f      	lsrs	r7, r7, #16
 801a2ee:	fb03 2300 	mla	r3, r3, r0, r2
 801a2f2:	b29b      	uxth	r3, r3
 801a2f4:	1c5a      	adds	r2, r3, #1
 801a2f6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a2fa:	121b      	asrs	r3, r3, #8
 801a2fc:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801a300:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801a304:	fb13 f101 	smulbb	r1, r3, r1
 801a308:	fb07 1700 	mla	r7, r7, r0, r1
 801a30c:	b2bf      	uxth	r7, r7
 801a30e:	1c7b      	adds	r3, r7, #1
 801a310:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801a314:	123f      	asrs	r7, r7, #8
 801a316:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801a31a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801a31c:	f10e 0e03 	add.w	lr, lr, #3
 801a320:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a322:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a326:	441a      	add	r2, r3
 801a328:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a32a:	9229      	str	r2, [sp, #164]	; 0xa4
 801a32c:	441d      	add	r5, r3
 801a32e:	e645      	b.n	8019fbc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801a330:	2800      	cmp	r0, #0
 801a332:	f43f aee6 	beq.w	801a102 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a336:	5c79      	ldrb	r1, [r7, r1]
 801a338:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a33c:	910b      	str	r1, [sp, #44]	; 0x2c
 801a33e:	0e09      	lsrs	r1, r1, #24
 801a340:	9114      	str	r1, [sp, #80]	; 0x50
 801a342:	e6de      	b.n	801a102 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801a344:	b01f      	add	sp, #124	; 0x7c
 801a346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a34a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801a34a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a34e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	; 0x38
 801a352:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801a356:	2d00      	cmp	r5, #0
 801a358:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801a35c:	fb05 700e 	mla	r0, r5, lr, r7
 801a360:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801a364:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 801a368:	eb02 0800 	add.w	r8, r2, r0
 801a36c:	f2c0 8105 	blt.w	801a57a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801a370:	45a9      	cmp	r9, r5
 801a372:	f340 8102 	ble.w	801a57a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801a376:	2f00      	cmp	r7, #0
 801a378:	f2c0 80fd 	blt.w	801a576 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801a37c:	45be      	cmp	lr, r7
 801a37e:	f340 80fa 	ble.w	801a576 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801a382:	5c12      	ldrb	r2, [r2, r0]
 801a384:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801a388:	1c7a      	adds	r2, r7, #1
 801a38a:	f100 80f9 	bmi.w	801a580 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801a38e:	4596      	cmp	lr, r2
 801a390:	f340 80f6 	ble.w	801a580 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801a394:	2c00      	cmp	r4, #0
 801a396:	f000 80f5 	beq.w	801a584 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801a39a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a39e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801a3a2:	3501      	adds	r5, #1
 801a3a4:	f100 80f2 	bmi.w	801a58c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801a3a8:	45a9      	cmp	r9, r5
 801a3aa:	f340 80ef 	ble.w	801a58c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801a3ae:	f1bc 0f00 	cmp.w	ip, #0
 801a3b2:	f000 80ee 	beq.w	801a592 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801a3b6:	2f00      	cmp	r7, #0
 801a3b8:	f2c0 80e6 	blt.w	801a588 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801a3bc:	45be      	cmp	lr, r7
 801a3be:	f340 80e3 	ble.w	801a588 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801a3c2:	f818 200e 	ldrb.w	r2, [r8, lr]
 801a3c6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801a3ca:	3701      	adds	r7, #1
 801a3cc:	f100 80e4 	bmi.w	801a598 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801a3d0:	45be      	cmp	lr, r7
 801a3d2:	f340 80e1 	ble.w	801a598 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801a3d6:	2c00      	cmp	r4, #0
 801a3d8:	f000 80e0 	beq.w	801a59c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801a3dc:	44c6      	add	lr, r8
 801a3de:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801a3e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801a3e6:	b2a3      	uxth	r3, r4
 801a3e8:	fa1f fc8c 	uxth.w	ip, ip
 801a3ec:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801a3f0:	fb0c fe03 	mul.w	lr, ip, r3
 801a3f4:	011b      	lsls	r3, r3, #4
 801a3f6:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801a3fa:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801a3fe:	eba3 070e 	sub.w	r7, r3, lr
 801a402:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 801a406:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801a40a:	fa1f f48c 	uxth.w	r4, ip
 801a40e:	b2bf      	uxth	r7, r7
 801a410:	1b1b      	subs	r3, r3, r4
 801a412:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801a416:	fb07 fc0a 	mul.w	ip, r7, sl
 801a41a:	b29b      	uxth	r3, r3
 801a41c:	fb03 cc0b 	mla	ip, r3, fp, ip
 801a420:	9300      	str	r3, [sp, #0]
 801a422:	fb04 cc09 	mla	ip, r4, r9, ip
 801a426:	fb0e cc08 	mla	ip, lr, r8, ip
 801a42a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801a42e:	9301      	str	r3, [sp, #4]
 801a430:	2b00      	cmp	r3, #0
 801a432:	f000 809d 	beq.w	801a570 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801a436:	f006 1cff 	and.w	ip, r6, #16711935	; 0xff00ff
 801a43a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a43e:	fb0b fc0c 	mul.w	ip, fp, ip
 801a442:	fb0b f606 	mul.w	r6, fp, r6
 801a446:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801a44a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801a44e:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801a452:	44dc      	add	ip, fp
 801a454:	f000 1bff 	and.w	fp, r0, #16711935	; 0xff00ff
 801a458:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a45c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a460:	fb0a fb0b 	mul.w	fp, sl, fp
 801a464:	fb0a fa00 	mul.w	sl, sl, r0
 801a468:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 801a46c:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801a470:	f50a 7080 	add.w	r0, sl, #256	; 0x100
 801a474:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801a478:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801a47c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a480:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801a484:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a488:	0a36      	lsrs	r6, r6, #8
 801a48a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a48e:	44dc      	add	ip, fp
 801a490:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801a494:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801a498:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801a49c:	fb09 fb0b 	mul.w	fp, r9, fp
 801a4a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a4a4:	fb09 f905 	mul.w	r9, r9, r5
 801a4a8:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801a4ac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a4b0:	f509 7580 	add.w	r5, r9, #256	; 0x100
 801a4b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a4b8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a4bc:	fb0c fc07 	mul.w	ip, ip, r7
 801a4c0:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801a4c4:	f002 15ff 	and.w	r5, r2, #16711935	; 0xff00ff
 801a4c8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801a4cc:	4458      	add	r0, fp
 801a4ce:	fb08 f505 	mul.w	r5, r8, r5
 801a4d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a4d6:	fb08 f802 	mul.w	r8, r8, r2
 801a4da:	0a00      	lsrs	r0, r0, #8
 801a4dc:	0a2a      	lsrs	r2, r5, #8
 801a4de:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801a4e2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801a4e6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801a4ea:	4415      	add	r5, r2
 801a4ec:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801a4f0:	0a2d      	lsrs	r5, r5, #8
 801a4f2:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801a4f6:	9a00      	ldr	r2, [sp, #0]
 801a4f8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801a4fc:	fb03 cc02 	mla	ip, r3, r2, ip
 801a500:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801a504:	9b01      	ldr	r3, [sp, #4]
 801a506:	fb05 c50e 	mla	r5, r5, lr, ip
 801a50a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801a50e:	43db      	mvns	r3, r3
 801a510:	fb00 5004 	mla	r0, r0, r4, r5
 801a514:	b2db      	uxtb	r3, r3
 801a516:	0a00      	lsrs	r0, r0, #8
 801a518:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801a51c:	f40a 407f 	and.w	r0, sl, #65280	; 0xff00
 801a520:	4378      	muls	r0, r7
 801a522:	fb02 0006 	mla	r0, r2, r6, r0
 801a526:	780a      	ldrb	r2, [r1, #0]
 801a528:	fb0e 0e08 	mla	lr, lr, r8, r0
 801a52c:	f409 407f 	and.w	r0, r9, #65280	; 0xff00
 801a530:	fb04 e000 	mla	r0, r4, r0, lr
 801a534:	fb02 f403 	mul.w	r4, r2, r3
 801a538:	0a00      	lsrs	r0, r0, #8
 801a53a:	1c62      	adds	r2, r4, #1
 801a53c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801a540:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a544:	4328      	orrs	r0, r5
 801a546:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a54a:	700a      	strb	r2, [r1, #0]
 801a54c:	784a      	ldrb	r2, [r1, #1]
 801a54e:	435a      	muls	r2, r3
 801a550:	1c54      	adds	r4, r2, #1
 801a552:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801a556:	0a02      	lsrs	r2, r0, #8
 801a558:	0c00      	lsrs	r0, r0, #16
 801a55a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801a55e:	704a      	strb	r2, [r1, #1]
 801a560:	788a      	ldrb	r2, [r1, #2]
 801a562:	4353      	muls	r3, r2
 801a564:	1c5a      	adds	r2, r3, #1
 801a566:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801a56a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801a56e:	7088      	strb	r0, [r1, #2]
 801a570:	b003      	add	sp, #12
 801a572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a576:	2600      	movs	r6, #0
 801a578:	e706      	b.n	801a388 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801a57a:	2000      	movs	r0, #0
 801a57c:	4606      	mov	r6, r0
 801a57e:	e710      	b.n	801a3a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a580:	2000      	movs	r0, #0
 801a582:	e70e      	b.n	801a3a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a584:	4620      	mov	r0, r4
 801a586:	e70c      	b.n	801a3a2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801a588:	2500      	movs	r5, #0
 801a58a:	e71e      	b.n	801a3ca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801a58c:	2200      	movs	r2, #0
 801a58e:	4615      	mov	r5, r2
 801a590:	e729      	b.n	801a3e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a592:	4662      	mov	r2, ip
 801a594:	4665      	mov	r5, ip
 801a596:	e726      	b.n	801a3e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a598:	2200      	movs	r2, #0
 801a59a:	e724      	b.n	801a3e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801a59c:	4622      	mov	r2, r4
 801a59e:	e722      	b.n	801a3e6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801a5a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a5a4:	b09b      	sub	sp, #108	; 0x6c
 801a5a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801a5aa:	9218      	str	r2, [sp, #96]	; 0x60
 801a5ac:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a5ae:	9019      	str	r0, [sp, #100]	; 0x64
 801a5b0:	9116      	str	r1, [sp, #88]	; 0x58
 801a5b2:	6850      	ldr	r0, [r2, #4]
 801a5b4:	9307      	str	r3, [sp, #28]
 801a5b6:	6812      	ldr	r2, [r2, #0]
 801a5b8:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801a5ba:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801a5be:	fb00 1303 	mla	r3, r0, r3, r1
 801a5c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a5c6:	18d3      	adds	r3, r2, r3
 801a5c8:	930a      	str	r3, [sp, #40]	; 0x28
 801a5ca:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	930f      	str	r3, [sp, #60]	; 0x3c
 801a5d0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a5d2:	685e      	ldr	r6, [r3, #4]
 801a5d4:	3604      	adds	r6, #4
 801a5d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	dc03      	bgt.n	801a5e4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801a5dc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	f340 834f 	ble.w	801ac82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801a5e4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a5e6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a5ea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a5ee:	1e48      	subs	r0, r1, #1
 801a5f0:	1e57      	subs	r7, r2, #1
 801a5f2:	9b07      	ldr	r3, [sp, #28]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	f340 8178 	ble.w	801a8ea <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801a5fa:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a5fc:	142b      	asrs	r3, r5, #16
 801a5fe:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801a602:	d406      	bmi.n	801a612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a604:	4584      	cmp	ip, r0
 801a606:	da04      	bge.n	801a612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a608:	2b00      	cmp	r3, #0
 801a60a:	db02      	blt.n	801a612 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801a60c:	42bb      	cmp	r3, r7
 801a60e:	f2c0 816d 	blt.w	801a8ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801a612:	f11c 0c01 	adds.w	ip, ip, #1
 801a616:	f100 815b 	bmi.w	801a8d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a61a:	4561      	cmp	r1, ip
 801a61c:	f2c0 8158 	blt.w	801a8d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a620:	3301      	adds	r3, #1
 801a622:	f100 8155 	bmi.w	801a8d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a626:	429a      	cmp	r2, r3
 801a628:	f2c0 8152 	blt.w	801a8d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801a62c:	9b07      	ldr	r3, [sp, #28]
 801a62e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801a630:	9317      	str	r3, [sp, #92]	; 0x5c
 801a632:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a634:	2b00      	cmp	r3, #0
 801a636:	f340 8178 	ble.w	801a92a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801a63a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a63c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801a640:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801a644:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801a648:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801a64a:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801a64e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801a650:	141b      	asrs	r3, r3, #16
 801a652:	f100 81ba 	bmi.w	801a9ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a656:	f101 38ff 	add.w	r8, r1, #4294967295
 801a65a:	4543      	cmp	r3, r8
 801a65c:	f280 81b5 	bge.w	801a9ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a660:	f1bc 0f00 	cmp.w	ip, #0
 801a664:	f2c0 81b1 	blt.w	801a9ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a668:	f10e 38ff 	add.w	r8, lr, #4294967295
 801a66c:	45c4      	cmp	ip, r8
 801a66e:	f280 81ac 	bge.w	801a9ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801a672:	b209      	sxth	r1, r1
 801a674:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801a676:	fb0c 3301 	mla	r3, ip, r1, r3
 801a67a:	eb04 0803 	add.w	r8, r4, r3
 801a67e:	5ce3      	ldrb	r3, [r4, r3]
 801a680:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801a684:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801a688:	2a00      	cmp	r2, #0
 801a68a:	f000 8193 	beq.w	801a9b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801a68e:	f898 c001 	ldrb.w	ip, [r8, #1]
 801a692:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801a696:	940b      	str	r4, [sp, #44]	; 0x2c
 801a698:	0e24      	lsrs	r4, r4, #24
 801a69a:	9412      	str	r4, [sp, #72]	; 0x48
 801a69c:	b178      	cbz	r0, 801a6be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a69e:	eb08 0c01 	add.w	ip, r8, r1
 801a6a2:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a6a6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a6aa:	9108      	str	r1, [sp, #32]
 801a6ac:	0e09      	lsrs	r1, r1, #24
 801a6ae:	9110      	str	r1, [sp, #64]	; 0x40
 801a6b0:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a6b4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a6b8:	910c      	str	r1, [sp, #48]	; 0x30
 801a6ba:	0e09      	lsrs	r1, r1, #24
 801a6bc:	9113      	str	r1, [sp, #76]	; 0x4c
 801a6be:	b292      	uxth	r2, r2
 801a6c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a6c2:	b280      	uxth	r0, r0
 801a6c4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a6c6:	fb02 f900 	mul.w	r9, r2, r0
 801a6ca:	0112      	lsls	r2, r2, #4
 801a6cc:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801a6d0:	eba2 0809 	sub.w	r8, r2, r9
 801a6d4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a6d8:	b280      	uxth	r0, r0
 801a6da:	fa1f f888 	uxth.w	r8, r8
 801a6de:	1a12      	subs	r2, r2, r0
 801a6e0:	fb08 f101 	mul.w	r1, r8, r1
 801a6e4:	b292      	uxth	r2, r2
 801a6e6:	fb02 110e 	mla	r1, r2, lr, r1
 801a6ea:	fb00 1104 	mla	r1, r0, r4, r1
 801a6ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a6f0:	fb09 1104 	mla	r1, r9, r4, r1
 801a6f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801a6f8:	2900      	cmp	r1, #0
 801a6fa:	f000 80de 	beq.w	801a8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a6fe:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801a702:	d01b      	beq.n	801a73c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801a704:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801a708:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a70c:	fb0e fa0a 	mul.w	sl, lr, sl
 801a710:	fb0e fe03 	mul.w	lr, lr, r3
 801a714:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801a718:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801a71c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801a720:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a724:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801a728:	4453      	add	r3, sl
 801a72a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a72e:	0a1b      	lsrs	r3, r3, #8
 801a730:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801a734:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801a738:	ea43 030c 	orr.w	r3, r3, ip
 801a73c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a73e:	2cff      	cmp	r4, #255	; 0xff
 801a740:	d021      	beq.n	801a786 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801a742:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a744:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a748:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a74a:	fb04 fb0b 	mul.w	fp, r4, fp
 801a74e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a750:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a754:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a756:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a75a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a75e:	fb04 fa0a 	mul.w	sl, r4, sl
 801a762:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a766:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a76a:	44de      	add	lr, fp
 801a76c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a770:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a774:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a778:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a77c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a780:	ea4e 040a 	orr.w	r4, lr, sl
 801a784:	940b      	str	r4, [sp, #44]	; 0x2c
 801a786:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a788:	2cff      	cmp	r4, #255	; 0xff
 801a78a:	d021      	beq.n	801a7d0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801a78c:	9c08      	ldr	r4, [sp, #32]
 801a78e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a792:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a794:	fb04 fb0b 	mul.w	fp, r4, fp
 801a798:	9c08      	ldr	r4, [sp, #32]
 801a79a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a79e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801a7a0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a7a4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a7a8:	fb04 fa0a 	mul.w	sl, r4, sl
 801a7ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a7b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a7b4:	44de      	add	lr, fp
 801a7b6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a7ba:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a7be:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a7c2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a7c6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a7ca:	ea4e 040a 	orr.w	r4, lr, sl
 801a7ce:	9408      	str	r4, [sp, #32]
 801a7d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a7d2:	2cff      	cmp	r4, #255	; 0xff
 801a7d4:	d021      	beq.n	801a81a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801a7d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a7d8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801a7dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a7de:	fb04 fb0b 	mul.w	fp, r4, fp
 801a7e2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a7e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801a7e8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801a7ea:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801a7ee:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801a7f2:	fb04 fa0a 	mul.w	sl, r4, sl
 801a7f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a7fa:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801a7fe:	44de      	add	lr, fp
 801a800:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801a804:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801a808:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801a80c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801a810:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801a814:	ea4e 040a 	orr.w	r4, lr, sl
 801a818:	940c      	str	r4, [sp, #48]	; 0x30
 801a81a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a81c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801a820:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801a824:	43c9      	mvns	r1, r1
 801a826:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801a82a:	9c08      	ldr	r4, [sp, #32]
 801a82c:	b2c9      	uxtb	r1, r1
 801a82e:	fb08 fc0c 	mul.w	ip, r8, ip
 801a832:	fb02 cc0e 	mla	ip, r2, lr, ip
 801a836:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a83a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801a83c:	fb00 cc0e 	mla	ip, r0, lr, ip
 801a840:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801a844:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801a846:	fb09 cc0e 	mla	ip, r9, lr, ip
 801a84a:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801a84e:	fb08 f80e 	mul.w	r8, r8, lr
 801a852:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801a856:	fb02 8303 	mla	r3, r2, r3, r8
 801a85a:	9a08      	ldr	r2, [sp, #32]
 801a85c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801a860:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801a864:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a866:	fb00 330a 	mla	r3, r0, sl, r3
 801a86a:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801a86e:	fb09 3900 	mla	r9, r9, r0, r3
 801a872:	783b      	ldrb	r3, [r7, #0]
 801a874:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801a878:	fb03 f201 	mul.w	r2, r3, r1
 801a87c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801a880:	1c53      	adds	r3, r2, #1
 801a882:	ea4c 0c09 	orr.w	ip, ip, r9
 801a886:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a88a:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801a88e:	703b      	strb	r3, [r7, #0]
 801a890:	787b      	ldrb	r3, [r7, #1]
 801a892:	434b      	muls	r3, r1
 801a894:	1c5a      	adds	r2, r3, #1
 801a896:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801a89a:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801a89e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801a8a2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801a8a6:	707b      	strb	r3, [r7, #1]
 801a8a8:	78bb      	ldrb	r3, [r7, #2]
 801a8aa:	4359      	muls	r1, r3
 801a8ac:	1c4b      	adds	r3, r1, #1
 801a8ae:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801a8b2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801a8b6:	f887 c002 	strb.w	ip, [r7, #2]
 801a8ba:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a8bc:	3703      	adds	r7, #3
 801a8be:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801a8c0:	441a      	add	r2, r3
 801a8c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a8c4:	441d      	add	r5, r3
 801a8c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a8c8:	9225      	str	r2, [sp, #148]	; 0x94
 801a8ca:	3b01      	subs	r3, #1
 801a8cc:	9317      	str	r3, [sp, #92]	; 0x5c
 801a8ce:	e6b0      	b.n	801a632 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801a8d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801a8d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a8d4:	441c      	add	r4, r3
 801a8d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a8d8:	441d      	add	r5, r3
 801a8da:	9b07      	ldr	r3, [sp, #28]
 801a8dc:	9425      	str	r4, [sp, #148]	; 0x94
 801a8de:	3b01      	subs	r3, #1
 801a8e0:	9307      	str	r3, [sp, #28]
 801a8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a8e4:	3303      	adds	r3, #3
 801a8e6:	930a      	str	r3, [sp, #40]	; 0x28
 801a8e8:	e683      	b.n	801a5f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801a8ea:	d026      	beq.n	801a93a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801a8ec:	9b07      	ldr	r3, [sp, #28]
 801a8ee:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801a8f0:	3b01      	subs	r3, #1
 801a8f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801a8f4:	fb00 4003 	mla	r0, r0, r3, r4
 801a8f8:	1400      	asrs	r0, r0, #16
 801a8fa:	f53f ae97 	bmi.w	801a62c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a8fe:	3901      	subs	r1, #1
 801a900:	4288      	cmp	r0, r1
 801a902:	f6bf ae93 	bge.w	801a62c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a906:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a908:	fb01 5303 	mla	r3, r1, r3, r5
 801a90c:	141b      	asrs	r3, r3, #16
 801a90e:	f53f ae8d 	bmi.w	801a62c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a912:	3a01      	subs	r2, #1
 801a914:	4293      	cmp	r3, r2
 801a916:	f6bf ae89 	bge.w	801a62c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a91c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a920:	f103 0e03 	add.w	lr, r3, #3
 801a924:	f1bb 0f00 	cmp.w	fp, #0
 801a928:	dc6d      	bgt.n	801aa06 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801a92a:	9b07      	ldr	r3, [sp, #28]
 801a92c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801a930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a932:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a936:	4423      	add	r3, r4
 801a938:	930a      	str	r3, [sp, #40]	; 0x28
 801a93a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	f340 81a0 	ble.w	801ac82 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801a942:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a946:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a948:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a94c:	eeb0 6a62 	vmov.f32	s12, s5
 801a950:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801a954:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a958:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a95c:	ed8d 6a25 	vstr	s12, [sp, #148]	; 0x94
 801a960:	eeb0 6a43 	vmov.f32	s12, s6
 801a964:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801a968:	ee16 5a10 	vmov	r5, s12
 801a96c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801a970:	ee61 7a27 	vmul.f32	s15, s2, s15
 801a974:	ee77 2a62 	vsub.f32	s5, s14, s5
 801a978:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801a97c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801a980:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801a984:	ee12 2a90 	vmov	r2, s5
 801a988:	eef0 2a47 	vmov.f32	s5, s14
 801a98c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a990:	ee13 2a10 	vmov	r2, s6
 801a994:	9327      	str	r3, [sp, #156]	; 0x9c
 801a996:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a998:	eeb0 3a67 	vmov.f32	s6, s15
 801a99c:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9a0:	9328      	str	r3, [sp, #160]	; 0xa0
 801a9a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801a9a4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a9a6:	3b01      	subs	r3, #1
 801a9a8:	9316      	str	r3, [sp, #88]	; 0x58
 801a9aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801a9ac:	bf08      	it	eq
 801a9ae:	4613      	moveq	r3, r2
 801a9b0:	9307      	str	r3, [sp, #28]
 801a9b2:	e610      	b.n	801a5d6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801a9b4:	2800      	cmp	r0, #0
 801a9b6:	f43f ae82 	beq.w	801a6be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a9ba:	f818 1001 	ldrb.w	r1, [r8, r1]
 801a9be:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801a9c2:	9108      	str	r1, [sp, #32]
 801a9c4:	0e09      	lsrs	r1, r1, #24
 801a9c6:	9110      	str	r1, [sp, #64]	; 0x40
 801a9c8:	e679      	b.n	801a6be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801a9ca:	f113 0801 	adds.w	r8, r3, #1
 801a9ce:	f53f af74 	bmi.w	801a8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a9d2:	4541      	cmp	r1, r8
 801a9d4:	f6ff af71 	blt.w	801a8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a9d8:	f11c 0801 	adds.w	r8, ip, #1
 801a9dc:	f53f af6d 	bmi.w	801a8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a9e0:	45c6      	cmp	lr, r8
 801a9e2:	f6ff af6a 	blt.w	801a8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801a9e6:	b209      	sxth	r1, r1
 801a9e8:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801a9ec:	fa0f f38e 	sxth.w	r3, lr
 801a9f0:	9100      	str	r1, [sp, #0]
 801a9f2:	4639      	mov	r1, r7
 801a9f4:	9301      	str	r3, [sp, #4]
 801a9f6:	4633      	mov	r3, r6
 801a9f8:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801a9fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a9fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 801aa00:	f7ff fca3 	bl	801a34a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801aa04:	e759      	b.n	801a8ba <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801aa06:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801aa08:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801aa0c:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801aa0e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801aa12:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801aa14:	1427      	asrs	r7, r4, #16
 801aa16:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801aa18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aa1c:	142b      	asrs	r3, r5, #16
 801aa1e:	fb01 7303 	mla	r3, r1, r3, r7
 801aa22:	18e7      	adds	r7, r4, r3
 801aa24:	5ce3      	ldrb	r3, [r4, r3]
 801aa26:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801aa2a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801aa2e:	2a00      	cmp	r2, #0
 801aa30:	f000 811d 	beq.w	801ac6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801aa34:	f897 8001 	ldrb.w	r8, [r7, #1]
 801aa38:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801aa3c:	940d      	str	r4, [sp, #52]	; 0x34
 801aa3e:	0e24      	lsrs	r4, r4, #24
 801aa40:	9414      	str	r4, [sp, #80]	; 0x50
 801aa42:	b170      	cbz	r0, 801aa62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801aa44:	eb07 0801 	add.w	r8, r7, r1
 801aa48:	5c79      	ldrb	r1, [r7, r1]
 801aa4a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aa4e:	9109      	str	r1, [sp, #36]	; 0x24
 801aa50:	0e09      	lsrs	r1, r1, #24
 801aa52:	9111      	str	r1, [sp, #68]	; 0x44
 801aa54:	f898 1001 	ldrb.w	r1, [r8, #1]
 801aa58:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801aa5c:	910e      	str	r1, [sp, #56]	; 0x38
 801aa5e:	0e09      	lsrs	r1, r1, #24
 801aa60:	9115      	str	r1, [sp, #84]	; 0x54
 801aa62:	b292      	uxth	r2, r2
 801aa64:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801aa66:	b280      	uxth	r0, r0
 801aa68:	fb02 f900 	mul.w	r9, r2, r0
 801aa6c:	0112      	lsls	r2, r2, #4
 801aa6e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801aa72:	eba2 0809 	sub.w	r8, r2, r9
 801aa76:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801aa7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801aa7c:	b280      	uxth	r0, r0
 801aa7e:	fa1f f888 	uxth.w	r8, r8
 801aa82:	1a09      	subs	r1, r1, r0
 801aa84:	fb08 f202 	mul.w	r2, r8, r2
 801aa88:	b289      	uxth	r1, r1
 801aa8a:	fb01 220c 	mla	r2, r1, ip, r2
 801aa8e:	fb00 2204 	mla	r2, r0, r4, r2
 801aa92:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801aa94:	fb09 2204 	mla	r2, r9, r4, r2
 801aa98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801aa9c:	2a00      	cmp	r2, #0
 801aa9e:	f000 80db 	beq.w	801ac58 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801aaa2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801aaa6:	d019      	beq.n	801aadc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801aaa8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801aaac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801aab0:	fb0c fa0a 	mul.w	sl, ip, sl
 801aab4:	fb0c fc03 	mul.w	ip, ip, r3
 801aab8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801aabc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801aac0:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801aac4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aac8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801aacc:	4453      	add	r3, sl
 801aace:	0a3f      	lsrs	r7, r7, #8
 801aad0:	0a1b      	lsrs	r3, r3, #8
 801aad2:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801aad6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801aada:	433b      	orrs	r3, r7
 801aadc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aade:	2cff      	cmp	r4, #255	; 0xff
 801aae0:	d020      	beq.n	801ab24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801aae2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aae4:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801aae8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aaea:	4367      	muls	r7, r4
 801aaec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801aaee:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801aaf2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801aaf6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801aaf8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801aafc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab00:	fb04 fa0a 	mul.w	sl, r4, sl
 801ab04:	44bc      	add	ip, r7
 801ab06:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ab0a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab0e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ab12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab16:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab1a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ab1e:	ea4c 040a 	orr.w	r4, ip, sl
 801ab22:	940d      	str	r4, [sp, #52]	; 0x34
 801ab24:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab26:	2cff      	cmp	r4, #255	; 0xff
 801ab28:	d020      	beq.n	801ab6c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801ab2a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ab2c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ab30:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab32:	4367      	muls	r7, r4
 801ab34:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ab36:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ab3a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ab3e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ab40:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ab44:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab48:	fb04 fa0a 	mul.w	sl, r4, sl
 801ab4c:	44bc      	add	ip, r7
 801ab4e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ab52:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ab5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab5e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ab62:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ab66:	ea4c 040a 	orr.w	r4, ip, sl
 801ab6a:	9409      	str	r4, [sp, #36]	; 0x24
 801ab6c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ab6e:	2cff      	cmp	r4, #255	; 0xff
 801ab70:	d020      	beq.n	801abb4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801ab72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ab74:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ab78:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ab7a:	4367      	muls	r7, r4
 801ab7c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ab7e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ab82:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ab86:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ab88:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ab8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ab90:	fb04 fa0a 	mul.w	sl, r4, sl
 801ab94:	44bc      	add	ip, r7
 801ab96:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ab9a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ab9e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801aba2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801aba6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801abaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801abae:	ea4c 040a 	orr.w	r4, ip, sl
 801abb2:	940e      	str	r4, [sp, #56]	; 0x38
 801abb4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801abb6:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801abba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801abbe:	43d2      	mvns	r2, r2
 801abc0:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801abc4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801abc6:	b2d2      	uxtb	r2, r2
 801abc8:	fb08 f707 	mul.w	r7, r8, r7
 801abcc:	fb01 770c 	mla	r7, r1, ip, r7
 801abd0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801abd4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801abd6:	fb00 770c 	mla	r7, r0, ip, r7
 801abda:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801abde:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801abe0:	fb09 770c 	mla	r7, r9, ip, r7
 801abe4:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801abe8:	fb08 f80c 	mul.w	r8, r8, ip
 801abec:	0a3f      	lsrs	r7, r7, #8
 801abee:	fb01 8303 	mla	r3, r1, r3, r8
 801abf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801abf4:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801abf8:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801abfc:	990e      	ldr	r1, [sp, #56]	; 0x38
 801abfe:	fb00 330a 	mla	r3, r0, sl, r3
 801ac02:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ac06:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ac0a:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801ac0e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ac12:	fb03 f102 	mul.w	r1, r3, r2
 801ac16:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ac1a:	1c4b      	adds	r3, r1, #1
 801ac1c:	ea47 070c 	orr.w	r7, r7, ip
 801ac20:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ac24:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801ac28:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801ac2c:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801ac30:	4353      	muls	r3, r2
 801ac32:	1c59      	adds	r1, r3, #1
 801ac34:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ac38:	0a3b      	lsrs	r3, r7, #8
 801ac3a:	0c3f      	lsrs	r7, r7, #16
 801ac3c:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801ac40:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ac44:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ac48:	435a      	muls	r2, r3
 801ac4a:	1c53      	adds	r3, r2, #1
 801ac4c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ac50:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801ac54:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ac58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ac5a:	f10e 0e03 	add.w	lr, lr, #3
 801ac5e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ac60:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ac64:	441a      	add	r2, r3
 801ac66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ac68:	9225      	str	r2, [sp, #148]	; 0x94
 801ac6a:	441d      	add	r5, r3
 801ac6c:	e65a      	b.n	801a924 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801ac6e:	2800      	cmp	r0, #0
 801ac70:	f43f aef7 	beq.w	801aa62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ac74:	5c79      	ldrb	r1, [r7, r1]
 801ac76:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ac7a:	9109      	str	r1, [sp, #36]	; 0x24
 801ac7c:	0e09      	lsrs	r1, r1, #24
 801ac7e:	9111      	str	r1, [sp, #68]	; 0x44
 801ac80:	e6ef      	b.n	801aa62 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801ac82:	b01b      	add	sp, #108	; 0x6c
 801ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac8c:	b08d      	sub	sp, #52	; 0x34
 801ac8e:	468b      	mov	fp, r1
 801ac90:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	; 0x5c
 801ac94:	f89d 106c 	ldrb.w	r1, [sp, #108]	; 0x6c
 801ac98:	fb0c 5703 	mla	r7, ip, r3, r5
 801ac9c:	f1bc 0f00 	cmp.w	ip, #0
 801aca0:	910b      	str	r1, [sp, #44]	; 0x2c
 801aca2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801aca6:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 801acaa:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
 801acae:	f89d a068 	ldrb.w	sl, [sp, #104]	; 0x68
 801acb2:	eb02 0607 	add.w	r6, r2, r7
 801acb6:	f89b 4000 	ldrb.w	r4, [fp]
 801acba:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801acbe:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801acc2:	f2c0 80c1 	blt.w	801ae48 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801acc6:	45e6      	cmp	lr, ip
 801acc8:	f340 80be 	ble.w	801ae48 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801accc:	2d00      	cmp	r5, #0
 801acce:	f2c0 80b7 	blt.w	801ae40 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801acd2:	42ab      	cmp	r3, r5
 801acd4:	f340 80b4 	ble.w	801ae40 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801acd8:	5dd2      	ldrb	r2, [r2, r7]
 801acda:	9205      	str	r2, [sp, #20]
 801acdc:	7872      	ldrb	r2, [r6, #1]
 801acde:	9206      	str	r2, [sp, #24]
 801ace0:	78b2      	ldrb	r2, [r6, #2]
 801ace2:	9207      	str	r2, [sp, #28]
 801ace4:	1c6a      	adds	r2, r5, #1
 801ace6:	f100 80b6 	bmi.w	801ae56 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801acea:	4293      	cmp	r3, r2
 801acec:	f340 80b3 	ble.w	801ae56 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801acf0:	f1b8 0f00 	cmp.w	r8, #0
 801acf4:	f000 80af 	beq.w	801ae56 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801acf8:	78f2      	ldrb	r2, [r6, #3]
 801acfa:	9201      	str	r2, [sp, #4]
 801acfc:	7932      	ldrb	r2, [r6, #4]
 801acfe:	9202      	str	r2, [sp, #8]
 801ad00:	7972      	ldrb	r2, [r6, #5]
 801ad02:	9203      	str	r2, [sp, #12]
 801ad04:	f11c 0c01 	adds.w	ip, ip, #1
 801ad08:	f100 80ad 	bmi.w	801ae66 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ad0c:	45e6      	cmp	lr, ip
 801ad0e:	f340 80aa 	ble.w	801ae66 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ad12:	f1ba 0f00 	cmp.w	sl, #0
 801ad16:	f000 80a6 	beq.w	801ae66 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801ad1a:	2d00      	cmp	r5, #0
 801ad1c:	f2c0 809f 	blt.w	801ae5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ad20:	42ab      	cmp	r3, r5
 801ad22:	f340 809c 	ble.w	801ae5e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801ad26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801ad2a:	f816 9002 	ldrb.w	r9, [r6, r2]
 801ad2e:	2203      	movs	r2, #3
 801ad30:	fb03 6c02 	mla	ip, r3, r2, r6
 801ad34:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801ad38:	f89c e002 	ldrb.w	lr, [ip, #2]
 801ad3c:	9704      	str	r7, [sp, #16]
 801ad3e:	3501      	adds	r5, #1
 801ad40:	f100 8098 	bmi.w	801ae74 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ad44:	42ab      	cmp	r3, r5
 801ad46:	f340 8095 	ble.w	801ae74 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ad4a:	f1b8 0f00 	cmp.w	r8, #0
 801ad4e:	f000 8091 	beq.w	801ae74 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801ad52:	f04f 0c03 	mov.w	ip, #3
 801ad56:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801ad5a:	5cb5      	ldrb	r5, [r6, r2]
 801ad5c:	fb03 620c 	mla	r2, r3, ip, r6
 801ad60:	fb03 630c 	mla	r3, r3, ip, r6
 801ad64:	7912      	ldrb	r2, [r2, #4]
 801ad66:	795e      	ldrb	r6, [r3, #5]
 801ad68:	fa1f f388 	uxth.w	r3, r8
 801ad6c:	fa1f fc8a 	uxth.w	ip, sl
 801ad70:	fb03 f70c 	mul.w	r7, r3, ip
 801ad74:	011b      	lsls	r3, r3, #4
 801ad76:	9708      	str	r7, [sp, #32]
 801ad78:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801ad7c:	f5c3 7a80 	rsb	sl, r3, #256	; 0x100
 801ad80:	1bdb      	subs	r3, r3, r7
 801ad82:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 801ad86:	fa1f fc8c 	uxth.w	ip, ip
 801ad8a:	b29b      	uxth	r3, r3
 801ad8c:	9709      	str	r7, [sp, #36]	; 0x24
 801ad8e:	ebaa 0a0c 	sub.w	sl, sl, ip
 801ad92:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801ad94:	930a      	str	r3, [sp, #40]	; 0x28
 801ad96:	fa1f fa8a 	uxth.w	sl, sl
 801ad9a:	ea6f 0807 	mvn.w	r8, r7
 801ad9e:	9f01      	ldr	r7, [sp, #4]
 801ada0:	435f      	muls	r7, r3
 801ada2:	9b05      	ldr	r3, [sp, #20]
 801ada4:	fa5f f888 	uxtb.w	r8, r8
 801ada8:	fb0a 7703 	mla	r7, sl, r3, r7
 801adac:	9b08      	ldr	r3, [sp, #32]
 801adae:	fb14 f408 	smulbb	r4, r4, r8
 801adb2:	fb0c 7709 	mla	r7, ip, r9, r7
 801adb6:	fb10 f008 	smulbb	r0, r0, r8
 801adba:	fb11 f108 	smulbb	r1, r1, r8
 801adbe:	fb03 7705 	mla	r7, r3, r5, r7
 801adc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adc4:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801adc8:	fb07 4703 	mla	r7, r7, r3, r4
 801adcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801adce:	b2bf      	uxth	r7, r7
 801add0:	1c7c      	adds	r4, r7, #1
 801add2:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801add6:	1224      	asrs	r4, r4, #8
 801add8:	f88b 4000 	strb.w	r4, [fp]
 801addc:	9c02      	ldr	r4, [sp, #8]
 801adde:	435c      	muls	r4, r3
 801ade0:	9b06      	ldr	r3, [sp, #24]
 801ade2:	fb0a 4403 	mla	r4, sl, r3, r4
 801ade6:	9b04      	ldr	r3, [sp, #16]
 801ade8:	fb0c 4403 	mla	r4, ip, r3, r4
 801adec:	9b08      	ldr	r3, [sp, #32]
 801adee:	fb03 4402 	mla	r4, r3, r2, r4
 801adf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801adf6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801adfa:	fb04 0403 	mla	r4, r4, r3, r0
 801adfe:	9b03      	ldr	r3, [sp, #12]
 801ae00:	435a      	muls	r2, r3
 801ae02:	b2a4      	uxth	r4, r4
 801ae04:	4613      	mov	r3, r2
 801ae06:	9a07      	ldr	r2, [sp, #28]
 801ae08:	1c60      	adds	r0, r4, #1
 801ae0a:	fb0a 3a02 	mla	sl, sl, r2, r3
 801ae0e:	9b08      	ldr	r3, [sp, #32]
 801ae10:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801ae14:	fb0c ac0e 	mla	ip, ip, lr, sl
 801ae18:	1224      	asrs	r4, r4, #8
 801ae1a:	fb03 c606 	mla	r6, r3, r6, ip
 801ae1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae20:	f88b 4001 	strb.w	r4, [fp, #1]
 801ae24:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801ae28:	fb06 1103 	mla	r1, r6, r3, r1
 801ae2c:	b289      	uxth	r1, r1
 801ae2e:	1c4e      	adds	r6, r1, #1
 801ae30:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801ae34:	1209      	asrs	r1, r1, #8
 801ae36:	f88b 1002 	strb.w	r1, [fp, #2]
 801ae3a:	b00d      	add	sp, #52	; 0x34
 801ae3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ae44:	9405      	str	r4, [sp, #20]
 801ae46:	e74d      	b.n	801ace4 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801ae48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae4c:	9401      	str	r4, [sp, #4]
 801ae4e:	9405      	str	r4, [sp, #20]
 801ae50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ae54:	e756      	b.n	801ad04 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ae56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae5a:	9401      	str	r4, [sp, #4]
 801ae5c:	e752      	b.n	801ad04 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801ae5e:	468e      	mov	lr, r1
 801ae60:	9004      	str	r0, [sp, #16]
 801ae62:	46a1      	mov	r9, r4
 801ae64:	e76b      	b.n	801ad3e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801ae66:	460e      	mov	r6, r1
 801ae68:	4602      	mov	r2, r0
 801ae6a:	4625      	mov	r5, r4
 801ae6c:	468e      	mov	lr, r1
 801ae6e:	9004      	str	r0, [sp, #16]
 801ae70:	46a1      	mov	r9, r4
 801ae72:	e779      	b.n	801ad68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801ae74:	460e      	mov	r6, r1
 801ae76:	4602      	mov	r2, r0
 801ae78:	4625      	mov	r5, r4
 801ae7a:	e775      	b.n	801ad68 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801ae7c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae80:	b09f      	sub	sp, #124	; 0x7c
 801ae82:	920e      	str	r2, [sp, #56]	; 0x38
 801ae84:	9307      	str	r3, [sp, #28]
 801ae86:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801ae88:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801ae8c:	901d      	str	r0, [sp, #116]	; 0x74
 801ae8e:	930c      	str	r3, [sp, #48]	; 0x30
 801ae90:	6850      	ldr	r0, [r2, #4]
 801ae92:	910b      	str	r1, [sp, #44]	; 0x2c
 801ae94:	6812      	ldr	r2, [r2, #0]
 801ae96:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801ae9a:	e9dd a829 	ldrd	sl, r8, [sp, #164]	; 0xa4
 801ae9e:	fb00 1303 	mla	r3, r0, r3, r1
 801aea2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aea6:	18d3      	adds	r3, r2, r3
 801aea8:	9308      	str	r3, [sp, #32]
 801aeaa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801aeac:	681b      	ldr	r3, [r3, #0]
 801aeae:	930a      	str	r3, [sp, #40]	; 0x28
 801aeb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aeb2:	43db      	mvns	r3, r3
 801aeb4:	b2db      	uxtb	r3, r3
 801aeb6:	9309      	str	r3, [sp, #36]	; 0x24
 801aeb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	dc03      	bgt.n	801aec6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801aebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	f340 81f5 	ble.w	801b2b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801aec6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801aec8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aecc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aed0:	1e48      	subs	r0, r1, #1
 801aed2:	1e54      	subs	r4, r2, #1
 801aed4:	9b07      	ldr	r3, [sp, #28]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	f340 80d5 	ble.w	801b086 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801aedc:	ea5f 452a 	movs.w	r5, sl, asr #16
 801aee0:	ea4f 4328 	mov.w	r3, r8, asr #16
 801aee4:	d406      	bmi.n	801aef4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801aee6:	4285      	cmp	r5, r0
 801aee8:	da04      	bge.n	801aef4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	db02      	blt.n	801aef4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801aeee:	42a3      	cmp	r3, r4
 801aef0:	f2c0 80ca 	blt.w	801b088 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801aef4:	3501      	adds	r5, #1
 801aef6:	f100 80bb 	bmi.w	801b070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801aefa:	42a9      	cmp	r1, r5
 801aefc:	f2c0 80b8 	blt.w	801b070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801af00:	3301      	adds	r3, #1
 801af02:	f100 80b5 	bmi.w	801b070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801af06:	429a      	cmp	r2, r3
 801af08:	f2c0 80b2 	blt.w	801b070 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801af0c:	9b07      	ldr	r3, [sp, #28]
 801af0e:	9d08      	ldr	r5, [sp, #32]
 801af10:	930d      	str	r3, [sp, #52]	; 0x34
 801af12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801af14:	2b00      	cmp	r3, #0
 801af16:	f340 80d6 	ble.w	801b0c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801af1a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 801af1c:	ea4f 4428 	mov.w	r4, r8, asr #16
 801af20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801af22:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801af26:	68c6      	ldr	r6, [r0, #12]
 801af28:	ea5f 402a 	movs.w	r0, sl, asr #16
 801af2c:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801af30:	689b      	ldr	r3, [r3, #8]
 801af32:	f100 810f 	bmi.w	801b154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801af36:	1e5f      	subs	r7, r3, #1
 801af38:	42b8      	cmp	r0, r7
 801af3a:	f280 810b 	bge.w	801b154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801af3e:	2c00      	cmp	r4, #0
 801af40:	f2c0 8108 	blt.w	801b154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801af44:	1e77      	subs	r7, r6, #1
 801af46:	42bc      	cmp	r4, r7
 801af48:	f280 8104 	bge.w	801b154 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801af4c:	b21b      	sxth	r3, r3
 801af4e:	fb04 0003 	mla	r0, r4, r3, r0
 801af52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801af54:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af58:	1826      	adds	r6, r4, r0
 801af5a:	5c24      	ldrb	r4, [r4, r0]
 801af5c:	78b7      	ldrb	r7, [r6, #2]
 801af5e:	7870      	ldrb	r0, [r6, #1]
 801af60:	970f      	str	r7, [sp, #60]	; 0x3c
 801af62:	7977      	ldrb	r7, [r6, #5]
 801af64:	f896 e003 	ldrb.w	lr, [r6, #3]
 801af68:	f896 c004 	ldrb.w	ip, [r6, #4]
 801af6c:	9710      	str	r7, [sp, #64]	; 0x40
 801af6e:	b1c9      	cbz	r1, 801afa4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801af70:	f04f 0b03 	mov.w	fp, #3
 801af74:	f06f 0904 	mvn.w	r9, #4
 801af78:	3605      	adds	r6, #5
 801af7a:	fb13 930b 	smlabb	r3, r3, fp, r9
 801af7e:	eb06 0b03 	add.w	fp, r6, r3
 801af82:	5cf3      	ldrb	r3, [r6, r3]
 801af84:	9311      	str	r3, [sp, #68]	; 0x44
 801af86:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801af8a:	9313      	str	r3, [sp, #76]	; 0x4c
 801af8c:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801af90:	9315      	str	r3, [sp, #84]	; 0x54
 801af92:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801af96:	9312      	str	r3, [sp, #72]	; 0x48
 801af98:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801af9c:	9314      	str	r3, [sp, #80]	; 0x50
 801af9e:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801afa2:	9316      	str	r3, [sp, #88]	; 0x58
 801afa4:	b292      	uxth	r2, r2
 801afa6:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801afa8:	b289      	uxth	r1, r1
 801afaa:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801afae:	fb02 f601 	mul.w	r6, r2, r1
 801afb2:	0112      	lsls	r2, r2, #4
 801afb4:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801afb8:	f5c2 7980 	rsb	r9, r2, #256	; 0x100
 801afbc:	1b92      	subs	r2, r2, r6
 801afbe:	b289      	uxth	r1, r1
 801afc0:	b292      	uxth	r2, r2
 801afc2:	eba9 0901 	sub.w	r9, r9, r1
 801afc6:	fb02 fe0e 	mul.w	lr, r2, lr
 801afca:	fa1f f989 	uxth.w	r9, r9
 801afce:	fb02 fc0c 	mul.w	ip, r2, ip
 801afd2:	fb09 e404 	mla	r4, r9, r4, lr
 801afd6:	f895 e000 	ldrb.w	lr, [r5]
 801afda:	fb09 c000 	mla	r0, r9, r0, ip
 801afde:	fb01 4407 	mla	r4, r1, r7, r4
 801afe2:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801afe4:	fb06 4407 	mla	r4, r6, r7, r4
 801afe8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801afea:	fb1e fe07 	smulbb	lr, lr, r7
 801afee:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801aff2:	fb04 e403 	mla	r4, r4, r3, lr
 801aff6:	b2a4      	uxth	r4, r4
 801aff8:	f104 0e01 	add.w	lr, r4, #1
 801affc:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801b000:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801b002:	fb01 0004 	mla	r0, r1, r4, r0
 801b006:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b008:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b00c:	fb06 0004 	mla	r0, r6, r4, r0
 801b010:	786c      	ldrb	r4, [r5, #1]
 801b012:	f885 e000 	strb.w	lr, [r5]
 801b016:	fb14 f407 	smulbb	r4, r4, r7
 801b01a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b01e:	fb00 4003 	mla	r0, r0, r3, r4
 801b022:	b280      	uxth	r0, r0
 801b024:	1c44      	adds	r4, r0, #1
 801b026:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801b02a:	1200      	asrs	r0, r0, #8
 801b02c:	7068      	strb	r0, [r5, #1]
 801b02e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b030:	4342      	muls	r2, r0
 801b032:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b034:	fb09 2200 	mla	r2, r9, r0, r2
 801b038:	9815      	ldr	r0, [sp, #84]	; 0x54
 801b03a:	fb01 2100 	mla	r1, r1, r0, r2
 801b03e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b040:	fb06 1602 	mla	r6, r6, r2, r1
 801b044:	78a9      	ldrb	r1, [r5, #2]
 801b046:	fb11 f107 	smulbb	r1, r1, r7
 801b04a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801b04e:	fb06 1303 	mla	r3, r6, r3, r1
 801b052:	b29b      	uxth	r3, r3
 801b054:	1c5e      	adds	r6, r3, #1
 801b056:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801b05a:	121b      	asrs	r3, r3, #8
 801b05c:	70ab      	strb	r3, [r5, #2]
 801b05e:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b060:	3503      	adds	r5, #3
 801b062:	449a      	add	sl, r3
 801b064:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b066:	4498      	add	r8, r3
 801b068:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b06a:	3b01      	subs	r3, #1
 801b06c:	930d      	str	r3, [sp, #52]	; 0x34
 801b06e:	e750      	b.n	801af12 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b070:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b072:	449a      	add	sl, r3
 801b074:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b076:	4498      	add	r8, r3
 801b078:	9b07      	ldr	r3, [sp, #28]
 801b07a:	3b01      	subs	r3, #1
 801b07c:	9307      	str	r3, [sp, #28]
 801b07e:	9b08      	ldr	r3, [sp, #32]
 801b080:	3303      	adds	r3, #3
 801b082:	9308      	str	r3, [sp, #32]
 801b084:	e726      	b.n	801aed4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801b086:	d026      	beq.n	801b0d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801b088:	9b07      	ldr	r3, [sp, #28]
 801b08a:	982b      	ldr	r0, [sp, #172]	; 0xac
 801b08c:	3b01      	subs	r3, #1
 801b08e:	fb00 a003 	mla	r0, r0, r3, sl
 801b092:	1400      	asrs	r0, r0, #16
 801b094:	f53f af3a 	bmi.w	801af0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b098:	3901      	subs	r1, #1
 801b09a:	4288      	cmp	r0, r1
 801b09c:	f6bf af36 	bge.w	801af0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b0a0:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b0a2:	fb01 8303 	mla	r3, r1, r3, r8
 801b0a6:	141b      	asrs	r3, r3, #16
 801b0a8:	f53f af30 	bmi.w	801af0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b0ac:	3a01      	subs	r2, #1
 801b0ae:	4293      	cmp	r3, r2
 801b0b0:	f6bf af2c 	bge.w	801af0c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801b0b4:	9b08      	ldr	r3, [sp, #32]
 801b0b6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801b0ba:	1cdd      	adds	r5, r3, #3
 801b0bc:	f8bd e030 	ldrh.w	lr, [sp, #48]	; 0x30
 801b0c0:	f1bc 0f00 	cmp.w	ip, #0
 801b0c4:	dc5f      	bgt.n	801b186 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801b0c6:	9b07      	ldr	r3, [sp, #28]
 801b0c8:	9a08      	ldr	r2, [sp, #32]
 801b0ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b0ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b0d2:	441a      	add	r2, r3
 801b0d4:	9208      	str	r2, [sp, #32]
 801b0d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	f340 80e9 	ble.w	801b2b0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801b0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b0e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b0e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b0e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b0ec:	eef0 6a62 	vmov.f32	s13, s5
 801b0f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b0f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b0fc:	ee16 aa90 	vmov	sl, s13
 801b100:	eef0 6a43 	vmov.f32	s13, s6
 801b104:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b108:	ee16 8a90 	vmov	r8, s13
 801b10c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b110:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b114:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b118:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b11c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b120:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b124:	ee12 2a90 	vmov	r2, s5
 801b128:	eef0 2a47 	vmov.f32	s5, s14
 801b12c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b130:	ee13 2a10 	vmov	r2, s6
 801b134:	932b      	str	r3, [sp, #172]	; 0xac
 801b136:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b138:	eeb0 3a67 	vmov.f32	s6, s15
 801b13c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b140:	932c      	str	r3, [sp, #176]	; 0xb0
 801b142:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b144:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b146:	3b01      	subs	r3, #1
 801b148:	930b      	str	r3, [sp, #44]	; 0x2c
 801b14a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b14c:	bf08      	it	eq
 801b14e:	4613      	moveq	r3, r2
 801b150:	9307      	str	r3, [sp, #28]
 801b152:	e6b1      	b.n	801aeb8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b154:	1c47      	adds	r7, r0, #1
 801b156:	d482      	bmi.n	801b05e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b158:	42bb      	cmp	r3, r7
 801b15a:	db80      	blt.n	801b05e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b15c:	1c67      	adds	r7, r4, #1
 801b15e:	f53f af7e 	bmi.w	801b05e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b162:	42be      	cmp	r6, r7
 801b164:	f6ff af7b 	blt.w	801b05e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b168:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801b16a:	b236      	sxth	r6, r6
 801b16c:	9001      	str	r0, [sp, #4]
 801b16e:	b21b      	sxth	r3, r3
 801b170:	9600      	str	r6, [sp, #0]
 801b172:	981d      	ldr	r0, [sp, #116]	; 0x74
 801b174:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801b178:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801b17c:	4629      	mov	r1, r5
 801b17e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b180:	f7ff fd82 	bl	801ac88 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801b184:	e76b      	b.n	801b05e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801b186:	9930      	ldr	r1, [sp, #192]	; 0xc0
 801b188:	ea4f 402a 	mov.w	r0, sl, asr #16
 801b18c:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801b190:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801b194:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801b198:	ea4f 4128 	mov.w	r1, r8, asr #16
 801b19c:	fb07 0101 	mla	r1, r7, r1, r0
 801b1a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801b1a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b1a6:	1844      	adds	r4, r0, r1
 801b1a8:	5c40      	ldrb	r0, [r0, r1]
 801b1aa:	78a6      	ldrb	r6, [r4, #2]
 801b1ac:	7861      	ldrb	r1, [r4, #1]
 801b1ae:	960f      	str	r6, [sp, #60]	; 0x3c
 801b1b0:	78e6      	ldrb	r6, [r4, #3]
 801b1b2:	910d      	str	r1, [sp, #52]	; 0x34
 801b1b4:	9610      	str	r6, [sp, #64]	; 0x40
 801b1b6:	f894 9004 	ldrb.w	r9, [r4, #4]
 801b1ba:	f894 b005 	ldrb.w	fp, [r4, #5]
 801b1be:	b192      	cbz	r2, 801b1e6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801b1c0:	f06f 0604 	mvn.w	r6, #4
 801b1c4:	2103      	movs	r1, #3
 801b1c6:	3405      	adds	r4, #5
 801b1c8:	fb17 6701 	smlabb	r7, r7, r1, r6
 801b1cc:	19e6      	adds	r6, r4, r7
 801b1ce:	5de4      	ldrb	r4, [r4, r7]
 801b1d0:	9417      	str	r4, [sp, #92]	; 0x5c
 801b1d2:	7874      	ldrb	r4, [r6, #1]
 801b1d4:	9419      	str	r4, [sp, #100]	; 0x64
 801b1d6:	78b4      	ldrb	r4, [r6, #2]
 801b1d8:	941b      	str	r4, [sp, #108]	; 0x6c
 801b1da:	78f4      	ldrb	r4, [r6, #3]
 801b1dc:	9418      	str	r4, [sp, #96]	; 0x60
 801b1de:	7934      	ldrb	r4, [r6, #4]
 801b1e0:	941a      	str	r4, [sp, #104]	; 0x68
 801b1e2:	7974      	ldrb	r4, [r6, #5]
 801b1e4:	941c      	str	r4, [sp, #112]	; 0x70
 801b1e6:	b29b      	uxth	r3, r3
 801b1e8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801b1ea:	b292      	uxth	r2, r2
 801b1ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b1ee:	3503      	adds	r5, #3
 801b1f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 801b1f4:	fb03 f402 	mul.w	r4, r3, r2
 801b1f8:	011b      	lsls	r3, r3, #4
 801b1fa:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801b1fe:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 801b202:	1b1b      	subs	r3, r3, r4
 801b204:	b292      	uxth	r2, r2
 801b206:	b29b      	uxth	r3, r3
 801b208:	1ab6      	subs	r6, r6, r2
 801b20a:	435f      	muls	r7, r3
 801b20c:	b2b6      	uxth	r6, r6
 801b20e:	fb03 f909 	mul.w	r9, r3, r9
 801b212:	fb03 fb0b 	mul.w	fp, r3, fp
 801b216:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b218:	fb06 7000 	mla	r0, r6, r0, r7
 801b21c:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801b21e:	fb06 bb03 	mla	fp, r6, r3, fp
 801b222:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b224:	fb02 0007 	mla	r0, r2, r7, r0
 801b228:	9f18      	ldr	r7, [sp, #96]	; 0x60
 801b22a:	fb02 bb03 	mla	fp, r2, r3, fp
 801b22e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b230:	fb04 0007 	mla	r0, r4, r7, r0
 801b234:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801b238:	fb17 f701 	smulbb	r7, r7, r1
 801b23c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b240:	990d      	ldr	r1, [sp, #52]	; 0x34
 801b242:	fb00 700e 	mla	r0, r0, lr, r7
 801b246:	fb06 9101 	mla	r1, r6, r1, r9
 801b24a:	b280      	uxth	r0, r0
 801b24c:	1c47      	adds	r7, r0, #1
 801b24e:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801b252:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801b254:	1200      	asrs	r0, r0, #8
 801b256:	f805 0c06 	strb.w	r0, [r5, #-6]
 801b25a:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b25c:	fb02 1100 	mla	r1, r2, r0, r1
 801b260:	981a      	ldr	r0, [sp, #104]	; 0x68
 801b262:	fb04 1100 	mla	r1, r4, r0, r1
 801b266:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801b26a:	fb04 b403 	mla	r4, r4, r3, fp
 801b26e:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801b272:	fb10 f007 	smulbb	r0, r0, r7
 801b276:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b27a:	fb13 f307 	smulbb	r3, r3, r7
 801b27e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b282:	fb01 010e 	mla	r1, r1, lr, r0
 801b286:	fb04 340e 	mla	r4, r4, lr, r3
 801b28a:	b289      	uxth	r1, r1
 801b28c:	b2a4      	uxth	r4, r4
 801b28e:	1c48      	adds	r0, r1, #1
 801b290:	1c63      	adds	r3, r4, #1
 801b292:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801b296:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801b29a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801b29c:	1209      	asrs	r1, r1, #8
 801b29e:	1224      	asrs	r4, r4, #8
 801b2a0:	449a      	add	sl, r3
 801b2a2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b2a4:	f805 1c05 	strb.w	r1, [r5, #-5]
 801b2a8:	f805 4c04 	strb.w	r4, [r5, #-4]
 801b2ac:	4498      	add	r8, r3
 801b2ae:	e707      	b.n	801b0c0 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801b2b0:	b01f      	add	sp, #124	; 0x7c
 801b2b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b2b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801b2b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2ba:	b087      	sub	sp, #28
 801b2bc:	780d      	ldrb	r5, [r1, #0]
 801b2be:	784c      	ldrb	r4, [r1, #1]
 801b2c0:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801b2c4:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
 801b2c8:	9004      	str	r0, [sp, #16]
 801b2ca:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801b2ce:	e9dd b611 	ldrd	fp, r6, [sp, #68]	; 0x44
 801b2d2:	9005      	str	r0, [sp, #20]
 801b2d4:	fb06 bc03 	mla	ip, r6, r3, fp
 801b2d8:	2e00      	cmp	r6, #0
 801b2da:	7888      	ldrb	r0, [r1, #2]
 801b2dc:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b2e0:	eb02 090c 	add.w	r9, r2, ip
 801b2e4:	f2c0 8084 	blt.w	801b3f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801b2e8:	42b7      	cmp	r7, r6
 801b2ea:	f340 8081 	ble.w	801b3f0 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801b2ee:	f1bb 0f00 	cmp.w	fp, #0
 801b2f2:	db79      	blt.n	801b3e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801b2f4:	455b      	cmp	r3, fp
 801b2f6:	dd77      	ble.n	801b3e8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801b2f8:	f812 200c 	ldrb.w	r2, [r2, ip]
 801b2fc:	9201      	str	r2, [sp, #4]
 801b2fe:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b302:	9202      	str	r2, [sp, #8]
 801b304:	f899 2002 	ldrb.w	r2, [r9, #2]
 801b308:	9203      	str	r2, [sp, #12]
 801b30a:	f11b 0201 	adds.w	r2, fp, #1
 801b30e:	d476      	bmi.n	801b3fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b310:	4293      	cmp	r3, r2
 801b312:	dd74      	ble.n	801b3fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b314:	9a04      	ldr	r2, [sp, #16]
 801b316:	2a00      	cmp	r2, #0
 801b318:	d071      	beq.n	801b3fe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801b31a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801b31e:	f899 c004 	ldrb.w	ip, [r9, #4]
 801b322:	f899 a005 	ldrb.w	sl, [r9, #5]
 801b326:	3601      	adds	r6, #1
 801b328:	d471      	bmi.n	801b40e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b32a:	42b7      	cmp	r7, r6
 801b32c:	dd6f      	ble.n	801b40e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b32e:	9a05      	ldr	r2, [sp, #20]
 801b330:	2a00      	cmp	r2, #0
 801b332:	d06c      	beq.n	801b40e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801b334:	f1bb 0f00 	cmp.w	fp, #0
 801b338:	db65      	blt.n	801b406 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801b33a:	455b      	cmp	r3, fp
 801b33c:	dd63      	ble.n	801b406 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801b33e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b342:	f819 e002 	ldrb.w	lr, [r9, r2]
 801b346:	2203      	movs	r2, #3
 801b348:	fb03 9602 	mla	r6, r3, r2, r9
 801b34c:	7877      	ldrb	r7, [r6, #1]
 801b34e:	78b6      	ldrb	r6, [r6, #2]
 801b350:	f11b 0b01 	adds.w	fp, fp, #1
 801b354:	d40c      	bmi.n	801b370 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b356:	455b      	cmp	r3, fp
 801b358:	dd0a      	ble.n	801b370 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b35a:	9a04      	ldr	r2, [sp, #16]
 801b35c:	b142      	cbz	r2, 801b370 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801b35e:	2203      	movs	r2, #3
 801b360:	fb13 2002 	smlabb	r0, r3, r2, r2
 801b364:	f819 5000 	ldrb.w	r5, [r9, r0]
 801b368:	fb03 9002 	mla	r0, r3, r2, r9
 801b36c:	7904      	ldrb	r4, [r0, #4]
 801b36e:	7940      	ldrb	r0, [r0, #5]
 801b370:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b374:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b378:	fb03 fb02 	mul.w	fp, r3, r2
 801b37c:	011b      	lsls	r3, r3, #4
 801b37e:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801b382:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 801b386:	eba3 030b 	sub.w	r3, r3, fp
 801b38a:	b292      	uxth	r2, r2
 801b38c:	b29b      	uxth	r3, r3
 801b38e:	eba9 0902 	sub.w	r9, r9, r2
 801b392:	9304      	str	r3, [sp, #16]
 801b394:	fa1f f989 	uxth.w	r9, r9
 801b398:	fb03 f808 	mul.w	r8, r3, r8
 801b39c:	9b01      	ldr	r3, [sp, #4]
 801b39e:	fb09 8803 	mla	r8, r9, r3, r8
 801b3a2:	9b04      	ldr	r3, [sp, #16]
 801b3a4:	fb03 fc0c 	mul.w	ip, r3, ip
 801b3a8:	9b02      	ldr	r3, [sp, #8]
 801b3aa:	fb02 880e 	mla	r8, r2, lr, r8
 801b3ae:	fb09 cc03 	mla	ip, r9, r3, ip
 801b3b2:	9b04      	ldr	r3, [sp, #16]
 801b3b4:	fb0b 8805 	mla	r8, fp, r5, r8
 801b3b8:	fb02 c707 	mla	r7, r2, r7, ip
 801b3bc:	fb03 f30a 	mul.w	r3, r3, sl
 801b3c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b3c4:	fb0b 7404 	mla	r4, fp, r4, r7
 801b3c8:	f881 8000 	strb.w	r8, [r1]
 801b3cc:	1224      	asrs	r4, r4, #8
 801b3ce:	704c      	strb	r4, [r1, #1]
 801b3d0:	9c03      	ldr	r4, [sp, #12]
 801b3d2:	fb09 3904 	mla	r9, r9, r4, r3
 801b3d6:	fb02 9206 	mla	r2, r2, r6, r9
 801b3da:	fb0b 2000 	mla	r0, fp, r0, r2
 801b3de:	1200      	asrs	r0, r0, #8
 801b3e0:	7088      	strb	r0, [r1, #2]
 801b3e2:	b007      	add	sp, #28
 801b3e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3e8:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801b3ec:	9501      	str	r5, [sp, #4]
 801b3ee:	e78c      	b.n	801b30a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801b3f0:	4682      	mov	sl, r0
 801b3f2:	46a4      	mov	ip, r4
 801b3f4:	46a8      	mov	r8, r5
 801b3f6:	9501      	str	r5, [sp, #4]
 801b3f8:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801b3fc:	e793      	b.n	801b326 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801b3fe:	4682      	mov	sl, r0
 801b400:	46a4      	mov	ip, r4
 801b402:	46a8      	mov	r8, r5
 801b404:	e78f      	b.n	801b326 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801b406:	4606      	mov	r6, r0
 801b408:	4627      	mov	r7, r4
 801b40a:	46ae      	mov	lr, r5
 801b40c:	e7a0      	b.n	801b350 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801b40e:	4606      	mov	r6, r0
 801b410:	4627      	mov	r7, r4
 801b412:	46ae      	mov	lr, r5
 801b414:	e7ac      	b.n	801b370 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801b416 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b41a:	b09b      	sub	sp, #108	; 0x6c
 801b41c:	920b      	str	r2, [sp, #44]	; 0x2c
 801b41e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801b420:	9019      	str	r0, [sp, #100]	; 0x64
 801b422:	9109      	str	r1, [sp, #36]	; 0x24
 801b424:	6850      	ldr	r0, [r2, #4]
 801b426:	9306      	str	r3, [sp, #24]
 801b428:	6812      	ldr	r2, [r2, #0]
 801b42a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801b42e:	e9dd b425 	ldrd	fp, r4, [sp, #148]	; 0x94
 801b432:	fb00 1303 	mla	r3, r0, r3, r1
 801b436:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b43a:	18d3      	adds	r3, r2, r3
 801b43c:	9307      	str	r3, [sp, #28]
 801b43e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	9308      	str	r3, [sp, #32]
 801b444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b446:	2b00      	cmp	r3, #0
 801b448:	dc03      	bgt.n	801b452 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	f340 81ab 	ble.w	801b7a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b452:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b454:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b458:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b45c:	1e48      	subs	r0, r1, #1
 801b45e:	1e55      	subs	r5, r2, #1
 801b460:	9b06      	ldr	r3, [sp, #24]
 801b462:	2b00      	cmp	r3, #0
 801b464:	f340 80b1 	ble.w	801b5ca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801b468:	ea5f 462b 	movs.w	r6, fp, asr #16
 801b46c:	ea4f 4324 	mov.w	r3, r4, asr #16
 801b470:	d406      	bmi.n	801b480 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b472:	4286      	cmp	r6, r0
 801b474:	da04      	bge.n	801b480 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b476:	2b00      	cmp	r3, #0
 801b478:	db02      	blt.n	801b480 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b47a:	42ab      	cmp	r3, r5
 801b47c:	f2c0 80a6 	blt.w	801b5cc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801b480:	3601      	adds	r6, #1
 801b482:	f100 8097 	bmi.w	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b486:	42b1      	cmp	r1, r6
 801b488:	f2c0 8094 	blt.w	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b48c:	3301      	adds	r3, #1
 801b48e:	f100 8091 	bmi.w	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b492:	429a      	cmp	r2, r3
 801b494:	f2c0 808e 	blt.w	801b5b4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801b498:	9b06      	ldr	r3, [sp, #24]
 801b49a:	9e07      	ldr	r6, [sp, #28]
 801b49c:	930a      	str	r3, [sp, #40]	; 0x28
 801b49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	f340 80b0 	ble.w	801b606 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b4a6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801b4a8:	1425      	asrs	r5, r4, #16
 801b4aa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801b4ac:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801b4b0:	68c7      	ldr	r7, [r0, #12]
 801b4b2:	ea5f 402b 	movs.w	r0, fp, asr #16
 801b4b6:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801b4ba:	689b      	ldr	r3, [r3, #8]
 801b4bc:	f100 80ea 	bmi.w	801b694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b4c0:	f103 3cff 	add.w	ip, r3, #4294967295
 801b4c4:	4560      	cmp	r0, ip
 801b4c6:	f280 80e5 	bge.w	801b694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b4ca:	2d00      	cmp	r5, #0
 801b4cc:	f2c0 80e2 	blt.w	801b694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b4d0:	f107 3cff 	add.w	ip, r7, #4294967295
 801b4d4:	4565      	cmp	r5, ip
 801b4d6:	f280 80dd 	bge.w	801b694 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b4da:	b21b      	sxth	r3, r3
 801b4dc:	fb05 0003 	mla	r0, r5, r3, r0
 801b4e0:	9d08      	ldr	r5, [sp, #32]
 801b4e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b4e6:	182f      	adds	r7, r5, r0
 801b4e8:	5c2d      	ldrb	r5, [r5, r0]
 801b4ea:	7878      	ldrb	r0, [r7, #1]
 801b4ec:	f897 e002 	ldrb.w	lr, [r7, #2]
 801b4f0:	900c      	str	r0, [sp, #48]	; 0x30
 801b4f2:	f897 9003 	ldrb.w	r9, [r7, #3]
 801b4f6:	f897 8004 	ldrb.w	r8, [r7, #4]
 801b4fa:	f897 a005 	ldrb.w	sl, [r7, #5]
 801b4fe:	b1c9      	cbz	r1, 801b534 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801b500:	f04f 0c03 	mov.w	ip, #3
 801b504:	f06f 0004 	mvn.w	r0, #4
 801b508:	3705      	adds	r7, #5
 801b50a:	fb13 030c 	smlabb	r3, r3, ip, r0
 801b50e:	eb07 0c03 	add.w	ip, r7, r3
 801b512:	5cfb      	ldrb	r3, [r7, r3]
 801b514:	930d      	str	r3, [sp, #52]	; 0x34
 801b516:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b51a:	930f      	str	r3, [sp, #60]	; 0x3c
 801b51c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801b520:	9311      	str	r3, [sp, #68]	; 0x44
 801b522:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801b526:	930e      	str	r3, [sp, #56]	; 0x38
 801b528:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801b52c:	9310      	str	r3, [sp, #64]	; 0x40
 801b52e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801b532:	9312      	str	r3, [sp, #72]	; 0x48
 801b534:	b292      	uxth	r2, r2
 801b536:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b538:	b289      	uxth	r1, r1
 801b53a:	fb02 f301 	mul.w	r3, r2, r1
 801b53e:	0112      	lsls	r2, r2, #4
 801b540:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801b544:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801b548:	1ad2      	subs	r2, r2, r3
 801b54a:	b289      	uxth	r1, r1
 801b54c:	b292      	uxth	r2, r2
 801b54e:	1a7f      	subs	r7, r7, r1
 801b550:	fb02 f909 	mul.w	r9, r2, r9
 801b554:	b2bf      	uxth	r7, r7
 801b556:	fb02 f808 	mul.w	r8, r2, r8
 801b55a:	fb02 fa0a 	mul.w	sl, r2, sl
 801b55e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801b560:	fb07 9905 	mla	r9, r7, r5, r9
 801b564:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b566:	fb07 8800 	mla	r8, r7, r0, r8
 801b56a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801b56c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801b570:	fb01 9905 	mla	r9, r1, r5, r9
 801b574:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b576:	fb01 8800 	mla	r8, r1, r0, r8
 801b57a:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b57c:	fb01 a102 	mla	r1, r1, r2, sl
 801b580:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801b582:	fb03 9905 	mla	r9, r3, r5, r9
 801b586:	fb03 8800 	mla	r8, r3, r0, r8
 801b58a:	fb03 1302 	mla	r3, r3, r2, r1
 801b58e:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b592:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b596:	121b      	asrs	r3, r3, #8
 801b598:	f886 9000 	strb.w	r9, [r6]
 801b59c:	f886 8001 	strb.w	r8, [r6, #1]
 801b5a0:	70b3      	strb	r3, [r6, #2]
 801b5a2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b5a4:	3603      	adds	r6, #3
 801b5a6:	449b      	add	fp, r3
 801b5a8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5aa:	441c      	add	r4, r3
 801b5ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b5ae:	3b01      	subs	r3, #1
 801b5b0:	930a      	str	r3, [sp, #40]	; 0x28
 801b5b2:	e774      	b.n	801b49e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801b5b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b5b6:	449b      	add	fp, r3
 801b5b8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b5ba:	441c      	add	r4, r3
 801b5bc:	9b06      	ldr	r3, [sp, #24]
 801b5be:	3b01      	subs	r3, #1
 801b5c0:	9306      	str	r3, [sp, #24]
 801b5c2:	9b07      	ldr	r3, [sp, #28]
 801b5c4:	3303      	adds	r3, #3
 801b5c6:	9307      	str	r3, [sp, #28]
 801b5c8:	e74a      	b.n	801b460 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801b5ca:	d024      	beq.n	801b616 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801b5cc:	9b06      	ldr	r3, [sp, #24]
 801b5ce:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801b5d0:	3b01      	subs	r3, #1
 801b5d2:	fb00 b003 	mla	r0, r0, r3, fp
 801b5d6:	1400      	asrs	r0, r0, #16
 801b5d8:	f53f af5e 	bmi.w	801b498 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b5dc:	3901      	subs	r1, #1
 801b5de:	4288      	cmp	r0, r1
 801b5e0:	f6bf af5a 	bge.w	801b498 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b5e4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801b5e6:	fb01 4303 	mla	r3, r1, r3, r4
 801b5ea:	141b      	asrs	r3, r3, #16
 801b5ec:	f53f af54 	bmi.w	801b498 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b5f0:	3a01      	subs	r2, #1
 801b5f2:	4293      	cmp	r3, r2
 801b5f4:	f6bf af50 	bge.w	801b498 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801b5f8:	9b07      	ldr	r3, [sp, #28]
 801b5fa:	f8dd e018 	ldr.w	lr, [sp, #24]
 801b5fe:	1cde      	adds	r6, r3, #3
 801b600:	f1be 0f00 	cmp.w	lr, #0
 801b604:	dc5f      	bgt.n	801b6c6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b606:	9b06      	ldr	r3, [sp, #24]
 801b608:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b60c:	9b07      	ldr	r3, [sp, #28]
 801b60e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b612:	4423      	add	r3, r4
 801b614:	9307      	str	r3, [sp, #28]
 801b616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b618:	2b00      	cmp	r3, #0
 801b61a:	f340 80c5 	ble.w	801b7a8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801b61e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b622:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b624:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b628:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b62c:	eef0 6a62 	vmov.f32	s13, s5
 801b630:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b634:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b638:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b63c:	ee16 ba90 	vmov	fp, s13
 801b640:	eef0 6a43 	vmov.f32	s13, s6
 801b644:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b648:	ee16 4a90 	vmov	r4, s13
 801b64c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b650:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b654:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b658:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b65c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b660:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b664:	ee12 2a90 	vmov	r2, s5
 801b668:	eef0 2a47 	vmov.f32	s5, s14
 801b66c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b670:	ee13 2a10 	vmov	r2, s6
 801b674:	9327      	str	r3, [sp, #156]	; 0x9c
 801b676:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b678:	eeb0 3a67 	vmov.f32	s6, s15
 801b67c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b680:	9328      	str	r3, [sp, #160]	; 0xa0
 801b682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b686:	3b01      	subs	r3, #1
 801b688:	9309      	str	r3, [sp, #36]	; 0x24
 801b68a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b68c:	bf08      	it	eq
 801b68e:	4613      	moveq	r3, r2
 801b690:	9306      	str	r3, [sp, #24]
 801b692:	e6d7      	b.n	801b444 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b694:	f110 0c01 	adds.w	ip, r0, #1
 801b698:	d483      	bmi.n	801b5a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b69a:	4563      	cmp	r3, ip
 801b69c:	db81      	blt.n	801b5a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b69e:	f115 0c01 	adds.w	ip, r5, #1
 801b6a2:	f53f af7e 	bmi.w	801b5a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b6a6:	4567      	cmp	r7, ip
 801b6a8:	f6ff af7b 	blt.w	801b5a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b6ac:	b23f      	sxth	r7, r7
 801b6ae:	b21b      	sxth	r3, r3
 801b6b0:	9700      	str	r7, [sp, #0]
 801b6b2:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801b6b6:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801b6ba:	9a08      	ldr	r2, [sp, #32]
 801b6bc:	4631      	mov	r1, r6
 801b6be:	9819      	ldr	r0, [sp, #100]	; 0x64
 801b6c0:	f7ff fdf9 	bl	801b2b6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801b6c4:	e76d      	b.n	801b5a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801b6c6:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801b6c8:	ea4f 402b 	mov.w	r0, fp, asr #16
 801b6cc:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801b6d0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801b6d4:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801b6d8:	1421      	asrs	r1, r4, #16
 801b6da:	930a      	str	r3, [sp, #40]	; 0x28
 801b6dc:	fb0c 0101 	mla	r1, ip, r1, r0
 801b6e0:	9808      	ldr	r0, [sp, #32]
 801b6e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801b6e6:	1845      	adds	r5, r0, r1
 801b6e8:	5c40      	ldrb	r0, [r0, r1]
 801b6ea:	796f      	ldrb	r7, [r5, #5]
 801b6ec:	7869      	ldrb	r1, [r5, #1]
 801b6ee:	f895 8002 	ldrb.w	r8, [r5, #2]
 801b6f2:	f895 a003 	ldrb.w	sl, [r5, #3]
 801b6f6:	f895 9004 	ldrb.w	r9, [r5, #4]
 801b6fa:	970c      	str	r7, [sp, #48]	; 0x30
 801b6fc:	b1a2      	cbz	r2, 801b728 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801b6fe:	2703      	movs	r7, #3
 801b700:	f06f 0304 	mvn.w	r3, #4
 801b704:	3505      	adds	r5, #5
 801b706:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801b70a:	eb05 070c 	add.w	r7, r5, ip
 801b70e:	f815 500c 	ldrb.w	r5, [r5, ip]
 801b712:	9513      	str	r5, [sp, #76]	; 0x4c
 801b714:	787d      	ldrb	r5, [r7, #1]
 801b716:	9515      	str	r5, [sp, #84]	; 0x54
 801b718:	78bd      	ldrb	r5, [r7, #2]
 801b71a:	9517      	str	r5, [sp, #92]	; 0x5c
 801b71c:	78fd      	ldrb	r5, [r7, #3]
 801b71e:	9514      	str	r5, [sp, #80]	; 0x50
 801b720:	793d      	ldrb	r5, [r7, #4]
 801b722:	9516      	str	r5, [sp, #88]	; 0x58
 801b724:	797d      	ldrb	r5, [r7, #5]
 801b726:	9518      	str	r5, [sp, #96]	; 0x60
 801b728:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801b72c:	b292      	uxth	r2, r2
 801b72e:	3603      	adds	r6, #3
 801b730:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b734:	fb03 f502 	mul.w	r5, r3, r2
 801b738:	011b      	lsls	r3, r3, #4
 801b73a:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801b73e:	f5c3 7780 	rsb	r7, r3, #256	; 0x100
 801b742:	1b5b      	subs	r3, r3, r5
 801b744:	b292      	uxth	r2, r2
 801b746:	b29b      	uxth	r3, r3
 801b748:	1abf      	subs	r7, r7, r2
 801b74a:	fb03 f909 	mul.w	r9, r3, r9
 801b74e:	b2bf      	uxth	r7, r7
 801b750:	fb03 fa0a 	mul.w	sl, r3, sl
 801b754:	fb07 9901 	mla	r9, r7, r1, r9
 801b758:	9915      	ldr	r1, [sp, #84]	; 0x54
 801b75a:	fb07 aa00 	mla	sl, r7, r0, sl
 801b75e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801b760:	fb02 9901 	mla	r9, r2, r1, r9
 801b764:	9916      	ldr	r1, [sp, #88]	; 0x58
 801b766:	fb02 aa00 	mla	sl, r2, r0, sl
 801b76a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801b76c:	fb05 9901 	mla	r9, r5, r1, r9
 801b770:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b772:	fb05 aa00 	mla	sl, r5, r0, sl
 801b776:	434b      	muls	r3, r1
 801b778:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801b77a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b77e:	fb07 3308 	mla	r3, r7, r8, r3
 801b782:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b786:	f806 ac06 	strb.w	sl, [r6, #-6]
 801b78a:	fb02 3201 	mla	r2, r2, r1, r3
 801b78e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b790:	f806 9c05 	strb.w	r9, [r6, #-5]
 801b794:	fb05 2503 	mla	r5, r5, r3, r2
 801b798:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801b79a:	122d      	asrs	r5, r5, #8
 801b79c:	449b      	add	fp, r3
 801b79e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801b7a0:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b7a4:	441c      	add	r4, r3
 801b7a6:	e72b      	b.n	801b600 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801b7a8:	b01b      	add	sp, #108	; 0x6c
 801b7aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801b7ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7b2:	b087      	sub	sp, #28
 801b7b4:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801b7b8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801b7bc:	fb05 7003 	mla	r0, r5, r3, r7
 801b7c0:	2d00      	cmp	r5, #0
 801b7c2:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801b7c6:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801b7ca:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801b7ce:	f2c0 811f 	blt.w	801ba10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b7d2:	45a8      	cmp	r8, r5
 801b7d4:	f340 811c 	ble.w	801ba10 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801b7d8:	2f00      	cmp	r7, #0
 801b7da:	f2c0 8117 	blt.w	801ba0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b7de:	42bb      	cmp	r3, r7
 801b7e0:	f340 8114 	ble.w	801ba0c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801b7e4:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801b7e8:	1c7a      	adds	r2, r7, #1
 801b7ea:	f100 8114 	bmi.w	801ba16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b7ee:	4293      	cmp	r3, r2
 801b7f0:	f340 8111 	ble.w	801ba16 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801b7f4:	2c00      	cmp	r4, #0
 801b7f6:	f000 8110 	beq.w	801ba1a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801b7fa:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801b7fe:	3501      	adds	r5, #1
 801b800:	f100 810f 	bmi.w	801ba22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b804:	45a8      	cmp	r8, r5
 801b806:	f340 810c 	ble.w	801ba22 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801b80a:	f1be 0f00 	cmp.w	lr, #0
 801b80e:	f000 810b 	beq.w	801ba28 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801b812:	2f00      	cmp	r7, #0
 801b814:	f2c0 8103 	blt.w	801ba1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b818:	42bb      	cmp	r3, r7
 801b81a:	f340 8100 	ble.w	801ba1e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801b81e:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801b822:	3701      	adds	r7, #1
 801b824:	f100 8103 	bmi.w	801ba2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b828:	42bb      	cmp	r3, r7
 801b82a:	f340 8100 	ble.w	801ba2e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801b82e:	2c00      	cmp	r4, #0
 801b830:	f000 80ff 	beq.w	801ba32 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801b834:	3301      	adds	r3, #1
 801b836:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801b83a:	fa1f fc84 	uxth.w	ip, r4
 801b83e:	fa1f fe8e 	uxth.w	lr, lr
 801b842:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801b846:	fb0c f90e 	mul.w	r9, ip, lr
 801b84a:	0e13      	lsrs	r3, r2, #24
 801b84c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b850:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801b854:	9302      	str	r3, [sp, #8]
 801b856:	ebac 0709 	sub.w	r7, ip, r9
 801b85a:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801b85e:	fa1f f48e 	uxth.w	r4, lr
 801b862:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801b866:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801b86a:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801b86e:	fb0a fe0e 	mul.w	lr, sl, lr
 801b872:	1b1b      	subs	r3, r3, r4
 801b874:	fb0a f606 	mul.w	r6, sl, r6
 801b878:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801b87c:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801b880:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801b884:	b29b      	uxth	r3, r3
 801b886:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b88a:	b2bf      	uxth	r7, r7
 801b88c:	9301      	str	r3, [sp, #4]
 801b88e:	44e6      	add	lr, ip
 801b890:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801b894:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b898:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b89c:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801b8a0:	9303      	str	r3, [sp, #12]
 801b8a2:	0a33      	lsrs	r3, r6, #8
 801b8a4:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801b8a8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b8ac:	9304      	str	r3, [sp, #16]
 801b8ae:	fb0b f606 	mul.w	r6, fp, r6
 801b8b2:	fb0b f000 	mul.w	r0, fp, r0
 801b8b6:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801b8ba:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b8be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b8c2:	44b6      	add	lr, r6
 801b8c4:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801b8c8:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801b8cc:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801b8d0:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801b8d4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b8d8:	fb08 f606 	mul.w	r6, r8, r6
 801b8dc:	0a03      	lsrs	r3, r0, #8
 801b8de:	fb08 f505 	mul.w	r5, r8, r5
 801b8e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801b8e6:	0a30      	lsrs	r0, r6, #8
 801b8e8:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b8ec:	9305      	str	r3, [sp, #20]
 801b8ee:	0e13      	lsrs	r3, r2, #24
 801b8f0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b8f4:	fb0e fe07 	mul.w	lr, lr, r7
 801b8f8:	4430      	add	r0, r6
 801b8fa:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801b8fe:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801b902:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801b906:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b90a:	0a00      	lsrs	r0, r0, #8
 801b90c:	435e      	muls	r6, r3
 801b90e:	0a2d      	lsrs	r5, r5, #8
 801b910:	435a      	muls	r2, r3
 801b912:	9b03      	ldr	r3, [sp, #12]
 801b914:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801b918:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801b91c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801b920:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b924:	44b4      	add	ip, r6
 801b926:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801b92a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b92e:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801b932:	9e01      	ldr	r6, [sp, #4]
 801b934:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801b938:	fb03 ee06 	mla	lr, r3, r6, lr
 801b93c:	9b04      	ldr	r3, [sp, #16]
 801b93e:	0a12      	lsrs	r2, r2, #8
 801b940:	fb0c ee09 	mla	lr, ip, r9, lr
 801b944:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801b948:	9b05      	ldr	r3, [sp, #20]
 801b94a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801b94e:	fb00 ee04 	mla	lr, r0, r4, lr
 801b952:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b956:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801b95a:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801b95e:	9b01      	ldr	r3, [sp, #4]
 801b960:	fb07 fe0e 	mul.w	lr, r7, lr
 801b964:	fb07 f70b 	mul.w	r7, r7, fp
 801b968:	fb03 ee06 	mla	lr, r3, r6, lr
 801b96c:	fb03 730a 	mla	r3, r3, sl, r7
 801b970:	fb09 e202 	mla	r2, r9, r2, lr
 801b974:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801b978:	fb04 2e0e 	mla	lr, r4, lr, r2
 801b97c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 801b980:	fb04 3408 	mla	r4, r4, r8, r3
 801b984:	9b02      	ldr	r3, [sp, #8]
 801b986:	b292      	uxth	r2, r2
 801b988:	fb09 4903 	mla	r9, r9, r3, r4
 801b98c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b990:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b994:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801b998:	fb09 f902 	mul.w	r9, r9, r2
 801b99c:	ea40 0e0e 	orr.w	lr, r0, lr
 801b9a0:	f109 0301 	add.w	r3, r9, #1
 801b9a4:	fa5f f08e 	uxtb.w	r0, lr
 801b9a8:	fb10 f002 	smulbb	r0, r0, r2
 801b9ac:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801b9b0:	780b      	ldrb	r3, [r1, #0]
 801b9b2:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801b9b6:	fa5f f989 	uxtb.w	r9, r9
 801b9ba:	fb03 0309 	mla	r3, r3, r9, r0
 801b9be:	b29b      	uxth	r3, r3
 801b9c0:	1c58      	adds	r0, r3, #1
 801b9c2:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b9c6:	7848      	ldrb	r0, [r1, #1]
 801b9c8:	fb10 f009 	smulbb	r0, r0, r9
 801b9cc:	121b      	asrs	r3, r3, #8
 801b9ce:	700b      	strb	r3, [r1, #0]
 801b9d0:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801b9d4:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801b9d8:	fb03 0302 	mla	r3, r3, r2, r0
 801b9dc:	b29b      	uxth	r3, r3
 801b9de:	1c58      	adds	r0, r3, #1
 801b9e0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801b9e4:	121b      	asrs	r3, r3, #8
 801b9e6:	704b      	strb	r3, [r1, #1]
 801b9e8:	788b      	ldrb	r3, [r1, #2]
 801b9ea:	fb13 f909 	smulbb	r9, r3, r9
 801b9ee:	fb0e 9e02 	mla	lr, lr, r2, r9
 801b9f2:	fa1f fe8e 	uxth.w	lr, lr
 801b9f6:	f10e 0301 	add.w	r3, lr, #1
 801b9fa:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801b9fe:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ba02:	f881 e002 	strb.w	lr, [r1, #2]
 801ba06:	b007      	add	sp, #28
 801ba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba0c:	2600      	movs	r6, #0
 801ba0e:	e6eb      	b.n	801b7e8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801ba10:	2000      	movs	r0, #0
 801ba12:	4606      	mov	r6, r0
 801ba14:	e6f3      	b.n	801b7fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ba16:	2000      	movs	r0, #0
 801ba18:	e6f1      	b.n	801b7fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ba1a:	4620      	mov	r0, r4
 801ba1c:	e6ef      	b.n	801b7fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801ba1e:	2500      	movs	r5, #0
 801ba20:	e6ff      	b.n	801b822 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801ba22:	2200      	movs	r2, #0
 801ba24:	4615      	mov	r5, r2
 801ba26:	e708      	b.n	801b83a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ba28:	4672      	mov	r2, lr
 801ba2a:	4675      	mov	r5, lr
 801ba2c:	e705      	b.n	801b83a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ba2e:	2200      	movs	r2, #0
 801ba30:	e703      	b.n	801b83a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801ba32:	4622      	mov	r2, r4
 801ba34:	e701      	b.n	801b83a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801ba36 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba3a:	b09d      	sub	sp, #116	; 0x74
 801ba3c:	9219      	str	r2, [sp, #100]	; 0x64
 801ba3e:	9307      	str	r3, [sp, #28]
 801ba40:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801ba42:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801ba46:	901b      	str	r0, [sp, #108]	; 0x6c
 801ba48:	931a      	str	r3, [sp, #104]	; 0x68
 801ba4a:	6850      	ldr	r0, [r2, #4]
 801ba4c:	9117      	str	r1, [sp, #92]	; 0x5c
 801ba4e:	6812      	ldr	r2, [r2, #0]
 801ba50:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801ba54:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	; 0x9c
 801ba58:	fb00 1303 	mla	r3, r0, r3, r1
 801ba5c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ba60:	18d3      	adds	r3, r2, r3
 801ba62:	930a      	str	r3, [sp, #40]	; 0x28
 801ba64:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba66:	681b      	ldr	r3, [r3, #0]
 801ba68:	9310      	str	r3, [sp, #64]	; 0x40
 801ba6a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801ba6e:	930b      	str	r3, [sp, #44]	; 0x2c
 801ba70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	dc03      	bgt.n	801ba7e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ba76:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	f340 8368 	ble.w	801c14e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801ba7e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801ba80:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ba84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ba88:	1e48      	subs	r0, r1, #1
 801ba8a:	1e57      	subs	r7, r2, #1
 801ba8c:	9b07      	ldr	r3, [sp, #28]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	f340 8187 	ble.w	801bda2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801ba94:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ba98:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ba9c:	d406      	bmi.n	801baac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ba9e:	4584      	cmp	ip, r0
 801baa0:	da04      	bge.n	801baac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801baa2:	2b00      	cmp	r3, #0
 801baa4:	db02      	blt.n	801baac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801baa6:	42bb      	cmp	r3, r7
 801baa8:	f2c0 817c 	blt.w	801bda4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801baac:	f11c 0c01 	adds.w	ip, ip, #1
 801bab0:	f100 816c 	bmi.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801bab4:	4561      	cmp	r1, ip
 801bab6:	f2c0 8169 	blt.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801baba:	3301      	adds	r3, #1
 801babc:	f100 8166 	bmi.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801bac0:	429a      	cmp	r2, r3
 801bac2:	f2c0 8163 	blt.w	801bd8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801bac6:	9b07      	ldr	r3, [sp, #28]
 801bac8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801baca:	9318      	str	r3, [sp, #96]	; 0x60
 801bacc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bace:	2b00      	cmp	r3, #0
 801bad0:	f340 8186 	ble.w	801bde0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801bad4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bad6:	142a      	asrs	r2, r5, #16
 801bad8:	ea4f 4026 	mov.w	r0, r6, asr #16
 801badc:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bae0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801bae4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801bae8:	f100 81cb 	bmi.w	801be82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801baec:	f10e 38ff 	add.w	r8, lr, #4294967295
 801baf0:	4542      	cmp	r2, r8
 801baf2:	f280 81c6 	bge.w	801be82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801baf6:	2800      	cmp	r0, #0
 801baf8:	f2c0 81c3 	blt.w	801be82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801bafc:	f103 38ff 	add.w	r8, r3, #4294967295
 801bb00:	4540      	cmp	r0, r8
 801bb02:	f280 81be 	bge.w	801be82 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801bb06:	fa0f f38e 	sxth.w	r3, lr
 801bb0a:	fb00 2203 	mla	r2, r0, r3, r2
 801bb0e:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bb10:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801bb14:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801bb18:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801bb1c:	2900      	cmp	r1, #0
 801bb1e:	f000 81a6 	beq.w	801be6e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801bb22:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801bb26:	900c      	str	r0, [sp, #48]	; 0x30
 801bb28:	0e00      	lsrs	r0, r0, #24
 801bb2a:	9013      	str	r0, [sp, #76]	; 0x4c
 801bb2c:	f1bc 0f00 	cmp.w	ip, #0
 801bb30:	d00f      	beq.n	801bb52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801bb32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bb36:	3b01      	subs	r3, #1
 801bb38:	009b      	lsls	r3, r3, #2
 801bb3a:	3304      	adds	r3, #4
 801bb3c:	eb08 0003 	add.w	r0, r8, r3
 801bb40:	f858 3003 	ldr.w	r3, [r8, r3]
 801bb44:	9308      	str	r3, [sp, #32]
 801bb46:	0e1b      	lsrs	r3, r3, #24
 801bb48:	9311      	str	r3, [sp, #68]	; 0x44
 801bb4a:	6843      	ldr	r3, [r0, #4]
 801bb4c:	930d      	str	r3, [sp, #52]	; 0x34
 801bb4e:	0e1b      	lsrs	r3, r3, #24
 801bb50:	9314      	str	r3, [sp, #80]	; 0x50
 801bb52:	b289      	uxth	r1, r1
 801bb54:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bb56:	fa1f fc8c 	uxth.w	ip, ip
 801bb5a:	0108      	lsls	r0, r1, #4
 801bb5c:	fb01 f90c 	mul.w	r9, r1, ip
 801bb60:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801bb64:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801bb68:	eba0 0809 	sub.w	r8, r0, r9
 801bb6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bb6e:	fa1f f18c 	uxth.w	r1, ip
 801bb72:	fa1f f888 	uxth.w	r8, r8
 801bb76:	1a5b      	subs	r3, r3, r1
 801bb78:	fb08 f000 	mul.w	r0, r8, r0
 801bb7c:	b29b      	uxth	r3, r3
 801bb7e:	fb03 000e 	mla	r0, r3, lr, r0
 801bb82:	fb01 0004 	mla	r0, r1, r4, r0
 801bb86:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bb88:	fb09 0004 	mla	r0, r9, r4, r0
 801bb8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801bb90:	2800      	cmp	r0, #0
 801bb92:	f000 80f2 	beq.w	801bd7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bb96:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801bb9a:	d01b      	beq.n	801bbd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801bb9c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801bba0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bba4:	fb0e fa0a 	mul.w	sl, lr, sl
 801bba8:	fb0e fe02 	mul.w	lr, lr, r2
 801bbac:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801bbb0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bbb4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801bbb8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bbbc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801bbc0:	4452      	add	r2, sl
 801bbc2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bbc6:	0a12      	lsrs	r2, r2, #8
 801bbc8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801bbcc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801bbd0:	ea42 020c 	orr.w	r2, r2, ip
 801bbd4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bbd6:	2cff      	cmp	r4, #255	; 0xff
 801bbd8:	d021      	beq.n	801bc1e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801bbda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bbdc:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bbe0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bbe2:	fb04 fb0b 	mul.w	fp, r4, fp
 801bbe6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bbe8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bbec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801bbee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bbf2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bbf6:	fb04 fa0a 	mul.w	sl, r4, sl
 801bbfa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bbfe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bc02:	44de      	add	lr, fp
 801bc04:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bc08:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bc0c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bc14:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bc18:	ea4e 040a 	orr.w	r4, lr, sl
 801bc1c:	940c      	str	r4, [sp, #48]	; 0x30
 801bc1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bc20:	2cff      	cmp	r4, #255	; 0xff
 801bc22:	d021      	beq.n	801bc68 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801bc24:	9c08      	ldr	r4, [sp, #32]
 801bc26:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bc2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bc2c:	fb04 fb0b 	mul.w	fp, r4, fp
 801bc30:	9c08      	ldr	r4, [sp, #32]
 801bc32:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bc36:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bc38:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bc3c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bc40:	fb04 fa0a 	mul.w	sl, r4, sl
 801bc44:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bc48:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bc4c:	44de      	add	lr, fp
 801bc4e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bc52:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bc56:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc5a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bc5e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bc62:	ea4e 040a 	orr.w	r4, lr, sl
 801bc66:	9408      	str	r4, [sp, #32]
 801bc68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bc6a:	2cff      	cmp	r4, #255	; 0xff
 801bc6c:	d021      	beq.n	801bcb2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bc6e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bc70:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801bc74:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bc76:	fb04 fb0b 	mul.w	fp, r4, fp
 801bc7a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bc7c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bc80:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801bc82:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bc86:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801bc8a:	fb04 fa0a 	mul.w	sl, r4, sl
 801bc8e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bc92:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801bc96:	44de      	add	lr, fp
 801bc98:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bc9c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bca0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bca4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801bca8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bcac:	ea4e 040a 	orr.w	r4, lr, sl
 801bcb0:	940d      	str	r4, [sp, #52]	; 0x34
 801bcb2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bcb4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801bcb8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801bcbc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801bcc0:	9c08      	ldr	r4, [sp, #32]
 801bcc2:	fb08 fc0c 	mul.w	ip, r8, ip
 801bcc6:	fb03 cc0e 	mla	ip, r3, lr, ip
 801bcca:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bcce:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801bcd0:	fb01 cc0e 	mla	ip, r1, lr, ip
 801bcd4:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801bcd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801bcda:	fb09 cc0e 	mla	ip, r9, lr, ip
 801bcde:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801bce2:	fb08 f80e 	mul.w	r8, r8, lr
 801bce6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bcea:	fb03 8202 	mla	r2, r3, r2, r8
 801bcee:	9b08      	ldr	r3, [sp, #32]
 801bcf0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bcf4:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801bcf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcfa:	fb01 220a 	mla	r2, r1, sl, r2
 801bcfe:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801bd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bd04:	fb09 2901 	mla	r9, r9, r1, r2
 801bd08:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801bd0a:	4343      	muls	r3, r0
 801bd0c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bd10:	1c58      	adds	r0, r3, #1
 801bd12:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801bd16:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bd1a:	783b      	ldrb	r3, [r7, #0]
 801bd1c:	ea4c 0c09 	orr.w	ip, ip, r9
 801bd20:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801bd24:	fa5f f28c 	uxtb.w	r2, ip
 801bd28:	b2c0      	uxtb	r0, r0
 801bd2a:	fb12 f201 	smulbb	r2, r2, r1
 801bd2e:	fb03 2300 	mla	r3, r3, r0, r2
 801bd32:	b29b      	uxth	r3, r3
 801bd34:	1c5a      	adds	r2, r3, #1
 801bd36:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bd3a:	787a      	ldrb	r2, [r7, #1]
 801bd3c:	fb12 f200 	smulbb	r2, r2, r0
 801bd40:	121b      	asrs	r3, r3, #8
 801bd42:	703b      	strb	r3, [r7, #0]
 801bd44:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801bd48:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801bd4c:	fb03 2301 	mla	r3, r3, r1, r2
 801bd50:	b29b      	uxth	r3, r3
 801bd52:	1c5a      	adds	r2, r3, #1
 801bd54:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bd58:	121b      	asrs	r3, r3, #8
 801bd5a:	707b      	strb	r3, [r7, #1]
 801bd5c:	78bb      	ldrb	r3, [r7, #2]
 801bd5e:	fb13 f000 	smulbb	r0, r3, r0
 801bd62:	fb0c 0c01 	mla	ip, ip, r1, r0
 801bd66:	fa1f fc8c 	uxth.w	ip, ip
 801bd6a:	f10c 0301 	add.w	r3, ip, #1
 801bd6e:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801bd72:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801bd76:	f887 c002 	strb.w	ip, [r7, #2]
 801bd7a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bd7c:	3703      	adds	r7, #3
 801bd7e:	441d      	add	r5, r3
 801bd80:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bd82:	441e      	add	r6, r3
 801bd84:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bd86:	3b01      	subs	r3, #1
 801bd88:	9318      	str	r3, [sp, #96]	; 0x60
 801bd8a:	e69f      	b.n	801bacc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801bd8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801bd8e:	441d      	add	r5, r3
 801bd90:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bd92:	441e      	add	r6, r3
 801bd94:	9b07      	ldr	r3, [sp, #28]
 801bd96:	3b01      	subs	r3, #1
 801bd98:	9307      	str	r3, [sp, #28]
 801bd9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bd9c:	3303      	adds	r3, #3
 801bd9e:	930a      	str	r3, [sp, #40]	; 0x28
 801bda0:	e674      	b.n	801ba8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801bda2:	d025      	beq.n	801bdf0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801bda4:	9b07      	ldr	r3, [sp, #28]
 801bda6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801bda8:	3b01      	subs	r3, #1
 801bdaa:	fb00 5003 	mla	r0, r0, r3, r5
 801bdae:	1400      	asrs	r0, r0, #16
 801bdb0:	f53f ae89 	bmi.w	801bac6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bdb4:	3901      	subs	r1, #1
 801bdb6:	4288      	cmp	r0, r1
 801bdb8:	f6bf ae85 	bge.w	801bac6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bdbc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801bdbe:	fb01 6303 	mla	r3, r1, r3, r6
 801bdc2:	141b      	asrs	r3, r3, #16
 801bdc4:	f53f ae7f 	bmi.w	801bac6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bdc8:	3a01      	subs	r2, #1
 801bdca:	4293      	cmp	r3, r2
 801bdcc:	f6bf ae7b 	bge.w	801bac6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801bdd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bdd2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801bdd6:	f103 0e03 	add.w	lr, r3, #3
 801bdda:	f1bb 0f00 	cmp.w	fp, #0
 801bdde:	dc6e      	bgt.n	801bebe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801bde0:	9b07      	ldr	r3, [sp, #28]
 801bde2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801bde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bde8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bdec:	4423      	add	r3, r4
 801bdee:	930a      	str	r3, [sp, #40]	; 0x28
 801bdf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	f340 81ab 	ble.w	801c14e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801bdf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bdfc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801bdfe:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be02:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be06:	eef0 6a62 	vmov.f32	s13, s5
 801be0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801be0e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be12:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be16:	ee16 5a90 	vmov	r5, s13
 801be1a:	eef0 6a43 	vmov.f32	s13, s6
 801be1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801be22:	ee16 6a90 	vmov	r6, s13
 801be26:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be2a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be2e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be32:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be36:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be3a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be3e:	ee12 2a90 	vmov	r2, s5
 801be42:	eef0 2a47 	vmov.f32	s5, s14
 801be46:	fb92 f3f3 	sdiv	r3, r2, r3
 801be4a:	ee13 2a10 	vmov	r2, s6
 801be4e:	9329      	str	r3, [sp, #164]	; 0xa4
 801be50:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801be52:	eeb0 3a67 	vmov.f32	s6, s15
 801be56:	fb92 f3f3 	sdiv	r3, r2, r3
 801be5a:	932a      	str	r3, [sp, #168]	; 0xa8
 801be5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801be5e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801be60:	3b01      	subs	r3, #1
 801be62:	9317      	str	r3, [sp, #92]	; 0x5c
 801be64:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801be66:	bf08      	it	eq
 801be68:	4613      	moveq	r3, r2
 801be6a:	9307      	str	r3, [sp, #28]
 801be6c:	e600      	b.n	801ba70 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801be6e:	f1bc 0f00 	cmp.w	ip, #0
 801be72:	f43f ae6e 	beq.w	801bb52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801be76:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801be7a:	9308      	str	r3, [sp, #32]
 801be7c:	0e1b      	lsrs	r3, r3, #24
 801be7e:	9311      	str	r3, [sp, #68]	; 0x44
 801be80:	e667      	b.n	801bb52 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801be82:	f112 0801 	adds.w	r8, r2, #1
 801be86:	f53f af78 	bmi.w	801bd7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801be8a:	45c6      	cmp	lr, r8
 801be8c:	f6ff af75 	blt.w	801bd7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801be90:	f110 0801 	adds.w	r8, r0, #1
 801be94:	f53f af71 	bmi.w	801bd7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801be98:	4543      	cmp	r3, r8
 801be9a:	f6ff af6e 	blt.w	801bd7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801be9e:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801bea0:	b21b      	sxth	r3, r3
 801bea2:	9201      	str	r2, [sp, #4]
 801bea4:	9300      	str	r3, [sp, #0]
 801bea6:	fa0f f38e 	sxth.w	r3, lr
 801beaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801beac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801beb0:	e9cd c404 	strd	ip, r4, [sp, #16]
 801beb4:	4639      	mov	r1, r7
 801beb6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801beb8:	f7ff fc79 	bl	801b7ae <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801bebc:	e75d      	b.n	801bd7a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801bebe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801bec0:	142f      	asrs	r7, r5, #16
 801bec2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801bec4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801bec8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801becc:	1433      	asrs	r3, r6, #16
 801bece:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801bed2:	fb02 7303 	mla	r3, r2, r3, r7
 801bed6:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801beda:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801bede:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801bee2:	2900      	cmp	r1, #0
 801bee4:	f000 812a 	beq.w	801c13c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801bee8:	687c      	ldr	r4, [r7, #4]
 801beea:	940e      	str	r4, [sp, #56]	; 0x38
 801beec:	0e24      	lsrs	r4, r4, #24
 801beee:	9415      	str	r4, [sp, #84]	; 0x54
 801bef0:	b178      	cbz	r0, 801bf12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801bef2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801bef6:	3a01      	subs	r2, #1
 801bef8:	0092      	lsls	r2, r2, #2
 801befa:	3204      	adds	r2, #4
 801befc:	eb07 0802 	add.w	r8, r7, r2
 801bf00:	58ba      	ldr	r2, [r7, r2]
 801bf02:	9209      	str	r2, [sp, #36]	; 0x24
 801bf04:	0e12      	lsrs	r2, r2, #24
 801bf06:	9212      	str	r2, [sp, #72]	; 0x48
 801bf08:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801bf0c:	920f      	str	r2, [sp, #60]	; 0x3c
 801bf0e:	0e12      	lsrs	r2, r2, #24
 801bf10:	9216      	str	r2, [sp, #88]	; 0x58
 801bf12:	b289      	uxth	r1, r1
 801bf14:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bf16:	b280      	uxth	r0, r0
 801bf18:	fb01 f900 	mul.w	r9, r1, r0
 801bf1c:	0109      	lsls	r1, r1, #4
 801bf1e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801bf22:	eba1 0809 	sub.w	r8, r1, r9
 801bf26:	f5c1 7280 	rsb	r2, r1, #256	; 0x100
 801bf2a:	9915      	ldr	r1, [sp, #84]	; 0x54
 801bf2c:	b280      	uxth	r0, r0
 801bf2e:	fa1f f888 	uxth.w	r8, r8
 801bf32:	1a12      	subs	r2, r2, r0
 801bf34:	fb08 f101 	mul.w	r1, r8, r1
 801bf38:	b292      	uxth	r2, r2
 801bf3a:	fb02 110c 	mla	r1, r2, ip, r1
 801bf3e:	fb00 1104 	mla	r1, r0, r4, r1
 801bf42:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801bf44:	fb09 1104 	mla	r1, r9, r4, r1
 801bf48:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801bf4c:	2900      	cmp	r1, #0
 801bf4e:	f000 80ec 	beq.w	801c12a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801bf52:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801bf56:	d019      	beq.n	801bf8c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801bf58:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801bf5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801bf60:	fb0c fa0a 	mul.w	sl, ip, sl
 801bf64:	fb0c fc03 	mul.w	ip, ip, r3
 801bf68:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801bf6c:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801bf70:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801bf74:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bf78:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801bf7c:	4453      	add	r3, sl
 801bf7e:	0a3f      	lsrs	r7, r7, #8
 801bf80:	0a1b      	lsrs	r3, r3, #8
 801bf82:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801bf86:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801bf8a:	433b      	orrs	r3, r7
 801bf8c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bf8e:	2cff      	cmp	r4, #255	; 0xff
 801bf90:	d020      	beq.n	801bfd4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801bf92:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bf94:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bf98:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bf9a:	4367      	muls	r7, r4
 801bf9c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bf9e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bfa2:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bfa6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801bfa8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bfac:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bfb0:	fb04 fa0a 	mul.w	sl, r4, sl
 801bfb4:	44bc      	add	ip, r7
 801bfb6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801bfba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bfbe:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bfc2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bfc6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bfca:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801bfce:	ea4c 040a 	orr.w	r4, ip, sl
 801bfd2:	940e      	str	r4, [sp, #56]	; 0x38
 801bfd4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bfd6:	2cff      	cmp	r4, #255	; 0xff
 801bfd8:	d020      	beq.n	801c01c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801bfda:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bfdc:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801bfe0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bfe2:	4367      	muls	r7, r4
 801bfe4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801bfe6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bfea:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801bfee:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801bff0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801bff4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801bff8:	fb04 fa0a 	mul.w	sl, r4, sl
 801bffc:	44bc      	add	ip, r7
 801bffe:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c002:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c006:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c00a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c00e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c012:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c016:	ea4c 040a 	orr.w	r4, ip, sl
 801c01a:	9409      	str	r4, [sp, #36]	; 0x24
 801c01c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c01e:	2cff      	cmp	r4, #255	; 0xff
 801c020:	d020      	beq.n	801c064 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801c022:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c024:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c028:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c02a:	4367      	muls	r7, r4
 801c02c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c02e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c032:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c036:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c038:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801c03c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c040:	fb04 fa0a 	mul.w	sl, r4, sl
 801c044:	44bc      	add	ip, r7
 801c046:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801c04a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c04e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c052:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c056:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c05a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c05e:	ea4c 040a 	orr.w	r4, ip, sl
 801c062:	940f      	str	r4, [sp, #60]	; 0x3c
 801c064:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c066:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801c06a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c06e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801c072:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801c074:	fb08 f707 	mul.w	r7, r8, r7
 801c078:	fb02 770c 	mla	r7, r2, ip, r7
 801c07c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c080:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c082:	fb00 770c 	mla	r7, r0, ip, r7
 801c086:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c08a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c08c:	fb09 770c 	mla	r7, r9, ip, r7
 801c090:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801c094:	fb08 f80c 	mul.w	r8, r8, ip
 801c098:	0a3f      	lsrs	r7, r7, #8
 801c09a:	fb02 8303 	mla	r3, r2, r3, r8
 801c09e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c0a0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801c0a4:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c0a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c0aa:	fb00 330a 	mla	r3, r0, sl, r3
 801c0ae:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801c0b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801c0b4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c0b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0ba:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c0be:	434b      	muls	r3, r1
 801c0c0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c0c4:	1c59      	adds	r1, r3, #1
 801c0c6:	ea47 070c 	orr.w	r7, r7, ip
 801c0ca:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c0ce:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c0d2:	b2fa      	uxtb	r2, r7
 801c0d4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c0d8:	fb12 f200 	smulbb	r2, r2, r0
 801c0dc:	b2c9      	uxtb	r1, r1
 801c0de:	fb03 2301 	mla	r3, r3, r1, r2
 801c0e2:	b29b      	uxth	r3, r3
 801c0e4:	1c5a      	adds	r2, r3, #1
 801c0e6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c0ea:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c0ee:	fb12 f201 	smulbb	r2, r2, r1
 801c0f2:	121b      	asrs	r3, r3, #8
 801c0f4:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c0f8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801c0fc:	0c3f      	lsrs	r7, r7, #16
 801c0fe:	fb03 2300 	mla	r3, r3, r0, r2
 801c102:	b29b      	uxth	r3, r3
 801c104:	1c5a      	adds	r2, r3, #1
 801c106:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c10a:	121b      	asrs	r3, r3, #8
 801c10c:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c110:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c114:	fb13 f101 	smulbb	r1, r3, r1
 801c118:	fb07 1700 	mla	r7, r7, r0, r1
 801c11c:	b2bf      	uxth	r7, r7
 801c11e:	1c79      	adds	r1, r7, #1
 801c120:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801c124:	123f      	asrs	r7, r7, #8
 801c126:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c12a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c12c:	f10e 0e03 	add.w	lr, lr, #3
 801c130:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c134:	441d      	add	r5, r3
 801c136:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c138:	441e      	add	r6, r3
 801c13a:	e64e      	b.n	801bdda <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801c13c:	2800      	cmp	r0, #0
 801c13e:	f43f aee8 	beq.w	801bf12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c142:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801c146:	9209      	str	r2, [sp, #36]	; 0x24
 801c148:	0e12      	lsrs	r2, r2, #24
 801c14a:	9212      	str	r2, [sp, #72]	; 0x48
 801c14c:	e6e1      	b.n	801bf12 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801c14e:	b01d      	add	sp, #116	; 0x74
 801c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c154 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c158:	b087      	sub	sp, #28
 801c15a:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	; 0x44
 801c15e:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
 801c162:	fb05 7003 	mla	r0, r5, r3, r7
 801c166:	2d00      	cmp	r5, #0
 801c168:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801c16c:	f89d e050 	ldrb.w	lr, [sp, #80]	; 0x50
 801c170:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801c174:	f2c0 810a 	blt.w	801c38c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801c178:	45a8      	cmp	r8, r5
 801c17a:	f340 8107 	ble.w	801c38c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801c17e:	2f00      	cmp	r7, #0
 801c180:	f2c0 8102 	blt.w	801c388 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801c184:	42bb      	cmp	r3, r7
 801c186:	f340 80ff 	ble.w	801c388 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801c18a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801c18e:	1c7a      	adds	r2, r7, #1
 801c190:	f100 80ff 	bmi.w	801c392 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801c194:	4293      	cmp	r3, r2
 801c196:	f340 80fc 	ble.w	801c392 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801c19a:	2c00      	cmp	r4, #0
 801c19c:	f000 80fb 	beq.w	801c396 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801c1a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801c1a4:	3501      	adds	r5, #1
 801c1a6:	f100 80fa 	bmi.w	801c39e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801c1aa:	45a8      	cmp	r8, r5
 801c1ac:	f340 80f7 	ble.w	801c39e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801c1b0:	f1be 0f00 	cmp.w	lr, #0
 801c1b4:	f000 80f6 	beq.w	801c3a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801c1b8:	2f00      	cmp	r7, #0
 801c1ba:	f2c0 80ee 	blt.w	801c39a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801c1be:	42bb      	cmp	r3, r7
 801c1c0:	f340 80eb 	ble.w	801c39a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801c1c4:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801c1c8:	3701      	adds	r7, #1
 801c1ca:	f100 80ee 	bmi.w	801c3aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801c1ce:	42bb      	cmp	r3, r7
 801c1d0:	f340 80eb 	ble.w	801c3aa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801c1d4:	2c00      	cmp	r4, #0
 801c1d6:	f000 80ea 	beq.w	801c3ae <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801c1da:	3301      	adds	r3, #1
 801c1dc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801c1e0:	fa1f fc84 	uxth.w	ip, r4
 801c1e4:	fa1f fe8e 	uxth.w	lr, lr
 801c1e8:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801c1ec:	fb0c f90e 	mul.w	r9, ip, lr
 801c1f0:	0e13      	lsrs	r3, r2, #24
 801c1f2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c1f6:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801c1fa:	9302      	str	r3, [sp, #8]
 801c1fc:	ebac 0709 	sub.w	r7, ip, r9
 801c200:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
 801c204:	fa1f f48e 	uxth.w	r4, lr
 801c208:	f006 1eff 	and.w	lr, r6, #16711935	; 0xff00ff
 801c20c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801c210:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801c214:	fb0a fe0e 	mul.w	lr, sl, lr
 801c218:	1b1b      	subs	r3, r3, r4
 801c21a:	fb0a f606 	mul.w	r6, sl, r6
 801c21e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801c222:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801c226:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 801c22a:	b29b      	uxth	r3, r3
 801c22c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c230:	b2bf      	uxth	r7, r7
 801c232:	9301      	str	r3, [sp, #4]
 801c234:	44e6      	add	lr, ip
 801c236:	f506 7c80 	add.w	ip, r6, #256	; 0x100
 801c23a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c23e:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c242:	f00e 13ff 	and.w	r3, lr, #16711935	; 0xff00ff
 801c246:	9303      	str	r3, [sp, #12]
 801c248:	0a33      	lsrs	r3, r6, #8
 801c24a:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 801c24e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801c252:	9304      	str	r3, [sp, #16]
 801c254:	fb0b f606 	mul.w	r6, fp, r6
 801c258:	fb0b f000 	mul.w	r0, fp, r0
 801c25c:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801c260:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c264:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c268:	44b6      	add	lr, r6
 801c26a:	f500 7680 	add.w	r6, r0, #256	; 0x100
 801c26e:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801c272:	f005 16ff 	and.w	r6, r5, #16711935	; 0xff00ff
 801c276:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c27a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c27e:	fb08 f606 	mul.w	r6, r8, r6
 801c282:	0a03      	lsrs	r3, r0, #8
 801c284:	fb08 f505 	mul.w	r5, r8, r5
 801c288:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c28c:	0a30      	lsrs	r0, r6, #8
 801c28e:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c292:	9305      	str	r3, [sp, #20]
 801c294:	0e13      	lsrs	r3, r2, #24
 801c296:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c29a:	fb0e fe07 	mul.w	lr, lr, r7
 801c29e:	4430      	add	r0, r6
 801c2a0:	f505 7680 	add.w	r6, r5, #256	; 0x100
 801c2a4:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801c2a8:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 801c2ac:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c2b0:	0a00      	lsrs	r0, r0, #8
 801c2b2:	435e      	muls	r6, r3
 801c2b4:	0a2d      	lsrs	r5, r5, #8
 801c2b6:	435a      	muls	r2, r3
 801c2b8:	9b03      	ldr	r3, [sp, #12]
 801c2ba:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801c2be:	f106 1601 	add.w	r6, r6, #65537	; 0x10001
 801c2c2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801c2c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2ca:	44b4      	add	ip, r6
 801c2cc:	f502 7680 	add.w	r6, r2, #256	; 0x100
 801c2d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2d4:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801c2d8:	9e01      	ldr	r6, [sp, #4]
 801c2da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c2de:	fb03 ee06 	mla	lr, r3, r6, lr
 801c2e2:	9b04      	ldr	r3, [sp, #16]
 801c2e4:	0a12      	lsrs	r2, r2, #8
 801c2e6:	fb0c ee09 	mla	lr, ip, r9, lr
 801c2ea:	f403 467f 	and.w	r6, r3, #65280	; 0xff00
 801c2ee:	9b05      	ldr	r3, [sp, #20]
 801c2f0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c2f4:	fb00 ee04 	mla	lr, r0, r4, lr
 801c2f8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c2fc:	f00e 10ff 	and.w	r0, lr, #16711935	; 0xff00ff
 801c300:	f403 4e7f 	and.w	lr, r3, #65280	; 0xff00
 801c304:	9b01      	ldr	r3, [sp, #4]
 801c306:	fb07 fe0e 	mul.w	lr, r7, lr
 801c30a:	fb07 f70b 	mul.w	r7, r7, fp
 801c30e:	fb03 ee06 	mla	lr, r3, r6, lr
 801c312:	fb03 730a 	mla	r3, r3, sl, r7
 801c316:	fb09 e202 	mla	r2, r9, r2, lr
 801c31a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801c31e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801c322:	fb04 3408 	mla	r4, r4, r8, r3
 801c326:	9b02      	ldr	r3, [sp, #8]
 801c328:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c32c:	fb09 4903 	mla	r9, r9, r3, r4
 801c330:	780b      	ldrb	r3, [r1, #0]
 801c332:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801c336:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801c33a:	ea40 0e0e 	orr.w	lr, r0, lr
 801c33e:	fa5f f989 	uxtb.w	r9, r9
 801c342:	fb03 f209 	mul.w	r2, r3, r9
 801c346:	1c53      	adds	r3, r2, #1
 801c348:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c34c:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801c350:	700b      	strb	r3, [r1, #0]
 801c352:	784b      	ldrb	r3, [r1, #1]
 801c354:	fb03 f309 	mul.w	r3, r3, r9
 801c358:	1c5a      	adds	r2, r3, #1
 801c35a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c35e:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801c362:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801c366:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c36a:	704b      	strb	r3, [r1, #1]
 801c36c:	788b      	ldrb	r3, [r1, #2]
 801c36e:	fb03 f909 	mul.w	r9, r3, r9
 801c372:	f109 0301 	add.w	r3, r9, #1
 801c376:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801c37a:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801c37e:	f881 e002 	strb.w	lr, [r1, #2]
 801c382:	b007      	add	sp, #28
 801c384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c388:	2600      	movs	r6, #0
 801c38a:	e700      	b.n	801c18e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801c38c:	2000      	movs	r0, #0
 801c38e:	4606      	mov	r6, r0
 801c390:	e708      	b.n	801c1a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c392:	2000      	movs	r0, #0
 801c394:	e706      	b.n	801c1a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c396:	4620      	mov	r0, r4
 801c398:	e704      	b.n	801c1a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801c39a:	2500      	movs	r5, #0
 801c39c:	e714      	b.n	801c1c8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801c39e:	2200      	movs	r2, #0
 801c3a0:	4615      	mov	r5, r2
 801c3a2:	e71d      	b.n	801c1e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c3a4:	4672      	mov	r2, lr
 801c3a6:	4675      	mov	r5, lr
 801c3a8:	e71a      	b.n	801c1e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	e718      	b.n	801c1e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801c3ae:	4622      	mov	r2, r4
 801c3b0:	e716      	b.n	801c1e0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801c3b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c3b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3b6:	b099      	sub	sp, #100	; 0x64
 801c3b8:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
 801c3bc:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c3be:	9017      	str	r0, [sp, #92]	; 0x5c
 801c3c0:	9306      	str	r3, [sp, #24]
 801c3c2:	6850      	ldr	r0, [r2, #4]
 801c3c4:	6812      	ldr	r2, [r2, #0]
 801c3c6:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801c3ca:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	; 0x8c
 801c3ce:	fb00 1303 	mla	r3, r0, r3, r1
 801c3d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c3d6:	18d3      	adds	r3, r2, r3
 801c3d8:	9309      	str	r3, [sp, #36]	; 0x24
 801c3da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	930e      	str	r3, [sp, #56]	; 0x38
 801c3e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c3e2:	2b00      	cmp	r3, #0
 801c3e4:	dc03      	bgt.n	801c3ee <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c3e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	f340 8360 	ble.w	801caae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801c3ee:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c3f0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c3f4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c3f8:	1e48      	subs	r0, r1, #1
 801c3fa:	1e57      	subs	r7, r2, #1
 801c3fc:	9b06      	ldr	r3, [sp, #24]
 801c3fe:	2b00      	cmp	r3, #0
 801c400:	f340 817b 	ble.w	801c6fa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801c404:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801c408:	ea4f 4326 	mov.w	r3, r6, asr #16
 801c40c:	d406      	bmi.n	801c41c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c40e:	4584      	cmp	ip, r0
 801c410:	da04      	bge.n	801c41c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c412:	2b00      	cmp	r3, #0
 801c414:	db02      	blt.n	801c41c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801c416:	42bb      	cmp	r3, r7
 801c418:	f2c0 8170 	blt.w	801c6fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c41c:	f11c 0c01 	adds.w	ip, ip, #1
 801c420:	f100 8160 	bmi.w	801c6e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c424:	4561      	cmp	r1, ip
 801c426:	f2c0 815d 	blt.w	801c6e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c42a:	3301      	adds	r3, #1
 801c42c:	f100 815a 	bmi.w	801c6e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c430:	429a      	cmp	r2, r3
 801c432:	f2c0 8157 	blt.w	801c6e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801c436:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801c43a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c43c:	f1b8 0f00 	cmp.w	r8, #0
 801c440:	f340 8179 	ble.w	801c736 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801c444:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c446:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801c44a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c44c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c450:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c454:	142a      	asrs	r2, r5, #16
 801c456:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c45a:	689b      	ldr	r3, [r3, #8]
 801c45c:	f100 81be 	bmi.w	801c7dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c460:	f103 39ff 	add.w	r9, r3, #4294967295
 801c464:	454a      	cmp	r2, r9
 801c466:	f280 81b9 	bge.w	801c7dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c46a:	f1bc 0f00 	cmp.w	ip, #0
 801c46e:	f2c0 81b5 	blt.w	801c7dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c472:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c476:	45cc      	cmp	ip, r9
 801c478:	f280 81b0 	bge.w	801c7dc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801c47c:	b21b      	sxth	r3, r3
 801c47e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c480:	fb0c 2203 	mla	r2, ip, r3, r2
 801c484:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801c488:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c48c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801c490:	2900      	cmp	r1, #0
 801c492:	f000 8197 	beq.w	801c7c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801c496:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801c49a:	940a      	str	r4, [sp, #40]	; 0x28
 801c49c:	0e24      	lsrs	r4, r4, #24
 801c49e:	9411      	str	r4, [sp, #68]	; 0x44
 801c4a0:	b180      	cbz	r0, 801c4c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c4a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801c4a6:	3b01      	subs	r3, #1
 801c4a8:	009b      	lsls	r3, r3, #2
 801c4aa:	3304      	adds	r3, #4
 801c4ac:	eb09 0c03 	add.w	ip, r9, r3
 801c4b0:	f859 3003 	ldr.w	r3, [r9, r3]
 801c4b4:	9307      	str	r3, [sp, #28]
 801c4b6:	0e1b      	lsrs	r3, r3, #24
 801c4b8:	930f      	str	r3, [sp, #60]	; 0x3c
 801c4ba:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801c4be:	930b      	str	r3, [sp, #44]	; 0x2c
 801c4c0:	0e1b      	lsrs	r3, r3, #24
 801c4c2:	9312      	str	r3, [sp, #72]	; 0x48
 801c4c4:	b289      	uxth	r1, r1
 801c4c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c4c8:	b280      	uxth	r0, r0
 801c4ca:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c4cc:	fb01 fa00 	mul.w	sl, r1, r0
 801c4d0:	0109      	lsls	r1, r1, #4
 801c4d2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801c4d6:	eba1 090a 	sub.w	r9, r1, sl
 801c4da:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 801c4de:	b280      	uxth	r0, r0
 801c4e0:	fa1f f989 	uxth.w	r9, r9
 801c4e4:	1a09      	subs	r1, r1, r0
 801c4e6:	fb09 f303 	mul.w	r3, r9, r3
 801c4ea:	b289      	uxth	r1, r1
 801c4ec:	fb01 330e 	mla	r3, r1, lr, r3
 801c4f0:	fb00 3304 	mla	r3, r0, r4, r3
 801c4f4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c4f6:	fb0a 3304 	mla	r3, sl, r4, r3
 801c4fa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	f000 80e8 	beq.w	801c6d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c504:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c508:	d01b      	beq.n	801c542 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801c50a:	f002 1bff 	and.w	fp, r2, #16711935	; 0xff00ff
 801c50e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c512:	fb0e fb0b 	mul.w	fp, lr, fp
 801c516:	fb0e fe02 	mul.w	lr, lr, r2
 801c51a:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801c51e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c522:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c526:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c52a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c52e:	445a      	add	r2, fp
 801c530:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c534:	0a12      	lsrs	r2, r2, #8
 801c536:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c53a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c53e:	ea42 020c 	orr.w	r2, r2, ip
 801c542:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c544:	2cff      	cmp	r4, #255	; 0xff
 801c546:	d021      	beq.n	801c58c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801c548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c54a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c54e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c550:	fb04 fc0c 	mul.w	ip, r4, ip
 801c554:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c556:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c55a:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c55e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801c560:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c564:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c568:	fb04 fb0b 	mul.w	fp, r4, fp
 801c56c:	44e6      	add	lr, ip
 801c56e:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c572:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c576:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c57a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c57e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c582:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c586:	ea4e 040b 	orr.w	r4, lr, fp
 801c58a:	940a      	str	r4, [sp, #40]	; 0x28
 801c58c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c58e:	2cff      	cmp	r4, #255	; 0xff
 801c590:	d021      	beq.n	801c5d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801c592:	9c07      	ldr	r4, [sp, #28]
 801c594:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c598:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c59a:	fb04 fc0c 	mul.w	ip, r4, ip
 801c59e:	9c07      	ldr	r4, [sp, #28]
 801c5a0:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c5a4:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c5a8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c5aa:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c5ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c5b2:	fb04 fb0b 	mul.w	fp, r4, fp
 801c5b6:	44e6      	add	lr, ip
 801c5b8:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c5bc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c5c0:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c5c4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c5c8:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c5cc:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c5d0:	ea4e 040b 	orr.w	r4, lr, fp
 801c5d4:	9407      	str	r4, [sp, #28]
 801c5d6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c5d8:	2cff      	cmp	r4, #255	; 0xff
 801c5da:	d021      	beq.n	801c620 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801c5dc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c5de:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c5e2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c5e4:	fb04 fc0c 	mul.w	ip, r4, ip
 801c5e8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c5ea:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c5ee:	f404 4b7f 	and.w	fp, r4, #65280	; 0xff00
 801c5f2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c5f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c5f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c5fc:	fb04 fb0b 	mul.w	fp, r4, fp
 801c600:	44e6      	add	lr, ip
 801c602:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 801c606:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c60a:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801c60e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c612:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801c616:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 801c61a:	ea4e 040b 	orr.w	r4, lr, fp
 801c61e:	940b      	str	r4, [sp, #44]	; 0x2c
 801c620:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c622:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801c626:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c62a:	2bff      	cmp	r3, #255	; 0xff
 801c62c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c630:	9c07      	ldr	r4, [sp, #28]
 801c632:	fb09 fc0c 	mul.w	ip, r9, ip
 801c636:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c63a:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c63e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c640:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c644:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c648:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c64a:	fb0a cc0e 	mla	ip, sl, lr, ip
 801c64e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c652:	fb09 f90e 	mul.w	r9, r9, lr
 801c656:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c65a:	fb01 9202 	mla	r2, r1, r2, r9
 801c65e:	9907      	ldr	r1, [sp, #28]
 801c660:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c664:	f401 4b7f 	and.w	fp, r1, #65280	; 0xff00
 801c668:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c66a:	fb00 220b 	mla	r2, r0, fp, r2
 801c66e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 801c672:	fb0a 2a00 	mla	sl, sl, r0, r2
 801c676:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c67a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c67e:	ea4c 0c0a 	orr.w	ip, ip, sl
 801c682:	fa5f f08c 	uxtb.w	r0, ip
 801c686:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801c68a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c68e:	f000 80a2 	beq.w	801c7d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801c692:	43db      	mvns	r3, r3
 801c694:	783a      	ldrb	r2, [r7, #0]
 801c696:	f897 a002 	ldrb.w	sl, [r7, #2]
 801c69a:	b2db      	uxtb	r3, r3
 801c69c:	fb02 fe03 	mul.w	lr, r2, r3
 801c6a0:	fb0a fa03 	mul.w	sl, sl, r3
 801c6a4:	f10e 0201 	add.w	r2, lr, #1
 801c6a8:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801c6ac:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c6b0:	703a      	strb	r2, [r7, #0]
 801c6b2:	787a      	ldrb	r2, [r7, #1]
 801c6b4:	fb02 f003 	mul.w	r0, r2, r3
 801c6b8:	f10a 0301 	add.w	r3, sl, #1
 801c6bc:	1c42      	adds	r2, r0, #1
 801c6be:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801c6c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801c6c6:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801c6ca:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c6ce:	707a      	strb	r2, [r7, #1]
 801c6d0:	f887 c002 	strb.w	ip, [r7, #2]
 801c6d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c6d6:	3703      	adds	r7, #3
 801c6d8:	f108 38ff 	add.w	r8, r8, #4294967295
 801c6dc:	441d      	add	r5, r3
 801c6de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c6e0:	441e      	add	r6, r3
 801c6e2:	e6ab      	b.n	801c43c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801c6e4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c6e6:	441d      	add	r5, r3
 801c6e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c6ea:	441e      	add	r6, r3
 801c6ec:	9b06      	ldr	r3, [sp, #24]
 801c6ee:	3b01      	subs	r3, #1
 801c6f0:	9306      	str	r3, [sp, #24]
 801c6f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6f4:	3303      	adds	r3, #3
 801c6f6:	9309      	str	r3, [sp, #36]	; 0x24
 801c6f8:	e680      	b.n	801c3fc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c6fa:	d024      	beq.n	801c746 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801c6fc:	9b06      	ldr	r3, [sp, #24]
 801c6fe:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c700:	3b01      	subs	r3, #1
 801c702:	fb00 5003 	mla	r0, r0, r3, r5
 801c706:	1400      	asrs	r0, r0, #16
 801c708:	f53f ae95 	bmi.w	801c436 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c70c:	3901      	subs	r1, #1
 801c70e:	4288      	cmp	r0, r1
 801c710:	f6bf ae91 	bge.w	801c436 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c714:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c716:	fb01 6303 	mla	r3, r1, r3, r6
 801c71a:	141b      	asrs	r3, r3, #16
 801c71c:	f53f ae8b 	bmi.w	801c436 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c720:	3a01      	subs	r2, #1
 801c722:	4293      	cmp	r3, r2
 801c724:	f6bf ae87 	bge.w	801c436 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801c728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c72a:	f8dd b018 	ldr.w	fp, [sp, #24]
 801c72e:	1cdf      	adds	r7, r3, #3
 801c730:	f1bb 0f00 	cmp.w	fp, #0
 801c734:	dc6e      	bgt.n	801c814 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801c736:	9b06      	ldr	r3, [sp, #24]
 801c738:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c73c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c73e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c742:	4423      	add	r3, r4
 801c744:	9309      	str	r3, [sp, #36]	; 0x24
 801c746:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c748:	2b00      	cmp	r3, #0
 801c74a:	f340 81b0 	ble.w	801caae <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801c74e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c752:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c754:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c758:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c75c:	eef0 6a62 	vmov.f32	s13, s5
 801c760:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c764:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c768:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c76c:	ee16 5a90 	vmov	r5, s13
 801c770:	eef0 6a43 	vmov.f32	s13, s6
 801c774:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c778:	ee16 6a90 	vmov	r6, s13
 801c77c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c780:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c784:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c788:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c78c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c790:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c794:	ee12 2a90 	vmov	r2, s5
 801c798:	eef0 2a47 	vmov.f32	s5, s14
 801c79c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c7a0:	ee13 2a10 	vmov	r2, s6
 801c7a4:	9325      	str	r3, [sp, #148]	; 0x94
 801c7a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c7a8:	eeb0 3a67 	vmov.f32	s6, s15
 801c7ac:	fb92 f3f3 	sdiv	r3, r2, r3
 801c7b0:	9326      	str	r3, [sp, #152]	; 0x98
 801c7b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c7b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801c7b6:	3b01      	subs	r3, #1
 801c7b8:	9315      	str	r3, [sp, #84]	; 0x54
 801c7ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c7bc:	bf08      	it	eq
 801c7be:	4613      	moveq	r3, r2
 801c7c0:	9306      	str	r3, [sp, #24]
 801c7c2:	e60d      	b.n	801c3e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801c7c4:	2800      	cmp	r0, #0
 801c7c6:	f43f ae7d 	beq.w	801c4c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c7ca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c7ce:	9307      	str	r3, [sp, #28]
 801c7d0:	0e1b      	lsrs	r3, r3, #24
 801c7d2:	930f      	str	r3, [sp, #60]	; 0x3c
 801c7d4:	e676      	b.n	801c4c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801c7d6:	7038      	strb	r0, [r7, #0]
 801c7d8:	7079      	strb	r1, [r7, #1]
 801c7da:	e779      	b.n	801c6d0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801c7dc:	f112 0901 	adds.w	r9, r2, #1
 801c7e0:	f53f af78 	bmi.w	801c6d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c7e4:	454b      	cmp	r3, r9
 801c7e6:	f6ff af75 	blt.w	801c6d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c7ea:	f11c 0901 	adds.w	r9, ip, #1
 801c7ee:	f53f af71 	bmi.w	801c6d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c7f2:	45ce      	cmp	lr, r9
 801c7f4:	f6ff af6e 	blt.w	801c6d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c7f8:	b21b      	sxth	r3, r3
 801c7fa:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801c7fe:	fa0f f28e 	sxth.w	r2, lr
 801c802:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801c806:	9200      	str	r2, [sp, #0]
 801c808:	4639      	mov	r1, r7
 801c80a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c80c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801c80e:	f7ff fca1 	bl	801c154 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801c812:	e75f      	b.n	801c6d4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801c814:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c816:	1429      	asrs	r1, r5, #16
 801c818:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c81a:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801c81e:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801c822:	1433      	asrs	r3, r6, #16
 801c824:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801c828:	fb0c 1303 	mla	r3, ip, r3, r1
 801c82c:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c82e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801c832:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801c836:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c83a:	2a00      	cmp	r2, #0
 801c83c:	f000 8129 	beq.w	801ca92 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801c840:	684c      	ldr	r4, [r1, #4]
 801c842:	940c      	str	r4, [sp, #48]	; 0x30
 801c844:	0e24      	lsrs	r4, r4, #24
 801c846:	9413      	str	r4, [sp, #76]	; 0x4c
 801c848:	b198      	cbz	r0, 801c872 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801c84a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 801c84e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c852:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801c856:	f10c 0c04 	add.w	ip, ip, #4
 801c85a:	eb01 080c 	add.w	r8, r1, ip
 801c85e:	f851 100c 	ldr.w	r1, [r1, ip]
 801c862:	9108      	str	r1, [sp, #32]
 801c864:	0e09      	lsrs	r1, r1, #24
 801c866:	9110      	str	r1, [sp, #64]	; 0x40
 801c868:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801c86c:	910d      	str	r1, [sp, #52]	; 0x34
 801c86e:	0e09      	lsrs	r1, r1, #24
 801c870:	9114      	str	r1, [sp, #80]	; 0x50
 801c872:	b292      	uxth	r2, r2
 801c874:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c876:	b280      	uxth	r0, r0
 801c878:	fb02 f900 	mul.w	r9, r2, r0
 801c87c:	0112      	lsls	r2, r2, #4
 801c87e:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c882:	eba2 0809 	sub.w	r8, r2, r9
 801c886:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801c88a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c88c:	b280      	uxth	r0, r0
 801c88e:	fa1f f888 	uxth.w	r8, r8
 801c892:	1a09      	subs	r1, r1, r0
 801c894:	fb08 f202 	mul.w	r2, r8, r2
 801c898:	b289      	uxth	r1, r1
 801c89a:	fb01 220e 	mla	r2, r1, lr, r2
 801c89e:	fb00 2204 	mla	r2, r0, r4, r2
 801c8a2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c8a4:	fb09 2204 	mla	r2, r9, r4, r2
 801c8a8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c8ac:	2a00      	cmp	r2, #0
 801c8ae:	f000 80e8 	beq.w	801ca82 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801c8b2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c8b6:	d01b      	beq.n	801c8f0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801c8b8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c8bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c8c0:	fb0e fa0a 	mul.w	sl, lr, sl
 801c8c4:	fb0e fe03 	mul.w	lr, lr, r3
 801c8c8:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c8cc:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c8d0:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c8d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c8d8:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c8dc:	4453      	add	r3, sl
 801c8de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c8e2:	0a1b      	lsrs	r3, r3, #8
 801c8e4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c8e8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c8ec:	ea43 030c 	orr.w	r3, r3, ip
 801c8f0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8f2:	2cff      	cmp	r4, #255	; 0xff
 801c8f4:	d021      	beq.n	801c93a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801c8f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c8f8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c8fc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8fe:	fb04 fc0c 	mul.w	ip, r4, ip
 801c902:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c904:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c908:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c90c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c90e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c912:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c916:	fb04 fa0a 	mul.w	sl, r4, sl
 801c91a:	44e6      	add	lr, ip
 801c91c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c920:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c924:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c928:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c92c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c930:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c934:	ea4e 040a 	orr.w	r4, lr, sl
 801c938:	940c      	str	r4, [sp, #48]	; 0x30
 801c93a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c93c:	2cff      	cmp	r4, #255	; 0xff
 801c93e:	d021      	beq.n	801c984 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801c940:	9c08      	ldr	r4, [sp, #32]
 801c942:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c946:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c948:	fb04 fc0c 	mul.w	ip, r4, ip
 801c94c:	9c08      	ldr	r4, [sp, #32]
 801c94e:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c952:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801c954:	fb04 fa0e 	mul.w	sl, r4, lr
 801c958:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c95c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c960:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c964:	44e6      	add	lr, ip
 801c966:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c96a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c96e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c972:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c976:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c97a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c97e:	ea4e 040a 	orr.w	r4, lr, sl
 801c982:	9408      	str	r4, [sp, #32]
 801c984:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c986:	2cff      	cmp	r4, #255	; 0xff
 801c988:	d021      	beq.n	801c9ce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801c98a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c98c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c990:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c992:	fb04 fc0c 	mul.w	ip, r4, ip
 801c996:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c998:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801c99c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c9a0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801c9a2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c9a6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c9aa:	fb04 fa0a 	mul.w	sl, r4, sl
 801c9ae:	44e6      	add	lr, ip
 801c9b0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c9b4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c9b8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c9bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c9c0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c9c4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c9c8:	ea4e 040a 	orr.w	r4, lr, sl
 801c9cc:	940d      	str	r4, [sp, #52]	; 0x34
 801c9ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c9d0:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c9d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c9d8:	2aff      	cmp	r2, #255	; 0xff
 801c9da:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c9de:	9c08      	ldr	r4, [sp, #32]
 801c9e0:	fb08 fc0c 	mul.w	ip, r8, ip
 801c9e4:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c9e8:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c9ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c9ee:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c9f2:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c9f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801c9f8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c9fc:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801ca00:	fb08 f80e 	mul.w	r8, r8, lr
 801ca04:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ca08:	fb01 8303 	mla	r3, r1, r3, r8
 801ca0c:	9908      	ldr	r1, [sp, #32]
 801ca0e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ca12:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ca16:	990d      	ldr	r1, [sp, #52]	; 0x34
 801ca18:	fb00 330a 	mla	r3, r0, sl, r3
 801ca1c:	f401 4e7f 	and.w	lr, r1, #65280	; 0xff00
 801ca20:	fb09 3e0e 	mla	lr, r9, lr, r3
 801ca24:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ca28:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 801ca2c:	ea4c 0c0e 	orr.w	ip, ip, lr
 801ca30:	fa5f f08c 	uxtb.w	r0, ip
 801ca34:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801ca38:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801ca3c:	d032      	beq.n	801caa4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801ca3e:	43d2      	mvns	r2, r2
 801ca40:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801ca44:	b2d2      	uxtb	r2, r2
 801ca46:	fb0e fe02 	mul.w	lr, lr, r2
 801ca4a:	f10e 0301 	add.w	r3, lr, #1
 801ca4e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801ca52:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ca56:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801ca5a:	4350      	muls	r0, r2
 801ca5c:	f807 3c03 	strb.w	r3, [r7, #-3]
 801ca60:	1c43      	adds	r3, r0, #1
 801ca62:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ca66:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801ca6a:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801ca6e:	4353      	muls	r3, r2
 801ca70:	f807 1c02 	strb.w	r1, [r7, #-2]
 801ca74:	1c5a      	adds	r2, r3, #1
 801ca76:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ca7a:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801ca7e:	f807 cc01 	strb.w	ip, [r7, #-1]
 801ca82:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ca84:	3703      	adds	r7, #3
 801ca86:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca8a:	441d      	add	r5, r3
 801ca8c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ca8e:	441e      	add	r6, r3
 801ca90:	e64e      	b.n	801c730 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801ca92:	2800      	cmp	r0, #0
 801ca94:	f43f aeed 	beq.w	801c872 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801ca98:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801ca9c:	9108      	str	r1, [sp, #32]
 801ca9e:	0e09      	lsrs	r1, r1, #24
 801caa0:	9110      	str	r1, [sp, #64]	; 0x40
 801caa2:	e6e6      	b.n	801c872 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801caa4:	f807 0c03 	strb.w	r0, [r7, #-3]
 801caa8:	f807 1c02 	strb.w	r1, [r7, #-2]
 801caac:	e7e7      	b.n	801ca7e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801caae:	b019      	add	sp, #100	; 0x64
 801cab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cab4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801cab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cab8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 801cabc:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801cac0:	2c00      	cmp	r4, #0
 801cac2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801cac6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801caca:	fb00 4e03 	mla	lr, r0, r3, r4
 801cace:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801cad2:	f2c0 80b8 	blt.w	801cc46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801cad6:	45a1      	cmp	r9, r4
 801cad8:	f340 80b5 	ble.w	801cc46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801cadc:	2800      	cmp	r0, #0
 801cade:	f2c0 80b2 	blt.w	801cc46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801cae2:	4580      	cmp	r8, r0
 801cae4:	f340 80af 	ble.w	801cc46 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801cae8:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801caec:	f01e 0f01 	tst.w	lr, #1
 801caf0:	5d56      	ldrb	r6, [r2, r5]
 801caf2:	bf0c      	ite	eq
 801caf4:	f006 060f 	andeq.w	r6, r6, #15
 801caf8:	1136      	asrne	r6, r6, #4
 801cafa:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801cafe:	b2f6      	uxtb	r6, r6
 801cb00:	f114 0a01 	adds.w	sl, r4, #1
 801cb04:	f100 80a1 	bmi.w	801cc4a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801cb08:	45d1      	cmp	r9, sl
 801cb0a:	f340 809e 	ble.w	801cc4a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801cb0e:	2800      	cmp	r0, #0
 801cb10:	f2c0 809b 	blt.w	801cc4a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801cb14:	4580      	cmp	r8, r0
 801cb16:	f340 8098 	ble.w	801cc4a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801cb1a:	2f00      	cmp	r7, #0
 801cb1c:	f000 8097 	beq.w	801cc4e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801cb20:	f10e 0b01 	add.w	fp, lr, #1
 801cb24:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801cb28:	f01b 0f01 	tst.w	fp, #1
 801cb2c:	5d55      	ldrb	r5, [r2, r5]
 801cb2e:	bf0c      	ite	eq
 801cb30:	f005 050f 	andeq.w	r5, r5, #15
 801cb34:	112d      	asrne	r5, r5, #4
 801cb36:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801cb3a:	b2ed      	uxtb	r5, r5
 801cb3c:	f1bc 0f00 	cmp.w	ip, #0
 801cb40:	f000 8089 	beq.w	801cc56 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801cb44:	2c00      	cmp	r4, #0
 801cb46:	f100 0001 	add.w	r0, r0, #1
 801cb4a:	f2c0 8082 	blt.w	801cc52 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cb4e:	45a1      	cmp	r9, r4
 801cb50:	dd7f      	ble.n	801cc52 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cb52:	2800      	cmp	r0, #0
 801cb54:	db7d      	blt.n	801cc52 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cb56:	4580      	cmp	r8, r0
 801cb58:	dd7b      	ble.n	801cc52 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801cb5a:	eb03 0b0e 	add.w	fp, r3, lr
 801cb5e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801cb62:	f01b 0f01 	tst.w	fp, #1
 801cb66:	5d14      	ldrb	r4, [r2, r4]
 801cb68:	bf0c      	ite	eq
 801cb6a:	f004 040f 	andeq.w	r4, r4, #15
 801cb6e:	1124      	asrne	r4, r4, #4
 801cb70:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801cb74:	b2e4      	uxtb	r4, r4
 801cb76:	f1ba 0f00 	cmp.w	sl, #0
 801cb7a:	db6f      	blt.n	801cc5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cb7c:	45d1      	cmp	r9, sl
 801cb7e:	dd6d      	ble.n	801cc5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cb80:	2800      	cmp	r0, #0
 801cb82:	db6b      	blt.n	801cc5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cb84:	4580      	cmp	r8, r0
 801cb86:	dd69      	ble.n	801cc5c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801cb88:	2f00      	cmp	r7, #0
 801cb8a:	d069      	beq.n	801cc60 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801cb8c:	3301      	adds	r3, #1
 801cb8e:	449e      	add	lr, r3
 801cb90:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801cb94:	f01e 0f01 	tst.w	lr, #1
 801cb98:	5cd0      	ldrb	r0, [r2, r3]
 801cb9a:	bf0c      	ite	eq
 801cb9c:	f000 000f 	andeq.w	r0, r0, #15
 801cba0:	1100      	asrne	r0, r0, #4
 801cba2:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cba6:	b2c3      	uxtb	r3, r0
 801cba8:	b2ba      	uxth	r2, r7
 801cbaa:	fa1f fc8c 	uxth.w	ip, ip
 801cbae:	fb02 f00c 	mul.w	r0, r2, ip
 801cbb2:	0112      	lsls	r2, r2, #4
 801cbb4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801cbb8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 801cbbc:	1a12      	subs	r2, r2, r0
 801cbbe:	fa1f fc8c 	uxth.w	ip, ip
 801cbc2:	b292      	uxth	r2, r2
 801cbc4:	eba7 070c 	sub.w	r7, r7, ip
 801cbc8:	436a      	muls	r2, r5
 801cbca:	b2bf      	uxth	r7, r7
 801cbcc:	fb06 2207 	mla	r2, r6, r7, r2
 801cbd0:	fb0c 2404 	mla	r4, ip, r4, r2
 801cbd4:	fb00 4303 	mla	r3, r0, r3, r4
 801cbd8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801cbdc:	b38b      	cbz	r3, 801cc42 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801cbde:	4a21      	ldr	r2, [pc, #132]	; (801cc64 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801cbe0:	6814      	ldr	r4, [r2, #0]
 801cbe2:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 801cbe6:	b2e5      	uxtb	r5, r4
 801cbe8:	4353      	muls	r3, r2
 801cbea:	1c5a      	adds	r2, r3, #1
 801cbec:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cbf0:	1212      	asrs	r2, r2, #8
 801cbf2:	b290      	uxth	r0, r2
 801cbf4:	43d2      	mvns	r2, r2
 801cbf6:	fb15 f500 	smulbb	r5, r5, r0
 801cbfa:	b2d3      	uxtb	r3, r2
 801cbfc:	780a      	ldrb	r2, [r1, #0]
 801cbfe:	fb02 5203 	mla	r2, r2, r3, r5
 801cc02:	b292      	uxth	r2, r2
 801cc04:	1c55      	adds	r5, r2, #1
 801cc06:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cc0a:	784d      	ldrb	r5, [r1, #1]
 801cc0c:	fb15 f503 	smulbb	r5, r5, r3
 801cc10:	1212      	asrs	r2, r2, #8
 801cc12:	700a      	strb	r2, [r1, #0]
 801cc14:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801cc18:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801cc1c:	fb02 5200 	mla	r2, r2, r0, r5
 801cc20:	b292      	uxth	r2, r2
 801cc22:	1c55      	adds	r5, r2, #1
 801cc24:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801cc28:	1212      	asrs	r2, r2, #8
 801cc2a:	704a      	strb	r2, [r1, #1]
 801cc2c:	788a      	ldrb	r2, [r1, #2]
 801cc2e:	fb12 f303 	smulbb	r3, r2, r3
 801cc32:	fb04 3300 	mla	r3, r4, r0, r3
 801cc36:	b29b      	uxth	r3, r3
 801cc38:	1c5a      	adds	r2, r3, #1
 801cc3a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cc3e:	121b      	asrs	r3, r3, #8
 801cc40:	708b      	strb	r3, [r1, #2]
 801cc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc46:	2600      	movs	r6, #0
 801cc48:	e75a      	b.n	801cb00 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801cc4a:	2500      	movs	r5, #0
 801cc4c:	e776      	b.n	801cb3c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801cc4e:	463d      	mov	r5, r7
 801cc50:	e774      	b.n	801cb3c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801cc52:	2400      	movs	r4, #0
 801cc54:	e78f      	b.n	801cb76 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801cc56:	4663      	mov	r3, ip
 801cc58:	4664      	mov	r4, ip
 801cc5a:	e7a5      	b.n	801cba8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801cc5c:	2300      	movs	r3, #0
 801cc5e:	e7a3      	b.n	801cba8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801cc60:	463b      	mov	r3, r7
 801cc62:	e7a1      	b.n	801cba8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801cc64:	240074c4 	.word	0x240074c4

0801cc68 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc6c:	b097      	sub	sp, #92	; 0x5c
 801cc6e:	9214      	str	r2, [sp, #80]	; 0x50
 801cc70:	9309      	str	r3, [sp, #36]	; 0x24
 801cc72:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801cc74:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801cc78:	9015      	str	r0, [sp, #84]	; 0x54
 801cc7a:	910c      	str	r1, [sp, #48]	; 0x30
 801cc7c:	6850      	ldr	r0, [r2, #4]
 801cc7e:	930e      	str	r3, [sp, #56]	; 0x38
 801cc80:	6812      	ldr	r2, [r2, #0]
 801cc82:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801cc86:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	; 0x84
 801cc8a:	fb00 1303 	mla	r3, r0, r3, r1
 801cc8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc92:	eb02 0a03 	add.w	sl, r2, r3
 801cc96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cc98:	689b      	ldr	r3, [r3, #8]
 801cc9a:	3301      	adds	r3, #1
 801cc9c:	f023 0301 	bic.w	r3, r3, #1
 801cca0:	930f      	str	r3, [sp, #60]	; 0x3c
 801cca2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cca4:	681f      	ldr	r7, [r3, #0]
 801cca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	dc03      	bgt.n	801ccb4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ccac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	f340 8247 	ble.w	801d142 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801ccb4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ccb6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ccba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ccbe:	1e48      	subs	r0, r1, #1
 801ccc0:	f102 3cff 	add.w	ip, r2, #4294967295
 801ccc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	f340 80e5 	ble.w	801ce96 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801cccc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801ccd0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ccd4:	d406      	bmi.n	801cce4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ccd6:	4586      	cmp	lr, r0
 801ccd8:	da04      	bge.n	801cce4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	db02      	blt.n	801cce4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ccde:	4563      	cmp	r3, ip
 801cce0:	f2c0 80da 	blt.w	801ce98 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801cce4:	f11e 0e01 	adds.w	lr, lr, #1
 801cce8:	f100 80cb 	bmi.w	801ce82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ccec:	4571      	cmp	r1, lr
 801ccee:	f2c0 80c8 	blt.w	801ce82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ccf2:	3301      	adds	r3, #1
 801ccf4:	f100 80c5 	bmi.w	801ce82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ccf8:	429a      	cmp	r2, r3
 801ccfa:	f2c0 80c2 	blt.w	801ce82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801ccfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cd00:	46d0      	mov	r8, sl
 801cd02:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801cd06:	930d      	str	r3, [sp, #52]	; 0x34
 801cd08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	f340 80e3 	ble.w	801ced6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801cd10:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cd12:	1430      	asrs	r0, r6, #16
 801cd14:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801cd18:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cd1c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801cd20:	142b      	asrs	r3, r5, #16
 801cd22:	f100 812e 	bmi.w	801cf82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cd26:	f10c 3bff 	add.w	fp, ip, #4294967295
 801cd2a:	455b      	cmp	r3, fp
 801cd2c:	f280 8129 	bge.w	801cf82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cd30:	2800      	cmp	r0, #0
 801cd32:	f2c0 8126 	blt.w	801cf82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cd36:	f10e 3bff 	add.w	fp, lr, #4294967295
 801cd3a:	4558      	cmp	r0, fp
 801cd3c:	f280 8121 	bge.w	801cf82 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801cd40:	fb00 3309 	mla	r3, r0, r9, r3
 801cd44:	0858      	lsrs	r0, r3, #1
 801cd46:	07dc      	lsls	r4, r3, #31
 801cd48:	f817 c000 	ldrb.w	ip, [r7, r0]
 801cd4c:	bf54      	ite	pl
 801cd4e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801cd52:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801cd56:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801cd5a:	fa5f fc8c 	uxtb.w	ip, ip
 801cd5e:	2a00      	cmp	r2, #0
 801cd60:	f000 80fe 	beq.w	801cf60 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801cd64:	1c58      	adds	r0, r3, #1
 801cd66:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801cd6a:	07c0      	lsls	r0, r0, #31
 801cd6c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801cd70:	bf54      	ite	pl
 801cd72:	f00e 0e0f 	andpl.w	lr, lr, #15
 801cd76:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801cd7a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801cd7e:	fa5f f08e 	uxtb.w	r0, lr
 801cd82:	9010      	str	r0, [sp, #64]	; 0x40
 801cd84:	b1d9      	cbz	r1, 801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cd86:	444b      	add	r3, r9
 801cd88:	0858      	lsrs	r0, r3, #1
 801cd8a:	07dc      	lsls	r4, r3, #31
 801cd8c:	f103 0301 	add.w	r3, r3, #1
 801cd90:	5c38      	ldrb	r0, [r7, r0]
 801cd92:	bf54      	ite	pl
 801cd94:	f000 000f 	andpl.w	r0, r0, #15
 801cd98:	1100      	asrmi	r0, r0, #4
 801cd9a:	07dc      	lsls	r4, r3, #31
 801cd9c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801cda0:	b2c0      	uxtb	r0, r0
 801cda2:	900a      	str	r0, [sp, #40]	; 0x28
 801cda4:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801cda8:	f817 e000 	ldrb.w	lr, [r7, r0]
 801cdac:	bf54      	ite	pl
 801cdae:	f00e 030f 	andpl.w	r3, lr, #15
 801cdb2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801cdb6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cdba:	b2db      	uxtb	r3, r3
 801cdbc:	9311      	str	r3, [sp, #68]	; 0x44
 801cdbe:	b292      	uxth	r2, r2
 801cdc0:	b289      	uxth	r1, r1
 801cdc2:	0113      	lsls	r3, r2, #4
 801cdc4:	fb02 f001 	mul.w	r0, r2, r1
 801cdc8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cdca:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801cdce:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801cdd2:	1a1b      	subs	r3, r3, r0
 801cdd4:	b289      	uxth	r1, r1
 801cdd6:	b29b      	uxth	r3, r3
 801cdd8:	ebae 0e01 	sub.w	lr, lr, r1
 801cddc:	4353      	muls	r3, r2
 801cdde:	fa1f fe8e 	uxth.w	lr, lr
 801cde2:	fb0c 320e 	mla	r2, ip, lr, r3
 801cde6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cde8:	fb01 2203 	mla	r2, r1, r3, r2
 801cdec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801cdee:	fb00 2203 	mla	r2, r0, r3, r2
 801cdf2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801cdf6:	2a00      	cmp	r2, #0
 801cdf8:	d039      	beq.n	801ce6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cdfa:	4bc7      	ldr	r3, [pc, #796]	; (801d118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801cdfc:	6819      	ldr	r1, [r3, #0]
 801cdfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ce00:	fa5f fc81 	uxtb.w	ip, r1
 801ce04:	435a      	muls	r2, r3
 801ce06:	1c53      	adds	r3, r2, #1
 801ce08:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ce0c:	1212      	asrs	r2, r2, #8
 801ce0e:	b290      	uxth	r0, r2
 801ce10:	43d2      	mvns	r2, r2
 801ce12:	fb1c fc00 	smulbb	ip, ip, r0
 801ce16:	b2d3      	uxtb	r3, r2
 801ce18:	f898 2000 	ldrb.w	r2, [r8]
 801ce1c:	fb02 c203 	mla	r2, r2, r3, ip
 801ce20:	b292      	uxth	r2, r2
 801ce22:	f102 0c01 	add.w	ip, r2, #1
 801ce26:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ce2a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801ce2e:	fb1c fc03 	smulbb	ip, ip, r3
 801ce32:	1212      	asrs	r2, r2, #8
 801ce34:	f888 2000 	strb.w	r2, [r8]
 801ce38:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801ce3c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801ce40:	fb02 c200 	mla	r2, r2, r0, ip
 801ce44:	b292      	uxth	r2, r2
 801ce46:	f102 0c01 	add.w	ip, r2, #1
 801ce4a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801ce4e:	1212      	asrs	r2, r2, #8
 801ce50:	f888 2001 	strb.w	r2, [r8, #1]
 801ce54:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ce58:	fb12 f303 	smulbb	r3, r2, r3
 801ce5c:	fb01 3300 	mla	r3, r1, r0, r3
 801ce60:	b29b      	uxth	r3, r3
 801ce62:	1c5a      	adds	r2, r3, #1
 801ce64:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ce68:	121b      	asrs	r3, r3, #8
 801ce6a:	f888 3002 	strb.w	r3, [r8, #2]
 801ce6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ce70:	f108 0803 	add.w	r8, r8, #3
 801ce74:	441d      	add	r5, r3
 801ce76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ce78:	441e      	add	r6, r3
 801ce7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce7c:	3b01      	subs	r3, #1
 801ce7e:	930d      	str	r3, [sp, #52]	; 0x34
 801ce80:	e742      	b.n	801cd08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801ce82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801ce84:	f10a 0a03 	add.w	sl, sl, #3
 801ce88:	441d      	add	r5, r3
 801ce8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ce8c:	441e      	add	r6, r3
 801ce8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce90:	3b01      	subs	r3, #1
 801ce92:	9309      	str	r3, [sp, #36]	; 0x24
 801ce94:	e716      	b.n	801ccc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ce96:	d024      	beq.n	801cee2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ce98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce9a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801ce9c:	3b01      	subs	r3, #1
 801ce9e:	fb00 5003 	mla	r0, r0, r3, r5
 801cea2:	1400      	asrs	r0, r0, #16
 801cea4:	f53f af2b 	bmi.w	801ccfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cea8:	3901      	subs	r1, #1
 801ceaa:	4288      	cmp	r0, r1
 801ceac:	f6bf af27 	bge.w	801ccfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ceb0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801ceb2:	fb01 6303 	mla	r3, r1, r3, r6
 801ceb6:	141b      	asrs	r3, r3, #16
 801ceb8:	f53f af21 	bmi.w	801ccfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cebc:	3a01      	subs	r2, #1
 801cebe:	4293      	cmp	r3, r2
 801cec0:	f6bf af1d 	bge.w	801ccfe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801cec4:	f10a 0e03 	add.w	lr, sl, #3
 801cec8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801cecc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	; 0x3c
 801ced0:	f1b8 0f00 	cmp.w	r8, #0
 801ced4:	dc76      	bgt.n	801cfc4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801ced6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ced8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cedc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cee0:	44a2      	add	sl, r4
 801cee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	f340 812c 	ble.w	801d142 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801ceea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ceee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cef0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cef4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cef8:	eef0 6a62 	vmov.f32	s13, s5
 801cefc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cf00:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf04:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf08:	ee16 5a90 	vmov	r5, s13
 801cf0c:	eef0 6a43 	vmov.f32	s13, s6
 801cf10:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf14:	ee16 6a90 	vmov	r6, s13
 801cf18:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf1c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf20:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf24:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf28:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf2c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf30:	ee12 2a90 	vmov	r2, s5
 801cf34:	eef0 2a47 	vmov.f32	s5, s14
 801cf38:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf3c:	ee13 2a10 	vmov	r2, s6
 801cf40:	9323      	str	r3, [sp, #140]	; 0x8c
 801cf42:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cf44:	eeb0 3a67 	vmov.f32	s6, s15
 801cf48:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf4c:	9324      	str	r3, [sp, #144]	; 0x90
 801cf4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cf50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cf52:	3b01      	subs	r3, #1
 801cf54:	930c      	str	r3, [sp, #48]	; 0x30
 801cf56:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801cf58:	bf08      	it	eq
 801cf5a:	4613      	moveq	r3, r2
 801cf5c:	9309      	str	r3, [sp, #36]	; 0x24
 801cf5e:	e6a2      	b.n	801cca6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801cf60:	2900      	cmp	r1, #0
 801cf62:	f43f af2c 	beq.w	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cf66:	eb09 0003 	add.w	r0, r9, r3
 801cf6a:	0843      	lsrs	r3, r0, #1
 801cf6c:	07c0      	lsls	r0, r0, #31
 801cf6e:	5cfb      	ldrb	r3, [r7, r3]
 801cf70:	bf54      	ite	pl
 801cf72:	f003 030f 	andpl.w	r3, r3, #15
 801cf76:	111b      	asrmi	r3, r3, #4
 801cf78:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801cf7c:	b2db      	uxtb	r3, r3
 801cf7e:	930a      	str	r3, [sp, #40]	; 0x28
 801cf80:	e71d      	b.n	801cdbe <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801cf82:	f113 0b01 	adds.w	fp, r3, #1
 801cf86:	f53f af72 	bmi.w	801ce6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cf8a:	45dc      	cmp	ip, fp
 801cf8c:	f6ff af6f 	blt.w	801ce6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cf90:	f110 0b01 	adds.w	fp, r0, #1
 801cf94:	f53f af6b 	bmi.w	801ce6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cf98:	45de      	cmp	lr, fp
 801cf9a:	f6ff af68 	blt.w	801ce6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cf9e:	9302      	str	r3, [sp, #8]
 801cfa0:	fa0f f38e 	sxth.w	r3, lr
 801cfa4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801cfa6:	9301      	str	r3, [sp, #4]
 801cfa8:	fa0f f38c 	sxth.w	r3, ip
 801cfac:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801cfb0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cfb4:	9300      	str	r3, [sp, #0]
 801cfb6:	463a      	mov	r2, r7
 801cfb8:	464b      	mov	r3, r9
 801cfba:	4641      	mov	r1, r8
 801cfbc:	9815      	ldr	r0, [sp, #84]	; 0x54
 801cfbe:	f7ff fd79 	bl	801cab4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801cfc2:	e754      	b.n	801ce6e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801cfc4:	142a      	asrs	r2, r5, #16
 801cfc6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801cfca:	1433      	asrs	r3, r6, #16
 801cfcc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cfd0:	fb09 2303 	mla	r3, r9, r3, r2
 801cfd4:	085a      	lsrs	r2, r3, #1
 801cfd6:	07dc      	lsls	r4, r3, #31
 801cfd8:	5cba      	ldrb	r2, [r7, r2]
 801cfda:	bf54      	ite	pl
 801cfdc:	f002 020f 	andpl.w	r2, r2, #15
 801cfe0:	1112      	asrmi	r2, r2, #4
 801cfe2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801cfe6:	b2d2      	uxtb	r2, r2
 801cfe8:	2900      	cmp	r1, #0
 801cfea:	f000 8097 	beq.w	801d11c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801cfee:	f103 0b01 	add.w	fp, r3, #1
 801cff2:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801cff6:	f01b 0f01 	tst.w	fp, #1
 801cffa:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801cffe:	bf0c      	ite	eq
 801d000:	f00c 0c0f 	andeq.w	ip, ip, #15
 801d004:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801d008:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d00c:	fa5f f48c 	uxtb.w	r4, ip
 801d010:	9412      	str	r4, [sp, #72]	; 0x48
 801d012:	b300      	cbz	r0, 801d056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d014:	444b      	add	r3, r9
 801d016:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d01a:	07dc      	lsls	r4, r3, #31
 801d01c:	f103 0301 	add.w	r3, r3, #1
 801d020:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d024:	bf54      	ite	pl
 801d026:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d02a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d02e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d032:	fa5f f48c 	uxtb.w	r4, ip
 801d036:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d03a:	940b      	str	r4, [sp, #44]	; 0x2c
 801d03c:	07dc      	lsls	r4, r3, #31
 801d03e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d042:	bf54      	ite	pl
 801d044:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d048:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d04c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d050:	fa5f f38c 	uxtb.w	r3, ip
 801d054:	9313      	str	r3, [sp, #76]	; 0x4c
 801d056:	b289      	uxth	r1, r1
 801d058:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d05a:	b280      	uxth	r0, r0
 801d05c:	fb01 f300 	mul.w	r3, r1, r0
 801d060:	0109      	lsls	r1, r1, #4
 801d062:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801d066:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 801d06a:	1ac9      	subs	r1, r1, r3
 801d06c:	b280      	uxth	r0, r0
 801d06e:	b289      	uxth	r1, r1
 801d070:	ebac 0c00 	sub.w	ip, ip, r0
 801d074:	4361      	muls	r1, r4
 801d076:	fa1f fc8c 	uxth.w	ip, ip
 801d07a:	fb02 120c 	mla	r2, r2, ip, r1
 801d07e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d080:	fb00 2001 	mla	r0, r0, r1, r2
 801d084:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801d086:	fb03 0302 	mla	r3, r3, r2, r0
 801d08a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d039      	beq.n	801d106 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d092:	4a21      	ldr	r2, [pc, #132]	; (801d118 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801d094:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801d098:	6810      	ldr	r0, [r2, #0]
 801d09a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d09c:	fa5f fc80 	uxtb.w	ip, r0
 801d0a0:	4353      	muls	r3, r2
 801d0a2:	1c5a      	adds	r2, r3, #1
 801d0a4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d0a8:	121b      	asrs	r3, r3, #8
 801d0aa:	b29a      	uxth	r2, r3
 801d0ac:	43db      	mvns	r3, r3
 801d0ae:	fb1c fc02 	smulbb	ip, ip, r2
 801d0b2:	b2db      	uxtb	r3, r3
 801d0b4:	fb01 c103 	mla	r1, r1, r3, ip
 801d0b8:	b289      	uxth	r1, r1
 801d0ba:	f101 0c01 	add.w	ip, r1, #1
 801d0be:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d0c2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801d0c6:	fb1c fc03 	smulbb	ip, ip, r3
 801d0ca:	1209      	asrs	r1, r1, #8
 801d0cc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801d0d0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801d0d4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801d0d8:	fb01 c102 	mla	r1, r1, r2, ip
 801d0dc:	b289      	uxth	r1, r1
 801d0de:	f101 0c01 	add.w	ip, r1, #1
 801d0e2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801d0e6:	1209      	asrs	r1, r1, #8
 801d0e8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801d0ec:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801d0f0:	fb11 f303 	smulbb	r3, r1, r3
 801d0f4:	fb00 3002 	mla	r0, r0, r2, r3
 801d0f8:	b280      	uxth	r0, r0
 801d0fa:	1c42      	adds	r2, r0, #1
 801d0fc:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d100:	1200      	asrs	r0, r0, #8
 801d102:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801d106:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801d108:	f10e 0e03 	add.w	lr, lr, #3
 801d10c:	f108 38ff 	add.w	r8, r8, #4294967295
 801d110:	441d      	add	r5, r3
 801d112:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d114:	441e      	add	r6, r3
 801d116:	e6db      	b.n	801ced0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801d118:	240074c4 	.word	0x240074c4
 801d11c:	2800      	cmp	r0, #0
 801d11e:	d09a      	beq.n	801d056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d120:	444b      	add	r3, r9
 801d122:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801d126:	07db      	lsls	r3, r3, #31
 801d128:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801d12c:	bf54      	ite	pl
 801d12e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d132:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d136:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d13a:	fa5f f38c 	uxtb.w	r3, ip
 801d13e:	930b      	str	r3, [sp, #44]	; 0x2c
 801d140:	e789      	b.n	801d056 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801d142:	b017      	add	sp, #92	; 0x5c
 801d144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d148 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801d148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d14c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
 801d150:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d154:	2d00      	cmp	r5, #0
 801d156:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 801d15a:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801d15e:	fb04 5e03 	mla	lr, r4, r3, r5
 801d162:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 801d166:	f2c0 80b1 	blt.w	801d2cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d16a:	45a9      	cmp	r9, r5
 801d16c:	f340 80ae 	ble.w	801d2cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d170:	2c00      	cmp	r4, #0
 801d172:	f2c0 80ab 	blt.w	801d2cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d176:	45a0      	cmp	r8, r4
 801d178:	f340 80a8 	ble.w	801d2cc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801d17c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801d180:	f01e 0f01 	tst.w	lr, #1
 801d184:	5d97      	ldrb	r7, [r2, r6]
 801d186:	bf0c      	ite	eq
 801d188:	f007 070f 	andeq.w	r7, r7, #15
 801d18c:	113f      	asrne	r7, r7, #4
 801d18e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801d192:	b2ff      	uxtb	r7, r7
 801d194:	f115 0a01 	adds.w	sl, r5, #1
 801d198:	f100 809a 	bmi.w	801d2d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d19c:	45d1      	cmp	r9, sl
 801d19e:	f340 8097 	ble.w	801d2d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d1a2:	2c00      	cmp	r4, #0
 801d1a4:	f2c0 8094 	blt.w	801d2d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d1a8:	45a0      	cmp	r8, r4
 801d1aa:	f340 8091 	ble.w	801d2d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801d1ae:	2800      	cmp	r0, #0
 801d1b0:	f000 8090 	beq.w	801d2d4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801d1b4:	f10e 0b01 	add.w	fp, lr, #1
 801d1b8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801d1bc:	f01b 0f01 	tst.w	fp, #1
 801d1c0:	5d96      	ldrb	r6, [r2, r6]
 801d1c2:	bf0c      	ite	eq
 801d1c4:	f006 060f 	andeq.w	r6, r6, #15
 801d1c8:	1136      	asrne	r6, r6, #4
 801d1ca:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801d1ce:	b2f6      	uxtb	r6, r6
 801d1d0:	f1bc 0f00 	cmp.w	ip, #0
 801d1d4:	f000 8082 	beq.w	801d2dc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801d1d8:	2d00      	cmp	r5, #0
 801d1da:	f104 0401 	add.w	r4, r4, #1
 801d1de:	db7b      	blt.n	801d2d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d1e0:	45a9      	cmp	r9, r5
 801d1e2:	dd79      	ble.n	801d2d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d1e4:	2c00      	cmp	r4, #0
 801d1e6:	db77      	blt.n	801d2d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d1e8:	45a0      	cmp	r8, r4
 801d1ea:	dd75      	ble.n	801d2d8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801d1ec:	eb03 0b0e 	add.w	fp, r3, lr
 801d1f0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801d1f4:	f01b 0f01 	tst.w	fp, #1
 801d1f8:	5d55      	ldrb	r5, [r2, r5]
 801d1fa:	bf0c      	ite	eq
 801d1fc:	f005 050f 	andeq.w	r5, r5, #15
 801d200:	112d      	asrne	r5, r5, #4
 801d202:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801d206:	b2ed      	uxtb	r5, r5
 801d208:	f1ba 0f00 	cmp.w	sl, #0
 801d20c:	db69      	blt.n	801d2e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d20e:	45d1      	cmp	r9, sl
 801d210:	dd67      	ble.n	801d2e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d212:	2c00      	cmp	r4, #0
 801d214:	db65      	blt.n	801d2e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d216:	45a0      	cmp	r8, r4
 801d218:	dd63      	ble.n	801d2e2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801d21a:	2800      	cmp	r0, #0
 801d21c:	d063      	beq.n	801d2e6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801d21e:	3301      	adds	r3, #1
 801d220:	449e      	add	lr, r3
 801d222:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801d226:	f01e 0f01 	tst.w	lr, #1
 801d22a:	5cd4      	ldrb	r4, [r2, r3]
 801d22c:	bf0c      	ite	eq
 801d22e:	f004 040f 	andeq.w	r4, r4, #15
 801d232:	1124      	asrne	r4, r4, #4
 801d234:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801d238:	b2e3      	uxtb	r3, r4
 801d23a:	b282      	uxth	r2, r0
 801d23c:	fa1f fc8c 	uxth.w	ip, ip
 801d240:	fb02 f40c 	mul.w	r4, r2, ip
 801d244:	0112      	lsls	r2, r2, #4
 801d246:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801d24a:	fa1f f08c 	uxth.w	r0, ip
 801d24e:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 801d252:	1b12      	subs	r2, r2, r4
 801d254:	ebac 0c00 	sub.w	ip, ip, r0
 801d258:	b292      	uxth	r2, r2
 801d25a:	fa1f fc8c 	uxth.w	ip, ip
 801d25e:	4372      	muls	r2, r6
 801d260:	fb07 220c 	mla	r2, r7, ip, r2
 801d264:	fb00 2005 	mla	r0, r0, r5, r2
 801d268:	fb04 0303 	mla	r3, r4, r3, r0
 801d26c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d270:	b353      	cbz	r3, 801d2c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801d272:	4a1e      	ldr	r2, [pc, #120]	; (801d2ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801d274:	7808      	ldrb	r0, [r1, #0]
 801d276:	6814      	ldr	r4, [r2, #0]
 801d278:	b29a      	uxth	r2, r3
 801d27a:	43db      	mvns	r3, r3
 801d27c:	b2e5      	uxtb	r5, r4
 801d27e:	b2db      	uxtb	r3, r3
 801d280:	fb15 f502 	smulbb	r5, r5, r2
 801d284:	fb00 5003 	mla	r0, r0, r3, r5
 801d288:	b280      	uxth	r0, r0
 801d28a:	1c45      	adds	r5, r0, #1
 801d28c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d290:	784d      	ldrb	r5, [r1, #1]
 801d292:	fb15 f503 	smulbb	r5, r5, r3
 801d296:	1200      	asrs	r0, r0, #8
 801d298:	7008      	strb	r0, [r1, #0]
 801d29a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801d29e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801d2a2:	fb00 5002 	mla	r0, r0, r2, r5
 801d2a6:	b280      	uxth	r0, r0
 801d2a8:	1c45      	adds	r5, r0, #1
 801d2aa:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801d2ae:	1200      	asrs	r0, r0, #8
 801d2b0:	7048      	strb	r0, [r1, #1]
 801d2b2:	7888      	ldrb	r0, [r1, #2]
 801d2b4:	fb10 f303 	smulbb	r3, r0, r3
 801d2b8:	fb04 3202 	mla	r2, r4, r2, r3
 801d2bc:	b292      	uxth	r2, r2
 801d2be:	1c53      	adds	r3, r2, #1
 801d2c0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d2c4:	1212      	asrs	r2, r2, #8
 801d2c6:	708a      	strb	r2, [r1, #2]
 801d2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2cc:	2700      	movs	r7, #0
 801d2ce:	e761      	b.n	801d194 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801d2d0:	2600      	movs	r6, #0
 801d2d2:	e77d      	b.n	801d1d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801d2d4:	4606      	mov	r6, r0
 801d2d6:	e77b      	b.n	801d1d0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801d2d8:	2500      	movs	r5, #0
 801d2da:	e795      	b.n	801d208 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801d2dc:	4663      	mov	r3, ip
 801d2de:	4665      	mov	r5, ip
 801d2e0:	e7ab      	b.n	801d23a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d2e2:	2300      	movs	r3, #0
 801d2e4:	e7a9      	b.n	801d23a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	e7a7      	b.n	801d23a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801d2ea:	bf00      	nop
 801d2ec:	240074c4 	.word	0x240074c4

0801d2f0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2f4:	b093      	sub	sp, #76	; 0x4c
 801d2f6:	461c      	mov	r4, r3
 801d2f8:	920c      	str	r2, [sp, #48]	; 0x30
 801d2fa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d2fc:	9011      	str	r0, [sp, #68]	; 0x44
 801d2fe:	9107      	str	r1, [sp, #28]
 801d300:	6850      	ldr	r0, [r2, #4]
 801d302:	6812      	ldr	r2, [r2, #0]
 801d304:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801d308:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	; 0x74
 801d30c:	fb00 1303 	mla	r3, r0, r3, r1
 801d310:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d314:	eb02 0b03 	add.w	fp, r2, r3
 801d318:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d31a:	689b      	ldr	r3, [r3, #8]
 801d31c:	3301      	adds	r3, #1
 801d31e:	f023 0301 	bic.w	r3, r3, #1
 801d322:	9309      	str	r3, [sp, #36]	; 0x24
 801d324:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d326:	f8d3 8000 	ldr.w	r8, [r3]
 801d32a:	9b07      	ldr	r3, [sp, #28]
 801d32c:	2b00      	cmp	r3, #0
 801d32e:	dc03      	bgt.n	801d338 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d330:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d332:	2b00      	cmp	r3, #0
 801d334:	f340 822b 	ble.w	801d78e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d338:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d33a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d33e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d342:	1e48      	subs	r0, r1, #1
 801d344:	1e57      	subs	r7, r2, #1
 801d346:	2c00      	cmp	r4, #0
 801d348:	f340 80d7 	ble.w	801d4fa <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d34c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d350:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d354:	d406      	bmi.n	801d364 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d356:	4584      	cmp	ip, r0
 801d358:	da04      	bge.n	801d364 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	db02      	blt.n	801d364 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801d35e:	42bb      	cmp	r3, r7
 801d360:	f2c0 80cc 	blt.w	801d4fc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d364:	f11c 0c01 	adds.w	ip, ip, #1
 801d368:	f100 80bf 	bmi.w	801d4ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d36c:	4561      	cmp	r1, ip
 801d36e:	f2c0 80bc 	blt.w	801d4ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d372:	3301      	adds	r3, #1
 801d374:	f100 80b9 	bmi.w	801d4ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d378:	429a      	cmp	r2, r3
 801d37a:	f2c0 80b6 	blt.w	801d4ea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801d37e:	46a2      	mov	sl, r4
 801d380:	465f      	mov	r7, fp
 801d382:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d386:	f1ba 0f00 	cmp.w	sl, #0
 801d38a:	f340 80d4 	ble.w	801d536 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801d38e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801d392:	1430      	asrs	r0, r6, #16
 801d394:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801d398:	9308      	str	r3, [sp, #32]
 801d39a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d39c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801d3a0:	142b      	asrs	r3, r5, #16
 801d3a2:	f100 8124 	bmi.w	801d5ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d3a6:	f10c 32ff 	add.w	r2, ip, #4294967295
 801d3aa:	4293      	cmp	r3, r2
 801d3ac:	f280 811f 	bge.w	801d5ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d3b0:	2800      	cmp	r0, #0
 801d3b2:	f2c0 811c 	blt.w	801d5ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d3b6:	f10e 32ff 	add.w	r2, lr, #4294967295
 801d3ba:	4290      	cmp	r0, r2
 801d3bc:	f280 8117 	bge.w	801d5ee <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801d3c0:	fb00 3309 	mla	r3, r0, r9, r3
 801d3c4:	0858      	lsrs	r0, r3, #1
 801d3c6:	07da      	lsls	r2, r3, #31
 801d3c8:	9a08      	ldr	r2, [sp, #32]
 801d3ca:	f818 c000 	ldrb.w	ip, [r8, r0]
 801d3ce:	bf54      	ite	pl
 801d3d0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801d3d4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801d3d8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801d3dc:	fa5f fc8c 	uxtb.w	ip, ip
 801d3e0:	2a00      	cmp	r2, #0
 801d3e2:	f000 80ed 	beq.w	801d5c0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801d3e6:	1c58      	adds	r0, r3, #1
 801d3e8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801d3ec:	07c0      	lsls	r0, r0, #31
 801d3ee:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801d3f2:	bf54      	ite	pl
 801d3f4:	f00e 0e0f 	andpl.w	lr, lr, #15
 801d3f8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801d3fc:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801d400:	fa5f fe8e 	uxtb.w	lr, lr
 801d404:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 801d408:	b1c9      	cbz	r1, 801d43e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d40a:	444b      	add	r3, r9
 801d40c:	0858      	lsrs	r0, r3, #1
 801d40e:	07da      	lsls	r2, r3, #31
 801d410:	f818 0000 	ldrb.w	r0, [r8, r0]
 801d414:	bf54      	ite	pl
 801d416:	f000 000f 	andpl.w	r0, r0, #15
 801d41a:	1100      	asrmi	r0, r0, #4
 801d41c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801d420:	b2c0      	uxtb	r0, r0
 801d422:	900a      	str	r0, [sp, #40]	; 0x28
 801d424:	1c58      	adds	r0, r3, #1
 801d426:	0843      	lsrs	r3, r0, #1
 801d428:	07c2      	lsls	r2, r0, #31
 801d42a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d42e:	bf54      	ite	pl
 801d430:	f003 030f 	andpl.w	r3, r3, #15
 801d434:	111b      	asrmi	r3, r3, #4
 801d436:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d43a:	b2db      	uxtb	r3, r3
 801d43c:	930e      	str	r3, [sp, #56]	; 0x38
 801d43e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801d442:	b289      	uxth	r1, r1
 801d444:	fb02 f301 	mul.w	r3, r2, r1
 801d448:	0112      	lsls	r2, r2, #4
 801d44a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801d44e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 801d452:	1ad2      	subs	r2, r2, r3
 801d454:	b289      	uxth	r1, r1
 801d456:	b292      	uxth	r2, r2
 801d458:	1a40      	subs	r0, r0, r1
 801d45a:	fa1f fe80 	uxth.w	lr, r0
 801d45e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801d460:	4342      	muls	r2, r0
 801d462:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801d466:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d468:	fb01 c102 	mla	r1, r1, r2, ip
 801d46c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d46e:	fb03 1302 	mla	r3, r3, r2, r1
 801d472:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d476:	b383      	cbz	r3, 801d4da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d478:	4ac6      	ldr	r2, [pc, #792]	; (801d794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801d47a:	2bff      	cmp	r3, #255	; 0xff
 801d47c:	6812      	ldr	r2, [r2, #0]
 801d47e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801d482:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801d486:	b2d2      	uxtb	r2, r2
 801d488:	f000 80ac 	beq.w	801d5e4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801d48c:	b299      	uxth	r1, r3
 801d48e:	43db      	mvns	r3, r3
 801d490:	f897 c000 	ldrb.w	ip, [r7]
 801d494:	fb12 f201 	smulbb	r2, r2, r1
 801d498:	b2db      	uxtb	r3, r3
 801d49a:	fb10 f001 	smulbb	r0, r0, r1
 801d49e:	fb0c 2203 	mla	r2, ip, r3, r2
 801d4a2:	fb1e f101 	smulbb	r1, lr, r1
 801d4a6:	b292      	uxth	r2, r2
 801d4a8:	f102 0c01 	add.w	ip, r2, #1
 801d4ac:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801d4b0:	1212      	asrs	r2, r2, #8
 801d4b2:	703a      	strb	r2, [r7, #0]
 801d4b4:	787a      	ldrb	r2, [r7, #1]
 801d4b6:	fb02 0003 	mla	r0, r2, r3, r0
 801d4ba:	b280      	uxth	r0, r0
 801d4bc:	1c42      	adds	r2, r0, #1
 801d4be:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d4c2:	78ba      	ldrb	r2, [r7, #2]
 801d4c4:	fb02 1303 	mla	r3, r2, r3, r1
 801d4c8:	1200      	asrs	r0, r0, #8
 801d4ca:	b29b      	uxth	r3, r3
 801d4cc:	7078      	strb	r0, [r7, #1]
 801d4ce:	f103 0e01 	add.w	lr, r3, #1
 801d4d2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801d4d6:	121b      	asrs	r3, r3, #8
 801d4d8:	70bb      	strb	r3, [r7, #2]
 801d4da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d4dc:	3703      	adds	r7, #3
 801d4de:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d4e2:	441d      	add	r5, r3
 801d4e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d4e6:	441e      	add	r6, r3
 801d4e8:	e74d      	b.n	801d386 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d4ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d4ec:	3c01      	subs	r4, #1
 801d4ee:	f10b 0b03 	add.w	fp, fp, #3
 801d4f2:	441d      	add	r5, r3
 801d4f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d4f6:	441e      	add	r6, r3
 801d4f8:	e725      	b.n	801d346 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d4fa:	d021      	beq.n	801d540 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801d4fc:	1e63      	subs	r3, r4, #1
 801d4fe:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d500:	fb00 5003 	mla	r0, r0, r3, r5
 801d504:	1400      	asrs	r0, r0, #16
 801d506:	f53f af3a 	bmi.w	801d37e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d50a:	3901      	subs	r1, #1
 801d50c:	4288      	cmp	r0, r1
 801d50e:	f6bf af36 	bge.w	801d37e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d512:	9920      	ldr	r1, [sp, #128]	; 0x80
 801d514:	fb01 6303 	mla	r3, r1, r3, r6
 801d518:	141b      	asrs	r3, r3, #16
 801d51a:	f53f af30 	bmi.w	801d37e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d51e:	3a01      	subs	r2, #1
 801d520:	4293      	cmp	r3, r2
 801d522:	f6bf af2c 	bge.w	801d37e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801d526:	f10b 0c03 	add.w	ip, fp, #3
 801d52a:	46a6      	mov	lr, r4
 801d52c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 801d530:	f1be 0f00 	cmp.w	lr, #0
 801d534:	dc79      	bgt.n	801d62a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801d536:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801d53a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d53e:	44a3      	add	fp, r4
 801d540:	9b07      	ldr	r3, [sp, #28]
 801d542:	2b00      	cmp	r3, #0
 801d544:	f340 8123 	ble.w	801d78e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801d548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d54c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d54e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d552:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d556:	eef0 6a62 	vmov.f32	s13, s5
 801d55a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d55e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d566:	ee16 5a90 	vmov	r5, s13
 801d56a:	eef0 6a43 	vmov.f32	s13, s6
 801d56e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d572:	ee16 6a90 	vmov	r6, s13
 801d576:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d57a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d57e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d582:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d586:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d58a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d58e:	ee12 2a90 	vmov	r2, s5
 801d592:	eef0 2a47 	vmov.f32	s5, s14
 801d596:	fb92 f3f3 	sdiv	r3, r2, r3
 801d59a:	ee13 2a10 	vmov	r2, s6
 801d59e:	931f      	str	r3, [sp, #124]	; 0x7c
 801d5a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d5a2:	eeb0 3a67 	vmov.f32	s6, s15
 801d5a6:	fb92 f3f3 	sdiv	r3, r2, r3
 801d5aa:	9320      	str	r3, [sp, #128]	; 0x80
 801d5ac:	9b07      	ldr	r3, [sp, #28]
 801d5ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d5b0:	3b01      	subs	r3, #1
 801d5b2:	9307      	str	r3, [sp, #28]
 801d5b4:	bf08      	it	eq
 801d5b6:	4614      	moveq	r4, r2
 801d5b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801d5ba:	bf18      	it	ne
 801d5bc:	461c      	movne	r4, r3
 801d5be:	e6b4      	b.n	801d32a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d5c0:	2900      	cmp	r1, #0
 801d5c2:	f43f af3c 	beq.w	801d43e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d5c6:	eb09 0003 	add.w	r0, r9, r3
 801d5ca:	0843      	lsrs	r3, r0, #1
 801d5cc:	07c0      	lsls	r0, r0, #31
 801d5ce:	f818 3003 	ldrb.w	r3, [r8, r3]
 801d5d2:	bf54      	ite	pl
 801d5d4:	f003 030f 	andpl.w	r3, r3, #15
 801d5d8:	111b      	asrmi	r3, r3, #4
 801d5da:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801d5de:	b2db      	uxtb	r3, r3
 801d5e0:	930a      	str	r3, [sp, #40]	; 0x28
 801d5e2:	e72c      	b.n	801d43e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801d5e4:	703a      	strb	r2, [r7, #0]
 801d5e6:	7078      	strb	r0, [r7, #1]
 801d5e8:	f887 e002 	strb.w	lr, [r7, #2]
 801d5ec:	e775      	b.n	801d4da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d5ee:	1c5a      	adds	r2, r3, #1
 801d5f0:	f53f af73 	bmi.w	801d4da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d5f4:	4594      	cmp	ip, r2
 801d5f6:	f6ff af70 	blt.w	801d4da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d5fa:	1c42      	adds	r2, r0, #1
 801d5fc:	f53f af6d 	bmi.w	801d4da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d600:	4596      	cmp	lr, r2
 801d602:	f6ff af6a 	blt.w	801d4da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d606:	9302      	str	r3, [sp, #8]
 801d608:	fa0f f38e 	sxth.w	r3, lr
 801d60c:	9a08      	ldr	r2, [sp, #32]
 801d60e:	9301      	str	r3, [sp, #4]
 801d610:	fa0f f38c 	sxth.w	r3, ip
 801d614:	9105      	str	r1, [sp, #20]
 801d616:	4639      	mov	r1, r7
 801d618:	9300      	str	r3, [sp, #0]
 801d61a:	464b      	mov	r3, r9
 801d61c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801d620:	4642      	mov	r2, r8
 801d622:	9811      	ldr	r0, [sp, #68]	; 0x44
 801d624:	f7ff fd90 	bl	801d148 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801d628:	e757      	b.n	801d4da <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d62a:	142a      	asrs	r2, r5, #16
 801d62c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d630:	1433      	asrs	r3, r6, #16
 801d632:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801d636:	fb09 2303 	mla	r3, r9, r3, r2
 801d63a:	085a      	lsrs	r2, r3, #1
 801d63c:	07d9      	lsls	r1, r3, #31
 801d63e:	f818 2002 	ldrb.w	r2, [r8, r2]
 801d642:	bf54      	ite	pl
 801d644:	f002 020f 	andpl.w	r2, r2, #15
 801d648:	1112      	asrmi	r2, r2, #4
 801d64a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801d64e:	b2d2      	uxtb	r2, r2
 801d650:	2800      	cmp	r0, #0
 801d652:	f000 8085 	beq.w	801d760 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801d656:	f103 0a01 	add.w	sl, r3, #1
 801d65a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801d65e:	f01a 0f01 	tst.w	sl, #1
 801d662:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d666:	bf0c      	ite	eq
 801d668:	f001 010f 	andeq.w	r1, r1, #15
 801d66c:	1109      	asrne	r1, r1, #4
 801d66e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d672:	b2c9      	uxtb	r1, r1
 801d674:	910f      	str	r1, [sp, #60]	; 0x3c
 801d676:	b1df      	cbz	r7, 801d6b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d678:	444b      	add	r3, r9
 801d67a:	0859      	lsrs	r1, r3, #1
 801d67c:	f013 0f01 	tst.w	r3, #1
 801d680:	f103 0301 	add.w	r3, r3, #1
 801d684:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d688:	bf0c      	ite	eq
 801d68a:	f001 010f 	andeq.w	r1, r1, #15
 801d68e:	1109      	asrne	r1, r1, #4
 801d690:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d694:	b2c9      	uxtb	r1, r1
 801d696:	910b      	str	r1, [sp, #44]	; 0x2c
 801d698:	0859      	lsrs	r1, r3, #1
 801d69a:	07db      	lsls	r3, r3, #31
 801d69c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d6a0:	bf54      	ite	pl
 801d6a2:	f001 010f 	andpl.w	r1, r1, #15
 801d6a6:	1109      	asrmi	r1, r1, #4
 801d6a8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d6ac:	b2c9      	uxtb	r1, r1
 801d6ae:	9110      	str	r1, [sp, #64]	; 0x40
 801d6b0:	b280      	uxth	r0, r0
 801d6b2:	b2bf      	uxth	r7, r7
 801d6b4:	fb00 f307 	mul.w	r3, r0, r7
 801d6b8:	0100      	lsls	r0, r0, #4
 801d6ba:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801d6be:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 801d6c2:	1ac0      	subs	r0, r0, r3
 801d6c4:	b2bf      	uxth	r7, r7
 801d6c6:	b280      	uxth	r0, r0
 801d6c8:	1bc9      	subs	r1, r1, r7
 801d6ca:	fa1f fa81 	uxth.w	sl, r1
 801d6ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801d6d0:	4348      	muls	r0, r1
 801d6d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d6d4:	fb02 020a 	mla	r2, r2, sl, r0
 801d6d8:	fb07 2701 	mla	r7, r7, r1, r2
 801d6dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801d6de:	fb03 7302 	mla	r3, r3, r2, r7
 801d6e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d6e6:	b393      	cbz	r3, 801d74e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d6e8:	4a2a      	ldr	r2, [pc, #168]	; (801d794 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801d6ea:	2bff      	cmp	r3, #255	; 0xff
 801d6ec:	6811      	ldr	r1, [r2, #0]
 801d6ee:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801d6f2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801d6f6:	b2c9      	uxtb	r1, r1
 801d6f8:	d042      	beq.n	801d780 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801d6fa:	b298      	uxth	r0, r3
 801d6fc:	43db      	mvns	r3, r3
 801d6fe:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801d702:	fb11 f100 	smulbb	r1, r1, r0
 801d706:	b2db      	uxtb	r3, r3
 801d708:	fb17 f700 	smulbb	r7, r7, r0
 801d70c:	fb02 1103 	mla	r1, r2, r3, r1
 801d710:	fb1a f000 	smulbb	r0, sl, r0
 801d714:	b289      	uxth	r1, r1
 801d716:	1c4a      	adds	r2, r1, #1
 801d718:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d71c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801d720:	fb02 7703 	mla	r7, r2, r3, r7
 801d724:	1209      	asrs	r1, r1, #8
 801d726:	b2bf      	uxth	r7, r7
 801d728:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d72c:	1c7a      	adds	r2, r7, #1
 801d72e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801d732:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801d736:	fb02 0303 	mla	r3, r2, r3, r0
 801d73a:	123f      	asrs	r7, r7, #8
 801d73c:	b29b      	uxth	r3, r3
 801d73e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d742:	1c5a      	adds	r2, r3, #1
 801d744:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d748:	121b      	asrs	r3, r3, #8
 801d74a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801d74e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d750:	f10c 0c03 	add.w	ip, ip, #3
 801d754:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d758:	441d      	add	r5, r3
 801d75a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d75c:	441e      	add	r6, r3
 801d75e:	e6e7      	b.n	801d530 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801d760:	2f00      	cmp	r7, #0
 801d762:	d0a5      	beq.n	801d6b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d764:	444b      	add	r3, r9
 801d766:	0859      	lsrs	r1, r3, #1
 801d768:	07db      	lsls	r3, r3, #31
 801d76a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d76e:	bf54      	ite	pl
 801d770:	f001 010f 	andpl.w	r1, r1, #15
 801d774:	1109      	asrmi	r1, r1, #4
 801d776:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801d77a:	b2c9      	uxtb	r1, r1
 801d77c:	910b      	str	r1, [sp, #44]	; 0x2c
 801d77e:	e797      	b.n	801d6b0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801d780:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801d784:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801d788:	f80c ac01 	strb.w	sl, [ip, #-1]
 801d78c:	e7df      	b.n	801d74e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801d78e:	b013      	add	sp, #76	; 0x4c
 801d790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d794:	240074c4 	.word	0x240074c4

0801d798 <CRC_Lock>:
 801d798:	4a20      	ldr	r2, [pc, #128]	; (801d81c <CRC_Lock+0x84>)
 801d79a:	b530      	push	{r4, r5, lr}
 801d79c:	6813      	ldr	r3, [r2, #0]
 801d79e:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 801d7a2:	f24c 2540 	movw	r5, #49728	; 0xc240
 801d7a6:	f023 0301 	bic.w	r3, r3, #1
 801d7aa:	6013      	str	r3, [r2, #0]
 801d7ac:	4b1c      	ldr	r3, [pc, #112]	; (801d820 <CRC_Lock+0x88>)
 801d7ae:	681a      	ldr	r2, [r3, #0]
 801d7b0:	4022      	ands	r2, r4
 801d7b2:	42aa      	cmp	r2, r5
 801d7b4:	d005      	beq.n	801d7c2 <CRC_Lock+0x2a>
 801d7b6:	681b      	ldr	r3, [r3, #0]
 801d7b8:	f24c 2270 	movw	r2, #49776	; 0xc270
 801d7bc:	4023      	ands	r3, r4
 801d7be:	4293      	cmp	r3, r2
 801d7c0:	d124      	bne.n	801d80c <CRC_Lock+0x74>
 801d7c2:	4b18      	ldr	r3, [pc, #96]	; (801d824 <CRC_Lock+0x8c>)
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	bb0b      	cbnz	r3, 801d80c <CRC_Lock+0x74>
 801d7c8:	4b17      	ldr	r3, [pc, #92]	; (801d828 <CRC_Lock+0x90>)
 801d7ca:	681a      	ldr	r2, [r3, #0]
 801d7cc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d7d0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 801d7d4:	d00d      	beq.n	801d7f2 <CRC_Lock+0x5a>
 801d7d6:	681a      	ldr	r2, [r3, #0]
 801d7d8:	f240 4483 	movw	r4, #1155	; 0x483
 801d7dc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801d7e0:	42a2      	cmp	r2, r4
 801d7e2:	d006      	beq.n	801d7f2 <CRC_Lock+0x5a>
 801d7e4:	681b      	ldr	r3, [r3, #0]
 801d7e6:	f240 4285 	movw	r2, #1157	; 0x485
 801d7ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d7ee:	4293      	cmp	r3, r2
 801d7f0:	d10c      	bne.n	801d80c <CRC_Lock+0x74>
 801d7f2:	4b0e      	ldr	r3, [pc, #56]	; (801d82c <CRC_Lock+0x94>)
 801d7f4:	2201      	movs	r2, #1
 801d7f6:	601a      	str	r2, [r3, #0]
 801d7f8:	681a      	ldr	r2, [r3, #0]
 801d7fa:	2a00      	cmp	r2, #0
 801d7fc:	d1fc      	bne.n	801d7f8 <CRC_Lock+0x60>
 801d7fe:	4b0c      	ldr	r3, [pc, #48]	; (801d830 <CRC_Lock+0x98>)
 801d800:	6018      	str	r0, [r3, #0]
 801d802:	6818      	ldr	r0, [r3, #0]
 801d804:	1a43      	subs	r3, r0, r1
 801d806:	4258      	negs	r0, r3
 801d808:	4158      	adcs	r0, r3
 801d80a:	bd30      	pop	{r4, r5, pc}
 801d80c:	4b09      	ldr	r3, [pc, #36]	; (801d834 <CRC_Lock+0x9c>)
 801d80e:	2201      	movs	r2, #1
 801d810:	601a      	str	r2, [r3, #0]
 801d812:	681a      	ldr	r2, [r3, #0]
 801d814:	2a00      	cmp	r2, #0
 801d816:	d1fc      	bne.n	801d812 <CRC_Lock+0x7a>
 801d818:	4b07      	ldr	r3, [pc, #28]	; (801d838 <CRC_Lock+0xa0>)
 801d81a:	e7f1      	b.n	801d800 <CRC_Lock+0x68>
 801d81c:	e0002000 	.word	0xe0002000
 801d820:	e000ed00 	.word	0xe000ed00
 801d824:	e0042000 	.word	0xe0042000
 801d828:	5c001000 	.word	0x5c001000
 801d82c:	58024c08 	.word	0x58024c08
 801d830:	58024c00 	.word	0x58024c00
 801d834:	40023008 	.word	0x40023008
 801d838:	40023000 	.word	0x40023000

0801d83c <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801d83c:	6101      	str	r1, [r0, #16]
 801d83e:	4770      	bx	lr

0801d840 <_ZN8touchgfx8Gestures4tickEv>:
 801d840:	7b83      	ldrb	r3, [r0, #14]
 801d842:	b14b      	cbz	r3, 801d858 <_ZN8touchgfx8Gestures4tickEv+0x18>
 801d844:	8903      	ldrh	r3, [r0, #8]
 801d846:	3301      	adds	r3, #1
 801d848:	b29b      	uxth	r3, r3
 801d84a:	2b07      	cmp	r3, #7
 801d84c:	8103      	strh	r3, [r0, #8]
 801d84e:	bf81      	itttt	hi
 801d850:	2300      	movhi	r3, #0
 801d852:	8143      	strhhi	r3, [r0, #10]
 801d854:	8183      	strhhi	r3, [r0, #12]
 801d856:	7383      	strbhi	r3, [r0, #14]
 801d858:	4770      	bx	lr
	...

0801d85c <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801d85c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801d860:	4698      	mov	r8, r3
 801d862:	8883      	ldrh	r3, [r0, #4]
 801d864:	4604      	mov	r4, r0
 801d866:	4617      	mov	r7, r2
 801d868:	f8ad 3006 	strh.w	r3, [sp, #6]
 801d86c:	eba8 0303 	sub.w	r3, r8, r3
 801d870:	4a19      	ldr	r2, [pc, #100]	; (801d8d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801d872:	460e      	mov	r6, r1
 801d874:	b21b      	sxth	r3, r3
 801d876:	88c1      	ldrh	r1, [r0, #6]
 801d878:	9200      	str	r2, [sp, #0]
 801d87a:	2000      	movs	r0, #0
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	8aa2      	ldrh	r2, [r4, #20]
 801d880:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 801d884:	bfb8      	it	lt
 801d886:	425b      	neglt	r3, r3
 801d888:	f88d 0004 	strb.w	r0, [sp, #4]
 801d88c:	f8ad 1008 	strh.w	r1, [sp, #8]
 801d890:	b21b      	sxth	r3, r3
 801d892:	f8ad 800a 	strh.w	r8, [sp, #10]
 801d896:	f8ad 500c 	strh.w	r5, [sp, #12]
 801d89a:	4293      	cmp	r3, r2
 801d89c:	dc07      	bgt.n	801d8ae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801d89e:	1a69      	subs	r1, r5, r1
 801d8a0:	b209      	sxth	r1, r1
 801d8a2:	2900      	cmp	r1, #0
 801d8a4:	bfb8      	it	lt
 801d8a6:	4249      	neglt	r1, r1
 801d8a8:	b209      	sxth	r1, r1
 801d8aa:	428a      	cmp	r2, r1
 801d8ac:	da10      	bge.n	801d8d0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801d8ae:	6920      	ldr	r0, [r4, #16]
 801d8b0:	4669      	mov	r1, sp
 801d8b2:	eba8 0606 	sub.w	r6, r8, r6
 801d8b6:	1bef      	subs	r7, r5, r7
 801d8b8:	6803      	ldr	r3, [r0, #0]
 801d8ba:	685b      	ldr	r3, [r3, #4]
 801d8bc:	4798      	blx	r3
 801d8be:	2300      	movs	r3, #0
 801d8c0:	2001      	movs	r0, #1
 801d8c2:	8166      	strh	r6, [r4, #10]
 801d8c4:	8123      	strh	r3, [r4, #8]
 801d8c6:	81a7      	strh	r7, [r4, #12]
 801d8c8:	f8a4 8004 	strh.w	r8, [r4, #4]
 801d8cc:	80e5      	strh	r5, [r4, #6]
 801d8ce:	73a0      	strb	r0, [r4, #14]
 801d8d0:	b004      	add	sp, #16
 801d8d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8d6:	bf00      	nop
 801d8d8:	08020bd8 	.word	0x08020bd8

0801d8dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801d8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d8de:	461e      	mov	r6, r3
 801d8e0:	1e4b      	subs	r3, r1, #1
 801d8e2:	b085      	sub	sp, #20
 801d8e4:	4604      	mov	r4, r0
 801d8e6:	2b01      	cmp	r3, #1
 801d8e8:	460d      	mov	r5, r1
 801d8ea:	4617      	mov	r7, r2
 801d8ec:	d84b      	bhi.n	801d986 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801d8ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801d8f2:	1cd3      	adds	r3, r2, #3
 801d8f4:	b29b      	uxth	r3, r3
 801d8f6:	2b06      	cmp	r3, #6
 801d8f8:	d916      	bls.n	801d928 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801d8fa:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 801d99c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d8fe:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d902:	f8cd c004 	str.w	ip, [sp, #4]
 801d906:	f04f 0c00 	mov.w	ip, #0
 801d90a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d90e:	6900      	ldr	r0, [r0, #16]
 801d910:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d914:	a901      	add	r1, sp, #4
 801d916:	f88d c008 	strb.w	ip, [sp, #8]
 801d91a:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d91e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d922:	6803      	ldr	r3, [r0, #0]
 801d924:	689b      	ldr	r3, [r3, #8]
 801d926:	4798      	blx	r3
 801d928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d92c:	1cd3      	adds	r3, r2, #3
 801d92e:	b29b      	uxth	r3, r3
 801d930:	2b06      	cmp	r3, #6
 801d932:	d916      	bls.n	801d962 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d934:	f8df c064 	ldr.w	ip, [pc, #100]	; 801d99c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801d938:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801d93c:	f8cd c004 	str.w	ip, [sp, #4]
 801d940:	f04f 0c01 	mov.w	ip, #1
 801d944:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801d948:	6920      	ldr	r0, [r4, #16]
 801d94a:	f8ad 100c 	strh.w	r1, [sp, #12]
 801d94e:	a901      	add	r1, sp, #4
 801d950:	f88d c008 	strb.w	ip, [sp, #8]
 801d954:	f8ad 200a 	strh.w	r2, [sp, #10]
 801d958:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d95c:	6803      	ldr	r3, [r0, #0]
 801d95e:	689b      	ldr	r3, [r3, #8]
 801d960:	4798      	blx	r3
 801d962:	4b0d      	ldr	r3, [pc, #52]	; (801d998 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801d964:	a901      	add	r1, sp, #4
 801d966:	6920      	ldr	r0, [r4, #16]
 801d968:	9301      	str	r3, [sp, #4]
 801d96a:	2300      	movs	r3, #0
 801d96c:	f88d 5008 	strb.w	r5, [sp, #8]
 801d970:	f8ad 700a 	strh.w	r7, [sp, #10]
 801d974:	f8ad 600c 	strh.w	r6, [sp, #12]
 801d978:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d97c:	6803      	ldr	r3, [r0, #0]
 801d97e:	681b      	ldr	r3, [r3, #0]
 801d980:	4798      	blx	r3
 801d982:	b005      	add	sp, #20
 801d984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d986:	2900      	cmp	r1, #0
 801d988:	d1eb      	bne.n	801d962 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d98a:	80a2      	strh	r2, [r4, #4]
 801d98c:	80c6      	strh	r6, [r0, #6]
 801d98e:	60a1      	str	r1, [r4, #8]
 801d990:	81a1      	strh	r1, [r4, #12]
 801d992:	73a1      	strb	r1, [r4, #14]
 801d994:	e7e5      	b.n	801d962 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801d996:	bf00      	nop
 801d998:	08020bc4 	.word	0x08020bc4
 801d99c:	08020bec 	.word	0x08020bec

0801d9a0 <__aeabi_atexit>:
 801d9a0:	460b      	mov	r3, r1
 801d9a2:	4601      	mov	r1, r0
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	f000 b853 	b.w	801da50 <__cxa_atexit>

0801d9aa <_ZdlPvj>:
 801d9aa:	f000 b812 	b.w	801d9d2 <_ZdlPv>

0801d9ae <__cxa_guard_acquire>:
 801d9ae:	6803      	ldr	r3, [r0, #0]
 801d9b0:	07db      	lsls	r3, r3, #31
 801d9b2:	d406      	bmi.n	801d9c2 <__cxa_guard_acquire+0x14>
 801d9b4:	7843      	ldrb	r3, [r0, #1]
 801d9b6:	b103      	cbz	r3, 801d9ba <__cxa_guard_acquire+0xc>
 801d9b8:	deff      	udf	#255	; 0xff
 801d9ba:	2301      	movs	r3, #1
 801d9bc:	7043      	strb	r3, [r0, #1]
 801d9be:	4618      	mov	r0, r3
 801d9c0:	4770      	bx	lr
 801d9c2:	2000      	movs	r0, #0
 801d9c4:	4770      	bx	lr

0801d9c6 <__cxa_guard_release>:
 801d9c6:	2301      	movs	r3, #1
 801d9c8:	6003      	str	r3, [r0, #0]
 801d9ca:	4770      	bx	lr

0801d9cc <__cxa_pure_virtual>:
 801d9cc:	b508      	push	{r3, lr}
 801d9ce:	f000 f80f 	bl	801d9f0 <_ZSt9terminatev>

0801d9d2 <_ZdlPv>:
 801d9d2:	f000 b989 	b.w	801dce8 <free>

0801d9d6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801d9d6:	b508      	push	{r3, lr}
 801d9d8:	4780      	blx	r0
 801d9da:	f000 f80e 	bl	801d9fa <abort>
	...

0801d9e0 <_ZSt13get_terminatev>:
 801d9e0:	4b02      	ldr	r3, [pc, #8]	; (801d9ec <_ZSt13get_terminatev+0xc>)
 801d9e2:	6818      	ldr	r0, [r3, #0]
 801d9e4:	f3bf 8f5b 	dmb	ish
 801d9e8:	4770      	bx	lr
 801d9ea:	bf00      	nop
 801d9ec:	24000144 	.word	0x24000144

0801d9f0 <_ZSt9terminatev>:
 801d9f0:	b508      	push	{r3, lr}
 801d9f2:	f7ff fff5 	bl	801d9e0 <_ZSt13get_terminatev>
 801d9f6:	f7ff ffee 	bl	801d9d6 <_ZN10__cxxabiv111__terminateEPFvvE>

0801d9fa <abort>:
 801d9fa:	b508      	push	{r3, lr}
 801d9fc:	2006      	movs	r0, #6
 801d9fe:	f000 fe8f 	bl	801e720 <raise>
 801da02:	2001      	movs	r0, #1
 801da04:	f7e3 fd5e 	bl	80014c4 <_exit>

0801da08 <__assert_func>:
 801da08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da0a:	4614      	mov	r4, r2
 801da0c:	461a      	mov	r2, r3
 801da0e:	4b09      	ldr	r3, [pc, #36]	; (801da34 <__assert_func+0x2c>)
 801da10:	681b      	ldr	r3, [r3, #0]
 801da12:	4605      	mov	r5, r0
 801da14:	68d8      	ldr	r0, [r3, #12]
 801da16:	b14c      	cbz	r4, 801da2c <__assert_func+0x24>
 801da18:	4b07      	ldr	r3, [pc, #28]	; (801da38 <__assert_func+0x30>)
 801da1a:	9100      	str	r1, [sp, #0]
 801da1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801da20:	4906      	ldr	r1, [pc, #24]	; (801da3c <__assert_func+0x34>)
 801da22:	462b      	mov	r3, r5
 801da24:	f000 f8fe 	bl	801dc24 <fiprintf>
 801da28:	f7ff ffe7 	bl	801d9fa <abort>
 801da2c:	4b04      	ldr	r3, [pc, #16]	; (801da40 <__assert_func+0x38>)
 801da2e:	461c      	mov	r4, r3
 801da30:	e7f3      	b.n	801da1a <__assert_func+0x12>
 801da32:	bf00      	nop
 801da34:	24000148 	.word	0x24000148
 801da38:	08020e14 	.word	0x08020e14
 801da3c:	08020e21 	.word	0x08020e21
 801da40:	08020e4f 	.word	0x08020e4f

0801da44 <atexit>:
 801da44:	2300      	movs	r3, #0
 801da46:	4601      	mov	r1, r0
 801da48:	461a      	mov	r2, r3
 801da4a:	4618      	mov	r0, r3
 801da4c:	f000 bf9a 	b.w	801e984 <__register_exitproc>

0801da50 <__cxa_atexit>:
 801da50:	b510      	push	{r4, lr}
 801da52:	4c05      	ldr	r4, [pc, #20]	; (801da68 <__cxa_atexit+0x18>)
 801da54:	4613      	mov	r3, r2
 801da56:	b12c      	cbz	r4, 801da64 <__cxa_atexit+0x14>
 801da58:	460a      	mov	r2, r1
 801da5a:	4601      	mov	r1, r0
 801da5c:	2002      	movs	r0, #2
 801da5e:	f000 ff91 	bl	801e984 <__register_exitproc>
 801da62:	bd10      	pop	{r4, pc}
 801da64:	4620      	mov	r0, r4
 801da66:	e7fc      	b.n	801da62 <__cxa_atexit+0x12>
 801da68:	0801e985 	.word	0x0801e985

0801da6c <__errno>:
 801da6c:	4b01      	ldr	r3, [pc, #4]	; (801da74 <__errno+0x8>)
 801da6e:	6818      	ldr	r0, [r3, #0]
 801da70:	4770      	bx	lr
 801da72:	bf00      	nop
 801da74:	24000148 	.word	0x24000148

0801da78 <std>:
 801da78:	2300      	movs	r3, #0
 801da7a:	b510      	push	{r4, lr}
 801da7c:	4604      	mov	r4, r0
 801da7e:	e9c0 3300 	strd	r3, r3, [r0]
 801da82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801da86:	6083      	str	r3, [r0, #8]
 801da88:	8181      	strh	r1, [r0, #12]
 801da8a:	6643      	str	r3, [r0, #100]	; 0x64
 801da8c:	81c2      	strh	r2, [r0, #14]
 801da8e:	6183      	str	r3, [r0, #24]
 801da90:	4619      	mov	r1, r3
 801da92:	2208      	movs	r2, #8
 801da94:	305c      	adds	r0, #92	; 0x5c
 801da96:	f000 f93d 	bl	801dd14 <memset>
 801da9a:	4b05      	ldr	r3, [pc, #20]	; (801dab0 <std+0x38>)
 801da9c:	6263      	str	r3, [r4, #36]	; 0x24
 801da9e:	4b05      	ldr	r3, [pc, #20]	; (801dab4 <std+0x3c>)
 801daa0:	62a3      	str	r3, [r4, #40]	; 0x28
 801daa2:	4b05      	ldr	r3, [pc, #20]	; (801dab8 <std+0x40>)
 801daa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801daa6:	4b05      	ldr	r3, [pc, #20]	; (801dabc <std+0x44>)
 801daa8:	6224      	str	r4, [r4, #32]
 801daaa:	6323      	str	r3, [r4, #48]	; 0x30
 801daac:	bd10      	pop	{r4, pc}
 801daae:	bf00      	nop
 801dab0:	0801e759 	.word	0x0801e759
 801dab4:	0801e77b 	.word	0x0801e77b
 801dab8:	0801e7b3 	.word	0x0801e7b3
 801dabc:	0801e7d7 	.word	0x0801e7d7

0801dac0 <_cleanup_r>:
 801dac0:	4901      	ldr	r1, [pc, #4]	; (801dac8 <_cleanup_r+0x8>)
 801dac2:	f000 b8c1 	b.w	801dc48 <_fwalk_reent>
 801dac6:	bf00      	nop
 801dac8:	0801eb75 	.word	0x0801eb75

0801dacc <__sfmoreglue>:
 801dacc:	b570      	push	{r4, r5, r6, lr}
 801dace:	2268      	movs	r2, #104	; 0x68
 801dad0:	1e4d      	subs	r5, r1, #1
 801dad2:	4355      	muls	r5, r2
 801dad4:	460e      	mov	r6, r1
 801dad6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801dada:	f000 f98f 	bl	801ddfc <_malloc_r>
 801dade:	4604      	mov	r4, r0
 801dae0:	b140      	cbz	r0, 801daf4 <__sfmoreglue+0x28>
 801dae2:	2100      	movs	r1, #0
 801dae4:	e9c0 1600 	strd	r1, r6, [r0]
 801dae8:	300c      	adds	r0, #12
 801daea:	60a0      	str	r0, [r4, #8]
 801daec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801daf0:	f000 f910 	bl	801dd14 <memset>
 801daf4:	4620      	mov	r0, r4
 801daf6:	bd70      	pop	{r4, r5, r6, pc}

0801daf8 <__sfp_lock_acquire>:
 801daf8:	4801      	ldr	r0, [pc, #4]	; (801db00 <__sfp_lock_acquire+0x8>)
 801dafa:	f000 b8ea 	b.w	801dcd2 <__retarget_lock_acquire_recursive>
 801dafe:	bf00      	nop
 801db00:	2400759a 	.word	0x2400759a

0801db04 <__sfp_lock_release>:
 801db04:	4801      	ldr	r0, [pc, #4]	; (801db0c <__sfp_lock_release+0x8>)
 801db06:	f000 b8e6 	b.w	801dcd6 <__retarget_lock_release_recursive>
 801db0a:	bf00      	nop
 801db0c:	2400759a 	.word	0x2400759a

0801db10 <__sinit_lock_acquire>:
 801db10:	4801      	ldr	r0, [pc, #4]	; (801db18 <__sinit_lock_acquire+0x8>)
 801db12:	f000 b8de 	b.w	801dcd2 <__retarget_lock_acquire_recursive>
 801db16:	bf00      	nop
 801db18:	2400759b 	.word	0x2400759b

0801db1c <__sinit_lock_release>:
 801db1c:	4801      	ldr	r0, [pc, #4]	; (801db24 <__sinit_lock_release+0x8>)
 801db1e:	f000 b8da 	b.w	801dcd6 <__retarget_lock_release_recursive>
 801db22:	bf00      	nop
 801db24:	2400759b 	.word	0x2400759b

0801db28 <__sinit>:
 801db28:	b510      	push	{r4, lr}
 801db2a:	4604      	mov	r4, r0
 801db2c:	f7ff fff0 	bl	801db10 <__sinit_lock_acquire>
 801db30:	69a3      	ldr	r3, [r4, #24]
 801db32:	b11b      	cbz	r3, 801db3c <__sinit+0x14>
 801db34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801db38:	f7ff bff0 	b.w	801db1c <__sinit_lock_release>
 801db3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801db40:	6523      	str	r3, [r4, #80]	; 0x50
 801db42:	4b13      	ldr	r3, [pc, #76]	; (801db90 <__sinit+0x68>)
 801db44:	4a13      	ldr	r2, [pc, #76]	; (801db94 <__sinit+0x6c>)
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	62a2      	str	r2, [r4, #40]	; 0x28
 801db4a:	42a3      	cmp	r3, r4
 801db4c:	bf04      	itt	eq
 801db4e:	2301      	moveq	r3, #1
 801db50:	61a3      	streq	r3, [r4, #24]
 801db52:	4620      	mov	r0, r4
 801db54:	f000 f820 	bl	801db98 <__sfp>
 801db58:	6060      	str	r0, [r4, #4]
 801db5a:	4620      	mov	r0, r4
 801db5c:	f000 f81c 	bl	801db98 <__sfp>
 801db60:	60a0      	str	r0, [r4, #8]
 801db62:	4620      	mov	r0, r4
 801db64:	f000 f818 	bl	801db98 <__sfp>
 801db68:	2200      	movs	r2, #0
 801db6a:	60e0      	str	r0, [r4, #12]
 801db6c:	2104      	movs	r1, #4
 801db6e:	6860      	ldr	r0, [r4, #4]
 801db70:	f7ff ff82 	bl	801da78 <std>
 801db74:	68a0      	ldr	r0, [r4, #8]
 801db76:	2201      	movs	r2, #1
 801db78:	2109      	movs	r1, #9
 801db7a:	f7ff ff7d 	bl	801da78 <std>
 801db7e:	68e0      	ldr	r0, [r4, #12]
 801db80:	2202      	movs	r2, #2
 801db82:	2112      	movs	r1, #18
 801db84:	f7ff ff78 	bl	801da78 <std>
 801db88:	2301      	movs	r3, #1
 801db8a:	61a3      	str	r3, [r4, #24]
 801db8c:	e7d2      	b.n	801db34 <__sinit+0xc>
 801db8e:	bf00      	nop
 801db90:	08020eb0 	.word	0x08020eb0
 801db94:	0801dac1 	.word	0x0801dac1

0801db98 <__sfp>:
 801db98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db9a:	4607      	mov	r7, r0
 801db9c:	f7ff ffac 	bl	801daf8 <__sfp_lock_acquire>
 801dba0:	4b1e      	ldr	r3, [pc, #120]	; (801dc1c <__sfp+0x84>)
 801dba2:	681e      	ldr	r6, [r3, #0]
 801dba4:	69b3      	ldr	r3, [r6, #24]
 801dba6:	b913      	cbnz	r3, 801dbae <__sfp+0x16>
 801dba8:	4630      	mov	r0, r6
 801dbaa:	f7ff ffbd 	bl	801db28 <__sinit>
 801dbae:	3648      	adds	r6, #72	; 0x48
 801dbb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801dbb4:	3b01      	subs	r3, #1
 801dbb6:	d503      	bpl.n	801dbc0 <__sfp+0x28>
 801dbb8:	6833      	ldr	r3, [r6, #0]
 801dbba:	b30b      	cbz	r3, 801dc00 <__sfp+0x68>
 801dbbc:	6836      	ldr	r6, [r6, #0]
 801dbbe:	e7f7      	b.n	801dbb0 <__sfp+0x18>
 801dbc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801dbc4:	b9d5      	cbnz	r5, 801dbfc <__sfp+0x64>
 801dbc6:	4b16      	ldr	r3, [pc, #88]	; (801dc20 <__sfp+0x88>)
 801dbc8:	60e3      	str	r3, [r4, #12]
 801dbca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dbce:	6665      	str	r5, [r4, #100]	; 0x64
 801dbd0:	f000 f87e 	bl	801dcd0 <__retarget_lock_init_recursive>
 801dbd4:	f7ff ff96 	bl	801db04 <__sfp_lock_release>
 801dbd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801dbdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801dbe0:	6025      	str	r5, [r4, #0]
 801dbe2:	61a5      	str	r5, [r4, #24]
 801dbe4:	2208      	movs	r2, #8
 801dbe6:	4629      	mov	r1, r5
 801dbe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801dbec:	f000 f892 	bl	801dd14 <memset>
 801dbf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801dbf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801dbf8:	4620      	mov	r0, r4
 801dbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbfc:	3468      	adds	r4, #104	; 0x68
 801dbfe:	e7d9      	b.n	801dbb4 <__sfp+0x1c>
 801dc00:	2104      	movs	r1, #4
 801dc02:	4638      	mov	r0, r7
 801dc04:	f7ff ff62 	bl	801dacc <__sfmoreglue>
 801dc08:	4604      	mov	r4, r0
 801dc0a:	6030      	str	r0, [r6, #0]
 801dc0c:	2800      	cmp	r0, #0
 801dc0e:	d1d5      	bne.n	801dbbc <__sfp+0x24>
 801dc10:	f7ff ff78 	bl	801db04 <__sfp_lock_release>
 801dc14:	230c      	movs	r3, #12
 801dc16:	603b      	str	r3, [r7, #0]
 801dc18:	e7ee      	b.n	801dbf8 <__sfp+0x60>
 801dc1a:	bf00      	nop
 801dc1c:	08020eb0 	.word	0x08020eb0
 801dc20:	ffff0001 	.word	0xffff0001

0801dc24 <fiprintf>:
 801dc24:	b40e      	push	{r1, r2, r3}
 801dc26:	b503      	push	{r0, r1, lr}
 801dc28:	4601      	mov	r1, r0
 801dc2a:	ab03      	add	r3, sp, #12
 801dc2c:	4805      	ldr	r0, [pc, #20]	; (801dc44 <fiprintf+0x20>)
 801dc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc32:	6800      	ldr	r0, [r0, #0]
 801dc34:	9301      	str	r3, [sp, #4]
 801dc36:	f000 f97f 	bl	801df38 <_vfiprintf_r>
 801dc3a:	b002      	add	sp, #8
 801dc3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801dc40:	b003      	add	sp, #12
 801dc42:	4770      	bx	lr
 801dc44:	24000148 	.word	0x24000148

0801dc48 <_fwalk_reent>:
 801dc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc4c:	4606      	mov	r6, r0
 801dc4e:	4688      	mov	r8, r1
 801dc50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801dc54:	2700      	movs	r7, #0
 801dc56:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dc5a:	f1b9 0901 	subs.w	r9, r9, #1
 801dc5e:	d505      	bpl.n	801dc6c <_fwalk_reent+0x24>
 801dc60:	6824      	ldr	r4, [r4, #0]
 801dc62:	2c00      	cmp	r4, #0
 801dc64:	d1f7      	bne.n	801dc56 <_fwalk_reent+0xe>
 801dc66:	4638      	mov	r0, r7
 801dc68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dc6c:	89ab      	ldrh	r3, [r5, #12]
 801dc6e:	2b01      	cmp	r3, #1
 801dc70:	d907      	bls.n	801dc82 <_fwalk_reent+0x3a>
 801dc72:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dc76:	3301      	adds	r3, #1
 801dc78:	d003      	beq.n	801dc82 <_fwalk_reent+0x3a>
 801dc7a:	4629      	mov	r1, r5
 801dc7c:	4630      	mov	r0, r6
 801dc7e:	47c0      	blx	r8
 801dc80:	4307      	orrs	r7, r0
 801dc82:	3568      	adds	r5, #104	; 0x68
 801dc84:	e7e9      	b.n	801dc5a <_fwalk_reent+0x12>
	...

0801dc88 <__libc_init_array>:
 801dc88:	b570      	push	{r4, r5, r6, lr}
 801dc8a:	4d0d      	ldr	r5, [pc, #52]	; (801dcc0 <__libc_init_array+0x38>)
 801dc8c:	4c0d      	ldr	r4, [pc, #52]	; (801dcc4 <__libc_init_array+0x3c>)
 801dc8e:	1b64      	subs	r4, r4, r5
 801dc90:	10a4      	asrs	r4, r4, #2
 801dc92:	2600      	movs	r6, #0
 801dc94:	42a6      	cmp	r6, r4
 801dc96:	d109      	bne.n	801dcac <__libc_init_array+0x24>
 801dc98:	4d0b      	ldr	r5, [pc, #44]	; (801dcc8 <__libc_init_array+0x40>)
 801dc9a:	4c0c      	ldr	r4, [pc, #48]	; (801dccc <__libc_init_array+0x44>)
 801dc9c:	f001 f85e 	bl	801ed5c <_init>
 801dca0:	1b64      	subs	r4, r4, r5
 801dca2:	10a4      	asrs	r4, r4, #2
 801dca4:	2600      	movs	r6, #0
 801dca6:	42a6      	cmp	r6, r4
 801dca8:	d105      	bne.n	801dcb6 <__libc_init_array+0x2e>
 801dcaa:	bd70      	pop	{r4, r5, r6, pc}
 801dcac:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcb0:	4798      	blx	r3
 801dcb2:	3601      	adds	r6, #1
 801dcb4:	e7ee      	b.n	801dc94 <__libc_init_array+0xc>
 801dcb6:	f855 3b04 	ldr.w	r3, [r5], #4
 801dcba:	4798      	blx	r3
 801dcbc:	3601      	adds	r6, #1
 801dcbe:	e7f2      	b.n	801dca6 <__libc_init_array+0x1e>
 801dcc0:	08021160 	.word	0x08021160
 801dcc4:	08021160 	.word	0x08021160
 801dcc8:	08021160 	.word	0x08021160
 801dccc:	08021174 	.word	0x08021174

0801dcd0 <__retarget_lock_init_recursive>:
 801dcd0:	4770      	bx	lr

0801dcd2 <__retarget_lock_acquire_recursive>:
 801dcd2:	4770      	bx	lr

0801dcd4 <__retarget_lock_release>:
 801dcd4:	4770      	bx	lr

0801dcd6 <__retarget_lock_release_recursive>:
 801dcd6:	4770      	bx	lr

0801dcd8 <malloc>:
 801dcd8:	4b02      	ldr	r3, [pc, #8]	; (801dce4 <malloc+0xc>)
 801dcda:	4601      	mov	r1, r0
 801dcdc:	6818      	ldr	r0, [r3, #0]
 801dcde:	f000 b88d 	b.w	801ddfc <_malloc_r>
 801dce2:	bf00      	nop
 801dce4:	24000148 	.word	0x24000148

0801dce8 <free>:
 801dce8:	4b02      	ldr	r3, [pc, #8]	; (801dcf4 <free+0xc>)
 801dcea:	4601      	mov	r1, r0
 801dcec:	6818      	ldr	r0, [r3, #0]
 801dcee:	f000 b819 	b.w	801dd24 <_free_r>
 801dcf2:	bf00      	nop
 801dcf4:	24000148 	.word	0x24000148

0801dcf8 <memcpy>:
 801dcf8:	440a      	add	r2, r1
 801dcfa:	4291      	cmp	r1, r2
 801dcfc:	f100 33ff 	add.w	r3, r0, #4294967295
 801dd00:	d100      	bne.n	801dd04 <memcpy+0xc>
 801dd02:	4770      	bx	lr
 801dd04:	b510      	push	{r4, lr}
 801dd06:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd0e:	4291      	cmp	r1, r2
 801dd10:	d1f9      	bne.n	801dd06 <memcpy+0xe>
 801dd12:	bd10      	pop	{r4, pc}

0801dd14 <memset>:
 801dd14:	4402      	add	r2, r0
 801dd16:	4603      	mov	r3, r0
 801dd18:	4293      	cmp	r3, r2
 801dd1a:	d100      	bne.n	801dd1e <memset+0xa>
 801dd1c:	4770      	bx	lr
 801dd1e:	f803 1b01 	strb.w	r1, [r3], #1
 801dd22:	e7f9      	b.n	801dd18 <memset+0x4>

0801dd24 <_free_r>:
 801dd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dd26:	2900      	cmp	r1, #0
 801dd28:	d044      	beq.n	801ddb4 <_free_r+0x90>
 801dd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dd2e:	9001      	str	r0, [sp, #4]
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	f1a1 0404 	sub.w	r4, r1, #4
 801dd36:	bfb8      	it	lt
 801dd38:	18e4      	addlt	r4, r4, r3
 801dd3a:	f000 ffcf 	bl	801ecdc <__malloc_lock>
 801dd3e:	4a1e      	ldr	r2, [pc, #120]	; (801ddb8 <_free_r+0x94>)
 801dd40:	9801      	ldr	r0, [sp, #4]
 801dd42:	6813      	ldr	r3, [r2, #0]
 801dd44:	b933      	cbnz	r3, 801dd54 <_free_r+0x30>
 801dd46:	6063      	str	r3, [r4, #4]
 801dd48:	6014      	str	r4, [r2, #0]
 801dd4a:	b003      	add	sp, #12
 801dd4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dd50:	f000 bfca 	b.w	801ece8 <__malloc_unlock>
 801dd54:	42a3      	cmp	r3, r4
 801dd56:	d908      	bls.n	801dd6a <_free_r+0x46>
 801dd58:	6825      	ldr	r5, [r4, #0]
 801dd5a:	1961      	adds	r1, r4, r5
 801dd5c:	428b      	cmp	r3, r1
 801dd5e:	bf01      	itttt	eq
 801dd60:	6819      	ldreq	r1, [r3, #0]
 801dd62:	685b      	ldreq	r3, [r3, #4]
 801dd64:	1949      	addeq	r1, r1, r5
 801dd66:	6021      	streq	r1, [r4, #0]
 801dd68:	e7ed      	b.n	801dd46 <_free_r+0x22>
 801dd6a:	461a      	mov	r2, r3
 801dd6c:	685b      	ldr	r3, [r3, #4]
 801dd6e:	b10b      	cbz	r3, 801dd74 <_free_r+0x50>
 801dd70:	42a3      	cmp	r3, r4
 801dd72:	d9fa      	bls.n	801dd6a <_free_r+0x46>
 801dd74:	6811      	ldr	r1, [r2, #0]
 801dd76:	1855      	adds	r5, r2, r1
 801dd78:	42a5      	cmp	r5, r4
 801dd7a:	d10b      	bne.n	801dd94 <_free_r+0x70>
 801dd7c:	6824      	ldr	r4, [r4, #0]
 801dd7e:	4421      	add	r1, r4
 801dd80:	1854      	adds	r4, r2, r1
 801dd82:	42a3      	cmp	r3, r4
 801dd84:	6011      	str	r1, [r2, #0]
 801dd86:	d1e0      	bne.n	801dd4a <_free_r+0x26>
 801dd88:	681c      	ldr	r4, [r3, #0]
 801dd8a:	685b      	ldr	r3, [r3, #4]
 801dd8c:	6053      	str	r3, [r2, #4]
 801dd8e:	4421      	add	r1, r4
 801dd90:	6011      	str	r1, [r2, #0]
 801dd92:	e7da      	b.n	801dd4a <_free_r+0x26>
 801dd94:	d902      	bls.n	801dd9c <_free_r+0x78>
 801dd96:	230c      	movs	r3, #12
 801dd98:	6003      	str	r3, [r0, #0]
 801dd9a:	e7d6      	b.n	801dd4a <_free_r+0x26>
 801dd9c:	6825      	ldr	r5, [r4, #0]
 801dd9e:	1961      	adds	r1, r4, r5
 801dda0:	428b      	cmp	r3, r1
 801dda2:	bf04      	itt	eq
 801dda4:	6819      	ldreq	r1, [r3, #0]
 801dda6:	685b      	ldreq	r3, [r3, #4]
 801dda8:	6063      	str	r3, [r4, #4]
 801ddaa:	bf04      	itt	eq
 801ddac:	1949      	addeq	r1, r1, r5
 801ddae:	6021      	streq	r1, [r4, #0]
 801ddb0:	6054      	str	r4, [r2, #4]
 801ddb2:	e7ca      	b.n	801dd4a <_free_r+0x26>
 801ddb4:	b003      	add	sp, #12
 801ddb6:	bd30      	pop	{r4, r5, pc}
 801ddb8:	2400759c 	.word	0x2400759c

0801ddbc <sbrk_aligned>:
 801ddbc:	b570      	push	{r4, r5, r6, lr}
 801ddbe:	4e0e      	ldr	r6, [pc, #56]	; (801ddf8 <sbrk_aligned+0x3c>)
 801ddc0:	460c      	mov	r4, r1
 801ddc2:	6831      	ldr	r1, [r6, #0]
 801ddc4:	4605      	mov	r5, r0
 801ddc6:	b911      	cbnz	r1, 801ddce <sbrk_aligned+0x12>
 801ddc8:	f000 fc72 	bl	801e6b0 <_sbrk_r>
 801ddcc:	6030      	str	r0, [r6, #0]
 801ddce:	4621      	mov	r1, r4
 801ddd0:	4628      	mov	r0, r5
 801ddd2:	f000 fc6d 	bl	801e6b0 <_sbrk_r>
 801ddd6:	1c43      	adds	r3, r0, #1
 801ddd8:	d00a      	beq.n	801ddf0 <sbrk_aligned+0x34>
 801ddda:	1cc4      	adds	r4, r0, #3
 801dddc:	f024 0403 	bic.w	r4, r4, #3
 801dde0:	42a0      	cmp	r0, r4
 801dde2:	d007      	beq.n	801ddf4 <sbrk_aligned+0x38>
 801dde4:	1a21      	subs	r1, r4, r0
 801dde6:	4628      	mov	r0, r5
 801dde8:	f000 fc62 	bl	801e6b0 <_sbrk_r>
 801ddec:	3001      	adds	r0, #1
 801ddee:	d101      	bne.n	801ddf4 <sbrk_aligned+0x38>
 801ddf0:	f04f 34ff 	mov.w	r4, #4294967295
 801ddf4:	4620      	mov	r0, r4
 801ddf6:	bd70      	pop	{r4, r5, r6, pc}
 801ddf8:	240075a0 	.word	0x240075a0

0801ddfc <_malloc_r>:
 801ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de00:	1ccd      	adds	r5, r1, #3
 801de02:	f025 0503 	bic.w	r5, r5, #3
 801de06:	3508      	adds	r5, #8
 801de08:	2d0c      	cmp	r5, #12
 801de0a:	bf38      	it	cc
 801de0c:	250c      	movcc	r5, #12
 801de0e:	2d00      	cmp	r5, #0
 801de10:	4607      	mov	r7, r0
 801de12:	db01      	blt.n	801de18 <_malloc_r+0x1c>
 801de14:	42a9      	cmp	r1, r5
 801de16:	d905      	bls.n	801de24 <_malloc_r+0x28>
 801de18:	230c      	movs	r3, #12
 801de1a:	603b      	str	r3, [r7, #0]
 801de1c:	2600      	movs	r6, #0
 801de1e:	4630      	mov	r0, r6
 801de20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de24:	4e2e      	ldr	r6, [pc, #184]	; (801dee0 <_malloc_r+0xe4>)
 801de26:	f000 ff59 	bl	801ecdc <__malloc_lock>
 801de2a:	6833      	ldr	r3, [r6, #0]
 801de2c:	461c      	mov	r4, r3
 801de2e:	bb34      	cbnz	r4, 801de7e <_malloc_r+0x82>
 801de30:	4629      	mov	r1, r5
 801de32:	4638      	mov	r0, r7
 801de34:	f7ff ffc2 	bl	801ddbc <sbrk_aligned>
 801de38:	1c43      	adds	r3, r0, #1
 801de3a:	4604      	mov	r4, r0
 801de3c:	d14d      	bne.n	801deda <_malloc_r+0xde>
 801de3e:	6834      	ldr	r4, [r6, #0]
 801de40:	4626      	mov	r6, r4
 801de42:	2e00      	cmp	r6, #0
 801de44:	d140      	bne.n	801dec8 <_malloc_r+0xcc>
 801de46:	6823      	ldr	r3, [r4, #0]
 801de48:	4631      	mov	r1, r6
 801de4a:	4638      	mov	r0, r7
 801de4c:	eb04 0803 	add.w	r8, r4, r3
 801de50:	f000 fc2e 	bl	801e6b0 <_sbrk_r>
 801de54:	4580      	cmp	r8, r0
 801de56:	d13a      	bne.n	801dece <_malloc_r+0xd2>
 801de58:	6821      	ldr	r1, [r4, #0]
 801de5a:	3503      	adds	r5, #3
 801de5c:	1a6d      	subs	r5, r5, r1
 801de5e:	f025 0503 	bic.w	r5, r5, #3
 801de62:	3508      	adds	r5, #8
 801de64:	2d0c      	cmp	r5, #12
 801de66:	bf38      	it	cc
 801de68:	250c      	movcc	r5, #12
 801de6a:	4629      	mov	r1, r5
 801de6c:	4638      	mov	r0, r7
 801de6e:	f7ff ffa5 	bl	801ddbc <sbrk_aligned>
 801de72:	3001      	adds	r0, #1
 801de74:	d02b      	beq.n	801dece <_malloc_r+0xd2>
 801de76:	6823      	ldr	r3, [r4, #0]
 801de78:	442b      	add	r3, r5
 801de7a:	6023      	str	r3, [r4, #0]
 801de7c:	e00e      	b.n	801de9c <_malloc_r+0xa0>
 801de7e:	6822      	ldr	r2, [r4, #0]
 801de80:	1b52      	subs	r2, r2, r5
 801de82:	d41e      	bmi.n	801dec2 <_malloc_r+0xc6>
 801de84:	2a0b      	cmp	r2, #11
 801de86:	d916      	bls.n	801deb6 <_malloc_r+0xba>
 801de88:	1961      	adds	r1, r4, r5
 801de8a:	42a3      	cmp	r3, r4
 801de8c:	6025      	str	r5, [r4, #0]
 801de8e:	bf18      	it	ne
 801de90:	6059      	strne	r1, [r3, #4]
 801de92:	6863      	ldr	r3, [r4, #4]
 801de94:	bf08      	it	eq
 801de96:	6031      	streq	r1, [r6, #0]
 801de98:	5162      	str	r2, [r4, r5]
 801de9a:	604b      	str	r3, [r1, #4]
 801de9c:	4638      	mov	r0, r7
 801de9e:	f104 060b 	add.w	r6, r4, #11
 801dea2:	f000 ff21 	bl	801ece8 <__malloc_unlock>
 801dea6:	f026 0607 	bic.w	r6, r6, #7
 801deaa:	1d23      	adds	r3, r4, #4
 801deac:	1af2      	subs	r2, r6, r3
 801deae:	d0b6      	beq.n	801de1e <_malloc_r+0x22>
 801deb0:	1b9b      	subs	r3, r3, r6
 801deb2:	50a3      	str	r3, [r4, r2]
 801deb4:	e7b3      	b.n	801de1e <_malloc_r+0x22>
 801deb6:	6862      	ldr	r2, [r4, #4]
 801deb8:	42a3      	cmp	r3, r4
 801deba:	bf0c      	ite	eq
 801debc:	6032      	streq	r2, [r6, #0]
 801debe:	605a      	strne	r2, [r3, #4]
 801dec0:	e7ec      	b.n	801de9c <_malloc_r+0xa0>
 801dec2:	4623      	mov	r3, r4
 801dec4:	6864      	ldr	r4, [r4, #4]
 801dec6:	e7b2      	b.n	801de2e <_malloc_r+0x32>
 801dec8:	4634      	mov	r4, r6
 801deca:	6876      	ldr	r6, [r6, #4]
 801decc:	e7b9      	b.n	801de42 <_malloc_r+0x46>
 801dece:	230c      	movs	r3, #12
 801ded0:	603b      	str	r3, [r7, #0]
 801ded2:	4638      	mov	r0, r7
 801ded4:	f000 ff08 	bl	801ece8 <__malloc_unlock>
 801ded8:	e7a1      	b.n	801de1e <_malloc_r+0x22>
 801deda:	6025      	str	r5, [r4, #0]
 801dedc:	e7de      	b.n	801de9c <_malloc_r+0xa0>
 801dede:	bf00      	nop
 801dee0:	2400759c 	.word	0x2400759c

0801dee4 <__sfputc_r>:
 801dee4:	6893      	ldr	r3, [r2, #8]
 801dee6:	3b01      	subs	r3, #1
 801dee8:	2b00      	cmp	r3, #0
 801deea:	b410      	push	{r4}
 801deec:	6093      	str	r3, [r2, #8]
 801deee:	da08      	bge.n	801df02 <__sfputc_r+0x1e>
 801def0:	6994      	ldr	r4, [r2, #24]
 801def2:	42a3      	cmp	r3, r4
 801def4:	db01      	blt.n	801defa <__sfputc_r+0x16>
 801def6:	290a      	cmp	r1, #10
 801def8:	d103      	bne.n	801df02 <__sfputc_r+0x1e>
 801defa:	f85d 4b04 	ldr.w	r4, [sp], #4
 801defe:	f000 bc6f 	b.w	801e7e0 <__swbuf_r>
 801df02:	6813      	ldr	r3, [r2, #0]
 801df04:	1c58      	adds	r0, r3, #1
 801df06:	6010      	str	r0, [r2, #0]
 801df08:	7019      	strb	r1, [r3, #0]
 801df0a:	4608      	mov	r0, r1
 801df0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df10:	4770      	bx	lr

0801df12 <__sfputs_r>:
 801df12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df14:	4606      	mov	r6, r0
 801df16:	460f      	mov	r7, r1
 801df18:	4614      	mov	r4, r2
 801df1a:	18d5      	adds	r5, r2, r3
 801df1c:	42ac      	cmp	r4, r5
 801df1e:	d101      	bne.n	801df24 <__sfputs_r+0x12>
 801df20:	2000      	movs	r0, #0
 801df22:	e007      	b.n	801df34 <__sfputs_r+0x22>
 801df24:	f814 1b01 	ldrb.w	r1, [r4], #1
 801df28:	463a      	mov	r2, r7
 801df2a:	4630      	mov	r0, r6
 801df2c:	f7ff ffda 	bl	801dee4 <__sfputc_r>
 801df30:	1c43      	adds	r3, r0, #1
 801df32:	d1f3      	bne.n	801df1c <__sfputs_r+0xa>
 801df34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801df38 <_vfiprintf_r>:
 801df38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df3c:	460d      	mov	r5, r1
 801df3e:	b09d      	sub	sp, #116	; 0x74
 801df40:	4614      	mov	r4, r2
 801df42:	4698      	mov	r8, r3
 801df44:	4606      	mov	r6, r0
 801df46:	b118      	cbz	r0, 801df50 <_vfiprintf_r+0x18>
 801df48:	6983      	ldr	r3, [r0, #24]
 801df4a:	b90b      	cbnz	r3, 801df50 <_vfiprintf_r+0x18>
 801df4c:	f7ff fdec 	bl	801db28 <__sinit>
 801df50:	4b89      	ldr	r3, [pc, #548]	; (801e178 <_vfiprintf_r+0x240>)
 801df52:	429d      	cmp	r5, r3
 801df54:	d11b      	bne.n	801df8e <_vfiprintf_r+0x56>
 801df56:	6875      	ldr	r5, [r6, #4]
 801df58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df5a:	07d9      	lsls	r1, r3, #31
 801df5c:	d405      	bmi.n	801df6a <_vfiprintf_r+0x32>
 801df5e:	89ab      	ldrh	r3, [r5, #12]
 801df60:	059a      	lsls	r2, r3, #22
 801df62:	d402      	bmi.n	801df6a <_vfiprintf_r+0x32>
 801df64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801df66:	f7ff feb4 	bl	801dcd2 <__retarget_lock_acquire_recursive>
 801df6a:	89ab      	ldrh	r3, [r5, #12]
 801df6c:	071b      	lsls	r3, r3, #28
 801df6e:	d501      	bpl.n	801df74 <_vfiprintf_r+0x3c>
 801df70:	692b      	ldr	r3, [r5, #16]
 801df72:	b9eb      	cbnz	r3, 801dfb0 <_vfiprintf_r+0x78>
 801df74:	4629      	mov	r1, r5
 801df76:	4630      	mov	r0, r6
 801df78:	f000 fc96 	bl	801e8a8 <__swsetup_r>
 801df7c:	b1c0      	cbz	r0, 801dfb0 <_vfiprintf_r+0x78>
 801df7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801df80:	07dc      	lsls	r4, r3, #31
 801df82:	d50e      	bpl.n	801dfa2 <_vfiprintf_r+0x6a>
 801df84:	f04f 30ff 	mov.w	r0, #4294967295
 801df88:	b01d      	add	sp, #116	; 0x74
 801df8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df8e:	4b7b      	ldr	r3, [pc, #492]	; (801e17c <_vfiprintf_r+0x244>)
 801df90:	429d      	cmp	r5, r3
 801df92:	d101      	bne.n	801df98 <_vfiprintf_r+0x60>
 801df94:	68b5      	ldr	r5, [r6, #8]
 801df96:	e7df      	b.n	801df58 <_vfiprintf_r+0x20>
 801df98:	4b79      	ldr	r3, [pc, #484]	; (801e180 <_vfiprintf_r+0x248>)
 801df9a:	429d      	cmp	r5, r3
 801df9c:	bf08      	it	eq
 801df9e:	68f5      	ldreq	r5, [r6, #12]
 801dfa0:	e7da      	b.n	801df58 <_vfiprintf_r+0x20>
 801dfa2:	89ab      	ldrh	r3, [r5, #12]
 801dfa4:	0598      	lsls	r0, r3, #22
 801dfa6:	d4ed      	bmi.n	801df84 <_vfiprintf_r+0x4c>
 801dfa8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dfaa:	f7ff fe94 	bl	801dcd6 <__retarget_lock_release_recursive>
 801dfae:	e7e9      	b.n	801df84 <_vfiprintf_r+0x4c>
 801dfb0:	2300      	movs	r3, #0
 801dfb2:	9309      	str	r3, [sp, #36]	; 0x24
 801dfb4:	2320      	movs	r3, #32
 801dfb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dfba:	f8cd 800c 	str.w	r8, [sp, #12]
 801dfbe:	2330      	movs	r3, #48	; 0x30
 801dfc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e184 <_vfiprintf_r+0x24c>
 801dfc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dfc8:	f04f 0901 	mov.w	r9, #1
 801dfcc:	4623      	mov	r3, r4
 801dfce:	469a      	mov	sl, r3
 801dfd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dfd4:	b10a      	cbz	r2, 801dfda <_vfiprintf_r+0xa2>
 801dfd6:	2a25      	cmp	r2, #37	; 0x25
 801dfd8:	d1f9      	bne.n	801dfce <_vfiprintf_r+0x96>
 801dfda:	ebba 0b04 	subs.w	fp, sl, r4
 801dfde:	d00b      	beq.n	801dff8 <_vfiprintf_r+0xc0>
 801dfe0:	465b      	mov	r3, fp
 801dfe2:	4622      	mov	r2, r4
 801dfe4:	4629      	mov	r1, r5
 801dfe6:	4630      	mov	r0, r6
 801dfe8:	f7ff ff93 	bl	801df12 <__sfputs_r>
 801dfec:	3001      	adds	r0, #1
 801dfee:	f000 80aa 	beq.w	801e146 <_vfiprintf_r+0x20e>
 801dff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dff4:	445a      	add	r2, fp
 801dff6:	9209      	str	r2, [sp, #36]	; 0x24
 801dff8:	f89a 3000 	ldrb.w	r3, [sl]
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	f000 80a2 	beq.w	801e146 <_vfiprintf_r+0x20e>
 801e002:	2300      	movs	r3, #0
 801e004:	f04f 32ff 	mov.w	r2, #4294967295
 801e008:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e00c:	f10a 0a01 	add.w	sl, sl, #1
 801e010:	9304      	str	r3, [sp, #16]
 801e012:	9307      	str	r3, [sp, #28]
 801e014:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e018:	931a      	str	r3, [sp, #104]	; 0x68
 801e01a:	4654      	mov	r4, sl
 801e01c:	2205      	movs	r2, #5
 801e01e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e022:	4858      	ldr	r0, [pc, #352]	; (801e184 <_vfiprintf_r+0x24c>)
 801e024:	f7e2 f974 	bl	8000310 <memchr>
 801e028:	9a04      	ldr	r2, [sp, #16]
 801e02a:	b9d8      	cbnz	r0, 801e064 <_vfiprintf_r+0x12c>
 801e02c:	06d1      	lsls	r1, r2, #27
 801e02e:	bf44      	itt	mi
 801e030:	2320      	movmi	r3, #32
 801e032:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e036:	0713      	lsls	r3, r2, #28
 801e038:	bf44      	itt	mi
 801e03a:	232b      	movmi	r3, #43	; 0x2b
 801e03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e040:	f89a 3000 	ldrb.w	r3, [sl]
 801e044:	2b2a      	cmp	r3, #42	; 0x2a
 801e046:	d015      	beq.n	801e074 <_vfiprintf_r+0x13c>
 801e048:	9a07      	ldr	r2, [sp, #28]
 801e04a:	4654      	mov	r4, sl
 801e04c:	2000      	movs	r0, #0
 801e04e:	f04f 0c0a 	mov.w	ip, #10
 801e052:	4621      	mov	r1, r4
 801e054:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e058:	3b30      	subs	r3, #48	; 0x30
 801e05a:	2b09      	cmp	r3, #9
 801e05c:	d94e      	bls.n	801e0fc <_vfiprintf_r+0x1c4>
 801e05e:	b1b0      	cbz	r0, 801e08e <_vfiprintf_r+0x156>
 801e060:	9207      	str	r2, [sp, #28]
 801e062:	e014      	b.n	801e08e <_vfiprintf_r+0x156>
 801e064:	eba0 0308 	sub.w	r3, r0, r8
 801e068:	fa09 f303 	lsl.w	r3, r9, r3
 801e06c:	4313      	orrs	r3, r2
 801e06e:	9304      	str	r3, [sp, #16]
 801e070:	46a2      	mov	sl, r4
 801e072:	e7d2      	b.n	801e01a <_vfiprintf_r+0xe2>
 801e074:	9b03      	ldr	r3, [sp, #12]
 801e076:	1d19      	adds	r1, r3, #4
 801e078:	681b      	ldr	r3, [r3, #0]
 801e07a:	9103      	str	r1, [sp, #12]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	bfbb      	ittet	lt
 801e080:	425b      	neglt	r3, r3
 801e082:	f042 0202 	orrlt.w	r2, r2, #2
 801e086:	9307      	strge	r3, [sp, #28]
 801e088:	9307      	strlt	r3, [sp, #28]
 801e08a:	bfb8      	it	lt
 801e08c:	9204      	strlt	r2, [sp, #16]
 801e08e:	7823      	ldrb	r3, [r4, #0]
 801e090:	2b2e      	cmp	r3, #46	; 0x2e
 801e092:	d10c      	bne.n	801e0ae <_vfiprintf_r+0x176>
 801e094:	7863      	ldrb	r3, [r4, #1]
 801e096:	2b2a      	cmp	r3, #42	; 0x2a
 801e098:	d135      	bne.n	801e106 <_vfiprintf_r+0x1ce>
 801e09a:	9b03      	ldr	r3, [sp, #12]
 801e09c:	1d1a      	adds	r2, r3, #4
 801e09e:	681b      	ldr	r3, [r3, #0]
 801e0a0:	9203      	str	r2, [sp, #12]
 801e0a2:	2b00      	cmp	r3, #0
 801e0a4:	bfb8      	it	lt
 801e0a6:	f04f 33ff 	movlt.w	r3, #4294967295
 801e0aa:	3402      	adds	r4, #2
 801e0ac:	9305      	str	r3, [sp, #20]
 801e0ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e194 <_vfiprintf_r+0x25c>
 801e0b2:	7821      	ldrb	r1, [r4, #0]
 801e0b4:	2203      	movs	r2, #3
 801e0b6:	4650      	mov	r0, sl
 801e0b8:	f7e2 f92a 	bl	8000310 <memchr>
 801e0bc:	b140      	cbz	r0, 801e0d0 <_vfiprintf_r+0x198>
 801e0be:	2340      	movs	r3, #64	; 0x40
 801e0c0:	eba0 000a 	sub.w	r0, r0, sl
 801e0c4:	fa03 f000 	lsl.w	r0, r3, r0
 801e0c8:	9b04      	ldr	r3, [sp, #16]
 801e0ca:	4303      	orrs	r3, r0
 801e0cc:	3401      	adds	r4, #1
 801e0ce:	9304      	str	r3, [sp, #16]
 801e0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e0d4:	482c      	ldr	r0, [pc, #176]	; (801e188 <_vfiprintf_r+0x250>)
 801e0d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e0da:	2206      	movs	r2, #6
 801e0dc:	f7e2 f918 	bl	8000310 <memchr>
 801e0e0:	2800      	cmp	r0, #0
 801e0e2:	d03f      	beq.n	801e164 <_vfiprintf_r+0x22c>
 801e0e4:	4b29      	ldr	r3, [pc, #164]	; (801e18c <_vfiprintf_r+0x254>)
 801e0e6:	bb1b      	cbnz	r3, 801e130 <_vfiprintf_r+0x1f8>
 801e0e8:	9b03      	ldr	r3, [sp, #12]
 801e0ea:	3307      	adds	r3, #7
 801e0ec:	f023 0307 	bic.w	r3, r3, #7
 801e0f0:	3308      	adds	r3, #8
 801e0f2:	9303      	str	r3, [sp, #12]
 801e0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0f6:	443b      	add	r3, r7
 801e0f8:	9309      	str	r3, [sp, #36]	; 0x24
 801e0fa:	e767      	b.n	801dfcc <_vfiprintf_r+0x94>
 801e0fc:	fb0c 3202 	mla	r2, ip, r2, r3
 801e100:	460c      	mov	r4, r1
 801e102:	2001      	movs	r0, #1
 801e104:	e7a5      	b.n	801e052 <_vfiprintf_r+0x11a>
 801e106:	2300      	movs	r3, #0
 801e108:	3401      	adds	r4, #1
 801e10a:	9305      	str	r3, [sp, #20]
 801e10c:	4619      	mov	r1, r3
 801e10e:	f04f 0c0a 	mov.w	ip, #10
 801e112:	4620      	mov	r0, r4
 801e114:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e118:	3a30      	subs	r2, #48	; 0x30
 801e11a:	2a09      	cmp	r2, #9
 801e11c:	d903      	bls.n	801e126 <_vfiprintf_r+0x1ee>
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d0c5      	beq.n	801e0ae <_vfiprintf_r+0x176>
 801e122:	9105      	str	r1, [sp, #20]
 801e124:	e7c3      	b.n	801e0ae <_vfiprintf_r+0x176>
 801e126:	fb0c 2101 	mla	r1, ip, r1, r2
 801e12a:	4604      	mov	r4, r0
 801e12c:	2301      	movs	r3, #1
 801e12e:	e7f0      	b.n	801e112 <_vfiprintf_r+0x1da>
 801e130:	ab03      	add	r3, sp, #12
 801e132:	9300      	str	r3, [sp, #0]
 801e134:	462a      	mov	r2, r5
 801e136:	4b16      	ldr	r3, [pc, #88]	; (801e190 <_vfiprintf_r+0x258>)
 801e138:	a904      	add	r1, sp, #16
 801e13a:	4630      	mov	r0, r6
 801e13c:	f3af 8000 	nop.w
 801e140:	4607      	mov	r7, r0
 801e142:	1c78      	adds	r0, r7, #1
 801e144:	d1d6      	bne.n	801e0f4 <_vfiprintf_r+0x1bc>
 801e146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e148:	07d9      	lsls	r1, r3, #31
 801e14a:	d405      	bmi.n	801e158 <_vfiprintf_r+0x220>
 801e14c:	89ab      	ldrh	r3, [r5, #12]
 801e14e:	059a      	lsls	r2, r3, #22
 801e150:	d402      	bmi.n	801e158 <_vfiprintf_r+0x220>
 801e152:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e154:	f7ff fdbf 	bl	801dcd6 <__retarget_lock_release_recursive>
 801e158:	89ab      	ldrh	r3, [r5, #12]
 801e15a:	065b      	lsls	r3, r3, #25
 801e15c:	f53f af12 	bmi.w	801df84 <_vfiprintf_r+0x4c>
 801e160:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e162:	e711      	b.n	801df88 <_vfiprintf_r+0x50>
 801e164:	ab03      	add	r3, sp, #12
 801e166:	9300      	str	r3, [sp, #0]
 801e168:	462a      	mov	r2, r5
 801e16a:	4b09      	ldr	r3, [pc, #36]	; (801e190 <_vfiprintf_r+0x258>)
 801e16c:	a904      	add	r1, sp, #16
 801e16e:	4630      	mov	r0, r6
 801e170:	f000 f880 	bl	801e274 <_printf_i>
 801e174:	e7e4      	b.n	801e140 <_vfiprintf_r+0x208>
 801e176:	bf00      	nop
 801e178:	08020e70 	.word	0x08020e70
 801e17c:	08020e90 	.word	0x08020e90
 801e180:	08020e50 	.word	0x08020e50
 801e184:	08020eb4 	.word	0x08020eb4
 801e188:	08020ebe 	.word	0x08020ebe
 801e18c:	00000000 	.word	0x00000000
 801e190:	0801df13 	.word	0x0801df13
 801e194:	08020eba 	.word	0x08020eba

0801e198 <_printf_common>:
 801e198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e19c:	4616      	mov	r6, r2
 801e19e:	4699      	mov	r9, r3
 801e1a0:	688a      	ldr	r2, [r1, #8]
 801e1a2:	690b      	ldr	r3, [r1, #16]
 801e1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e1a8:	4293      	cmp	r3, r2
 801e1aa:	bfb8      	it	lt
 801e1ac:	4613      	movlt	r3, r2
 801e1ae:	6033      	str	r3, [r6, #0]
 801e1b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e1b4:	4607      	mov	r7, r0
 801e1b6:	460c      	mov	r4, r1
 801e1b8:	b10a      	cbz	r2, 801e1be <_printf_common+0x26>
 801e1ba:	3301      	adds	r3, #1
 801e1bc:	6033      	str	r3, [r6, #0]
 801e1be:	6823      	ldr	r3, [r4, #0]
 801e1c0:	0699      	lsls	r1, r3, #26
 801e1c2:	bf42      	ittt	mi
 801e1c4:	6833      	ldrmi	r3, [r6, #0]
 801e1c6:	3302      	addmi	r3, #2
 801e1c8:	6033      	strmi	r3, [r6, #0]
 801e1ca:	6825      	ldr	r5, [r4, #0]
 801e1cc:	f015 0506 	ands.w	r5, r5, #6
 801e1d0:	d106      	bne.n	801e1e0 <_printf_common+0x48>
 801e1d2:	f104 0a19 	add.w	sl, r4, #25
 801e1d6:	68e3      	ldr	r3, [r4, #12]
 801e1d8:	6832      	ldr	r2, [r6, #0]
 801e1da:	1a9b      	subs	r3, r3, r2
 801e1dc:	42ab      	cmp	r3, r5
 801e1de:	dc26      	bgt.n	801e22e <_printf_common+0x96>
 801e1e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e1e4:	1e13      	subs	r3, r2, #0
 801e1e6:	6822      	ldr	r2, [r4, #0]
 801e1e8:	bf18      	it	ne
 801e1ea:	2301      	movne	r3, #1
 801e1ec:	0692      	lsls	r2, r2, #26
 801e1ee:	d42b      	bmi.n	801e248 <_printf_common+0xb0>
 801e1f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e1f4:	4649      	mov	r1, r9
 801e1f6:	4638      	mov	r0, r7
 801e1f8:	47c0      	blx	r8
 801e1fa:	3001      	adds	r0, #1
 801e1fc:	d01e      	beq.n	801e23c <_printf_common+0xa4>
 801e1fe:	6823      	ldr	r3, [r4, #0]
 801e200:	68e5      	ldr	r5, [r4, #12]
 801e202:	6832      	ldr	r2, [r6, #0]
 801e204:	f003 0306 	and.w	r3, r3, #6
 801e208:	2b04      	cmp	r3, #4
 801e20a:	bf08      	it	eq
 801e20c:	1aad      	subeq	r5, r5, r2
 801e20e:	68a3      	ldr	r3, [r4, #8]
 801e210:	6922      	ldr	r2, [r4, #16]
 801e212:	bf0c      	ite	eq
 801e214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e218:	2500      	movne	r5, #0
 801e21a:	4293      	cmp	r3, r2
 801e21c:	bfc4      	itt	gt
 801e21e:	1a9b      	subgt	r3, r3, r2
 801e220:	18ed      	addgt	r5, r5, r3
 801e222:	2600      	movs	r6, #0
 801e224:	341a      	adds	r4, #26
 801e226:	42b5      	cmp	r5, r6
 801e228:	d11a      	bne.n	801e260 <_printf_common+0xc8>
 801e22a:	2000      	movs	r0, #0
 801e22c:	e008      	b.n	801e240 <_printf_common+0xa8>
 801e22e:	2301      	movs	r3, #1
 801e230:	4652      	mov	r2, sl
 801e232:	4649      	mov	r1, r9
 801e234:	4638      	mov	r0, r7
 801e236:	47c0      	blx	r8
 801e238:	3001      	adds	r0, #1
 801e23a:	d103      	bne.n	801e244 <_printf_common+0xac>
 801e23c:	f04f 30ff 	mov.w	r0, #4294967295
 801e240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e244:	3501      	adds	r5, #1
 801e246:	e7c6      	b.n	801e1d6 <_printf_common+0x3e>
 801e248:	18e1      	adds	r1, r4, r3
 801e24a:	1c5a      	adds	r2, r3, #1
 801e24c:	2030      	movs	r0, #48	; 0x30
 801e24e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e252:	4422      	add	r2, r4
 801e254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e25c:	3302      	adds	r3, #2
 801e25e:	e7c7      	b.n	801e1f0 <_printf_common+0x58>
 801e260:	2301      	movs	r3, #1
 801e262:	4622      	mov	r2, r4
 801e264:	4649      	mov	r1, r9
 801e266:	4638      	mov	r0, r7
 801e268:	47c0      	blx	r8
 801e26a:	3001      	adds	r0, #1
 801e26c:	d0e6      	beq.n	801e23c <_printf_common+0xa4>
 801e26e:	3601      	adds	r6, #1
 801e270:	e7d9      	b.n	801e226 <_printf_common+0x8e>
	...

0801e274 <_printf_i>:
 801e274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e278:	7e0f      	ldrb	r7, [r1, #24]
 801e27a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e27c:	2f78      	cmp	r7, #120	; 0x78
 801e27e:	4691      	mov	r9, r2
 801e280:	4680      	mov	r8, r0
 801e282:	460c      	mov	r4, r1
 801e284:	469a      	mov	sl, r3
 801e286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e28a:	d807      	bhi.n	801e29c <_printf_i+0x28>
 801e28c:	2f62      	cmp	r7, #98	; 0x62
 801e28e:	d80a      	bhi.n	801e2a6 <_printf_i+0x32>
 801e290:	2f00      	cmp	r7, #0
 801e292:	f000 80d8 	beq.w	801e446 <_printf_i+0x1d2>
 801e296:	2f58      	cmp	r7, #88	; 0x58
 801e298:	f000 80a3 	beq.w	801e3e2 <_printf_i+0x16e>
 801e29c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e2a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e2a4:	e03a      	b.n	801e31c <_printf_i+0xa8>
 801e2a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e2aa:	2b15      	cmp	r3, #21
 801e2ac:	d8f6      	bhi.n	801e29c <_printf_i+0x28>
 801e2ae:	a101      	add	r1, pc, #4	; (adr r1, 801e2b4 <_printf_i+0x40>)
 801e2b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e2b4:	0801e30d 	.word	0x0801e30d
 801e2b8:	0801e321 	.word	0x0801e321
 801e2bc:	0801e29d 	.word	0x0801e29d
 801e2c0:	0801e29d 	.word	0x0801e29d
 801e2c4:	0801e29d 	.word	0x0801e29d
 801e2c8:	0801e29d 	.word	0x0801e29d
 801e2cc:	0801e321 	.word	0x0801e321
 801e2d0:	0801e29d 	.word	0x0801e29d
 801e2d4:	0801e29d 	.word	0x0801e29d
 801e2d8:	0801e29d 	.word	0x0801e29d
 801e2dc:	0801e29d 	.word	0x0801e29d
 801e2e0:	0801e42d 	.word	0x0801e42d
 801e2e4:	0801e351 	.word	0x0801e351
 801e2e8:	0801e40f 	.word	0x0801e40f
 801e2ec:	0801e29d 	.word	0x0801e29d
 801e2f0:	0801e29d 	.word	0x0801e29d
 801e2f4:	0801e44f 	.word	0x0801e44f
 801e2f8:	0801e29d 	.word	0x0801e29d
 801e2fc:	0801e351 	.word	0x0801e351
 801e300:	0801e29d 	.word	0x0801e29d
 801e304:	0801e29d 	.word	0x0801e29d
 801e308:	0801e417 	.word	0x0801e417
 801e30c:	682b      	ldr	r3, [r5, #0]
 801e30e:	1d1a      	adds	r2, r3, #4
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	602a      	str	r2, [r5, #0]
 801e314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e31c:	2301      	movs	r3, #1
 801e31e:	e0a3      	b.n	801e468 <_printf_i+0x1f4>
 801e320:	6820      	ldr	r0, [r4, #0]
 801e322:	6829      	ldr	r1, [r5, #0]
 801e324:	0606      	lsls	r6, r0, #24
 801e326:	f101 0304 	add.w	r3, r1, #4
 801e32a:	d50a      	bpl.n	801e342 <_printf_i+0xce>
 801e32c:	680e      	ldr	r6, [r1, #0]
 801e32e:	602b      	str	r3, [r5, #0]
 801e330:	2e00      	cmp	r6, #0
 801e332:	da03      	bge.n	801e33c <_printf_i+0xc8>
 801e334:	232d      	movs	r3, #45	; 0x2d
 801e336:	4276      	negs	r6, r6
 801e338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e33c:	485e      	ldr	r0, [pc, #376]	; (801e4b8 <_printf_i+0x244>)
 801e33e:	230a      	movs	r3, #10
 801e340:	e019      	b.n	801e376 <_printf_i+0x102>
 801e342:	680e      	ldr	r6, [r1, #0]
 801e344:	602b      	str	r3, [r5, #0]
 801e346:	f010 0f40 	tst.w	r0, #64	; 0x40
 801e34a:	bf18      	it	ne
 801e34c:	b236      	sxthne	r6, r6
 801e34e:	e7ef      	b.n	801e330 <_printf_i+0xbc>
 801e350:	682b      	ldr	r3, [r5, #0]
 801e352:	6820      	ldr	r0, [r4, #0]
 801e354:	1d19      	adds	r1, r3, #4
 801e356:	6029      	str	r1, [r5, #0]
 801e358:	0601      	lsls	r1, r0, #24
 801e35a:	d501      	bpl.n	801e360 <_printf_i+0xec>
 801e35c:	681e      	ldr	r6, [r3, #0]
 801e35e:	e002      	b.n	801e366 <_printf_i+0xf2>
 801e360:	0646      	lsls	r6, r0, #25
 801e362:	d5fb      	bpl.n	801e35c <_printf_i+0xe8>
 801e364:	881e      	ldrh	r6, [r3, #0]
 801e366:	4854      	ldr	r0, [pc, #336]	; (801e4b8 <_printf_i+0x244>)
 801e368:	2f6f      	cmp	r7, #111	; 0x6f
 801e36a:	bf0c      	ite	eq
 801e36c:	2308      	moveq	r3, #8
 801e36e:	230a      	movne	r3, #10
 801e370:	2100      	movs	r1, #0
 801e372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e376:	6865      	ldr	r5, [r4, #4]
 801e378:	60a5      	str	r5, [r4, #8]
 801e37a:	2d00      	cmp	r5, #0
 801e37c:	bfa2      	ittt	ge
 801e37e:	6821      	ldrge	r1, [r4, #0]
 801e380:	f021 0104 	bicge.w	r1, r1, #4
 801e384:	6021      	strge	r1, [r4, #0]
 801e386:	b90e      	cbnz	r6, 801e38c <_printf_i+0x118>
 801e388:	2d00      	cmp	r5, #0
 801e38a:	d04d      	beq.n	801e428 <_printf_i+0x1b4>
 801e38c:	4615      	mov	r5, r2
 801e38e:	fbb6 f1f3 	udiv	r1, r6, r3
 801e392:	fb03 6711 	mls	r7, r3, r1, r6
 801e396:	5dc7      	ldrb	r7, [r0, r7]
 801e398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e39c:	4637      	mov	r7, r6
 801e39e:	42bb      	cmp	r3, r7
 801e3a0:	460e      	mov	r6, r1
 801e3a2:	d9f4      	bls.n	801e38e <_printf_i+0x11a>
 801e3a4:	2b08      	cmp	r3, #8
 801e3a6:	d10b      	bne.n	801e3c0 <_printf_i+0x14c>
 801e3a8:	6823      	ldr	r3, [r4, #0]
 801e3aa:	07de      	lsls	r6, r3, #31
 801e3ac:	d508      	bpl.n	801e3c0 <_printf_i+0x14c>
 801e3ae:	6923      	ldr	r3, [r4, #16]
 801e3b0:	6861      	ldr	r1, [r4, #4]
 801e3b2:	4299      	cmp	r1, r3
 801e3b4:	bfde      	ittt	le
 801e3b6:	2330      	movle	r3, #48	; 0x30
 801e3b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e3bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e3c0:	1b52      	subs	r2, r2, r5
 801e3c2:	6122      	str	r2, [r4, #16]
 801e3c4:	f8cd a000 	str.w	sl, [sp]
 801e3c8:	464b      	mov	r3, r9
 801e3ca:	aa03      	add	r2, sp, #12
 801e3cc:	4621      	mov	r1, r4
 801e3ce:	4640      	mov	r0, r8
 801e3d0:	f7ff fee2 	bl	801e198 <_printf_common>
 801e3d4:	3001      	adds	r0, #1
 801e3d6:	d14c      	bne.n	801e472 <_printf_i+0x1fe>
 801e3d8:	f04f 30ff 	mov.w	r0, #4294967295
 801e3dc:	b004      	add	sp, #16
 801e3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e3e2:	4835      	ldr	r0, [pc, #212]	; (801e4b8 <_printf_i+0x244>)
 801e3e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801e3e8:	6829      	ldr	r1, [r5, #0]
 801e3ea:	6823      	ldr	r3, [r4, #0]
 801e3ec:	f851 6b04 	ldr.w	r6, [r1], #4
 801e3f0:	6029      	str	r1, [r5, #0]
 801e3f2:	061d      	lsls	r5, r3, #24
 801e3f4:	d514      	bpl.n	801e420 <_printf_i+0x1ac>
 801e3f6:	07df      	lsls	r7, r3, #31
 801e3f8:	bf44      	itt	mi
 801e3fa:	f043 0320 	orrmi.w	r3, r3, #32
 801e3fe:	6023      	strmi	r3, [r4, #0]
 801e400:	b91e      	cbnz	r6, 801e40a <_printf_i+0x196>
 801e402:	6823      	ldr	r3, [r4, #0]
 801e404:	f023 0320 	bic.w	r3, r3, #32
 801e408:	6023      	str	r3, [r4, #0]
 801e40a:	2310      	movs	r3, #16
 801e40c:	e7b0      	b.n	801e370 <_printf_i+0xfc>
 801e40e:	6823      	ldr	r3, [r4, #0]
 801e410:	f043 0320 	orr.w	r3, r3, #32
 801e414:	6023      	str	r3, [r4, #0]
 801e416:	2378      	movs	r3, #120	; 0x78
 801e418:	4828      	ldr	r0, [pc, #160]	; (801e4bc <_printf_i+0x248>)
 801e41a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801e41e:	e7e3      	b.n	801e3e8 <_printf_i+0x174>
 801e420:	0659      	lsls	r1, r3, #25
 801e422:	bf48      	it	mi
 801e424:	b2b6      	uxthmi	r6, r6
 801e426:	e7e6      	b.n	801e3f6 <_printf_i+0x182>
 801e428:	4615      	mov	r5, r2
 801e42a:	e7bb      	b.n	801e3a4 <_printf_i+0x130>
 801e42c:	682b      	ldr	r3, [r5, #0]
 801e42e:	6826      	ldr	r6, [r4, #0]
 801e430:	6961      	ldr	r1, [r4, #20]
 801e432:	1d18      	adds	r0, r3, #4
 801e434:	6028      	str	r0, [r5, #0]
 801e436:	0635      	lsls	r5, r6, #24
 801e438:	681b      	ldr	r3, [r3, #0]
 801e43a:	d501      	bpl.n	801e440 <_printf_i+0x1cc>
 801e43c:	6019      	str	r1, [r3, #0]
 801e43e:	e002      	b.n	801e446 <_printf_i+0x1d2>
 801e440:	0670      	lsls	r0, r6, #25
 801e442:	d5fb      	bpl.n	801e43c <_printf_i+0x1c8>
 801e444:	8019      	strh	r1, [r3, #0]
 801e446:	2300      	movs	r3, #0
 801e448:	6123      	str	r3, [r4, #16]
 801e44a:	4615      	mov	r5, r2
 801e44c:	e7ba      	b.n	801e3c4 <_printf_i+0x150>
 801e44e:	682b      	ldr	r3, [r5, #0]
 801e450:	1d1a      	adds	r2, r3, #4
 801e452:	602a      	str	r2, [r5, #0]
 801e454:	681d      	ldr	r5, [r3, #0]
 801e456:	6862      	ldr	r2, [r4, #4]
 801e458:	2100      	movs	r1, #0
 801e45a:	4628      	mov	r0, r5
 801e45c:	f7e1 ff58 	bl	8000310 <memchr>
 801e460:	b108      	cbz	r0, 801e466 <_printf_i+0x1f2>
 801e462:	1b40      	subs	r0, r0, r5
 801e464:	6060      	str	r0, [r4, #4]
 801e466:	6863      	ldr	r3, [r4, #4]
 801e468:	6123      	str	r3, [r4, #16]
 801e46a:	2300      	movs	r3, #0
 801e46c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e470:	e7a8      	b.n	801e3c4 <_printf_i+0x150>
 801e472:	6923      	ldr	r3, [r4, #16]
 801e474:	462a      	mov	r2, r5
 801e476:	4649      	mov	r1, r9
 801e478:	4640      	mov	r0, r8
 801e47a:	47d0      	blx	sl
 801e47c:	3001      	adds	r0, #1
 801e47e:	d0ab      	beq.n	801e3d8 <_printf_i+0x164>
 801e480:	6823      	ldr	r3, [r4, #0]
 801e482:	079b      	lsls	r3, r3, #30
 801e484:	d413      	bmi.n	801e4ae <_printf_i+0x23a>
 801e486:	68e0      	ldr	r0, [r4, #12]
 801e488:	9b03      	ldr	r3, [sp, #12]
 801e48a:	4298      	cmp	r0, r3
 801e48c:	bfb8      	it	lt
 801e48e:	4618      	movlt	r0, r3
 801e490:	e7a4      	b.n	801e3dc <_printf_i+0x168>
 801e492:	2301      	movs	r3, #1
 801e494:	4632      	mov	r2, r6
 801e496:	4649      	mov	r1, r9
 801e498:	4640      	mov	r0, r8
 801e49a:	47d0      	blx	sl
 801e49c:	3001      	adds	r0, #1
 801e49e:	d09b      	beq.n	801e3d8 <_printf_i+0x164>
 801e4a0:	3501      	adds	r5, #1
 801e4a2:	68e3      	ldr	r3, [r4, #12]
 801e4a4:	9903      	ldr	r1, [sp, #12]
 801e4a6:	1a5b      	subs	r3, r3, r1
 801e4a8:	42ab      	cmp	r3, r5
 801e4aa:	dcf2      	bgt.n	801e492 <_printf_i+0x21e>
 801e4ac:	e7eb      	b.n	801e486 <_printf_i+0x212>
 801e4ae:	2500      	movs	r5, #0
 801e4b0:	f104 0619 	add.w	r6, r4, #25
 801e4b4:	e7f5      	b.n	801e4a2 <_printf_i+0x22e>
 801e4b6:	bf00      	nop
 801e4b8:	08020ec5 	.word	0x08020ec5
 801e4bc:	08020ed6 	.word	0x08020ed6

0801e4c0 <iprintf>:
 801e4c0:	b40f      	push	{r0, r1, r2, r3}
 801e4c2:	4b0a      	ldr	r3, [pc, #40]	; (801e4ec <iprintf+0x2c>)
 801e4c4:	b513      	push	{r0, r1, r4, lr}
 801e4c6:	681c      	ldr	r4, [r3, #0]
 801e4c8:	b124      	cbz	r4, 801e4d4 <iprintf+0x14>
 801e4ca:	69a3      	ldr	r3, [r4, #24]
 801e4cc:	b913      	cbnz	r3, 801e4d4 <iprintf+0x14>
 801e4ce:	4620      	mov	r0, r4
 801e4d0:	f7ff fb2a 	bl	801db28 <__sinit>
 801e4d4:	ab05      	add	r3, sp, #20
 801e4d6:	9a04      	ldr	r2, [sp, #16]
 801e4d8:	68a1      	ldr	r1, [r4, #8]
 801e4da:	9301      	str	r3, [sp, #4]
 801e4dc:	4620      	mov	r0, r4
 801e4de:	f7ff fd2b 	bl	801df38 <_vfiprintf_r>
 801e4e2:	b002      	add	sp, #8
 801e4e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e4e8:	b004      	add	sp, #16
 801e4ea:	4770      	bx	lr
 801e4ec:	24000148 	.word	0x24000148

0801e4f0 <_puts_r>:
 801e4f0:	b570      	push	{r4, r5, r6, lr}
 801e4f2:	460e      	mov	r6, r1
 801e4f4:	4605      	mov	r5, r0
 801e4f6:	b118      	cbz	r0, 801e500 <_puts_r+0x10>
 801e4f8:	6983      	ldr	r3, [r0, #24]
 801e4fa:	b90b      	cbnz	r3, 801e500 <_puts_r+0x10>
 801e4fc:	f7ff fb14 	bl	801db28 <__sinit>
 801e500:	69ab      	ldr	r3, [r5, #24]
 801e502:	68ac      	ldr	r4, [r5, #8]
 801e504:	b913      	cbnz	r3, 801e50c <_puts_r+0x1c>
 801e506:	4628      	mov	r0, r5
 801e508:	f7ff fb0e 	bl	801db28 <__sinit>
 801e50c:	4b2c      	ldr	r3, [pc, #176]	; (801e5c0 <_puts_r+0xd0>)
 801e50e:	429c      	cmp	r4, r3
 801e510:	d120      	bne.n	801e554 <_puts_r+0x64>
 801e512:	686c      	ldr	r4, [r5, #4]
 801e514:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e516:	07db      	lsls	r3, r3, #31
 801e518:	d405      	bmi.n	801e526 <_puts_r+0x36>
 801e51a:	89a3      	ldrh	r3, [r4, #12]
 801e51c:	0598      	lsls	r0, r3, #22
 801e51e:	d402      	bmi.n	801e526 <_puts_r+0x36>
 801e520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e522:	f7ff fbd6 	bl	801dcd2 <__retarget_lock_acquire_recursive>
 801e526:	89a3      	ldrh	r3, [r4, #12]
 801e528:	0719      	lsls	r1, r3, #28
 801e52a:	d51d      	bpl.n	801e568 <_puts_r+0x78>
 801e52c:	6923      	ldr	r3, [r4, #16]
 801e52e:	b1db      	cbz	r3, 801e568 <_puts_r+0x78>
 801e530:	3e01      	subs	r6, #1
 801e532:	68a3      	ldr	r3, [r4, #8]
 801e534:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e538:	3b01      	subs	r3, #1
 801e53a:	60a3      	str	r3, [r4, #8]
 801e53c:	bb39      	cbnz	r1, 801e58e <_puts_r+0x9e>
 801e53e:	2b00      	cmp	r3, #0
 801e540:	da38      	bge.n	801e5b4 <_puts_r+0xc4>
 801e542:	4622      	mov	r2, r4
 801e544:	210a      	movs	r1, #10
 801e546:	4628      	mov	r0, r5
 801e548:	f000 f94a 	bl	801e7e0 <__swbuf_r>
 801e54c:	3001      	adds	r0, #1
 801e54e:	d011      	beq.n	801e574 <_puts_r+0x84>
 801e550:	250a      	movs	r5, #10
 801e552:	e011      	b.n	801e578 <_puts_r+0x88>
 801e554:	4b1b      	ldr	r3, [pc, #108]	; (801e5c4 <_puts_r+0xd4>)
 801e556:	429c      	cmp	r4, r3
 801e558:	d101      	bne.n	801e55e <_puts_r+0x6e>
 801e55a:	68ac      	ldr	r4, [r5, #8]
 801e55c:	e7da      	b.n	801e514 <_puts_r+0x24>
 801e55e:	4b1a      	ldr	r3, [pc, #104]	; (801e5c8 <_puts_r+0xd8>)
 801e560:	429c      	cmp	r4, r3
 801e562:	bf08      	it	eq
 801e564:	68ec      	ldreq	r4, [r5, #12]
 801e566:	e7d5      	b.n	801e514 <_puts_r+0x24>
 801e568:	4621      	mov	r1, r4
 801e56a:	4628      	mov	r0, r5
 801e56c:	f000 f99c 	bl	801e8a8 <__swsetup_r>
 801e570:	2800      	cmp	r0, #0
 801e572:	d0dd      	beq.n	801e530 <_puts_r+0x40>
 801e574:	f04f 35ff 	mov.w	r5, #4294967295
 801e578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e57a:	07da      	lsls	r2, r3, #31
 801e57c:	d405      	bmi.n	801e58a <_puts_r+0x9a>
 801e57e:	89a3      	ldrh	r3, [r4, #12]
 801e580:	059b      	lsls	r3, r3, #22
 801e582:	d402      	bmi.n	801e58a <_puts_r+0x9a>
 801e584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e586:	f7ff fba6 	bl	801dcd6 <__retarget_lock_release_recursive>
 801e58a:	4628      	mov	r0, r5
 801e58c:	bd70      	pop	{r4, r5, r6, pc}
 801e58e:	2b00      	cmp	r3, #0
 801e590:	da04      	bge.n	801e59c <_puts_r+0xac>
 801e592:	69a2      	ldr	r2, [r4, #24]
 801e594:	429a      	cmp	r2, r3
 801e596:	dc06      	bgt.n	801e5a6 <_puts_r+0xb6>
 801e598:	290a      	cmp	r1, #10
 801e59a:	d004      	beq.n	801e5a6 <_puts_r+0xb6>
 801e59c:	6823      	ldr	r3, [r4, #0]
 801e59e:	1c5a      	adds	r2, r3, #1
 801e5a0:	6022      	str	r2, [r4, #0]
 801e5a2:	7019      	strb	r1, [r3, #0]
 801e5a4:	e7c5      	b.n	801e532 <_puts_r+0x42>
 801e5a6:	4622      	mov	r2, r4
 801e5a8:	4628      	mov	r0, r5
 801e5aa:	f000 f919 	bl	801e7e0 <__swbuf_r>
 801e5ae:	3001      	adds	r0, #1
 801e5b0:	d1bf      	bne.n	801e532 <_puts_r+0x42>
 801e5b2:	e7df      	b.n	801e574 <_puts_r+0x84>
 801e5b4:	6823      	ldr	r3, [r4, #0]
 801e5b6:	250a      	movs	r5, #10
 801e5b8:	1c5a      	adds	r2, r3, #1
 801e5ba:	6022      	str	r2, [r4, #0]
 801e5bc:	701d      	strb	r5, [r3, #0]
 801e5be:	e7db      	b.n	801e578 <_puts_r+0x88>
 801e5c0:	08020e70 	.word	0x08020e70
 801e5c4:	08020e90 	.word	0x08020e90
 801e5c8:	08020e50 	.word	0x08020e50

0801e5cc <puts>:
 801e5cc:	4b02      	ldr	r3, [pc, #8]	; (801e5d8 <puts+0xc>)
 801e5ce:	4601      	mov	r1, r0
 801e5d0:	6818      	ldr	r0, [r3, #0]
 801e5d2:	f7ff bf8d 	b.w	801e4f0 <_puts_r>
 801e5d6:	bf00      	nop
 801e5d8:	24000148 	.word	0x24000148

0801e5dc <cleanup_glue>:
 801e5dc:	b538      	push	{r3, r4, r5, lr}
 801e5de:	460c      	mov	r4, r1
 801e5e0:	6809      	ldr	r1, [r1, #0]
 801e5e2:	4605      	mov	r5, r0
 801e5e4:	b109      	cbz	r1, 801e5ea <cleanup_glue+0xe>
 801e5e6:	f7ff fff9 	bl	801e5dc <cleanup_glue>
 801e5ea:	4621      	mov	r1, r4
 801e5ec:	4628      	mov	r0, r5
 801e5ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e5f2:	f7ff bb97 	b.w	801dd24 <_free_r>
	...

0801e5f8 <_reclaim_reent>:
 801e5f8:	4b2c      	ldr	r3, [pc, #176]	; (801e6ac <_reclaim_reent+0xb4>)
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	4283      	cmp	r3, r0
 801e5fe:	b570      	push	{r4, r5, r6, lr}
 801e600:	4604      	mov	r4, r0
 801e602:	d051      	beq.n	801e6a8 <_reclaim_reent+0xb0>
 801e604:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e606:	b143      	cbz	r3, 801e61a <_reclaim_reent+0x22>
 801e608:	68db      	ldr	r3, [r3, #12]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d14a      	bne.n	801e6a4 <_reclaim_reent+0xac>
 801e60e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e610:	6819      	ldr	r1, [r3, #0]
 801e612:	b111      	cbz	r1, 801e61a <_reclaim_reent+0x22>
 801e614:	4620      	mov	r0, r4
 801e616:	f7ff fb85 	bl	801dd24 <_free_r>
 801e61a:	6961      	ldr	r1, [r4, #20]
 801e61c:	b111      	cbz	r1, 801e624 <_reclaim_reent+0x2c>
 801e61e:	4620      	mov	r0, r4
 801e620:	f7ff fb80 	bl	801dd24 <_free_r>
 801e624:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e626:	b111      	cbz	r1, 801e62e <_reclaim_reent+0x36>
 801e628:	4620      	mov	r0, r4
 801e62a:	f7ff fb7b 	bl	801dd24 <_free_r>
 801e62e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e630:	b111      	cbz	r1, 801e638 <_reclaim_reent+0x40>
 801e632:	4620      	mov	r0, r4
 801e634:	f7ff fb76 	bl	801dd24 <_free_r>
 801e638:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801e63a:	b111      	cbz	r1, 801e642 <_reclaim_reent+0x4a>
 801e63c:	4620      	mov	r0, r4
 801e63e:	f7ff fb71 	bl	801dd24 <_free_r>
 801e642:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e644:	b111      	cbz	r1, 801e64c <_reclaim_reent+0x54>
 801e646:	4620      	mov	r0, r4
 801e648:	f7ff fb6c 	bl	801dd24 <_free_r>
 801e64c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801e64e:	b111      	cbz	r1, 801e656 <_reclaim_reent+0x5e>
 801e650:	4620      	mov	r0, r4
 801e652:	f7ff fb67 	bl	801dd24 <_free_r>
 801e656:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801e658:	b111      	cbz	r1, 801e660 <_reclaim_reent+0x68>
 801e65a:	4620      	mov	r0, r4
 801e65c:	f7ff fb62 	bl	801dd24 <_free_r>
 801e660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e662:	b111      	cbz	r1, 801e66a <_reclaim_reent+0x72>
 801e664:	4620      	mov	r0, r4
 801e666:	f7ff fb5d 	bl	801dd24 <_free_r>
 801e66a:	69a3      	ldr	r3, [r4, #24]
 801e66c:	b1e3      	cbz	r3, 801e6a8 <_reclaim_reent+0xb0>
 801e66e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e670:	4620      	mov	r0, r4
 801e672:	4798      	blx	r3
 801e674:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e676:	b1b9      	cbz	r1, 801e6a8 <_reclaim_reent+0xb0>
 801e678:	4620      	mov	r0, r4
 801e67a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e67e:	f7ff bfad 	b.w	801e5dc <cleanup_glue>
 801e682:	5949      	ldr	r1, [r1, r5]
 801e684:	b941      	cbnz	r1, 801e698 <_reclaim_reent+0xa0>
 801e686:	3504      	adds	r5, #4
 801e688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e68a:	2d80      	cmp	r5, #128	; 0x80
 801e68c:	68d9      	ldr	r1, [r3, #12]
 801e68e:	d1f8      	bne.n	801e682 <_reclaim_reent+0x8a>
 801e690:	4620      	mov	r0, r4
 801e692:	f7ff fb47 	bl	801dd24 <_free_r>
 801e696:	e7ba      	b.n	801e60e <_reclaim_reent+0x16>
 801e698:	680e      	ldr	r6, [r1, #0]
 801e69a:	4620      	mov	r0, r4
 801e69c:	f7ff fb42 	bl	801dd24 <_free_r>
 801e6a0:	4631      	mov	r1, r6
 801e6a2:	e7ef      	b.n	801e684 <_reclaim_reent+0x8c>
 801e6a4:	2500      	movs	r5, #0
 801e6a6:	e7ef      	b.n	801e688 <_reclaim_reent+0x90>
 801e6a8:	bd70      	pop	{r4, r5, r6, pc}
 801e6aa:	bf00      	nop
 801e6ac:	24000148 	.word	0x24000148

0801e6b0 <_sbrk_r>:
 801e6b0:	b538      	push	{r3, r4, r5, lr}
 801e6b2:	4d06      	ldr	r5, [pc, #24]	; (801e6cc <_sbrk_r+0x1c>)
 801e6b4:	2300      	movs	r3, #0
 801e6b6:	4604      	mov	r4, r0
 801e6b8:	4608      	mov	r0, r1
 801e6ba:	602b      	str	r3, [r5, #0]
 801e6bc:	f7e2 ff30 	bl	8001520 <_sbrk>
 801e6c0:	1c43      	adds	r3, r0, #1
 801e6c2:	d102      	bne.n	801e6ca <_sbrk_r+0x1a>
 801e6c4:	682b      	ldr	r3, [r5, #0]
 801e6c6:	b103      	cbz	r3, 801e6ca <_sbrk_r+0x1a>
 801e6c8:	6023      	str	r3, [r4, #0]
 801e6ca:	bd38      	pop	{r3, r4, r5, pc}
 801e6cc:	240076ac 	.word	0x240076ac

0801e6d0 <_raise_r>:
 801e6d0:	291f      	cmp	r1, #31
 801e6d2:	b538      	push	{r3, r4, r5, lr}
 801e6d4:	4604      	mov	r4, r0
 801e6d6:	460d      	mov	r5, r1
 801e6d8:	d904      	bls.n	801e6e4 <_raise_r+0x14>
 801e6da:	2316      	movs	r3, #22
 801e6dc:	6003      	str	r3, [r0, #0]
 801e6de:	f04f 30ff 	mov.w	r0, #4294967295
 801e6e2:	bd38      	pop	{r3, r4, r5, pc}
 801e6e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e6e6:	b112      	cbz	r2, 801e6ee <_raise_r+0x1e>
 801e6e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e6ec:	b94b      	cbnz	r3, 801e702 <_raise_r+0x32>
 801e6ee:	4620      	mov	r0, r4
 801e6f0:	f000 f830 	bl	801e754 <_getpid_r>
 801e6f4:	462a      	mov	r2, r5
 801e6f6:	4601      	mov	r1, r0
 801e6f8:	4620      	mov	r0, r4
 801e6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6fe:	f000 b817 	b.w	801e730 <_kill_r>
 801e702:	2b01      	cmp	r3, #1
 801e704:	d00a      	beq.n	801e71c <_raise_r+0x4c>
 801e706:	1c59      	adds	r1, r3, #1
 801e708:	d103      	bne.n	801e712 <_raise_r+0x42>
 801e70a:	2316      	movs	r3, #22
 801e70c:	6003      	str	r3, [r0, #0]
 801e70e:	2001      	movs	r0, #1
 801e710:	e7e7      	b.n	801e6e2 <_raise_r+0x12>
 801e712:	2400      	movs	r4, #0
 801e714:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e718:	4628      	mov	r0, r5
 801e71a:	4798      	blx	r3
 801e71c:	2000      	movs	r0, #0
 801e71e:	e7e0      	b.n	801e6e2 <_raise_r+0x12>

0801e720 <raise>:
 801e720:	4b02      	ldr	r3, [pc, #8]	; (801e72c <raise+0xc>)
 801e722:	4601      	mov	r1, r0
 801e724:	6818      	ldr	r0, [r3, #0]
 801e726:	f7ff bfd3 	b.w	801e6d0 <_raise_r>
 801e72a:	bf00      	nop
 801e72c:	24000148 	.word	0x24000148

0801e730 <_kill_r>:
 801e730:	b538      	push	{r3, r4, r5, lr}
 801e732:	4d07      	ldr	r5, [pc, #28]	; (801e750 <_kill_r+0x20>)
 801e734:	2300      	movs	r3, #0
 801e736:	4604      	mov	r4, r0
 801e738:	4608      	mov	r0, r1
 801e73a:	4611      	mov	r1, r2
 801e73c:	602b      	str	r3, [r5, #0]
 801e73e:	f7e2 feb9 	bl	80014b4 <_kill>
 801e742:	1c43      	adds	r3, r0, #1
 801e744:	d102      	bne.n	801e74c <_kill_r+0x1c>
 801e746:	682b      	ldr	r3, [r5, #0]
 801e748:	b103      	cbz	r3, 801e74c <_kill_r+0x1c>
 801e74a:	6023      	str	r3, [r4, #0]
 801e74c:	bd38      	pop	{r3, r4, r5, pc}
 801e74e:	bf00      	nop
 801e750:	240076ac 	.word	0x240076ac

0801e754 <_getpid_r>:
 801e754:	f7e2 beac 	b.w	80014b0 <_getpid>

0801e758 <__sread>:
 801e758:	b510      	push	{r4, lr}
 801e75a:	460c      	mov	r4, r1
 801e75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e760:	f000 fac8 	bl	801ecf4 <_read_r>
 801e764:	2800      	cmp	r0, #0
 801e766:	bfab      	itete	ge
 801e768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e76a:	89a3      	ldrhlt	r3, [r4, #12]
 801e76c:	181b      	addge	r3, r3, r0
 801e76e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e772:	bfac      	ite	ge
 801e774:	6563      	strge	r3, [r4, #84]	; 0x54
 801e776:	81a3      	strhlt	r3, [r4, #12]
 801e778:	bd10      	pop	{r4, pc}

0801e77a <__swrite>:
 801e77a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e77e:	461f      	mov	r7, r3
 801e780:	898b      	ldrh	r3, [r1, #12]
 801e782:	05db      	lsls	r3, r3, #23
 801e784:	4605      	mov	r5, r0
 801e786:	460c      	mov	r4, r1
 801e788:	4616      	mov	r6, r2
 801e78a:	d505      	bpl.n	801e798 <__swrite+0x1e>
 801e78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e790:	2302      	movs	r3, #2
 801e792:	2200      	movs	r2, #0
 801e794:	f000 fa2a 	bl	801ebec <_lseek_r>
 801e798:	89a3      	ldrh	r3, [r4, #12]
 801e79a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e79e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e7a2:	81a3      	strh	r3, [r4, #12]
 801e7a4:	4632      	mov	r2, r6
 801e7a6:	463b      	mov	r3, r7
 801e7a8:	4628      	mov	r0, r5
 801e7aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e7ae:	f000 b869 	b.w	801e884 <_write_r>

0801e7b2 <__sseek>:
 801e7b2:	b510      	push	{r4, lr}
 801e7b4:	460c      	mov	r4, r1
 801e7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7ba:	f000 fa17 	bl	801ebec <_lseek_r>
 801e7be:	1c43      	adds	r3, r0, #1
 801e7c0:	89a3      	ldrh	r3, [r4, #12]
 801e7c2:	bf15      	itete	ne
 801e7c4:	6560      	strne	r0, [r4, #84]	; 0x54
 801e7c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e7ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e7ce:	81a3      	strheq	r3, [r4, #12]
 801e7d0:	bf18      	it	ne
 801e7d2:	81a3      	strhne	r3, [r4, #12]
 801e7d4:	bd10      	pop	{r4, pc}

0801e7d6 <__sclose>:
 801e7d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7da:	f000 b935 	b.w	801ea48 <_close_r>
	...

0801e7e0 <__swbuf_r>:
 801e7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7e2:	460e      	mov	r6, r1
 801e7e4:	4614      	mov	r4, r2
 801e7e6:	4605      	mov	r5, r0
 801e7e8:	b118      	cbz	r0, 801e7f2 <__swbuf_r+0x12>
 801e7ea:	6983      	ldr	r3, [r0, #24]
 801e7ec:	b90b      	cbnz	r3, 801e7f2 <__swbuf_r+0x12>
 801e7ee:	f7ff f99b 	bl	801db28 <__sinit>
 801e7f2:	4b21      	ldr	r3, [pc, #132]	; (801e878 <__swbuf_r+0x98>)
 801e7f4:	429c      	cmp	r4, r3
 801e7f6:	d12b      	bne.n	801e850 <__swbuf_r+0x70>
 801e7f8:	686c      	ldr	r4, [r5, #4]
 801e7fa:	69a3      	ldr	r3, [r4, #24]
 801e7fc:	60a3      	str	r3, [r4, #8]
 801e7fe:	89a3      	ldrh	r3, [r4, #12]
 801e800:	071a      	lsls	r2, r3, #28
 801e802:	d52f      	bpl.n	801e864 <__swbuf_r+0x84>
 801e804:	6923      	ldr	r3, [r4, #16]
 801e806:	b36b      	cbz	r3, 801e864 <__swbuf_r+0x84>
 801e808:	6923      	ldr	r3, [r4, #16]
 801e80a:	6820      	ldr	r0, [r4, #0]
 801e80c:	1ac0      	subs	r0, r0, r3
 801e80e:	6963      	ldr	r3, [r4, #20]
 801e810:	b2f6      	uxtb	r6, r6
 801e812:	4283      	cmp	r3, r0
 801e814:	4637      	mov	r7, r6
 801e816:	dc04      	bgt.n	801e822 <__swbuf_r+0x42>
 801e818:	4621      	mov	r1, r4
 801e81a:	4628      	mov	r0, r5
 801e81c:	f000 f9aa 	bl	801eb74 <_fflush_r>
 801e820:	bb30      	cbnz	r0, 801e870 <__swbuf_r+0x90>
 801e822:	68a3      	ldr	r3, [r4, #8]
 801e824:	3b01      	subs	r3, #1
 801e826:	60a3      	str	r3, [r4, #8]
 801e828:	6823      	ldr	r3, [r4, #0]
 801e82a:	1c5a      	adds	r2, r3, #1
 801e82c:	6022      	str	r2, [r4, #0]
 801e82e:	701e      	strb	r6, [r3, #0]
 801e830:	6963      	ldr	r3, [r4, #20]
 801e832:	3001      	adds	r0, #1
 801e834:	4283      	cmp	r3, r0
 801e836:	d004      	beq.n	801e842 <__swbuf_r+0x62>
 801e838:	89a3      	ldrh	r3, [r4, #12]
 801e83a:	07db      	lsls	r3, r3, #31
 801e83c:	d506      	bpl.n	801e84c <__swbuf_r+0x6c>
 801e83e:	2e0a      	cmp	r6, #10
 801e840:	d104      	bne.n	801e84c <__swbuf_r+0x6c>
 801e842:	4621      	mov	r1, r4
 801e844:	4628      	mov	r0, r5
 801e846:	f000 f995 	bl	801eb74 <_fflush_r>
 801e84a:	b988      	cbnz	r0, 801e870 <__swbuf_r+0x90>
 801e84c:	4638      	mov	r0, r7
 801e84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e850:	4b0a      	ldr	r3, [pc, #40]	; (801e87c <__swbuf_r+0x9c>)
 801e852:	429c      	cmp	r4, r3
 801e854:	d101      	bne.n	801e85a <__swbuf_r+0x7a>
 801e856:	68ac      	ldr	r4, [r5, #8]
 801e858:	e7cf      	b.n	801e7fa <__swbuf_r+0x1a>
 801e85a:	4b09      	ldr	r3, [pc, #36]	; (801e880 <__swbuf_r+0xa0>)
 801e85c:	429c      	cmp	r4, r3
 801e85e:	bf08      	it	eq
 801e860:	68ec      	ldreq	r4, [r5, #12]
 801e862:	e7ca      	b.n	801e7fa <__swbuf_r+0x1a>
 801e864:	4621      	mov	r1, r4
 801e866:	4628      	mov	r0, r5
 801e868:	f000 f81e 	bl	801e8a8 <__swsetup_r>
 801e86c:	2800      	cmp	r0, #0
 801e86e:	d0cb      	beq.n	801e808 <__swbuf_r+0x28>
 801e870:	f04f 37ff 	mov.w	r7, #4294967295
 801e874:	e7ea      	b.n	801e84c <__swbuf_r+0x6c>
 801e876:	bf00      	nop
 801e878:	08020e70 	.word	0x08020e70
 801e87c:	08020e90 	.word	0x08020e90
 801e880:	08020e50 	.word	0x08020e50

0801e884 <_write_r>:
 801e884:	b538      	push	{r3, r4, r5, lr}
 801e886:	4d07      	ldr	r5, [pc, #28]	; (801e8a4 <_write_r+0x20>)
 801e888:	4604      	mov	r4, r0
 801e88a:	4608      	mov	r0, r1
 801e88c:	4611      	mov	r1, r2
 801e88e:	2200      	movs	r2, #0
 801e890:	602a      	str	r2, [r5, #0]
 801e892:	461a      	mov	r2, r3
 801e894:	f7e2 fe2a 	bl	80014ec <_write>
 801e898:	1c43      	adds	r3, r0, #1
 801e89a:	d102      	bne.n	801e8a2 <_write_r+0x1e>
 801e89c:	682b      	ldr	r3, [r5, #0]
 801e89e:	b103      	cbz	r3, 801e8a2 <_write_r+0x1e>
 801e8a0:	6023      	str	r3, [r4, #0]
 801e8a2:	bd38      	pop	{r3, r4, r5, pc}
 801e8a4:	240076ac 	.word	0x240076ac

0801e8a8 <__swsetup_r>:
 801e8a8:	4b32      	ldr	r3, [pc, #200]	; (801e974 <__swsetup_r+0xcc>)
 801e8aa:	b570      	push	{r4, r5, r6, lr}
 801e8ac:	681d      	ldr	r5, [r3, #0]
 801e8ae:	4606      	mov	r6, r0
 801e8b0:	460c      	mov	r4, r1
 801e8b2:	b125      	cbz	r5, 801e8be <__swsetup_r+0x16>
 801e8b4:	69ab      	ldr	r3, [r5, #24]
 801e8b6:	b913      	cbnz	r3, 801e8be <__swsetup_r+0x16>
 801e8b8:	4628      	mov	r0, r5
 801e8ba:	f7ff f935 	bl	801db28 <__sinit>
 801e8be:	4b2e      	ldr	r3, [pc, #184]	; (801e978 <__swsetup_r+0xd0>)
 801e8c0:	429c      	cmp	r4, r3
 801e8c2:	d10f      	bne.n	801e8e4 <__swsetup_r+0x3c>
 801e8c4:	686c      	ldr	r4, [r5, #4]
 801e8c6:	89a3      	ldrh	r3, [r4, #12]
 801e8c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8cc:	0719      	lsls	r1, r3, #28
 801e8ce:	d42c      	bmi.n	801e92a <__swsetup_r+0x82>
 801e8d0:	06dd      	lsls	r5, r3, #27
 801e8d2:	d411      	bmi.n	801e8f8 <__swsetup_r+0x50>
 801e8d4:	2309      	movs	r3, #9
 801e8d6:	6033      	str	r3, [r6, #0]
 801e8d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e8dc:	81a3      	strh	r3, [r4, #12]
 801e8de:	f04f 30ff 	mov.w	r0, #4294967295
 801e8e2:	e03e      	b.n	801e962 <__swsetup_r+0xba>
 801e8e4:	4b25      	ldr	r3, [pc, #148]	; (801e97c <__swsetup_r+0xd4>)
 801e8e6:	429c      	cmp	r4, r3
 801e8e8:	d101      	bne.n	801e8ee <__swsetup_r+0x46>
 801e8ea:	68ac      	ldr	r4, [r5, #8]
 801e8ec:	e7eb      	b.n	801e8c6 <__swsetup_r+0x1e>
 801e8ee:	4b24      	ldr	r3, [pc, #144]	; (801e980 <__swsetup_r+0xd8>)
 801e8f0:	429c      	cmp	r4, r3
 801e8f2:	bf08      	it	eq
 801e8f4:	68ec      	ldreq	r4, [r5, #12]
 801e8f6:	e7e6      	b.n	801e8c6 <__swsetup_r+0x1e>
 801e8f8:	0758      	lsls	r0, r3, #29
 801e8fa:	d512      	bpl.n	801e922 <__swsetup_r+0x7a>
 801e8fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e8fe:	b141      	cbz	r1, 801e912 <__swsetup_r+0x6a>
 801e900:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e904:	4299      	cmp	r1, r3
 801e906:	d002      	beq.n	801e90e <__swsetup_r+0x66>
 801e908:	4630      	mov	r0, r6
 801e90a:	f7ff fa0b 	bl	801dd24 <_free_r>
 801e90e:	2300      	movs	r3, #0
 801e910:	6363      	str	r3, [r4, #52]	; 0x34
 801e912:	89a3      	ldrh	r3, [r4, #12]
 801e914:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e918:	81a3      	strh	r3, [r4, #12]
 801e91a:	2300      	movs	r3, #0
 801e91c:	6063      	str	r3, [r4, #4]
 801e91e:	6923      	ldr	r3, [r4, #16]
 801e920:	6023      	str	r3, [r4, #0]
 801e922:	89a3      	ldrh	r3, [r4, #12]
 801e924:	f043 0308 	orr.w	r3, r3, #8
 801e928:	81a3      	strh	r3, [r4, #12]
 801e92a:	6923      	ldr	r3, [r4, #16]
 801e92c:	b94b      	cbnz	r3, 801e942 <__swsetup_r+0x9a>
 801e92e:	89a3      	ldrh	r3, [r4, #12]
 801e930:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e938:	d003      	beq.n	801e942 <__swsetup_r+0x9a>
 801e93a:	4621      	mov	r1, r4
 801e93c:	4630      	mov	r0, r6
 801e93e:	f000 f98d 	bl	801ec5c <__smakebuf_r>
 801e942:	89a0      	ldrh	r0, [r4, #12]
 801e944:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e948:	f010 0301 	ands.w	r3, r0, #1
 801e94c:	d00a      	beq.n	801e964 <__swsetup_r+0xbc>
 801e94e:	2300      	movs	r3, #0
 801e950:	60a3      	str	r3, [r4, #8]
 801e952:	6963      	ldr	r3, [r4, #20]
 801e954:	425b      	negs	r3, r3
 801e956:	61a3      	str	r3, [r4, #24]
 801e958:	6923      	ldr	r3, [r4, #16]
 801e95a:	b943      	cbnz	r3, 801e96e <__swsetup_r+0xc6>
 801e95c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e960:	d1ba      	bne.n	801e8d8 <__swsetup_r+0x30>
 801e962:	bd70      	pop	{r4, r5, r6, pc}
 801e964:	0781      	lsls	r1, r0, #30
 801e966:	bf58      	it	pl
 801e968:	6963      	ldrpl	r3, [r4, #20]
 801e96a:	60a3      	str	r3, [r4, #8]
 801e96c:	e7f4      	b.n	801e958 <__swsetup_r+0xb0>
 801e96e:	2000      	movs	r0, #0
 801e970:	e7f7      	b.n	801e962 <__swsetup_r+0xba>
 801e972:	bf00      	nop
 801e974:	24000148 	.word	0x24000148
 801e978:	08020e70 	.word	0x08020e70
 801e97c:	08020e90 	.word	0x08020e90
 801e980:	08020e50 	.word	0x08020e50

0801e984 <__register_exitproc>:
 801e984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e988:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ea44 <__register_exitproc+0xc0>
 801e98c:	4606      	mov	r6, r0
 801e98e:	f8d8 0000 	ldr.w	r0, [r8]
 801e992:	461f      	mov	r7, r3
 801e994:	460d      	mov	r5, r1
 801e996:	4691      	mov	r9, r2
 801e998:	f7ff f99b 	bl	801dcd2 <__retarget_lock_acquire_recursive>
 801e99c:	4b25      	ldr	r3, [pc, #148]	; (801ea34 <__register_exitproc+0xb0>)
 801e99e:	681c      	ldr	r4, [r3, #0]
 801e9a0:	b934      	cbnz	r4, 801e9b0 <__register_exitproc+0x2c>
 801e9a2:	4c25      	ldr	r4, [pc, #148]	; (801ea38 <__register_exitproc+0xb4>)
 801e9a4:	601c      	str	r4, [r3, #0]
 801e9a6:	4b25      	ldr	r3, [pc, #148]	; (801ea3c <__register_exitproc+0xb8>)
 801e9a8:	b113      	cbz	r3, 801e9b0 <__register_exitproc+0x2c>
 801e9aa:	681b      	ldr	r3, [r3, #0]
 801e9ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801e9b0:	6863      	ldr	r3, [r4, #4]
 801e9b2:	2b1f      	cmp	r3, #31
 801e9b4:	dd07      	ble.n	801e9c6 <__register_exitproc+0x42>
 801e9b6:	f8d8 0000 	ldr.w	r0, [r8]
 801e9ba:	f7ff f98c 	bl	801dcd6 <__retarget_lock_release_recursive>
 801e9be:	f04f 30ff 	mov.w	r0, #4294967295
 801e9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e9c6:	b34e      	cbz	r6, 801ea1c <__register_exitproc+0x98>
 801e9c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801e9cc:	b988      	cbnz	r0, 801e9f2 <__register_exitproc+0x6e>
 801e9ce:	4b1c      	ldr	r3, [pc, #112]	; (801ea40 <__register_exitproc+0xbc>)
 801e9d0:	b923      	cbnz	r3, 801e9dc <__register_exitproc+0x58>
 801e9d2:	f8d8 0000 	ldr.w	r0, [r8]
 801e9d6:	f7ff f97d 	bl	801dcd4 <__retarget_lock_release>
 801e9da:	e7f0      	b.n	801e9be <__register_exitproc+0x3a>
 801e9dc:	f44f 7084 	mov.w	r0, #264	; 0x108
 801e9e0:	f7ff f97a 	bl	801dcd8 <malloc>
 801e9e4:	2800      	cmp	r0, #0
 801e9e6:	d0f4      	beq.n	801e9d2 <__register_exitproc+0x4e>
 801e9e8:	2300      	movs	r3, #0
 801e9ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801e9ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801e9f2:	6863      	ldr	r3, [r4, #4]
 801e9f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801e9f8:	2201      	movs	r2, #1
 801e9fa:	409a      	lsls	r2, r3
 801e9fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ea00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ea04:	4313      	orrs	r3, r2
 801ea06:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ea0a:	2e02      	cmp	r6, #2
 801ea0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ea10:	bf02      	ittt	eq
 801ea12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ea16:	4313      	orreq	r3, r2
 801ea18:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801ea1c:	6863      	ldr	r3, [r4, #4]
 801ea1e:	f8d8 0000 	ldr.w	r0, [r8]
 801ea22:	1c5a      	adds	r2, r3, #1
 801ea24:	3302      	adds	r3, #2
 801ea26:	6062      	str	r2, [r4, #4]
 801ea28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ea2c:	f7ff f953 	bl	801dcd6 <__retarget_lock_release_recursive>
 801ea30:	2000      	movs	r0, #0
 801ea32:	e7c6      	b.n	801e9c2 <__register_exitproc+0x3e>
 801ea34:	2400773c 	.word	0x2400773c
 801ea38:	240076b0 	.word	0x240076b0
 801ea3c:	08020ee8 	.word	0x08020ee8
 801ea40:	0801dcd9 	.word	0x0801dcd9
 801ea44:	240001ac 	.word	0x240001ac

0801ea48 <_close_r>:
 801ea48:	b538      	push	{r3, r4, r5, lr}
 801ea4a:	4d06      	ldr	r5, [pc, #24]	; (801ea64 <_close_r+0x1c>)
 801ea4c:	2300      	movs	r3, #0
 801ea4e:	4604      	mov	r4, r0
 801ea50:	4608      	mov	r0, r1
 801ea52:	602b      	str	r3, [r5, #0]
 801ea54:	f7e2 fd58 	bl	8001508 <_close>
 801ea58:	1c43      	adds	r3, r0, #1
 801ea5a:	d102      	bne.n	801ea62 <_close_r+0x1a>
 801ea5c:	682b      	ldr	r3, [r5, #0]
 801ea5e:	b103      	cbz	r3, 801ea62 <_close_r+0x1a>
 801ea60:	6023      	str	r3, [r4, #0]
 801ea62:	bd38      	pop	{r3, r4, r5, pc}
 801ea64:	240076ac 	.word	0x240076ac

0801ea68 <__sflush_r>:
 801ea68:	898a      	ldrh	r2, [r1, #12]
 801ea6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea6e:	4605      	mov	r5, r0
 801ea70:	0710      	lsls	r0, r2, #28
 801ea72:	460c      	mov	r4, r1
 801ea74:	d458      	bmi.n	801eb28 <__sflush_r+0xc0>
 801ea76:	684b      	ldr	r3, [r1, #4]
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	dc05      	bgt.n	801ea88 <__sflush_r+0x20>
 801ea7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	dc02      	bgt.n	801ea88 <__sflush_r+0x20>
 801ea82:	2000      	movs	r0, #0
 801ea84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea8a:	2e00      	cmp	r6, #0
 801ea8c:	d0f9      	beq.n	801ea82 <__sflush_r+0x1a>
 801ea8e:	2300      	movs	r3, #0
 801ea90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ea94:	682f      	ldr	r7, [r5, #0]
 801ea96:	602b      	str	r3, [r5, #0]
 801ea98:	d032      	beq.n	801eb00 <__sflush_r+0x98>
 801ea9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ea9c:	89a3      	ldrh	r3, [r4, #12]
 801ea9e:	075a      	lsls	r2, r3, #29
 801eaa0:	d505      	bpl.n	801eaae <__sflush_r+0x46>
 801eaa2:	6863      	ldr	r3, [r4, #4]
 801eaa4:	1ac0      	subs	r0, r0, r3
 801eaa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801eaa8:	b10b      	cbz	r3, 801eaae <__sflush_r+0x46>
 801eaaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eaac:	1ac0      	subs	r0, r0, r3
 801eaae:	2300      	movs	r3, #0
 801eab0:	4602      	mov	r2, r0
 801eab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eab4:	6a21      	ldr	r1, [r4, #32]
 801eab6:	4628      	mov	r0, r5
 801eab8:	47b0      	blx	r6
 801eaba:	1c43      	adds	r3, r0, #1
 801eabc:	89a3      	ldrh	r3, [r4, #12]
 801eabe:	d106      	bne.n	801eace <__sflush_r+0x66>
 801eac0:	6829      	ldr	r1, [r5, #0]
 801eac2:	291d      	cmp	r1, #29
 801eac4:	d82c      	bhi.n	801eb20 <__sflush_r+0xb8>
 801eac6:	4a2a      	ldr	r2, [pc, #168]	; (801eb70 <__sflush_r+0x108>)
 801eac8:	40ca      	lsrs	r2, r1
 801eaca:	07d6      	lsls	r6, r2, #31
 801eacc:	d528      	bpl.n	801eb20 <__sflush_r+0xb8>
 801eace:	2200      	movs	r2, #0
 801ead0:	6062      	str	r2, [r4, #4]
 801ead2:	04d9      	lsls	r1, r3, #19
 801ead4:	6922      	ldr	r2, [r4, #16]
 801ead6:	6022      	str	r2, [r4, #0]
 801ead8:	d504      	bpl.n	801eae4 <__sflush_r+0x7c>
 801eada:	1c42      	adds	r2, r0, #1
 801eadc:	d101      	bne.n	801eae2 <__sflush_r+0x7a>
 801eade:	682b      	ldr	r3, [r5, #0]
 801eae0:	b903      	cbnz	r3, 801eae4 <__sflush_r+0x7c>
 801eae2:	6560      	str	r0, [r4, #84]	; 0x54
 801eae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eae6:	602f      	str	r7, [r5, #0]
 801eae8:	2900      	cmp	r1, #0
 801eaea:	d0ca      	beq.n	801ea82 <__sflush_r+0x1a>
 801eaec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eaf0:	4299      	cmp	r1, r3
 801eaf2:	d002      	beq.n	801eafa <__sflush_r+0x92>
 801eaf4:	4628      	mov	r0, r5
 801eaf6:	f7ff f915 	bl	801dd24 <_free_r>
 801eafa:	2000      	movs	r0, #0
 801eafc:	6360      	str	r0, [r4, #52]	; 0x34
 801eafe:	e7c1      	b.n	801ea84 <__sflush_r+0x1c>
 801eb00:	6a21      	ldr	r1, [r4, #32]
 801eb02:	2301      	movs	r3, #1
 801eb04:	4628      	mov	r0, r5
 801eb06:	47b0      	blx	r6
 801eb08:	1c41      	adds	r1, r0, #1
 801eb0a:	d1c7      	bne.n	801ea9c <__sflush_r+0x34>
 801eb0c:	682b      	ldr	r3, [r5, #0]
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d0c4      	beq.n	801ea9c <__sflush_r+0x34>
 801eb12:	2b1d      	cmp	r3, #29
 801eb14:	d001      	beq.n	801eb1a <__sflush_r+0xb2>
 801eb16:	2b16      	cmp	r3, #22
 801eb18:	d101      	bne.n	801eb1e <__sflush_r+0xb6>
 801eb1a:	602f      	str	r7, [r5, #0]
 801eb1c:	e7b1      	b.n	801ea82 <__sflush_r+0x1a>
 801eb1e:	89a3      	ldrh	r3, [r4, #12]
 801eb20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb24:	81a3      	strh	r3, [r4, #12]
 801eb26:	e7ad      	b.n	801ea84 <__sflush_r+0x1c>
 801eb28:	690f      	ldr	r7, [r1, #16]
 801eb2a:	2f00      	cmp	r7, #0
 801eb2c:	d0a9      	beq.n	801ea82 <__sflush_r+0x1a>
 801eb2e:	0793      	lsls	r3, r2, #30
 801eb30:	680e      	ldr	r6, [r1, #0]
 801eb32:	bf08      	it	eq
 801eb34:	694b      	ldreq	r3, [r1, #20]
 801eb36:	600f      	str	r7, [r1, #0]
 801eb38:	bf18      	it	ne
 801eb3a:	2300      	movne	r3, #0
 801eb3c:	eba6 0807 	sub.w	r8, r6, r7
 801eb40:	608b      	str	r3, [r1, #8]
 801eb42:	f1b8 0f00 	cmp.w	r8, #0
 801eb46:	dd9c      	ble.n	801ea82 <__sflush_r+0x1a>
 801eb48:	6a21      	ldr	r1, [r4, #32]
 801eb4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eb4c:	4643      	mov	r3, r8
 801eb4e:	463a      	mov	r2, r7
 801eb50:	4628      	mov	r0, r5
 801eb52:	47b0      	blx	r6
 801eb54:	2800      	cmp	r0, #0
 801eb56:	dc06      	bgt.n	801eb66 <__sflush_r+0xfe>
 801eb58:	89a3      	ldrh	r3, [r4, #12]
 801eb5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb5e:	81a3      	strh	r3, [r4, #12]
 801eb60:	f04f 30ff 	mov.w	r0, #4294967295
 801eb64:	e78e      	b.n	801ea84 <__sflush_r+0x1c>
 801eb66:	4407      	add	r7, r0
 801eb68:	eba8 0800 	sub.w	r8, r8, r0
 801eb6c:	e7e9      	b.n	801eb42 <__sflush_r+0xda>
 801eb6e:	bf00      	nop
 801eb70:	20400001 	.word	0x20400001

0801eb74 <_fflush_r>:
 801eb74:	b538      	push	{r3, r4, r5, lr}
 801eb76:	690b      	ldr	r3, [r1, #16]
 801eb78:	4605      	mov	r5, r0
 801eb7a:	460c      	mov	r4, r1
 801eb7c:	b913      	cbnz	r3, 801eb84 <_fflush_r+0x10>
 801eb7e:	2500      	movs	r5, #0
 801eb80:	4628      	mov	r0, r5
 801eb82:	bd38      	pop	{r3, r4, r5, pc}
 801eb84:	b118      	cbz	r0, 801eb8e <_fflush_r+0x1a>
 801eb86:	6983      	ldr	r3, [r0, #24]
 801eb88:	b90b      	cbnz	r3, 801eb8e <_fflush_r+0x1a>
 801eb8a:	f7fe ffcd 	bl	801db28 <__sinit>
 801eb8e:	4b14      	ldr	r3, [pc, #80]	; (801ebe0 <_fflush_r+0x6c>)
 801eb90:	429c      	cmp	r4, r3
 801eb92:	d11b      	bne.n	801ebcc <_fflush_r+0x58>
 801eb94:	686c      	ldr	r4, [r5, #4]
 801eb96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb9a:	2b00      	cmp	r3, #0
 801eb9c:	d0ef      	beq.n	801eb7e <_fflush_r+0xa>
 801eb9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801eba0:	07d0      	lsls	r0, r2, #31
 801eba2:	d404      	bmi.n	801ebae <_fflush_r+0x3a>
 801eba4:	0599      	lsls	r1, r3, #22
 801eba6:	d402      	bmi.n	801ebae <_fflush_r+0x3a>
 801eba8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebaa:	f7ff f892 	bl	801dcd2 <__retarget_lock_acquire_recursive>
 801ebae:	4628      	mov	r0, r5
 801ebb0:	4621      	mov	r1, r4
 801ebb2:	f7ff ff59 	bl	801ea68 <__sflush_r>
 801ebb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ebb8:	07da      	lsls	r2, r3, #31
 801ebba:	4605      	mov	r5, r0
 801ebbc:	d4e0      	bmi.n	801eb80 <_fflush_r+0xc>
 801ebbe:	89a3      	ldrh	r3, [r4, #12]
 801ebc0:	059b      	lsls	r3, r3, #22
 801ebc2:	d4dd      	bmi.n	801eb80 <_fflush_r+0xc>
 801ebc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebc6:	f7ff f886 	bl	801dcd6 <__retarget_lock_release_recursive>
 801ebca:	e7d9      	b.n	801eb80 <_fflush_r+0xc>
 801ebcc:	4b05      	ldr	r3, [pc, #20]	; (801ebe4 <_fflush_r+0x70>)
 801ebce:	429c      	cmp	r4, r3
 801ebd0:	d101      	bne.n	801ebd6 <_fflush_r+0x62>
 801ebd2:	68ac      	ldr	r4, [r5, #8]
 801ebd4:	e7df      	b.n	801eb96 <_fflush_r+0x22>
 801ebd6:	4b04      	ldr	r3, [pc, #16]	; (801ebe8 <_fflush_r+0x74>)
 801ebd8:	429c      	cmp	r4, r3
 801ebda:	bf08      	it	eq
 801ebdc:	68ec      	ldreq	r4, [r5, #12]
 801ebde:	e7da      	b.n	801eb96 <_fflush_r+0x22>
 801ebe0:	08020e70 	.word	0x08020e70
 801ebe4:	08020e90 	.word	0x08020e90
 801ebe8:	08020e50 	.word	0x08020e50

0801ebec <_lseek_r>:
 801ebec:	b538      	push	{r3, r4, r5, lr}
 801ebee:	4d07      	ldr	r5, [pc, #28]	; (801ec0c <_lseek_r+0x20>)
 801ebf0:	4604      	mov	r4, r0
 801ebf2:	4608      	mov	r0, r1
 801ebf4:	4611      	mov	r1, r2
 801ebf6:	2200      	movs	r2, #0
 801ebf8:	602a      	str	r2, [r5, #0]
 801ebfa:	461a      	mov	r2, r3
 801ebfc:	f7e2 fc8e 	bl	800151c <_lseek>
 801ec00:	1c43      	adds	r3, r0, #1
 801ec02:	d102      	bne.n	801ec0a <_lseek_r+0x1e>
 801ec04:	682b      	ldr	r3, [r5, #0]
 801ec06:	b103      	cbz	r3, 801ec0a <_lseek_r+0x1e>
 801ec08:	6023      	str	r3, [r4, #0]
 801ec0a:	bd38      	pop	{r3, r4, r5, pc}
 801ec0c:	240076ac 	.word	0x240076ac

0801ec10 <__swhatbuf_r>:
 801ec10:	b570      	push	{r4, r5, r6, lr}
 801ec12:	460e      	mov	r6, r1
 801ec14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ec18:	2900      	cmp	r1, #0
 801ec1a:	b096      	sub	sp, #88	; 0x58
 801ec1c:	4614      	mov	r4, r2
 801ec1e:	461d      	mov	r5, r3
 801ec20:	da08      	bge.n	801ec34 <__swhatbuf_r+0x24>
 801ec22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ec26:	2200      	movs	r2, #0
 801ec28:	602a      	str	r2, [r5, #0]
 801ec2a:	061a      	lsls	r2, r3, #24
 801ec2c:	d410      	bmi.n	801ec50 <__swhatbuf_r+0x40>
 801ec2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ec32:	e00e      	b.n	801ec52 <__swhatbuf_r+0x42>
 801ec34:	466a      	mov	r2, sp
 801ec36:	f000 f86f 	bl	801ed18 <_fstat_r>
 801ec3a:	2800      	cmp	r0, #0
 801ec3c:	dbf1      	blt.n	801ec22 <__swhatbuf_r+0x12>
 801ec3e:	9a01      	ldr	r2, [sp, #4]
 801ec40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ec44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ec48:	425a      	negs	r2, r3
 801ec4a:	415a      	adcs	r2, r3
 801ec4c:	602a      	str	r2, [r5, #0]
 801ec4e:	e7ee      	b.n	801ec2e <__swhatbuf_r+0x1e>
 801ec50:	2340      	movs	r3, #64	; 0x40
 801ec52:	2000      	movs	r0, #0
 801ec54:	6023      	str	r3, [r4, #0]
 801ec56:	b016      	add	sp, #88	; 0x58
 801ec58:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ec5c <__smakebuf_r>:
 801ec5c:	898b      	ldrh	r3, [r1, #12]
 801ec5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ec60:	079d      	lsls	r5, r3, #30
 801ec62:	4606      	mov	r6, r0
 801ec64:	460c      	mov	r4, r1
 801ec66:	d507      	bpl.n	801ec78 <__smakebuf_r+0x1c>
 801ec68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ec6c:	6023      	str	r3, [r4, #0]
 801ec6e:	6123      	str	r3, [r4, #16]
 801ec70:	2301      	movs	r3, #1
 801ec72:	6163      	str	r3, [r4, #20]
 801ec74:	b002      	add	sp, #8
 801ec76:	bd70      	pop	{r4, r5, r6, pc}
 801ec78:	ab01      	add	r3, sp, #4
 801ec7a:	466a      	mov	r2, sp
 801ec7c:	f7ff ffc8 	bl	801ec10 <__swhatbuf_r>
 801ec80:	9900      	ldr	r1, [sp, #0]
 801ec82:	4605      	mov	r5, r0
 801ec84:	4630      	mov	r0, r6
 801ec86:	f7ff f8b9 	bl	801ddfc <_malloc_r>
 801ec8a:	b948      	cbnz	r0, 801eca0 <__smakebuf_r+0x44>
 801ec8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec90:	059a      	lsls	r2, r3, #22
 801ec92:	d4ef      	bmi.n	801ec74 <__smakebuf_r+0x18>
 801ec94:	f023 0303 	bic.w	r3, r3, #3
 801ec98:	f043 0302 	orr.w	r3, r3, #2
 801ec9c:	81a3      	strh	r3, [r4, #12]
 801ec9e:	e7e3      	b.n	801ec68 <__smakebuf_r+0xc>
 801eca0:	4b0d      	ldr	r3, [pc, #52]	; (801ecd8 <__smakebuf_r+0x7c>)
 801eca2:	62b3      	str	r3, [r6, #40]	; 0x28
 801eca4:	89a3      	ldrh	r3, [r4, #12]
 801eca6:	6020      	str	r0, [r4, #0]
 801eca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ecac:	81a3      	strh	r3, [r4, #12]
 801ecae:	9b00      	ldr	r3, [sp, #0]
 801ecb0:	6163      	str	r3, [r4, #20]
 801ecb2:	9b01      	ldr	r3, [sp, #4]
 801ecb4:	6120      	str	r0, [r4, #16]
 801ecb6:	b15b      	cbz	r3, 801ecd0 <__smakebuf_r+0x74>
 801ecb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ecbc:	4630      	mov	r0, r6
 801ecbe:	f000 f83d 	bl	801ed3c <_isatty_r>
 801ecc2:	b128      	cbz	r0, 801ecd0 <__smakebuf_r+0x74>
 801ecc4:	89a3      	ldrh	r3, [r4, #12]
 801ecc6:	f023 0303 	bic.w	r3, r3, #3
 801ecca:	f043 0301 	orr.w	r3, r3, #1
 801ecce:	81a3      	strh	r3, [r4, #12]
 801ecd0:	89a0      	ldrh	r0, [r4, #12]
 801ecd2:	4305      	orrs	r5, r0
 801ecd4:	81a5      	strh	r5, [r4, #12]
 801ecd6:	e7cd      	b.n	801ec74 <__smakebuf_r+0x18>
 801ecd8:	0801dac1 	.word	0x0801dac1

0801ecdc <__malloc_lock>:
 801ecdc:	4801      	ldr	r0, [pc, #4]	; (801ece4 <__malloc_lock+0x8>)
 801ecde:	f7fe bff8 	b.w	801dcd2 <__retarget_lock_acquire_recursive>
 801ece2:	bf00      	nop
 801ece4:	24007599 	.word	0x24007599

0801ece8 <__malloc_unlock>:
 801ece8:	4801      	ldr	r0, [pc, #4]	; (801ecf0 <__malloc_unlock+0x8>)
 801ecea:	f7fe bff4 	b.w	801dcd6 <__retarget_lock_release_recursive>
 801ecee:	bf00      	nop
 801ecf0:	24007599 	.word	0x24007599

0801ecf4 <_read_r>:
 801ecf4:	b538      	push	{r3, r4, r5, lr}
 801ecf6:	4d07      	ldr	r5, [pc, #28]	; (801ed14 <_read_r+0x20>)
 801ecf8:	4604      	mov	r4, r0
 801ecfa:	4608      	mov	r0, r1
 801ecfc:	4611      	mov	r1, r2
 801ecfe:	2200      	movs	r2, #0
 801ed00:	602a      	str	r2, [r5, #0]
 801ed02:	461a      	mov	r2, r3
 801ed04:	f7e2 fbe4 	bl	80014d0 <_read>
 801ed08:	1c43      	adds	r3, r0, #1
 801ed0a:	d102      	bne.n	801ed12 <_read_r+0x1e>
 801ed0c:	682b      	ldr	r3, [r5, #0]
 801ed0e:	b103      	cbz	r3, 801ed12 <_read_r+0x1e>
 801ed10:	6023      	str	r3, [r4, #0]
 801ed12:	bd38      	pop	{r3, r4, r5, pc}
 801ed14:	240076ac 	.word	0x240076ac

0801ed18 <_fstat_r>:
 801ed18:	b538      	push	{r3, r4, r5, lr}
 801ed1a:	4d07      	ldr	r5, [pc, #28]	; (801ed38 <_fstat_r+0x20>)
 801ed1c:	2300      	movs	r3, #0
 801ed1e:	4604      	mov	r4, r0
 801ed20:	4608      	mov	r0, r1
 801ed22:	4611      	mov	r1, r2
 801ed24:	602b      	str	r3, [r5, #0]
 801ed26:	f7e2 fbf2 	bl	800150e <_fstat>
 801ed2a:	1c43      	adds	r3, r0, #1
 801ed2c:	d102      	bne.n	801ed34 <_fstat_r+0x1c>
 801ed2e:	682b      	ldr	r3, [r5, #0]
 801ed30:	b103      	cbz	r3, 801ed34 <_fstat_r+0x1c>
 801ed32:	6023      	str	r3, [r4, #0]
 801ed34:	bd38      	pop	{r3, r4, r5, pc}
 801ed36:	bf00      	nop
 801ed38:	240076ac 	.word	0x240076ac

0801ed3c <_isatty_r>:
 801ed3c:	b538      	push	{r3, r4, r5, lr}
 801ed3e:	4d06      	ldr	r5, [pc, #24]	; (801ed58 <_isatty_r+0x1c>)
 801ed40:	2300      	movs	r3, #0
 801ed42:	4604      	mov	r4, r0
 801ed44:	4608      	mov	r0, r1
 801ed46:	602b      	str	r3, [r5, #0]
 801ed48:	f7e2 fbe6 	bl	8001518 <_isatty>
 801ed4c:	1c43      	adds	r3, r0, #1
 801ed4e:	d102      	bne.n	801ed56 <_isatty_r+0x1a>
 801ed50:	682b      	ldr	r3, [r5, #0]
 801ed52:	b103      	cbz	r3, 801ed56 <_isatty_r+0x1a>
 801ed54:	6023      	str	r3, [r4, #0]
 801ed56:	bd38      	pop	{r3, r4, r5, pc}
 801ed58:	240076ac 	.word	0x240076ac

0801ed5c <_init>:
 801ed5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed5e:	bf00      	nop
 801ed60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed62:	bc08      	pop	{r3}
 801ed64:	469e      	mov	lr, r3
 801ed66:	4770      	bx	lr

0801ed68 <_fini>:
 801ed68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed6a:	bf00      	nop
 801ed6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ed6e:	bc08      	pop	{r3}
 801ed70:	469e      	mov	lr, r3
 801ed72:	4770      	bx	lr
